import types

proc `[]`*(this: Object; name: String): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/jsobject.h".}

proc hasOwnProperty*(this: var Object; name: String): bool {.
    importcpp: "hasOwnProperty", header: "cheerp/jsobject.h".}

proc keys*(a1: ptr Object): ptr Array {.importcpp: "client::Object::keys(@)",
                                        header: "cheerp/jsobject.h".}
  ##
                              ## cheerp::static

proc values*(a1: ptr Object): ptr Array {.
    importcpp: "client::Object::values(@)", header: "cheerp/jsobject.h".}
  ##
                              ## cheerp::static



## ===-- clientlib.h - Autogenerated Browser APIs --------------===//
##
##                      Cheerp: The C++ compiler for the Web
##
##  This file is distributed under the Apache License v2.0 with LLVM Exceptions.
##  See LICENSE.TXT for details.
##
##  Copyright 2011-2023 Leaning Technologies
##
## ===----------------------------------------------------------------------===//

discard "forward decl of PropertyDescriptor"
discard "forward decl of PropertyDescriptorMap"
discard "forward decl of IArguments"
discard "forward decl of ReadonlyArray"
discard "forward decl of TemplateStringsArray"
discard "forward decl of ImportMeta"
discard "forward decl of Math"
discard "forward decl of Date"
discard "forward decl of RegExpMatchArray"
discard "forward decl of RegExpExecArray"
discard "forward decl of RegExp"
discard "forward decl of Error"
discard "forward decl of EvalError"
discard "forward decl of RangeError"
discard "forward decl of ReferenceError"
discard "forward decl of SyntaxError"
discard "forward decl of TypeError"
discard "forward decl of URIError"
discard "forward decl of JSON"
discard "forward decl of ConcatArray"
discard "forward decl of TypedPropertyDescriptor"
discard "forward decl of Promise"
discard "forward decl of ThisType"
discard "forward decl of ArrayBuffer"
discard "forward decl of ArrayBufferTypes"
discard "forward decl of ArrayBufferView"
discard "forward decl of DataView"
discard "forward decl of Int8Array"
discard "forward decl of Uint8Array"
discard "forward decl of Uint8ClampedArray"
discard "forward decl of Int16Array"
discard "forward decl of Uint16Array"
discard "forward decl of Int32Array"
discard "forward decl of Uint32Array"
discard "forward decl of Float32Array"
discard "forward decl of Float64Array"
discard "forward decl of Account"
discard "forward decl of EventListenerOptions"
discard "forward decl of AddEventListenerOptions"
discard "forward decl of Algorithm"
discard "forward decl of AesCbcParams"
discard "forward decl of AesCtrParams"
discard "forward decl of AesDerivedKeyParams"
discard "forward decl of AesGcmParams"
discard "forward decl of KeyAlgorithm"
discard "forward decl of AesKeyAlgorithm"
discard "forward decl of AesKeyGenParams"
discard "forward decl of AudioNodeOptions"
discard "forward decl of AnalyserOptions"
discard "forward decl of EventInit"
discard "forward decl of AnimationEventInit"
discard "forward decl of AssertionOptions"
discard "forward decl of AudioBufferOptions"
discard "forward decl of AudioBufferSourceOptions"
discard "forward decl of AudioContextInfo"
discard "forward decl of AudioContextOptions"
discard "forward decl of AudioParamDescriptor"
discard "forward decl of AudioProcessingEventInit"
discard "forward decl of AudioTimestamp"
discard "forward decl of BiquadFilterOptions"
discard "forward decl of ByteLengthChunk"
discard "forward decl of CacheQueryOptions"
discard "forward decl of ChannelMergerOptions"
discard "forward decl of ChannelSplitterOptions"
discard "forward decl of ClientData"
discard "forward decl of ClientQueryOptions"
discard "forward decl of CloseEventInit"
discard "forward decl of UIEventInit"
discard "forward decl of CompositionEventInit"
discard "forward decl of ExceptionInformation"
discard "forward decl of ConfirmSiteSpecificExceptionsInformation"
discard "forward decl of ConstantSourceOptions"
discard "forward decl of ConstrainBooleanParameters"
discard "forward decl of ConstrainDOMStringParameters"
discard "forward decl of DoubleRange"
discard "forward decl of ConstrainDoubleRange"
discard "forward decl of LongRange"
discard "forward decl of ConstrainLongRange"
discard "forward decl of ConstrainVideoFacingModeParameters"
discard "forward decl of ConvolverOptions"
discard "forward decl of CustomEventInit"
discard "forward decl of DOMRectInit"
discard "forward decl of DelayOptions"
discard "forward decl of DeviceAccelerationDict"
discard "forward decl of DeviceLightEventInit"
discard "forward decl of DeviceMotionEventInit"
discard "forward decl of DeviceOrientationEventInit"
discard "forward decl of DeviceRotationRateDict"
discard "forward decl of DynamicsCompressorOptions"
discard "forward decl of EcKeyAlgorithm"
discard "forward decl of EcKeyGenParams"
discard "forward decl of EcKeyImportParams"
discard "forward decl of EcdhKeyDeriveParams"
discard "forward decl of EcdsaParams"
discard "forward decl of ErrorEventInit"
discard "forward decl of EventModifierInit"
discard "forward decl of ExtendableEventInit"
discard "forward decl of ExtendableMessageEventInit"
discard "forward decl of FetchEventInit"
discard "forward decl of FocusEventInit"
discard "forward decl of FocusNavigationEventInit"
discard "forward decl of FocusNavigationOrigin"
discard "forward decl of GainOptions"
discard "forward decl of GamepadEventInit"
discard "forward decl of GetNotificationOptions"
discard "forward decl of HashChangeEventInit"
discard "forward decl of HkdfParams"
discard "forward decl of HmacImportParams"
discard "forward decl of HmacKeyAlgorithm"
discard "forward decl of HmacKeyGenParams"
discard "forward decl of IDBIndexParameters"
discard "forward decl of IDBObjectStoreParameters"
discard "forward decl of IIRFilterOptions"
discard "forward decl of IntersectionObserverEntryInit"
discard "forward decl of IntersectionObserverInit"
discard "forward decl of JsonWebKey"
discard "forward decl of KeyboardEventInit"
discard "forward decl of MSAccountInfo"
discard "forward decl of RTCStats"
discard "forward decl of MSLocalClientEventBase"
discard "forward decl of MSAudioLocalClientEvent"
discard "forward decl of MSPayloadBase"
discard "forward decl of MSAudioRecvPayload"
discard "forward decl of MSAudioRecvSignal"
discard "forward decl of MSAudioSendPayload"
discard "forward decl of MSAudioSendSignal"
discard "forward decl of MSConnectivity"
discard "forward decl of MSCredentialFilter"
discard "forward decl of MSCredentialParameters"
discard "forward decl of MSCredentialSpec"
discard "forward decl of MSDCCEventInit"
discard "forward decl of MSDSHEventInit"
discard "forward decl of MSDelay"
discard "forward decl of MSDescription"
discard "forward decl of MSFIDOCredentialParameters"
discard "forward decl of MSIPAddressInfo"
discard "forward decl of MSIceWarningFlags"
discard "forward decl of MSJitter"
discard "forward decl of MSNetwork"
discard "forward decl of MSNetworkConnectivityInfo"
discard "forward decl of MSNetworkInterfaceType"
discard "forward decl of MSOutboundNetwork"
discard "forward decl of MSPacketLoss"
discard "forward decl of MSPortRange"
discard "forward decl of MSRelayAddress"
discard "forward decl of MSSignatureParameters"
discard "forward decl of MSTransportDiagnosticsStats"
discard "forward decl of MSUtilization"
discard "forward decl of MSVideoPayload"
discard "forward decl of MSVideoRecvPayload"
discard "forward decl of MSVideoResolutionDistribution"
discard "forward decl of MSVideoSendPayload"
discard "forward decl of MediaElementAudioSourceOptions"
discard "forward decl of MediaEncryptedEventInit"
discard "forward decl of MediaKeyMessageEventInit"
discard "forward decl of MediaKeySystemConfiguration"
discard "forward decl of MediaKeySystemMediaCapability"
discard "forward decl of MediaStreamConstraints"
discard "forward decl of MediaStreamErrorEventInit"
discard "forward decl of MediaStreamEventInit"
discard "forward decl of MediaStreamTrackEventInit"
discard "forward decl of MediaTrackCapabilities"
discard "forward decl of MediaTrackConstraintSet"
discard "forward decl of MediaTrackConstraints"
discard "forward decl of MediaTrackSettings"
discard "forward decl of MediaTrackSupportedConstraints"
discard "forward decl of MessageEventInit"
discard "forward decl of MouseEventInit"
discard "forward decl of MsZoomToOptions"
discard "forward decl of MutationObserverInit"
discard "forward decl of NotificationEventInit"
discard "forward decl of NotificationOptions"
discard "forward decl of ObjectURLOptions"
discard "forward decl of OfflineAudioCompletionEventInit"
discard "forward decl of OscillatorOptions"
discard "forward decl of PannerOptions"
discard "forward decl of PaymentCurrencyAmount"
discard "forward decl of PaymentDetailsBase"
discard "forward decl of PaymentDetailsInit"
discard "forward decl of PaymentDetailsModifier"
discard "forward decl of PaymentDetailsUpdate"
discard "forward decl of PaymentItem"
discard "forward decl of PaymentMethodData"
discard "forward decl of PaymentOptions"
discard "forward decl of PaymentRequestUpdateEventInit"
discard "forward decl of PaymentShippingOption"
discard "forward decl of Pbkdf2Params"
discard "forward decl of PeriodicWaveConstraints"
discard "forward decl of PeriodicWaveOptions"
discard "forward decl of PointerEventInit"
discard "forward decl of PopStateEventInit"
discard "forward decl of PositionOptions"
discard "forward decl of ProgressEventInit"
discard "forward decl of PushEventInit"
discard "forward decl of PushSubscriptionChangeInit"
discard "forward decl of PushSubscriptionOptionsInit"
discard "forward decl of QueuingStrategy"
discard "forward decl of RTCConfiguration"
discard "forward decl of RTCDTMFToneChangeEventInit"
discard "forward decl of RTCDtlsFingerprint"
discard "forward decl of RTCDtlsParameters"
discard "forward decl of RTCIceCandidateAttributes"
discard "forward decl of RTCIceCandidateComplete"
discard "forward decl of RTCIceCandidateDictionary"
discard "forward decl of RTCIceCandidateInit"
discard "forward decl of RTCIceCandidatePair"
discard "forward decl of RTCIceCandidatePairStats"
discard "forward decl of RTCIceGatherOptions"
discard "forward decl of RTCIceParameters"
discard "forward decl of RTCIceServer"
discard "forward decl of RTCRTPStreamStats"
discard "forward decl of RTCInboundRTPStreamStats"
discard "forward decl of RTCMediaStreamTrackStats"
discard "forward decl of RTCOfferOptions"
discard "forward decl of RTCOutboundRTPStreamStats"
discard "forward decl of RTCPeerConnectionIceEventInit"
discard "forward decl of RTCRtcpFeedback"
discard "forward decl of RTCRtcpParameters"
discard "forward decl of RTCRtpCapabilities"
discard "forward decl of RTCRtpCodecCapability"
discard "forward decl of RTCRtpCodecParameters"
discard "forward decl of RTCRtpContributingSource"
discard "forward decl of RTCRtpEncodingParameters"
discard "forward decl of RTCRtpFecParameters"
discard "forward decl of RTCRtpHeaderExtension"
discard "forward decl of RTCRtpHeaderExtensionParameters"
discard "forward decl of RTCRtpParameters"
discard "forward decl of RTCRtpRtxParameters"
discard "forward decl of RTCRtpUnhandled"
discard "forward decl of RTCSessionDescriptionInit"
discard "forward decl of RTCSrtpKeyParam"
discard "forward decl of RTCSrtpSdesParameters"
discard "forward decl of RTCSsrcRange"
discard "forward decl of RTCStatsReport"
discard "forward decl of RTCTransportStats"
discard "forward decl of RegistrationOptions"
discard "forward decl of RequestInit"
discard "forward decl of ResponseInit"
discard "forward decl of RsaHashedImportParams"
discard "forward decl of RsaKeyAlgorithm"
discard "forward decl of RsaHashedKeyAlgorithm"
discard "forward decl of RsaKeyGenParams"
discard "forward decl of RsaHashedKeyGenParams"
discard "forward decl of RsaOaepParams"
discard "forward decl of RsaOtherPrimesInfo"
discard "forward decl of RsaPssParams"
discard "forward decl of ScopedCredentialDescriptor"
discard "forward decl of ScopedCredentialOptions"
discard "forward decl of ScopedCredentialParameters"
discard "forward decl of SecurityPolicyViolationEventInit"
discard "forward decl of ServiceWorkerMessageEventInit"
discard "forward decl of SpeechSynthesisEventInit"
discard "forward decl of StereoPannerOptions"
discard "forward decl of StoreExceptionsInformation"
discard "forward decl of StoreSiteSpecificExceptionsInformation"
discard "forward decl of SyncEventInit"
discard "forward decl of TextDecodeOptions"
discard "forward decl of TextDecoderOptions"
discard "forward decl of TrackEventInit"
discard "forward decl of TransitionEventInit"
discard "forward decl of UnderlyingSink"
discard "forward decl of VRDisplayEventInit"
discard "forward decl of VRLayer"
discard "forward decl of VRStageParameters"
discard "forward decl of WaveShaperOptions"
discard "forward decl of WebAuthnExtensions"
discard "forward decl of WheelEventInit"
discard "forward decl of EventListener"
discard "forward decl of ANGLE_instanced_arrays"
discard "forward decl of AbortController"
discard "forward decl of AbortSignalEventMap"
discard "forward decl of EventTarget"
discard "forward decl of AbortSignal"
discard "forward decl of AbstractWorkerEventMap"
discard "forward decl of AbstractWorker"
discard "forward decl of AesCfbParams"
discard "forward decl of AesCmacParams"
discard "forward decl of AudioNode"
discard "forward decl of AnalyserNode"
discard "forward decl of Animation"
discard "forward decl of AnimationEffectReadOnly"
discard "forward decl of Event"
discard "forward decl of AnimationEvent"
discard "forward decl of AnimationKeyFrame"
discard "forward decl of AnimationOptions"
discard "forward decl of AnimationPlaybackEvent"
discard "forward decl of AnimationPlaybackEventInit"
discard "forward decl of AnimationTimeline"
discard "forward decl of ApplicationCacheEventMap"
discard "forward decl of ApplicationCache"
discard "forward decl of AssignedNodesOptions"
discard "forward decl of Node"
discard "forward decl of Attr"
discard "forward decl of AudioBuffer"
discard "forward decl of AudioBufferSourceNodeEventMap"
discard "forward decl of AudioBufferSourceNode"
discard "forward decl of AudioContextEventMap"
discard "forward decl of AudioContextBase"
discard "forward decl of AudioContext"
discard "forward decl of AudioDestinationNode"
discard "forward decl of AudioListener"
discard "forward decl of AudioParam"
discard "forward decl of AudioProcessingEvent"
discard "forward decl of AudioTrack"
discard "forward decl of AudioTrackListEventMap"
discard "forward decl of AudioTrackList"
discard "forward decl of BarProp"
discard "forward decl of BeforeUnloadEvent"
discard "forward decl of BhxBrowser"
discard "forward decl of BiquadFilterNode"
discard "forward decl of Blob"
discard "forward decl of BlobPropertyBag"
discard "forward decl of Body"
discard "forward decl of BroadcastChannel"
discard "forward decl of BroadcastChannelEventMap"
discard "forward decl of ByteLengthQueuingStrategy"
discard "forward decl of ChildNode"
discard "forward decl of CharacterData"
discard "forward decl of Text"
discard "forward decl of CDATASection"
discard "forward decl of CSS"
discard "forward decl of CSSRule"
discard "forward decl of CSSGroupingRule"
discard "forward decl of CSSConditionRule"
discard "forward decl of CSSFontFaceRule"
discard "forward decl of CSSImportRule"
discard "forward decl of CSSKeyframeRule"
discard "forward decl of CSSKeyframesRule"
discard "forward decl of CSSMediaRule"
discard "forward decl of CSSNamespaceRule"
discard "forward decl of CSSPageRule"
discard "forward decl of CSSRuleList"
discard "forward decl of CSSStyleDeclaration"
discard "forward decl of CSSStyleRule"
discard "forward decl of StyleSheet"
discard "forward decl of CSSStyleSheet"
discard "forward decl of CSSSupportsRule"
discard "forward decl of Cache"
discard "forward decl of CacheStorage"
discard "forward decl of Canvas2DContextAttributes"
discard "forward decl of CanvasGradient"
discard "forward decl of CanvasPathMethods"
discard "forward decl of CanvasPattern"
discard "forward decl of CanvasRenderingContext2D"
discard "forward decl of ChannelMergerNode"
discard "forward decl of ChannelSplitterNode"
discard "forward decl of ClientRect"
discard "forward decl of ClientRectList"
discard "forward decl of ClipboardEvent"
discard "forward decl of ClipboardEventInit"
discard "forward decl of CloseEvent"
discard "forward decl of Comment"
discard "forward decl of UIEvent"
discard "forward decl of CompositionEvent"
discard "forward decl of ComputedTimingProperties"
discard "forward decl of ConcatParams"
discard "forward decl of Console"
discard "forward decl of ContentScriptGlobalScope"
discard "forward decl of ConvolverNode"
discard "forward decl of Coordinates"
discard "forward decl of CountQueuingStrategy"
discard "forward decl of Crypto"
discard "forward decl of CryptoKey"
discard "forward decl of CryptoKeyPair"
discard "forward decl of CustomElementRegistry"
discard "forward decl of CustomEvent"
discard "forward decl of DOMError"
discard "forward decl of DOMException"
discard "forward decl of DOMImplementation"
discard "forward decl of DOML2DeprecatedColorProperty"
discard "forward decl of DOML2DeprecatedSizeProperty"
discard "forward decl of DOMParser"
discard "forward decl of DOMRectReadOnly"
discard "forward decl of DOMRect"
discard "forward decl of DOMRectList"
discard "forward decl of DOMTokenList"
discard "forward decl of DOMSettableTokenList"
discard "forward decl of DOMStringList"
discard "forward decl of DOMStringMap"
discard "forward decl of TextTrackCue"
discard "forward decl of DataCue"
discard "forward decl of DataTransfer"
discard "forward decl of DataTransferItem"
discard "forward decl of DataTransferItemList"
discard "forward decl of DeferredPermissionRequest"
discard "forward decl of DelayNode"
discard "forward decl of DeviceAcceleration"
discard "forward decl of DeviceLightEvent"
discard "forward decl of DeviceMotionEvent"
discard "forward decl of DeviceOrientationEvent"
discard "forward decl of DeviceRotationRate"
discard "forward decl of DhImportKeyParams"
discard "forward decl of DhKeyAlgorithm"
discard "forward decl of DhKeyDeriveParams"
discard "forward decl of DhKeyGenParams"
discard "forward decl of GlobalEventHandlersEventMap"
discard "forward decl of DocumentEventMap"
discard "forward decl of GlobalEventHandlers"
discard "forward decl of ParentNode"
discard "forward decl of DocumentEvent"
discard "forward decl of Document"
discard "forward decl of DocumentFragment"
discard "forward decl of DocumentOrShadowRoot"
discard "forward decl of DocumentType"
discard "forward decl of MouseEvent"
discard "forward decl of DragEvent"
discard "forward decl of DynamicsCompressorNode"
discard "forward decl of EXT_blend_minmax"
discard "forward decl of EXT_frag_depth"
discard "forward decl of EXT_sRGB"
discard "forward decl of EXT_shader_texture_lod"
discard "forward decl of EXT_texture_filter_anisotropic"
discard "forward decl of ElementEventMap"
discard "forward decl of ElementTraversal"
discard "forward decl of Element"
discard "forward decl of ElementCSSInlineStyle"
discard "forward decl of ElementCreationOptions"
discard "forward decl of ElementDefinitionOptions"
discard "forward decl of ErrorEvent"
discard "forward decl of EventListenerObject"
discard "forward decl of EventSource"
discard "forward decl of EventSourceInit"
discard "forward decl of ExtensionScriptApis"
discard "forward decl of External"
discard "forward decl of File"
discard "forward decl of FileList"
discard "forward decl of FilePropertyBag"
discard "forward decl of FileReaderEventMap"
discard "forward decl of FileReader"
discard "forward decl of ProgressEvent"
discard "forward decl of FileReaderProgressEvent"
discard "forward decl of FocusEvent"
discard "forward decl of FocusNavigationEvent"
discard "forward decl of FormData"
discard "forward decl of GainNode"
discard "forward decl of Gamepad"
discard "forward decl of GamepadButton"
discard "forward decl of GamepadEvent"
discard "forward decl of GamepadHapticActuator"
discard "forward decl of GamepadPose"
discard "forward decl of Geolocation"
discard "forward decl of GetSVGDocument"
discard "forward decl of GlobalFetch"
discard "forward decl of HTMLAllCollection"
discard "forward decl of HTMLElement"
discard "forward decl of HTMLHyperlinkElementUtils"
discard "forward decl of HTMLAnchorElement"
discard "forward decl of HTMLAppletElement"
discard "forward decl of HTMLAreaElement"
discard "forward decl of HTMLCollectionBase"
discard "forward decl of HTMLAreasCollection"
discard "forward decl of HTMLMediaElement"
discard "forward decl of HTMLAudioElement"
discard "forward decl of HTMLBRElement"
discard "forward decl of HTMLBaseElement"
discard "forward decl of HTMLBaseFontElement"
discard "forward decl of HTMLElementEventMap"
discard "forward decl of WindowEventHandlersEventMap"
discard "forward decl of HTMLBodyElementEventMap"
discard "forward decl of WindowEventHandlers"
discard "forward decl of HTMLBodyElement"
discard "forward decl of HTMLButtonElement"
discard "forward decl of HTMLCanvasElement"
discard "forward decl of HTMLCollection"
discard "forward decl of HTMLCollectionOf"
discard "forward decl of HTMLDListElement"
discard "forward decl of HTMLDataElement"
discard "forward decl of HTMLDataListElement"
discard "forward decl of HTMLDetailsElement"
discard "forward decl of HTMLDialogElement"
discard "forward decl of HTMLDirectoryElement"
discard "forward decl of HTMLDivElement"
discard "forward decl of HTMLDocument"
discard "forward decl of HTMLEmbedElement"
discard "forward decl of HTMLFieldSetElement"
discard "forward decl of HTMLFontElement"
discard "forward decl of HTMLFormControlsCollection"
discard "forward decl of HTMLFormElement"
discard "forward decl of HTMLFrameElementEventMap"
discard "forward decl of HTMLFrameElement"
discard "forward decl of HTMLFrameSetElementEventMap"
discard "forward decl of HTMLFrameSetElement"
discard "forward decl of HTMLHRElement"
discard "forward decl of HTMLHeadElement"
discard "forward decl of HTMLHeadingElement"
discard "forward decl of HTMLHtmlElement"
discard "forward decl of HTMLIFrameElementEventMap"
discard "forward decl of HTMLIFrameElement"
discard "forward decl of HTMLImageElement"
discard "forward decl of HTMLInputElement"
discard "forward decl of HTMLLIElement"
discard "forward decl of HTMLLabelElement"
discard "forward decl of HTMLLegendElement"
discard "forward decl of LinkStyle"
discard "forward decl of HTMLLinkElement"
discard "forward decl of HTMLMainElement"
discard "forward decl of HTMLMapElement"
discard "forward decl of HTMLMarqueeElementEventMap"
discard "forward decl of HTMLMarqueeElement"
discard "forward decl of HTMLMediaElementEventMap"
discard "forward decl of HTMLMenuElement"
discard "forward decl of HTMLMetaElement"
discard "forward decl of HTMLMeterElement"
discard "forward decl of HTMLModElement"
discard "forward decl of HTMLOListElement"
discard "forward decl of HTMLObjectElement"
discard "forward decl of HTMLOptGroupElement"
discard "forward decl of HTMLOptionElement"
discard "forward decl of HTMLOptionsCollection"
discard "forward decl of HTMLOutputElement"
discard "forward decl of HTMLParagraphElement"
discard "forward decl of HTMLParamElement"
discard "forward decl of HTMLPictureElement"
discard "forward decl of HTMLPreElement"
discard "forward decl of HTMLProgressElement"
discard "forward decl of HTMLQuoteElement"
discard "forward decl of HTMLScriptElement"
discard "forward decl of HTMLSelectElement"
discard "forward decl of HTMLSlotElement"
discard "forward decl of HTMLSourceElement"
discard "forward decl of HTMLSpanElement"
discard "forward decl of HTMLStyleElement"
discard "forward decl of HTMLSummaryElement"
discard "forward decl of HTMLTableCaptionElement"
discard "forward decl of HTMLTableCellElement"
discard "forward decl of HTMLTableColElement"
discard "forward decl of HTMLTableDataCellElement"
discard "forward decl of HTMLTableElement"
discard "forward decl of HTMLTableHeaderCellElement"
discard "forward decl of HTMLTableRowElement"
discard "forward decl of HTMLTableSectionElement"
discard "forward decl of HTMLTemplateElement"
discard "forward decl of HTMLTextAreaElement"
discard "forward decl of HTMLTimeElement"
discard "forward decl of HTMLTitleElement"
discard "forward decl of HTMLTrackElement"
discard "forward decl of HTMLUListElement"
discard "forward decl of HTMLUnknownElement"
discard "forward decl of HTMLVideoElementEventMap"
discard "forward decl of HTMLVideoElement"
discard "forward decl of HTMLegendElement"
discard "forward decl of HashChangeEvent"
discard "forward decl of Headers"
discard "forward decl of History"
discard "forward decl of HkdfCtrParams"
discard "forward decl of IDBArrayKey"
discard "forward decl of IDBCursor"
discard "forward decl of IDBCursorWithValue"
discard "forward decl of IDBDatabaseEventMap"
discard "forward decl of IDBDatabase"
discard "forward decl of IDBEnvironment"
discard "forward decl of IDBFactory"
discard "forward decl of IDBIndex"
discard "forward decl of IDBKeyRange"
discard "forward decl of IDBObjectStore"
discard "forward decl of IDBRequestEventMap"
discard "forward decl of IDBOpenDBRequestEventMap"
discard "forward decl of IDBRequest"
discard "forward decl of IDBOpenDBRequest"
discard "forward decl of IDBTransactionEventMap"
discard "forward decl of IDBTransaction"
discard "forward decl of IDBVersionChangeEvent"
discard "forward decl of IIRFilterNode"
discard "forward decl of ImageBitmap"
discard "forward decl of ImageBitmapOptions"
discard "forward decl of ImageData"
discard "forward decl of IntersectionObserver"
discard "forward decl of IntersectionObserverEntry"
discard "forward decl of KeyboardEvent"
discard "forward decl of ListeningStateChangedEvent"
discard "forward decl of Location"
discard "forward decl of MSAssertion"
discard "forward decl of MSBlobBuilder"
discard "forward decl of MSCredentials"
discard "forward decl of MSDCCEvent"
discard "forward decl of MSDSHEvent"
discard "forward decl of MSFIDOCredentialAssertion"
discard "forward decl of MSFIDOSignature"
discard "forward decl of MSFIDOSignatureAssertion"
discard "forward decl of MSFileSaver"
discard "forward decl of MSGesture"
discard "forward decl of MSGestureEvent"
discard "forward decl of MSGraphicsTrust"
discard "forward decl of MSInputMethodContextEventMap"
discard "forward decl of MSInputMethodContext"
discard "forward decl of MSMediaKeyError"
discard "forward decl of MSMediaKeyMessageEvent"
discard "forward decl of MSMediaKeyNeededEvent"
discard "forward decl of MSMediaKeySession"
discard "forward decl of MSMediaKeys"
discard "forward decl of MSNavigatorDoNotTrack"
discard "forward decl of MSPointerEvent"
discard "forward decl of MSStream"
discard "forward decl of MSStreamReaderEventMap"
discard "forward decl of MSStreamReader"
discard "forward decl of MediaDeviceInfo"
discard "forward decl of MediaDevicesEventMap"
discard "forward decl of MediaDevices"
discard "forward decl of MediaElementAudioSourceNode"
discard "forward decl of MediaEncryptedEvent"
discard "forward decl of MediaError"
discard "forward decl of MediaKeyMessageEvent"
discard "forward decl of MediaKeySession"
discard "forward decl of MediaKeyStatusMap"
discard "forward decl of MediaKeySystemAccess"
discard "forward decl of MediaKeys"
discard "forward decl of MediaList"
discard "forward decl of MediaQueryList"
discard "forward decl of MediaSource"
discard "forward decl of MediaStreamEventMap"
discard "forward decl of MediaStream"
discard "forward decl of MediaStreamAudioSourceNode"
discard "forward decl of MediaStreamError"
discard "forward decl of MediaStreamErrorEvent"
discard "forward decl of MediaStreamEvent"
discard "forward decl of MediaStreamTrackEventMap"
discard "forward decl of MediaStreamTrack"
discard "forward decl of MediaStreamTrackEvent"
discard "forward decl of MessageChannel"
discard "forward decl of MessageEvent"
discard "forward decl of MessagePortEventMap"
discard "forward decl of MessagePort"
discard "forward decl of MimeType"
discard "forward decl of MimeTypeArray"
discard "forward decl of MutationEvent"
discard "forward decl of MutationObserver"
discard "forward decl of MutationRecord"
discard "forward decl of NamedNodeMap"
discard "forward decl of NavigatorID"
discard "forward decl of NavigatorOnLine"
discard "forward decl of NavigatorContentUtils"
discard "forward decl of NavigatorStorageUtils"
discard "forward decl of NavigatorBeacon"
discard "forward decl of NavigatorConcurrentHardware"
discard "forward decl of NavigatorUserMedia"
discard "forward decl of NavigatorLanguage"
discard "forward decl of Navigator"
discard "forward decl of NodeFilter"
discard "forward decl of NodeIterator"
discard "forward decl of NodeList"
discard "forward decl of NodeListOf"
discard "forward decl of NodeSelector"
discard "forward decl of NotificationEventMap"
discard "forward decl of Notification"
discard "forward decl of OfflineAudioCompletionEvent"
discard "forward decl of OfflineAudioContextEventMap"
discard "forward decl of OfflineAudioContext"
discard "forward decl of OscillatorNodeEventMap"
discard "forward decl of OscillatorNode"
discard "forward decl of OverflowEvent"
discard "forward decl of PageTransitionEvent"
discard "forward decl of PannerNode"
discard "forward decl of Path2D"
discard "forward decl of PaymentAddress"
discard "forward decl of PaymentRequestEventMap"
discard "forward decl of PaymentRequest"
discard "forward decl of PaymentRequestUpdateEvent"
discard "forward decl of PaymentResponse"
discard "forward decl of PerfWidgetExternal"
discard "forward decl of Performance"
discard "forward decl of PerformanceEntry"
discard "forward decl of PerformanceMark"
discard "forward decl of PerformanceMeasure"
discard "forward decl of PerformanceNavigation"
discard "forward decl of PerformanceNavigationTiming"
discard "forward decl of PerformanceResourceTiming"
discard "forward decl of PerformanceTiming"
discard "forward decl of PeriodicWave"
discard "forward decl of PermissionRequest"
discard "forward decl of PermissionRequestedEvent"
discard "forward decl of Plugin"
discard "forward decl of PluginArray"
discard "forward decl of PointerEvent"
discard "forward decl of PopStateEvent"
discard "forward decl of Position"
discard "forward decl of PositionError"
discard "forward decl of ProcessingInstruction"
discard "forward decl of PromiseRejectionEvent"
discard "forward decl of PromiseRejectionEventInit"
discard "forward decl of PushManager"
discard "forward decl of PushSubscription"
discard "forward decl of PushSubscriptionOptions"
discard "forward decl of RTCDTMFToneChangeEvent"
discard "forward decl of RTCDtlsTransportEventMap"
discard "forward decl of RTCStatsProvider"
discard "forward decl of RTCDtlsTransport"
discard "forward decl of RTCDtlsTransportStateChangedEvent"
discard "forward decl of RTCDtmfSenderEventMap"
discard "forward decl of RTCDtmfSender"
discard "forward decl of RTCIceCandidate"
discard "forward decl of RTCIceCandidatePairChangedEvent"
discard "forward decl of RTCIceGathererEventMap"
discard "forward decl of RTCIceGatherer"
discard "forward decl of RTCIceGathererEvent"
discard "forward decl of RTCIceTransportEventMap"
discard "forward decl of RTCIceTransport"
discard "forward decl of RTCIceTransportStateChangedEvent"
discard "forward decl of RTCPeerConnectionEventMap"
discard "forward decl of RTCPeerConnection"
discard "forward decl of RTCPeerConnectionIceEvent"
discard "forward decl of RTCRtpReceiverEventMap"
discard "forward decl of RTCRtpReceiver"
discard "forward decl of RTCRtpSenderEventMap"
discard "forward decl of RTCRtpSender"
discard "forward decl of RTCSessionDescription"
discard "forward decl of RTCSrtpSdesTransportEventMap"
discard "forward decl of RTCSrtpSdesTransport"
discard "forward decl of RTCSsrcConflictEvent"
discard "forward decl of RandomSource"
discard "forward decl of Range"
discard "forward decl of ReadableStream"
discard "forward decl of ReadableStreamReader"
discard "forward decl of Request"
discard "forward decl of Response"
discard "forward decl of SVGElement"
discard "forward decl of SVGTests"
discard "forward decl of SVGGraphicsElement"
discard "forward decl of SVGURIReference"
discard "forward decl of SVGAElement"
discard "forward decl of SVGAngle"
discard "forward decl of SVGAnimatedAngle"
discard "forward decl of SVGAnimatedBoolean"
discard "forward decl of SVGAnimatedEnumeration"
discard "forward decl of SVGAnimatedInteger"
discard "forward decl of SVGAnimatedLength"
discard "forward decl of SVGAnimatedLengthList"
discard "forward decl of SVGAnimatedNumber"
discard "forward decl of SVGAnimatedNumberList"
discard "forward decl of SVGAnimatedPoints"
discard "forward decl of SVGAnimatedPreserveAspectRatio"
discard "forward decl of SVGAnimatedRect"
discard "forward decl of SVGAnimatedString"
discard "forward decl of SVGAnimatedTransformList"
discard "forward decl of SVGCircleElement"
discard "forward decl of SVGUnitTypes"
discard "forward decl of SVGClipPathElement"
discard "forward decl of SVGComponentTransferFunctionElement"
discard "forward decl of SVGDefsElement"
discard "forward decl of SVGDescElement"
discard "forward decl of SVGElementEventMap"
discard "forward decl of SVGElementInstance"
discard "forward decl of SVGElementInstanceList"
discard "forward decl of SVGEllipseElement"
discard "forward decl of SVGFilterPrimitiveStandardAttributes"
discard "forward decl of SVGFEBlendElement"
discard "forward decl of SVGFEColorMatrixElement"
discard "forward decl of SVGFEComponentTransferElement"
discard "forward decl of SVGFECompositeElement"
discard "forward decl of SVGFEConvolveMatrixElement"
discard "forward decl of SVGFEDiffuseLightingElement"
discard "forward decl of SVGFEDisplacementMapElement"
discard "forward decl of SVGFEDistantLightElement"
discard "forward decl of SVGFEFloodElement"
discard "forward decl of SVGFEFuncAElement"
discard "forward decl of SVGFEFuncBElement"
discard "forward decl of SVGFEFuncGElement"
discard "forward decl of SVGFEFuncRElement"
discard "forward decl of SVGFEGaussianBlurElement"
discard "forward decl of SVGFEImageElement"
discard "forward decl of SVGFEMergeElement"
discard "forward decl of SVGFEMergeNodeElement"
discard "forward decl of SVGFEMorphologyElement"
discard "forward decl of SVGFEOffsetElement"
discard "forward decl of SVGFEPointLightElement"
discard "forward decl of SVGFESpecularLightingElement"
discard "forward decl of SVGFESpotLightElement"
discard "forward decl of SVGFETileElement"
discard "forward decl of SVGFETurbulenceElement"
discard "forward decl of SVGFilterElement"
discard "forward decl of SVGFitToViewBox"
discard "forward decl of SVGForeignObjectElement"
discard "forward decl of SVGGElement"
discard "forward decl of SVGGradientElement"
discard "forward decl of SVGImageElement"
discard "forward decl of SVGLength"
discard "forward decl of SVGLengthList"
discard "forward decl of SVGLineElement"
discard "forward decl of SVGLinearGradientElement"
discard "forward decl of SVGMarkerElement"
discard "forward decl of SVGMaskElement"
discard "forward decl of SVGMatrix"
discard "forward decl of SVGMetadataElement"
discard "forward decl of SVGNumber"
discard "forward decl of SVGNumberList"
discard "forward decl of SVGPathElement"
discard "forward decl of SVGPathSeg"
discard "forward decl of SVGPathSegArcAbs"
discard "forward decl of SVGPathSegArcRel"
discard "forward decl of SVGPathSegClosePath"
discard "forward decl of SVGPathSegCurvetoCubicAbs"
discard "forward decl of SVGPathSegCurvetoCubicRel"
discard "forward decl of SVGPathSegCurvetoCubicSmoothAbs"
discard "forward decl of SVGPathSegCurvetoCubicSmoothRel"
discard "forward decl of SVGPathSegCurvetoQuadraticAbs"
discard "forward decl of SVGPathSegCurvetoQuadraticRel"
discard "forward decl of SVGPathSegCurvetoQuadraticSmoothAbs"
discard "forward decl of SVGPathSegCurvetoQuadraticSmoothRel"
discard "forward decl of SVGPathSegLinetoAbs"
discard "forward decl of SVGPathSegLinetoHorizontalAbs"
discard "forward decl of SVGPathSegLinetoHorizontalRel"
discard "forward decl of SVGPathSegLinetoRel"
discard "forward decl of SVGPathSegLinetoVerticalAbs"
discard "forward decl of SVGPathSegLinetoVerticalRel"
discard "forward decl of SVGPathSegList"
discard "forward decl of SVGPathSegMovetoAbs"
discard "forward decl of SVGPathSegMovetoRel"
discard "forward decl of SVGPatternElement"
discard "forward decl of SVGPoint"
discard "forward decl of SVGPointList"
discard "forward decl of SVGPolygonElement"
discard "forward decl of SVGPolylineElement"
discard "forward decl of SVGPreserveAspectRatio"
discard "forward decl of SVGRadialGradientElement"
discard "forward decl of SVGRect"
discard "forward decl of SVGRectElement"
discard "forward decl of SVGSVGElementEventMap"
discard "forward decl of SVGZoomAndPan"
discard "forward decl of SVGSVGElement"
discard "forward decl of SVGScriptElement"
discard "forward decl of SVGStopElement"
discard "forward decl of SVGStringList"
discard "forward decl of SVGStylable"
discard "forward decl of SVGStyleElement"
discard "forward decl of SVGSwitchElement"
discard "forward decl of SVGSymbolElement"
discard "forward decl of SVGTextContentElement"
discard "forward decl of SVGTextPositioningElement"
discard "forward decl of SVGTSpanElement"
discard "forward decl of SVGTextElement"
discard "forward decl of SVGTextPathElement"
discard "forward decl of SVGTitleElement"
discard "forward decl of SVGTransform"
discard "forward decl of SVGTransformList"
discard "forward decl of SVGUseElement"
discard "forward decl of SVGViewElement"
discard "forward decl of SVGZoomEvent"
discard "forward decl of ScopedCredential"
discard "forward decl of ScopedCredentialInfo"
discard "forward decl of ScreenEventMap"
discard "forward decl of Screen"
discard "forward decl of ScriptProcessorNodeEventMap"
discard "forward decl of ScriptProcessorNode"
discard "forward decl of ScrollOptions"
discard "forward decl of ScrollIntoViewOptions"
discard "forward decl of ScrollToOptions"
discard "forward decl of SecurityPolicyViolationEvent"
discard "forward decl of Selection"
discard "forward decl of ServiceUIFrameContext"
discard "forward decl of ServiceWorkerEventMap"
discard "forward decl of ServiceWorker"
discard "forward decl of ServiceWorkerContainerEventMap"
discard "forward decl of ServiceWorkerContainer"
discard "forward decl of ServiceWorkerMessageEvent"
discard "forward decl of ServiceWorkerRegistrationEventMap"
discard "forward decl of ServiceWorkerRegistration"
discard "forward decl of ShadowRoot"
discard "forward decl of ShadowRootInit"
discard "forward decl of SourceBuffer"
discard "forward decl of SourceBufferList"
discard "forward decl of SpeechSynthesisEventMap"
discard "forward decl of SpeechSynthesis"
discard "forward decl of SpeechSynthesisEvent"
discard "forward decl of SpeechSynthesisUtteranceEventMap"
discard "forward decl of SpeechSynthesisUtterance"
discard "forward decl of SpeechSynthesisVoice"
discard "forward decl of StereoPannerNode"
discard "forward decl of Storage"
discard "forward decl of StorageEvent"
discard "forward decl of StorageEventInit"
discard "forward decl of StyleMedia"
discard "forward decl of StyleSheetList"
discard "forward decl of SubtleCrypto"
discard "forward decl of SyncManager"
discard "forward decl of TextDecoder"
discard "forward decl of TextEncoder"
discard "forward decl of TextEvent"
discard "forward decl of TextMetrics"
discard "forward decl of TextTrackEventMap"
discard "forward decl of TextTrack"
discard "forward decl of TextTrackCueEventMap"
discard "forward decl of TextTrackCueList"
discard "forward decl of TextTrackListEventMap"
discard "forward decl of TextTrackList"
discard "forward decl of TimeRanges"
discard "forward decl of Touch"
discard "forward decl of TouchEvent"
discard "forward decl of TouchEventInit"
discard "forward decl of TouchList"
discard "forward decl of TrackEvent"
discard "forward decl of TransitionEvent"
discard "forward decl of TreeWalker"
discard "forward decl of URL"
discard "forward decl of URLSearchParams"
discard "forward decl of VRDisplay"
discard "forward decl of VRDisplayCapabilities"
discard "forward decl of VRDisplayEvent"
discard "forward decl of VREyeParameters"
discard "forward decl of VRFieldOfView"
discard "forward decl of VRFrameData"
discard "forward decl of VRPose"
discard "forward decl of ValidityState"
discard "forward decl of VideoPlaybackQuality"
discard "forward decl of VideoTrack"
discard "forward decl of VideoTrackListEventMap"
discard "forward decl of VideoTrackList"
discard "forward decl of WaveShaperNode"
discard "forward decl of WebAuthentication"
discard "forward decl of WebAuthnAssertion"
discard "forward decl of WebKitCSSMatrix"
discard "forward decl of WebKitEntry"
discard "forward decl of WebKitDirectoryEntry"
discard "forward decl of WebKitDirectoryReader"
discard "forward decl of WebKitFileEntry"
discard "forward decl of WebKitFileSystem"
discard "forward decl of WebKitPoint"
discard "forward decl of WebSocketEventMap"
discard "forward decl of WebSocket"
discard "forward decl of WheelEvent"
discard "forward decl of WindowEventMap"
discard "forward decl of WindowTimersExtension"
discard "forward decl of WindowTimers"
discard "forward decl of WindowSessionStorage"
discard "forward decl of WindowLocalStorage"
discard "forward decl of WindowConsole"
discard "forward decl of WindowBase64"
discard "forward decl of Window"
discard "forward decl of WorkerEventMap"
discard "forward decl of Worker"
discard "forward decl of WritableStream"
discard "forward decl of WritableStreamDefaultController"
discard "forward decl of WritableStreamDefaultWriter"
discard "forward decl of XMLDocument"
discard "forward decl of XMLHttpRequestEventTargetEventMap"
discard "forward decl of XMLHttpRequestEventMap"
discard "forward decl of XMLHttpRequestEventTarget"
discard "forward decl of XMLHttpRequest"
discard "forward decl of XMLHttpRequestUpload"
discard "forward decl of XMLSerializer"
discard "forward decl of XPathEvaluator"
discard "forward decl of XPathExpression"
discard "forward decl of XPathNSResolver"
discard "forward decl of XPathResult"
discard "forward decl of XSLTProcessor"
discard "forward decl of webkitRTCPeerConnection"
discard "forward decl of DecodeErrorCallback"
discard "forward decl of DecodeSuccessCallback"
discard "forward decl of ErrorEventHandler"
discard "forward decl of EventHandlerNonNull"
discard "forward decl of ForEachCallback"
discard "forward decl of FrameRequestCallback"
discard "forward decl of FunctionStringCallback"
discard "forward decl of IntersectionObserverCallback"
discard "forward decl of MSLaunchUriCallback"
discard "forward decl of MediaQueryListListener"
discard "forward decl of MutationCallback"
discard "forward decl of NavigatorUserMediaErrorCallback"
discard "forward decl of NavigatorUserMediaSuccessCallback"
discard "forward decl of NotificationPermissionCallback"
discard "forward decl of PositionCallback"
discard "forward decl of PositionErrorCallback"
discard "forward decl of RTCPeerConnectionErrorCallback"
discard "forward decl of RTCSessionDescriptionCallback"
discard "forward decl of RTCStatsCallback"
discard "forward decl of VoidFunction"
discard "forward decl of WritableStreamChunkCallback"
discard "forward decl of WritableStreamDefaultControllerCallback"
discard "forward decl of WritableStreamErrorCallback"
discard "forward decl of HTMLElementTagNameMap"
discard "forward decl of SVGElementTagNameMap"
discard "forward decl of ElementTagNameMap"
discard "forward decl of ActiveXObject"
discard "forward decl of ITextWriter"
discard "forward decl of TextStreamBase"
discard "forward decl of TextStreamWriter"
discard "forward decl of TextStreamReader"
type

  PropertyDescriptor* {.importcpp: "client::PropertyDescriptor",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  PropertyDescriptorMap* {.importcpp: "client::PropertyDescriptorMap",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  IArguments* {.importcpp: "client::IArguments", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  ReadonlyArray*[T] {.importcpp: "client::ReadonlyArray<\'0>",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  TemplateStringsArray* {.importcpp: "client::TemplateStringsArray",
                          header: "cheerp/clientlib.h", bycopy.} = object of ReadonlyArray[
      String]


  ImportMeta* {.importcpp: "client::ImportMeta", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  Math* {.importcpp: "client::Math", header: "cheerp/clientlib.h", bycopy.} = object of Object


  Date* {.importcpp: "client::Date", header: "cheerp/clientlib.h", bycopy.} = object of Object


  RegExpMatchArray* {.importcpp: "client::RegExpMatchArray",
                      header: "cheerp/clientlib.h", bycopy.} = object of Array


  RegExpExecArray* {.importcpp: "client::RegExpExecArray",
                     header: "cheerp/clientlib.h", bycopy.} = object of Array


  RegExp* {.importcpp: "client::RegExp", header: "cheerp/clientlib.h", bycopy.} = object of Object


  Error* {.importcpp: "client::Error", header: "cheerp/clientlib.h", bycopy.} = object of Object


  EvalError* {.importcpp: "client::EvalError", header: "cheerp/clientlib.h",
               bycopy.} = object of Error


  RangeError* {.importcpp: "client::RangeError", header: "cheerp/clientlib.h",
                bycopy.} = object of Error


  ReferenceError* {.importcpp: "client::ReferenceError",
                    header: "cheerp/clientlib.h", bycopy.} = object of Error


  SyntaxError* {.importcpp: "client::SyntaxError", header: "cheerp/clientlib.h",
                 bycopy.} = object of Error


  TypeError* {.importcpp: "client::TypeError", header: "cheerp/clientlib.h",
               bycopy.} = object of Error


  URIError* {.importcpp: "client::URIError", header: "cheerp/clientlib.h",
              bycopy.} = object of Error


  JSON* {.importcpp: "client::JSON", header: "cheerp/clientlib.h", bycopy.} = object of Object


  ConcatArray*[T] {.importcpp: "client::ConcatArray<\'0>",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  TypedPropertyDescriptor*[T] {.importcpp: "client::TypedPropertyDescriptor<\'0>",
                                header: "cheerp/clientlib.h", bycopy.} = object of Object


  Promise* {.importcpp: "client::Promise", header: "cheerp/clientlib.h", bycopy.} = object of Object


  ThisType*[T] {.importcpp: "client::ThisType<\'0>",
                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  ArrayBuffer* {.importcpp: "client::ArrayBuffer", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  ArrayBufferTypes* {.importcpp: "client::ArrayBufferTypes",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  ArrayBufferView* {.importcpp: "client::ArrayBufferView",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  DataView* {.importcpp: "client::DataView", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  Int8Array* {.importcpp: "client::Int8Array", header: "cheerp/clientlib.h",
               bycopy.} = object of ArrayBufferView


  Uint8Array* {.importcpp: "client::Uint8Array", header: "cheerp/clientlib.h",
                bycopy.} = object of ArrayBufferView


  Uint8ClampedArray* {.importcpp: "client::Uint8ClampedArray",
                       header: "cheerp/clientlib.h", bycopy.} = object of ArrayBufferView


  Int16Array* {.importcpp: "client::Int16Array", header: "cheerp/clientlib.h",
                bycopy.} = object of ArrayBufferView


  Uint16Array* {.importcpp: "client::Uint16Array", header: "cheerp/clientlib.h",
                 bycopy.} = object of ArrayBufferView


  Int32Array* {.importcpp: "client::Int32Array", header: "cheerp/clientlib.h",
                bycopy.} = object of ArrayBufferView


  Uint32Array* {.importcpp: "client::Uint32Array", header: "cheerp/clientlib.h",
                 bycopy.} = object of ArrayBufferView


  Float32Array* {.importcpp: "client::Float32Array",
                  header: "cheerp/clientlib.h", bycopy.} = object of ArrayBufferView


  Float64Array* {.importcpp: "client::Float64Array",
                  header: "cheerp/clientlib.h", bycopy.} = object of ArrayBufferView


  Account* {.importcpp: "client::Account", header: "cheerp/clientlib.h", bycopy.} = object of Object


  EventListenerOptions* {.importcpp: "client::EventListenerOptions",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  AddEventListenerOptions* {.importcpp: "client::AddEventListenerOptions",
                             header: "cheerp/clientlib.h", bycopy.} = object of EventListenerOptions


  Algorithm* {.importcpp: "client::Algorithm", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  AesCbcParams* {.importcpp: "client::AesCbcParams",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  AesCtrParams* {.importcpp: "client::AesCtrParams",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  AesDerivedKeyParams* {.importcpp: "client::AesDerivedKeyParams",
                         header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  AesGcmParams* {.importcpp: "client::AesGcmParams",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  KeyAlgorithm* {.importcpp: "client::KeyAlgorithm",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  AesKeyAlgorithm* {.importcpp: "client::AesKeyAlgorithm",
                     header: "cheerp/clientlib.h", bycopy.} = object of KeyAlgorithm


  AesKeyGenParams* {.importcpp: "client::AesKeyGenParams",
                     header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  AudioNodeOptions* {.importcpp: "client::AudioNodeOptions",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  AnalyserOptions* {.importcpp: "client::AnalyserOptions",
                     header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  EventInit* {.importcpp: "client::EventInit", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  AnimationEventInit* {.importcpp: "client::AnimationEventInit",
                        header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  AssertionOptions* {.importcpp: "client::AssertionOptions",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioBufferOptions* {.importcpp: "client::AudioBufferOptions",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioBufferSourceOptions* {.importcpp: "client::AudioBufferSourceOptions",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioContextInfo* {.importcpp: "client::AudioContextInfo",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioContextOptions* {.importcpp: "client::AudioContextOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioParamDescriptor* {.importcpp: "client::AudioParamDescriptor",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioProcessingEventInit* {.importcpp: "client::AudioProcessingEventInit",
                              header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  AudioTimestamp* {.importcpp: "client::AudioTimestamp",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  BiquadFilterOptions* {.importcpp: "client::BiquadFilterOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  ByteLengthChunk* {.importcpp: "client::ByteLengthChunk",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  CacheQueryOptions* {.importcpp: "client::CacheQueryOptions",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  ChannelMergerOptions* {.importcpp: "client::ChannelMergerOptions",
                          header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  ChannelSplitterOptions* {.importcpp: "client::ChannelSplitterOptions",
                            header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  ClientData* {.importcpp: "client::ClientData", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  ClientQueryOptions* {.importcpp: "client::ClientQueryOptions",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  CloseEventInit* {.importcpp: "client::CloseEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  UIEventInit* {.importcpp: "client::UIEventInit", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventInit


  CompositionEventInit* {.importcpp: "client::CompositionEventInit",
                          header: "cheerp/clientlib.h", bycopy.} = object of UIEventInit


  ExceptionInformation* {.importcpp: "client::ExceptionInformation",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  ConfirmSiteSpecificExceptionsInformation* {.
      importcpp: "client::ConfirmSiteSpecificExceptionsInformation",
      header: "cheerp/clientlib.h", bycopy.} = object of ExceptionInformation


  ConstantSourceOptions* {.importcpp: "client::ConstantSourceOptions",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  ConstrainBooleanParameters* {.importcpp: "client::ConstrainBooleanParameters",
                                header: "cheerp/clientlib.h", bycopy.} = object of Object


  ConstrainDOMStringParameters* {.importcpp: "client::ConstrainDOMStringParameters",
                                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  DoubleRange* {.importcpp: "client::DoubleRange", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  ConstrainDoubleRange* {.importcpp: "client::ConstrainDoubleRange",
                          header: "cheerp/clientlib.h", bycopy.} = object of DoubleRange


  LongRange* {.importcpp: "client::LongRange", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  ConstrainLongRange* {.importcpp: "client::ConstrainLongRange",
                        header: "cheerp/clientlib.h", bycopy.} = object of LongRange


  ConstrainVideoFacingModeParameters* {.importcpp: "client::ConstrainVideoFacingModeParameters",
                                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  ConvolverOptions* {.importcpp: "client::ConvolverOptions",
                      header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  CustomEventInit*[T] {.importcpp: "client::CustomEventInit<\'0>",
                        header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  DOMRectInit* {.importcpp: "client::DOMRectInit", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  DelayOptions* {.importcpp: "client::DelayOptions",
                  header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  DeviceAccelerationDict* {.importcpp: "client::DeviceAccelerationDict",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  DeviceLightEventInit* {.importcpp: "client::DeviceLightEventInit",
                          header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  DeviceMotionEventInit* {.importcpp: "client::DeviceMotionEventInit",
                           header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  DeviceOrientationEventInit* {.importcpp: "client::DeviceOrientationEventInit",
                                header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  DeviceRotationRateDict* {.importcpp: "client::DeviceRotationRateDict",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  DynamicsCompressorOptions* {.importcpp: "client::DynamicsCompressorOptions",
                               header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  EcKeyAlgorithm* {.importcpp: "client::EcKeyAlgorithm",
                    header: "cheerp/clientlib.h", bycopy.} = object of KeyAlgorithm


  EcKeyGenParams* {.importcpp: "client::EcKeyGenParams",
                    header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  EcKeyImportParams* {.importcpp: "client::EcKeyImportParams",
                       header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  EcdhKeyDeriveParams* {.importcpp: "client::EcdhKeyDeriveParams",
                         header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  EcdsaParams* {.importcpp: "client::EcdsaParams", header: "cheerp/clientlib.h",
                 bycopy.} = object of Algorithm


  ErrorEventInit* {.importcpp: "client::ErrorEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  EventModifierInit* {.importcpp: "client::EventModifierInit",
                       header: "cheerp/clientlib.h", bycopy.} = object of UIEventInit


  ExtendableEventInit* {.importcpp: "client::ExtendableEventInit",
                         header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  ExtendableMessageEventInit* {.importcpp: "client::ExtendableMessageEventInit",
                                header: "cheerp/clientlib.h", bycopy.} = object of ExtendableEventInit


  FetchEventInit* {.importcpp: "client::FetchEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of ExtendableEventInit


  FocusEventInit* {.importcpp: "client::FocusEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of UIEventInit


  FocusNavigationEventInit* {.importcpp: "client::FocusNavigationEventInit",
                              header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  FocusNavigationOrigin* {.importcpp: "client::FocusNavigationOrigin",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  GainOptions* {.importcpp: "client::GainOptions", header: "cheerp/clientlib.h",
                 bycopy.} = object of AudioNodeOptions


  GamepadEventInit* {.importcpp: "client::GamepadEventInit",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  GetNotificationOptions* {.importcpp: "client::GetNotificationOptions",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  HashChangeEventInit* {.importcpp: "client::HashChangeEventInit",
                         header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  HkdfParams* {.importcpp: "client::HkdfParams", header: "cheerp/clientlib.h",
                bycopy.} = object of Algorithm


  HmacImportParams* {.importcpp: "client::HmacImportParams",
                      header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  HmacKeyAlgorithm* {.importcpp: "client::HmacKeyAlgorithm",
                      header: "cheerp/clientlib.h", bycopy.} = object of KeyAlgorithm


  HmacKeyGenParams* {.importcpp: "client::HmacKeyGenParams",
                      header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  IDBIndexParameters* {.importcpp: "client::IDBIndexParameters",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  IDBObjectStoreParameters* {.importcpp: "client::IDBObjectStoreParameters",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  IIRFilterOptions* {.importcpp: "client::IIRFilterOptions",
                      header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  IntersectionObserverEntryInit* {.importcpp: "client::IntersectionObserverEntryInit",
                                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  IntersectionObserverInit* {.importcpp: "client::IntersectionObserverInit",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  JsonWebKey* {.importcpp: "client::JsonWebKey", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  KeyboardEventInit* {.importcpp: "client::KeyboardEventInit",
                       header: "cheerp/clientlib.h", bycopy.} = object of EventModifierInit


  MSAccountInfo* {.importcpp: "client::MSAccountInfo",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCStats* {.importcpp: "client::RTCStats", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  MSLocalClientEventBase* {.importcpp: "client::MSLocalClientEventBase",
                            header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  MSAudioLocalClientEvent* {.importcpp: "client::MSAudioLocalClientEvent",
                             header: "cheerp/clientlib.h", bycopy.} = object of MSLocalClientEventBase


  MSPayloadBase* {.importcpp: "client::MSPayloadBase",
                   header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  MSAudioRecvPayload* {.importcpp: "client::MSAudioRecvPayload",
                        header: "cheerp/clientlib.h", bycopy.} = object of MSPayloadBase


  MSAudioRecvSignal* {.importcpp: "client::MSAudioRecvSignal",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSAudioSendPayload* {.importcpp: "client::MSAudioSendPayload",
                        header: "cheerp/clientlib.h", bycopy.} = object of MSPayloadBase


  MSAudioSendSignal* {.importcpp: "client::MSAudioSendSignal",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSConnectivity* {.importcpp: "client::MSConnectivity",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSCredentialFilter* {.importcpp: "client::MSCredentialFilter",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSCredentialParameters* {.importcpp: "client::MSCredentialParameters",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSCredentialSpec* {.importcpp: "client::MSCredentialSpec",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSDCCEventInit* {.importcpp: "client::MSDCCEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MSDSHEventInit* {.importcpp: "client::MSDSHEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MSDelay* {.importcpp: "client::MSDelay", header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSDescription* {.importcpp: "client::MSDescription",
                   header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  MSFIDOCredentialParameters* {.importcpp: "client::MSFIDOCredentialParameters",
                                header: "cheerp/clientlib.h", bycopy.} = object of MSCredentialParameters


  MSIPAddressInfo* {.importcpp: "client::MSIPAddressInfo",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSIceWarningFlags* {.importcpp: "client::MSIceWarningFlags",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSJitter* {.importcpp: "client::MSJitter", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  MSNetwork* {.importcpp: "client::MSNetwork", header: "cheerp/clientlib.h",
               bycopy.} = object of RTCStats


  MSNetworkConnectivityInfo* {.importcpp: "client::MSNetworkConnectivityInfo",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSNetworkInterfaceType* {.importcpp: "client::MSNetworkInterfaceType",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSOutboundNetwork* {.importcpp: "client::MSOutboundNetwork",
                       header: "cheerp/clientlib.h", bycopy.} = object of MSNetwork


  MSPacketLoss* {.importcpp: "client::MSPacketLoss",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSPortRange* {.importcpp: "client::MSPortRange", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  MSRelayAddress* {.importcpp: "client::MSRelayAddress",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSSignatureParameters* {.importcpp: "client::MSSignatureParameters",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSTransportDiagnosticsStats* {.importcpp: "client::MSTransportDiagnosticsStats",
                                 header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  MSUtilization* {.importcpp: "client::MSUtilization",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSVideoPayload* {.importcpp: "client::MSVideoPayload",
                    header: "cheerp/clientlib.h", bycopy.} = object of MSPayloadBase


  MSVideoRecvPayload* {.importcpp: "client::MSVideoRecvPayload",
                        header: "cheerp/clientlib.h", bycopy.} = object of MSVideoPayload


  MSVideoResolutionDistribution* {.importcpp: "client::MSVideoResolutionDistribution",
                                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSVideoSendPayload* {.importcpp: "client::MSVideoSendPayload",
                        header: "cheerp/clientlib.h", bycopy.} = object of MSVideoPayload


  MediaElementAudioSourceOptions* {.importcpp: "client::MediaElementAudioSourceOptions",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaEncryptedEventInit* {.importcpp: "client::MediaEncryptedEventInit",
                             header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MediaKeyMessageEventInit* {.importcpp: "client::MediaKeyMessageEventInit",
                              header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MediaKeySystemConfiguration* {.importcpp: "client::MediaKeySystemConfiguration",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaKeySystemMediaCapability* {.importcpp: "client::MediaKeySystemMediaCapability",
                                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaStreamConstraints* {.importcpp: "client::MediaStreamConstraints",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaStreamErrorEventInit* {.importcpp: "client::MediaStreamErrorEventInit",
                               header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MediaStreamEventInit* {.importcpp: "client::MediaStreamEventInit",
                          header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MediaStreamTrackEventInit* {.importcpp: "client::MediaStreamTrackEventInit",
                               header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MediaTrackCapabilities* {.importcpp: "client::MediaTrackCapabilities",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaTrackConstraintSet* {.importcpp: "client::MediaTrackConstraintSet",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaTrackConstraints* {.importcpp: "client::MediaTrackConstraints",
                           header: "cheerp/clientlib.h", bycopy.} = object of MediaTrackConstraintSet


  MediaTrackSettings* {.importcpp: "client::MediaTrackSettings",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaTrackSupportedConstraints* {.importcpp: "client::MediaTrackSupportedConstraints",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  MessageEventInit* {.importcpp: "client::MessageEventInit",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  MouseEventInit* {.importcpp: "client::MouseEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventModifierInit


  MsZoomToOptions* {.importcpp: "client::MsZoomToOptions",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  MutationObserverInit* {.importcpp: "client::MutationObserverInit",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  NotificationEventInit* {.importcpp: "client::NotificationEventInit",
                           header: "cheerp/clientlib.h", bycopy.} = object of ExtendableEventInit


  NotificationOptions* {.importcpp: "client::NotificationOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  ObjectURLOptions* {.importcpp: "client::ObjectURLOptions",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  OfflineAudioCompletionEventInit* {.importcpp: "client::OfflineAudioCompletionEventInit",
                                     header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  OscillatorOptions* {.importcpp: "client::OscillatorOptions",
                       header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  PannerOptions* {.importcpp: "client::PannerOptions",
                   header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  PaymentCurrencyAmount* {.importcpp: "client::PaymentCurrencyAmount",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentDetailsBase* {.importcpp: "client::PaymentDetailsBase",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentDetailsInit* {.importcpp: "client::PaymentDetailsInit",
                        header: "cheerp/clientlib.h", bycopy.} = object of PaymentDetailsBase


  PaymentDetailsModifier* {.importcpp: "client::PaymentDetailsModifier",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentDetailsUpdate* {.importcpp: "client::PaymentDetailsUpdate",
                          header: "cheerp/clientlib.h", bycopy.} = object of PaymentDetailsBase


  PaymentItem* {.importcpp: "client::PaymentItem", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  PaymentMethodData* {.importcpp: "client::PaymentMethodData",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentOptions* {.importcpp: "client::PaymentOptions",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentRequestUpdateEventInit* {.importcpp: "client::PaymentRequestUpdateEventInit",
                                   header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  PaymentShippingOption* {.importcpp: "client::PaymentShippingOption",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  Pbkdf2Params* {.importcpp: "client::Pbkdf2Params",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  PeriodicWaveConstraints* {.importcpp: "client::PeriodicWaveConstraints",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  PeriodicWaveOptions* {.importcpp: "client::PeriodicWaveOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of PeriodicWaveConstraints


  PointerEventInit* {.importcpp: "client::PointerEventInit",
                      header: "cheerp/clientlib.h", bycopy.} = object of MouseEventInit


  PopStateEventInit* {.importcpp: "client::PopStateEventInit",
                       header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  PositionOptions* {.importcpp: "client::PositionOptions",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  ProgressEventInit* {.importcpp: "client::ProgressEventInit",
                       header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  PushEventInit* {.importcpp: "client::PushEventInit",
                   header: "cheerp/clientlib.h", bycopy.} = object of ExtendableEventInit


  PushSubscriptionChangeInit* {.importcpp: "client::PushSubscriptionChangeInit",
                                header: "cheerp/clientlib.h", bycopy.} = object of ExtendableEventInit


  PushSubscriptionOptionsInit* {.importcpp: "client::PushSubscriptionOptionsInit",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  QueuingStrategy* {.importcpp: "client::QueuingStrategy",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCConfiguration* {.importcpp: "client::RTCConfiguration",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCDTMFToneChangeEventInit* {.importcpp: "client::RTCDTMFToneChangeEventInit",
                                header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  RTCDtlsFingerprint* {.importcpp: "client::RTCDtlsFingerprint",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCDtlsParameters* {.importcpp: "client::RTCDtlsParameters",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceCandidateAttributes* {.importcpp: "client::RTCIceCandidateAttributes",
                               header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  RTCIceCandidateComplete* {.importcpp: "client::RTCIceCandidateComplete",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceCandidateDictionary* {.importcpp: "client::RTCIceCandidateDictionary",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceCandidateInit* {.importcpp: "client::RTCIceCandidateInit",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceCandidatePair* {.importcpp: "client::RTCIceCandidatePair",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceCandidatePairStats* {.importcpp: "client::RTCIceCandidatePairStats",
                              header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  RTCIceGatherOptions* {.importcpp: "client::RTCIceGatherOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceParameters* {.importcpp: "client::RTCIceParameters",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceServer* {.importcpp: "client::RTCIceServer",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRTPStreamStats* {.importcpp: "client::RTCRTPStreamStats",
                       header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  RTCInboundRTPStreamStats* {.importcpp: "client::RTCInboundRTPStreamStats",
                              header: "cheerp/clientlib.h", bycopy.} = object of RTCRTPStreamStats


  RTCMediaStreamTrackStats* {.importcpp: "client::RTCMediaStreamTrackStats",
                              header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  RTCOfferOptions* {.importcpp: "client::RTCOfferOptions",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCOutboundRTPStreamStats* {.importcpp: "client::RTCOutboundRTPStreamStats",
                               header: "cheerp/clientlib.h", bycopy.} = object of RTCRTPStreamStats


  RTCPeerConnectionIceEventInit* {.importcpp: "client::RTCPeerConnectionIceEventInit",
                                   header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  RTCRtcpFeedback* {.importcpp: "client::RTCRtcpFeedback",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtcpParameters* {.importcpp: "client::RTCRtcpParameters",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpCapabilities* {.importcpp: "client::RTCRtpCapabilities",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpCodecCapability* {.importcpp: "client::RTCRtpCodecCapability",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpCodecParameters* {.importcpp: "client::RTCRtpCodecParameters",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpContributingSource* {.importcpp: "client::RTCRtpContributingSource",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpEncodingParameters* {.importcpp: "client::RTCRtpEncodingParameters",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpFecParameters* {.importcpp: "client::RTCRtpFecParameters",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpHeaderExtension* {.importcpp: "client::RTCRtpHeaderExtension",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpHeaderExtensionParameters* {.importcpp: "client::RTCRtpHeaderExtensionParameters",
                                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpParameters* {.importcpp: "client::RTCRtpParameters",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpRtxParameters* {.importcpp: "client::RTCRtpRtxParameters",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpUnhandled* {.importcpp: "client::RTCRtpUnhandled",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSessionDescriptionInit* {.importcpp: "client::RTCSessionDescriptionInit",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSrtpKeyParam* {.importcpp: "client::RTCSrtpKeyParam",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSrtpSdesParameters* {.importcpp: "client::RTCSrtpSdesParameters",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSsrcRange* {.importcpp: "client::RTCSsrcRange",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCStatsReport* {.importcpp: "client::RTCStatsReport",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCTransportStats* {.importcpp: "client::RTCTransportStats",
                       header: "cheerp/clientlib.h", bycopy.} = object of RTCStats


  RegistrationOptions* {.importcpp: "client::RegistrationOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  RequestInit* {.importcpp: "client::RequestInit", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  ResponseInit* {.importcpp: "client::ResponseInit",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  RsaHashedImportParams* {.importcpp: "client::RsaHashedImportParams",
                           header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  RsaKeyAlgorithm* {.importcpp: "client::RsaKeyAlgorithm",
                     header: "cheerp/clientlib.h", bycopy.} = object of KeyAlgorithm


  RsaHashedKeyAlgorithm* {.importcpp: "client::RsaHashedKeyAlgorithm",
                           header: "cheerp/clientlib.h", bycopy.} = object of RsaKeyAlgorithm


  RsaKeyGenParams* {.importcpp: "client::RsaKeyGenParams",
                     header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  RsaHashedKeyGenParams* {.importcpp: "client::RsaHashedKeyGenParams",
                           header: "cheerp/clientlib.h", bycopy.} = object of RsaKeyGenParams


  RsaOaepParams* {.importcpp: "client::RsaOaepParams",
                   header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  RsaOtherPrimesInfo* {.importcpp: "client::RsaOtherPrimesInfo",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  RsaPssParams* {.importcpp: "client::RsaPssParams",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  ScopedCredentialDescriptor* {.importcpp: "client::ScopedCredentialDescriptor",
                                header: "cheerp/clientlib.h", bycopy.} = object of Object


  ScopedCredentialOptions* {.importcpp: "client::ScopedCredentialOptions",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  ScopedCredentialParameters* {.importcpp: "client::ScopedCredentialParameters",
                                header: "cheerp/clientlib.h", bycopy.} = object of Object


  SecurityPolicyViolationEventInit* {.importcpp: "client::SecurityPolicyViolationEventInit",
                                      header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  ServiceWorkerMessageEventInit* {.importcpp: "client::ServiceWorkerMessageEventInit",
                                   header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  SpeechSynthesisEventInit* {.importcpp: "client::SpeechSynthesisEventInit",
                              header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  StereoPannerOptions* {.importcpp: "client::StereoPannerOptions",
                         header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  StoreExceptionsInformation* {.importcpp: "client::StoreExceptionsInformation",
                                header: "cheerp/clientlib.h", bycopy.} = object of ExceptionInformation


  StoreSiteSpecificExceptionsInformation* {.
      importcpp: "client::StoreSiteSpecificExceptionsInformation",
      header: "cheerp/clientlib.h", bycopy.} = object of StoreExceptionsInformation


  SyncEventInit* {.importcpp: "client::SyncEventInit",
                   header: "cheerp/clientlib.h", bycopy.} = object of ExtendableEventInit


  TextDecodeOptions* {.importcpp: "client::TextDecodeOptions",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextDecoderOptions* {.importcpp: "client::TextDecoderOptions",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  TrackEventInit* {.importcpp: "client::TrackEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  TransitionEventInit* {.importcpp: "client::TransitionEventInit",
                         header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  UnderlyingSink* {.importcpp: "client::UnderlyingSink",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  VRDisplayEventInit* {.importcpp: "client::VRDisplayEventInit",
                        header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  VRLayer* {.importcpp: "client::VRLayer", header: "cheerp/clientlib.h", bycopy.} = object of Object


  VRStageParameters* {.importcpp: "client::VRStageParameters",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  WaveShaperOptions* {.importcpp: "client::WaveShaperOptions",
                       header: "cheerp/clientlib.h", bycopy.} = object of AudioNodeOptions


  WebAuthnExtensions* {.importcpp: "client::WebAuthnExtensions",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  WheelEventInit* {.importcpp: "client::WheelEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of MouseEventInit


  ANGLE_instanced_arrays* {.importcpp: "client::ANGLE_instanced_arrays",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  AbortController* {.importcpp: "client::AbortController",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  AbortSignalEventMap* {.importcpp: "client::AbortSignalEventMap",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  EventTarget* {.importcpp: "client::EventTarget", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  AbortSignal* {.importcpp: "client::AbortSignal", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventTarget


  AbstractWorkerEventMap* {.importcpp: "client::AbstractWorkerEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  AbstractWorker* {.importcpp: "client::AbstractWorker",
                    header: "cheerp/clientlib.h", bycopy.} = object


  AesCfbParams* {.importcpp: "client::AesCfbParams",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  AesCmacParams* {.importcpp: "client::AesCmacParams",
                   header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  AudioNode* {.importcpp: "client::AudioNode", header: "cheerp/clientlib.h",
               bycopy.} = object of EventTarget


  AnalyserNode* {.importcpp: "client::AnalyserNode",
                  header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  Animation* {.importcpp: "client::Animation", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  AnimationEffectReadOnly* {.importcpp: "client::AnimationEffectReadOnly",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  Event* {.importcpp: "client::Event", header: "cheerp/clientlib.h", bycopy.} = object of Object


  AnimationEvent* {.importcpp: "client::AnimationEvent",
                    header: "cheerp/clientlib.h", bycopy.} = object of Event


  AnimationKeyFrame* {.importcpp: "client::AnimationKeyFrame",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  AnimationOptions* {.importcpp: "client::AnimationOptions",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  AnimationPlaybackEvent* {.importcpp: "client::AnimationPlaybackEvent",
                            header: "cheerp/clientlib.h", bycopy.} = object of Event


  AnimationPlaybackEventInit* {.importcpp: "client::AnimationPlaybackEventInit",
                                header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  AnimationTimeline* {.importcpp: "client::AnimationTimeline",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  ApplicationCacheEventMap* {.importcpp: "client::ApplicationCacheEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  ApplicationCache* {.importcpp: "client::ApplicationCache",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  AssignedNodesOptions* {.importcpp: "client::AssignedNodesOptions",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  Node* {.importcpp: "client::Node", header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  Attr* {.importcpp: "client::Attr", header: "cheerp/clientlib.h", bycopy.} = object of Node


  AudioBuffer* {.importcpp: "client::AudioBuffer", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  AudioBufferSourceNodeEventMap* {.importcpp: "client::AudioBufferSourceNodeEventMap",
                                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioBufferSourceNode* {.importcpp: "client::AudioBufferSourceNode",
                           header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  AudioContextEventMap* {.importcpp: "client::AudioContextEventMap",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioContextBase* {.importcpp: "client::AudioContextBase",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  AudioContext* {.importcpp: "client::AudioContext",
                  header: "cheerp/clientlib.h", bycopy.} = object of AudioContextBase


  AudioDestinationNode* {.importcpp: "client::AudioDestinationNode",
                          header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  AudioListener* {.importcpp: "client::AudioListener",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioParam* {.importcpp: "client::AudioParam", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  AudioProcessingEvent* {.importcpp: "client::AudioProcessingEvent",
                          header: "cheerp/clientlib.h", bycopy.} = object of Event


  AudioTrack* {.importcpp: "client::AudioTrack", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  AudioTrackListEventMap* {.importcpp: "client::AudioTrackListEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  AudioTrackList* {.importcpp: "client::AudioTrackList",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  BarProp* {.importcpp: "client::BarProp", header: "cheerp/clientlib.h", bycopy.} = object of Object


  BeforeUnloadEvent* {.importcpp: "client::BeforeUnloadEvent",
                       header: "cheerp/clientlib.h", bycopy.} = object of Event


  BhxBrowser* {.importcpp: "client::BhxBrowser", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  BiquadFilterNode* {.importcpp: "client::BiquadFilterNode",
                      header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  Blob* {.importcpp: "client::Blob", header: "cheerp/clientlib.h", bycopy.} = object of Object


  BlobPropertyBag* {.importcpp: "client::BlobPropertyBag",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  Body* {.importcpp: "client::Body", header: "cheerp/clientlib.h", bycopy.} = object of Object


  BroadcastChannel* {.importcpp: "client::BroadcastChannel",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  BroadcastChannelEventMap* {.importcpp: "client::BroadcastChannelEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  ByteLengthQueuingStrategy* {.importcpp: "client::ByteLengthQueuingStrategy",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  ChildNode* {.importcpp: "client::ChildNode", header: "cheerp/clientlib.h",
               bycopy.} = object


  CharacterData* {.importcpp: "client::CharacterData",
                   header: "cheerp/clientlib.h", bycopy.} = object of Node


  Text* {.importcpp: "client::Text", header: "cheerp/clientlib.h", bycopy.} = object of CharacterData


  CDATASection* {.importcpp: "client::CDATASection",
                  header: "cheerp/clientlib.h", bycopy.} = object of Text


  CSS* {.importcpp: "client::CSS", header: "cheerp/clientlib.h", bycopy.} = object of Object


  CSSRule* {.importcpp: "client::CSSRule", header: "cheerp/clientlib.h", bycopy.} = object of Object


  CSSGroupingRule* {.importcpp: "client::CSSGroupingRule",
                     header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  CSSConditionRule* {.importcpp: "client::CSSConditionRule",
                      header: "cheerp/clientlib.h", bycopy.} = object of CSSGroupingRule


  CSSFontFaceRule* {.importcpp: "client::CSSFontFaceRule",
                     header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  CSSImportRule* {.importcpp: "client::CSSImportRule",
                   header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  CSSKeyframeRule* {.importcpp: "client::CSSKeyframeRule",
                     header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  CSSKeyframesRule* {.importcpp: "client::CSSKeyframesRule",
                      header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  CSSMediaRule* {.importcpp: "client::CSSMediaRule",
                  header: "cheerp/clientlib.h", bycopy.} = object of CSSConditionRule


  CSSNamespaceRule* {.importcpp: "client::CSSNamespaceRule",
                      header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  CSSPageRule* {.importcpp: "client::CSSPageRule", header: "cheerp/clientlib.h",
                 bycopy.} = object of CSSRule


  CSSRuleList* {.importcpp: "client::CSSRuleList", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  CSSStyleDeclaration* {.importcpp: "client::CSSStyleDeclaration",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  CSSStyleRule* {.importcpp: "client::CSSStyleRule",
                  header: "cheerp/clientlib.h", bycopy.} = object of CSSRule


  StyleSheet* {.importcpp: "client::StyleSheet", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  CSSStyleSheet* {.importcpp: "client::CSSStyleSheet",
                   header: "cheerp/clientlib.h", bycopy.} = object of StyleSheet


  CSSSupportsRule* {.importcpp: "client::CSSSupportsRule",
                     header: "cheerp/clientlib.h", bycopy.} = object of CSSConditionRule


  Cache* {.importcpp: "client::Cache", header: "cheerp/clientlib.h", bycopy.} = object of Object


  CacheStorage* {.importcpp: "client::CacheStorage",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object ##
                              ## cheerp::interface_name(("delete"))


  Canvas2DContextAttributes* {.importcpp: "client::Canvas2DContextAttributes",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  CanvasGradient* {.importcpp: "client::CanvasGradient",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  CanvasPathMethods* {.importcpp: "client::CanvasPathMethods",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  CanvasPattern* {.importcpp: "client::CanvasPattern",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  CanvasRenderingContext2D* {.importcpp: "client::CanvasRenderingContext2D",
                              header: "cheerp/clientlib.h", bycopy.} = object of CanvasPathMethods


  ChannelMergerNode* {.importcpp: "client::ChannelMergerNode",
                       header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  ChannelSplitterNode* {.importcpp: "client::ChannelSplitterNode",
                         header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  ClientRect* {.importcpp: "client::ClientRect", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  ClientRectList* {.importcpp: "client::ClientRectList",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  ClipboardEvent* {.importcpp: "client::ClipboardEvent",
                    header: "cheerp/clientlib.h", bycopy.} = object of Event


  ClipboardEventInit* {.importcpp: "client::ClipboardEventInit",
                        header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  CloseEvent* {.importcpp: "client::CloseEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of Event


  Comment* {.importcpp: "client::Comment", header: "cheerp/clientlib.h", bycopy.} = object of CharacterData


  UIEvent* {.importcpp: "client::UIEvent", header: "cheerp/clientlib.h", bycopy.} = object of Event


  CompositionEvent* {.importcpp: "client::CompositionEvent",
                      header: "cheerp/clientlib.h", bycopy.} = object of UIEvent


  ComputedTimingProperties* {.importcpp: "client::ComputedTimingProperties",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  ConcatParams* {.importcpp: "client::ConcatParams",
                  header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  Console* {.importcpp: "client::Console", header: "cheerp/clientlib.h", bycopy.} = object of Object


  ContentScriptGlobalScope* {.importcpp: "client::ContentScriptGlobalScope",
                              header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  ConvolverNode* {.importcpp: "client::ConvolverNode",
                   header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  Coordinates* {.importcpp: "client::Coordinates", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  CountQueuingStrategy* {.importcpp: "client::CountQueuingStrategy",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  Crypto* {.importcpp: "client::Crypto", header: "cheerp/clientlib.h", bycopy.} = object of Object


  CryptoKey* {.importcpp: "client::CryptoKey", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  CryptoKeyPair* {.importcpp: "client::CryptoKeyPair",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  CustomElementRegistry* {.importcpp: "client::CustomElementRegistry",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  CustomEvent*[T] {.importcpp: "client::CustomEvent<\'0>",
                    header: "cheerp/clientlib.h", bycopy.} = object of Event


  DOMError* {.importcpp: "client::DOMError", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  DOMException* {.importcpp: "client::DOMException",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  DOMImplementation* {.importcpp: "client::DOMImplementation",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  DOML2DeprecatedColorProperty* {.importcpp: "client::DOML2DeprecatedColorProperty",
                                  header: "cheerp/clientlib.h", bycopy.} = object


  DOML2DeprecatedSizeProperty* {.importcpp: "client::DOML2DeprecatedSizeProperty",
                                 header: "cheerp/clientlib.h", bycopy.} = object


  DOMParser* {.importcpp: "client::DOMParser", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  DOMRectReadOnly* {.importcpp: "client::DOMRectReadOnly",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  DOMRect* {.importcpp: "client::DOMRect", header: "cheerp/clientlib.h", bycopy.} = object of DOMRectReadOnly


  DOMRectList* {.importcpp: "client::DOMRectList", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  DOMTokenList* {.importcpp: "client::DOMTokenList",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  DOMSettableTokenList* {.importcpp: "client::DOMSettableTokenList",
                          header: "cheerp/clientlib.h", bycopy.} = object of DOMTokenList


  DOMStringList* {.importcpp: "client::DOMStringList",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  DOMStringMap* {.importcpp: "client::DOMStringMap",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextTrackCue* {.importcpp: "client::TextTrackCue",
                  header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  DataCue* {.importcpp: "client::DataCue", header: "cheerp/clientlib.h", bycopy.} = object of TextTrackCue


  DataTransfer* {.importcpp: "client::DataTransfer",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  DataTransferItem* {.importcpp: "client::DataTransferItem",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  DataTransferItemList* {.importcpp: "client::DataTransferItemList",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  DeferredPermissionRequest* {.importcpp: "client::DeferredPermissionRequest",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  DelayNode* {.importcpp: "client::DelayNode", header: "cheerp/clientlib.h",
               bycopy.} = object of AudioNode


  DeviceAcceleration* {.importcpp: "client::DeviceAcceleration",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  DeviceLightEvent* {.importcpp: "client::DeviceLightEvent",
                      header: "cheerp/clientlib.h", bycopy.} = object of Event


  DeviceMotionEvent* {.importcpp: "client::DeviceMotionEvent",
                       header: "cheerp/clientlib.h", bycopy.} = object of Event


  DeviceOrientationEvent* {.importcpp: "client::DeviceOrientationEvent",
                            header: "cheerp/clientlib.h", bycopy.} = object of Event


  DeviceRotationRate* {.importcpp: "client::DeviceRotationRate",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  DhImportKeyParams* {.importcpp: "client::DhImportKeyParams",
                       header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  DhKeyAlgorithm* {.importcpp: "client::DhKeyAlgorithm",
                    header: "cheerp/clientlib.h", bycopy.} = object of KeyAlgorithm


  DhKeyDeriveParams* {.importcpp: "client::DhKeyDeriveParams",
                       header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  DhKeyGenParams* {.importcpp: "client::DhKeyGenParams",
                    header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  GlobalEventHandlersEventMap* {.importcpp: "client::GlobalEventHandlersEventMap",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  DocumentEventMap* {.importcpp: "client::DocumentEventMap",
                      header: "cheerp/clientlib.h", bycopy.} = object of GlobalEventHandlersEventMap


  GlobalEventHandlers* {.importcpp: "client::GlobalEventHandlers",
                         header: "cheerp/clientlib.h", bycopy.} = object


  ParentNode* {.importcpp: "client::ParentNode", header: "cheerp/clientlib.h",
                bycopy.} = object


  DocumentEvent* {.importcpp: "client::DocumentEvent",
                   header: "cheerp/clientlib.h", bycopy.} = object


  Document* {.importcpp: "client::Document", header: "cheerp/clientlib.h",
              bycopy.} = object of Node


  DocumentFragment* {.importcpp: "client::DocumentFragment",
                      header: "cheerp/clientlib.h", bycopy.} = object of Node


  DocumentOrShadowRoot* {.importcpp: "client::DocumentOrShadowRoot",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  DocumentType* {.importcpp: "client::DocumentType",
                  header: "cheerp/clientlib.h", bycopy.} = object of Node


  MouseEvent* {.importcpp: "client::MouseEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of UIEvent


  DragEvent* {.importcpp: "client::DragEvent", header: "cheerp/clientlib.h",
               bycopy.} = object of MouseEvent


  DynamicsCompressorNode* {.importcpp: "client::DynamicsCompressorNode",
                            header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  EXT_blend_minmax* {.importcpp: "client::EXT_blend_minmax",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  EXT_frag_depth* {.importcpp: "client::EXT_frag_depth",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  EXT_sRGB* {.importcpp: "client::EXT_sRGB", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  EXT_shader_texture_lod* {.importcpp: "client::EXT_shader_texture_lod",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  EXT_texture_filter_anisotropic* {.importcpp: "client::EXT_texture_filter_anisotropic",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  ElementEventMap* {.importcpp: "client::ElementEventMap",
                     header: "cheerp/clientlib.h", bycopy.} = object of GlobalEventHandlersEventMap


  ElementTraversal* {.importcpp: "client::ElementTraversal",
                      header: "cheerp/clientlib.h", bycopy.} = object


  Element* {.importcpp: "client::Element", header: "cheerp/clientlib.h", bycopy.} = object of Node


  ElementCSSInlineStyle* {.importcpp: "client::ElementCSSInlineStyle",
                           header: "cheerp/clientlib.h", bycopy.} = object


  ElementCreationOptions* {.importcpp: "client::ElementCreationOptions",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  ElementDefinitionOptions* {.importcpp: "client::ElementDefinitionOptions",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  ErrorEvent* {.importcpp: "client::ErrorEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of Event


  EventListenerObject* {.importcpp: "client::EventListenerObject",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  EventSource* {.importcpp: "client::EventSource", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventTarget


  EventSourceInit* {.importcpp: "client::EventSourceInit",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  ExtensionScriptApis* {.importcpp: "client::ExtensionScriptApis",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  External* {.importcpp: "client::External", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  File* {.importcpp: "client::File", header: "cheerp/clientlib.h", bycopy.} = object of Blob


  FileList* {.importcpp: "client::FileList", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  FilePropertyBag* {.importcpp: "client::FilePropertyBag",
                     header: "cheerp/clientlib.h", bycopy.} = object of BlobPropertyBag


  FileReaderEventMap* {.importcpp: "client::FileReaderEventMap",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  FileReader* {.importcpp: "client::FileReader", header: "cheerp/clientlib.h",
                bycopy.} = object of EventTarget


  ProgressEvent* {.importcpp: "client::ProgressEvent",
                   header: "cheerp/clientlib.h", bycopy.} = object of Event


  FileReaderProgressEvent* {.importcpp: "client::FileReaderProgressEvent",
                             header: "cheerp/clientlib.h", bycopy.} = object of ProgressEvent


  FocusEvent* {.importcpp: "client::FocusEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of UIEvent


  FocusNavigationEvent* {.importcpp: "client::FocusNavigationEvent",
                          header: "cheerp/clientlib.h", bycopy.} = object of Event


  FormData* {.importcpp: "client::FormData", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  GainNode* {.importcpp: "client::GainNode", header: "cheerp/clientlib.h",
              bycopy.} = object of AudioNode


  Gamepad* {.importcpp: "client::Gamepad", header: "cheerp/clientlib.h", bycopy.} = object of Object


  GamepadButton* {.importcpp: "client::GamepadButton",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  GamepadEvent* {.importcpp: "client::GamepadEvent",
                  header: "cheerp/clientlib.h", bycopy.} = object of Event


  GamepadHapticActuator* {.importcpp: "client::GamepadHapticActuator",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  GamepadPose* {.importcpp: "client::GamepadPose", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  Geolocation* {.importcpp: "client::Geolocation", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  GetSVGDocument* {.importcpp: "client::GetSVGDocument",
                    header: "cheerp/clientlib.h", bycopy.} = object


  GlobalFetch* {.importcpp: "client::GlobalFetch", header: "cheerp/clientlib.h",
                 bycopy.} = object


  HTMLAllCollection* {.importcpp: "client::HTMLAllCollection",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  HTMLElement* {.importcpp: "client::HTMLElement", header: "cheerp/clientlib.h",
                 bycopy.} = object of Element


  HTMLHyperlinkElementUtils* {.importcpp: "client::HTMLHyperlinkElementUtils",
                               header: "cheerp/clientlib.h", bycopy.} = object


  HTMLAnchorElement* {.importcpp: "client::HTMLAnchorElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLAppletElement* {.importcpp: "client::HTMLAppletElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLAreaElement* {.importcpp: "client::HTMLAreaElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLCollectionBase* {.importcpp: "client::HTMLCollectionBase",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  HTMLAreasCollection* {.importcpp: "client::HTMLAreasCollection",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLCollectionBase


  HTMLMediaElement* {.importcpp: "client::HTMLMediaElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLAudioElement* {.importcpp: "client::HTMLAudioElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLMediaElement


  HTMLBRElement* {.importcpp: "client::HTMLBRElement",
                   header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLBaseElement* {.importcpp: "client::HTMLBaseElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLBaseFontElement* {.importcpp: "client::HTMLBaseFontElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLElementEventMap* {.importcpp: "client::HTMLElementEventMap",
                         header: "cheerp/clientlib.h", bycopy.} = object of ElementEventMap


  WindowEventHandlersEventMap* {.importcpp: "client::WindowEventHandlersEventMap",
                                 header: "cheerp/clientlib.h", bycopy.} = object


  HTMLBodyElementEventMap* {.importcpp: "client::HTMLBodyElementEventMap",
                             header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementEventMap


  WindowEventHandlers* {.importcpp: "client::WindowEventHandlers",
                         header: "cheerp/clientlib.h", bycopy.} = object


  HTMLBodyElement* {.importcpp: "client::HTMLBodyElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLButtonElement* {.importcpp: "client::HTMLButtonElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLCanvasElement* {.importcpp: "client::HTMLCanvasElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLCollection* {.importcpp: "client::HTMLCollection",
                    header: "cheerp/clientlib.h", bycopy.} = object of HTMLCollectionBase


  HTMLCollectionOf*[T] {.importcpp: "client::HTMLCollectionOf<\'0>",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLCollectionBase


  HTMLDListElement* {.importcpp: "client::HTMLDListElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDataElement* {.importcpp: "client::HTMLDataElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDataListElement* {.importcpp: "client::HTMLDataListElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDetailsElement* {.importcpp: "client::HTMLDetailsElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDialogElement* {.importcpp: "client::HTMLDialogElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDirectoryElement* {.importcpp: "client::HTMLDirectoryElement",
                          header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDivElement* {.importcpp: "client::HTMLDivElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLDocument* {.importcpp: "client::HTMLDocument",
                  header: "cheerp/clientlib.h", bycopy.} = object of Document


  HTMLEmbedElement* {.importcpp: "client::HTMLEmbedElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLFieldSetElement* {.importcpp: "client::HTMLFieldSetElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLFontElement* {.importcpp: "client::HTMLFontElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLFormControlsCollection* {.importcpp: "client::HTMLFormControlsCollection",
                                header: "cheerp/clientlib.h", bycopy.} = object of HTMLCollectionBase


  HTMLFormElement* {.importcpp: "client::HTMLFormElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLFrameElementEventMap* {.importcpp: "client::HTMLFrameElementEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementEventMap


  HTMLFrameElement* {.importcpp: "client::HTMLFrameElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLFrameSetElementEventMap* {.importcpp: "client::HTMLFrameSetElementEventMap",
                                 header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementEventMap


  HTMLFrameSetElement* {.importcpp: "client::HTMLFrameSetElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLHRElement* {.importcpp: "client::HTMLHRElement",
                   header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLHeadElement* {.importcpp: "client::HTMLHeadElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLHeadingElement* {.importcpp: "client::HTMLHeadingElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLHtmlElement* {.importcpp: "client::HTMLHtmlElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLIFrameElementEventMap* {.importcpp: "client::HTMLIFrameElementEventMap",
                               header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementEventMap


  HTMLIFrameElement* {.importcpp: "client::HTMLIFrameElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLImageElement* {.importcpp: "client::HTMLImageElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLInputElement* {.importcpp: "client::HTMLInputElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLLIElement* {.importcpp: "client::HTMLLIElement",
                   header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLLabelElement* {.importcpp: "client::HTMLLabelElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLLegendElement* {.importcpp: "client::HTMLLegendElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  LinkStyle* {.importcpp: "client::LinkStyle", header: "cheerp/clientlib.h",
               bycopy.} = object


  HTMLLinkElement* {.importcpp: "client::HTMLLinkElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLMainElement* {.importcpp: "client::HTMLMainElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLMapElement* {.importcpp: "client::HTMLMapElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLMarqueeElementEventMap* {.importcpp: "client::HTMLMarqueeElementEventMap",
                                header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementEventMap


  HTMLMarqueeElement* {.importcpp: "client::HTMLMarqueeElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLMediaElementEventMap* {.importcpp: "client::HTMLMediaElementEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementEventMap


  HTMLMenuElement* {.importcpp: "client::HTMLMenuElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLMetaElement* {.importcpp: "client::HTMLMetaElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLMeterElement* {.importcpp: "client::HTMLMeterElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLModElement* {.importcpp: "client::HTMLModElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLOListElement* {.importcpp: "client::HTMLOListElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLObjectElement* {.importcpp: "client::HTMLObjectElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLOptGroupElement* {.importcpp: "client::HTMLOptGroupElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLOptionElement* {.importcpp: "client::HTMLOptionElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLOptionsCollection* {.importcpp: "client::HTMLOptionsCollection",
                           header: "cheerp/clientlib.h", bycopy.} = object of HTMLCollectionOf[
      HTMLOptionElement]


  HTMLOutputElement* {.importcpp: "client::HTMLOutputElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLParagraphElement* {.importcpp: "client::HTMLParagraphElement",
                          header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLParamElement* {.importcpp: "client::HTMLParamElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLPictureElement* {.importcpp: "client::HTMLPictureElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLPreElement* {.importcpp: "client::HTMLPreElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLProgressElement* {.importcpp: "client::HTMLProgressElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLQuoteElement* {.importcpp: "client::HTMLQuoteElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLScriptElement* {.importcpp: "client::HTMLScriptElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLSelectElement* {.importcpp: "client::HTMLSelectElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLSlotElement* {.importcpp: "client::HTMLSlotElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLSourceElement* {.importcpp: "client::HTMLSourceElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLSpanElement* {.importcpp: "client::HTMLSpanElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLStyleElement* {.importcpp: "client::HTMLStyleElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLSummaryElement* {.importcpp: "client::HTMLSummaryElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTableCaptionElement* {.importcpp: "client::HTMLTableCaptionElement",
                             header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTableCellElement* {.importcpp: "client::HTMLTableCellElement",
                          header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTableColElement* {.importcpp: "client::HTMLTableColElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTableDataCellElement* {.importcpp: "client::HTMLTableDataCellElement",
                              header: "cheerp/clientlib.h", bycopy.} = object of HTMLTableCellElement


  HTMLTableElement* {.importcpp: "client::HTMLTableElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTableHeaderCellElement* {.importcpp: "client::HTMLTableHeaderCellElement",
                                header: "cheerp/clientlib.h", bycopy.} = object of HTMLTableCellElement


  HTMLTableRowElement* {.importcpp: "client::HTMLTableRowElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTableSectionElement* {.importcpp: "client::HTMLTableSectionElement",
                             header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTemplateElement* {.importcpp: "client::HTMLTemplateElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTextAreaElement* {.importcpp: "client::HTMLTextAreaElement",
                         header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTimeElement* {.importcpp: "client::HTMLTimeElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTitleElement* {.importcpp: "client::HTMLTitleElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLTrackElement* {.importcpp: "client::HTMLTrackElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLUListElement* {.importcpp: "client::HTMLUListElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLUnknownElement* {.importcpp: "client::HTMLUnknownElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of HTMLElement


  HTMLVideoElementEventMap* {.importcpp: "client::HTMLVideoElementEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of HTMLMediaElementEventMap


  HTMLVideoElement* {.importcpp: "client::HTMLVideoElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of HTMLMediaElement


  HTMLegendElement* {.importcpp: "client::HTMLegendElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  HashChangeEvent* {.importcpp: "client::HashChangeEvent",
                     header: "cheerp/clientlib.h", bycopy.} = object of Event


  Headers* {.importcpp: "client::Headers", header: "cheerp/clientlib.h", bycopy.} = object of Object


  History* {.importcpp: "client::History", header: "cheerp/clientlib.h", bycopy.} = object of Object


  HkdfCtrParams* {.importcpp: "client::HkdfCtrParams",
                   header: "cheerp/clientlib.h", bycopy.} = object of Algorithm


  IDBArrayKey* {.importcpp: "client::IDBArrayKey", header: "cheerp/clientlib.h",
                 bycopy.} = object of Array


  IDBCursor* {.importcpp: "client::IDBCursor", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  IDBCursorWithValue* {.importcpp: "client::IDBCursorWithValue",
                        header: "cheerp/clientlib.h", bycopy.} = object of IDBCursor


  IDBDatabaseEventMap* {.importcpp: "client::IDBDatabaseEventMap",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  IDBDatabase* {.importcpp: "client::IDBDatabase", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventTarget


  IDBEnvironment* {.importcpp: "client::IDBEnvironment",
                    header: "cheerp/clientlib.h", bycopy.} = object


  IDBFactory* {.importcpp: "client::IDBFactory", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  IDBIndex* {.importcpp: "client::IDBIndex", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  IDBKeyRange* {.importcpp: "client::IDBKeyRange", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  IDBObjectStore* {.importcpp: "client::IDBObjectStore",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  IDBRequestEventMap* {.importcpp: "client::IDBRequestEventMap",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  IDBOpenDBRequestEventMap* {.importcpp: "client::IDBOpenDBRequestEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of IDBRequestEventMap


  IDBRequest* {.importcpp: "client::IDBRequest", header: "cheerp/clientlib.h",
                bycopy.} = object of EventTarget


  IDBOpenDBRequest* {.importcpp: "client::IDBOpenDBRequest",
                      header: "cheerp/clientlib.h", bycopy.} = object of IDBRequest


  IDBTransactionEventMap* {.importcpp: "client::IDBTransactionEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  IDBTransaction* {.importcpp: "client::IDBTransaction",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  IDBVersionChangeEvent* {.importcpp: "client::IDBVersionChangeEvent",
                           header: "cheerp/clientlib.h", bycopy.} = object of Event


  IIRFilterNode* {.importcpp: "client::IIRFilterNode",
                   header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  ImageBitmap* {.importcpp: "client::ImageBitmap", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  ImageBitmapOptions* {.importcpp: "client::ImageBitmapOptions",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  ImageData* {.importcpp: "client::ImageData", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  IntersectionObserver* {.importcpp: "client::IntersectionObserver",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  IntersectionObserverEntry* {.importcpp: "client::IntersectionObserverEntry",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  KeyboardEvent* {.importcpp: "client::KeyboardEvent",
                   header: "cheerp/clientlib.h", bycopy.} = object of UIEvent


  ListeningStateChangedEvent* {.importcpp: "client::ListeningStateChangedEvent",
                                header: "cheerp/clientlib.h", bycopy.} = object of Event


  Location* {.importcpp: "client::Location", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  MSAssertion* {.importcpp: "client::MSAssertion", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  MSBlobBuilder* {.importcpp: "client::MSBlobBuilder",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSCredentials* {.importcpp: "client::MSCredentials",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSDCCEvent* {.importcpp: "client::MSDCCEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of Event


  MSDSHEvent* {.importcpp: "client::MSDSHEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of Event


  MSFIDOCredentialAssertion* {.importcpp: "client::MSFIDOCredentialAssertion",
                               header: "cheerp/clientlib.h", bycopy.} = object of MSAssertion


  MSFIDOSignature* {.importcpp: "client::MSFIDOSignature",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSFIDOSignatureAssertion* {.importcpp: "client::MSFIDOSignatureAssertion",
                              header: "cheerp/clientlib.h", bycopy.} = object of MSAssertion


  MSFileSaver* {.importcpp: "client::MSFileSaver", header: "cheerp/clientlib.h",
                 bycopy.} = object


  MSGesture* {.importcpp: "client::MSGesture", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  MSGestureEvent* {.importcpp: "client::MSGestureEvent",
                    header: "cheerp/clientlib.h", bycopy.} = object of UIEvent


  MSGraphicsTrust* {.importcpp: "client::MSGraphicsTrust",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSInputMethodContextEventMap* {.importcpp: "client::MSInputMethodContextEventMap",
                                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSInputMethodContext* {.importcpp: "client::MSInputMethodContext",
                          header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  MSMediaKeyError* {.importcpp: "client::MSMediaKeyError",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSMediaKeyMessageEvent* {.importcpp: "client::MSMediaKeyMessageEvent",
                            header: "cheerp/clientlib.h", bycopy.} = object of Event


  MSMediaKeyNeededEvent* {.importcpp: "client::MSMediaKeyNeededEvent",
                           header: "cheerp/clientlib.h", bycopy.} = object of Event


  MSMediaKeySession* {.importcpp: "client::MSMediaKeySession",
                       header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  MSMediaKeys* {.importcpp: "client::MSMediaKeys", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  MSNavigatorDoNotTrack* {.importcpp: "client::MSNavigatorDoNotTrack",
                           header: "cheerp/clientlib.h", bycopy.} = object


  MSPointerEvent* {.importcpp: "client::MSPointerEvent",
                    header: "cheerp/clientlib.h", bycopy.} = object of MouseEvent


  MSStream* {.importcpp: "client::MSStream", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  MSStreamReaderEventMap* {.importcpp: "client::MSStreamReaderEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSStreamReader* {.importcpp: "client::MSStreamReader",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  MediaDeviceInfo* {.importcpp: "client::MediaDeviceInfo",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaDevicesEventMap* {.importcpp: "client::MediaDevicesEventMap",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaDevices* {.importcpp: "client::MediaDevices",
                  header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  MediaElementAudioSourceNode* {.importcpp: "client::MediaElementAudioSourceNode",
                                 header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  MediaEncryptedEvent* {.importcpp: "client::MediaEncryptedEvent",
                         header: "cheerp/clientlib.h", bycopy.} = object of Event


  MediaError* {.importcpp: "client::MediaError", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  MediaKeyMessageEvent* {.importcpp: "client::MediaKeyMessageEvent",
                          header: "cheerp/clientlib.h", bycopy.} = object of Event


  MediaKeySession* {.importcpp: "client::MediaKeySession",
                     header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  MediaKeyStatusMap* {.importcpp: "client::MediaKeyStatusMap",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaKeySystemAccess* {.importcpp: "client::MediaKeySystemAccess",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaKeys* {.importcpp: "client::MediaKeys", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  MediaList* {.importcpp: "client::MediaList", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  MediaQueryList* {.importcpp: "client::MediaQueryList",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaSource* {.importcpp: "client::MediaSource", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventTarget


  MediaStreamEventMap* {.importcpp: "client::MediaStreamEventMap",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaStream* {.importcpp: "client::MediaStream", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventTarget


  MediaStreamAudioSourceNode* {.importcpp: "client::MediaStreamAudioSourceNode",
                                header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  MediaStreamError* {.importcpp: "client::MediaStreamError",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaStreamErrorEvent* {.importcpp: "client::MediaStreamErrorEvent",
                           header: "cheerp/clientlib.h", bycopy.} = object of Event


  MediaStreamEvent* {.importcpp: "client::MediaStreamEvent",
                      header: "cheerp/clientlib.h", bycopy.} = object of Event


  MediaStreamTrackEventMap* {.importcpp: "client::MediaStreamTrackEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaStreamTrack* {.importcpp: "client::MediaStreamTrack",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  MediaStreamTrackEvent* {.importcpp: "client::MediaStreamTrackEvent",
                           header: "cheerp/clientlib.h", bycopy.} = object of Event


  MessageChannel* {.importcpp: "client::MessageChannel",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  MessageEvent* {.importcpp: "client::MessageEvent",
                  header: "cheerp/clientlib.h", bycopy.} = object of Event


  MessagePortEventMap* {.importcpp: "client::MessagePortEventMap",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  MessagePort* {.importcpp: "client::MessagePort", header: "cheerp/clientlib.h",
                 bycopy.} = object of EventTarget


  MimeType* {.importcpp: "client::MimeType", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  MimeTypeArray* {.importcpp: "client::MimeTypeArray",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  MutationEvent* {.importcpp: "client::MutationEvent",
                   header: "cheerp/clientlib.h", bycopy.} = object of Event


  MutationObserver* {.importcpp: "client::MutationObserver",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  MutationRecord* {.importcpp: "client::MutationRecord",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  NamedNodeMap* {.importcpp: "client::NamedNodeMap",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  NavigatorID* {.importcpp: "client::NavigatorID", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  NavigatorOnLine* {.importcpp: "client::NavigatorOnLine",
                     header: "cheerp/clientlib.h", bycopy.} = object


  NavigatorContentUtils* {.importcpp: "client::NavigatorContentUtils",
                           header: "cheerp/clientlib.h", bycopy.} = object


  NavigatorStorageUtils* {.importcpp: "client::NavigatorStorageUtils",
                           header: "cheerp/clientlib.h", bycopy.} = object


  NavigatorBeacon* {.importcpp: "client::NavigatorBeacon",
                     header: "cheerp/clientlib.h", bycopy.} = object


  NavigatorConcurrentHardware* {.importcpp: "client::NavigatorConcurrentHardware",
                                 header: "cheerp/clientlib.h", bycopy.} = object


  NavigatorUserMedia* {.importcpp: "client::NavigatorUserMedia",
                        header: "cheerp/clientlib.h", bycopy.} = object


  NavigatorLanguage* {.importcpp: "client::NavigatorLanguage",
                       header: "cheerp/clientlib.h", bycopy.} = object


  Navigator* {.importcpp: "client::Navigator", header: "cheerp/clientlib.h",
               bycopy.} = object of NavigatorID


  NodeFilter* {.importcpp: "client::NodeFilter", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  NodeIterator* {.importcpp: "client::NodeIterator",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  NodeList* {.importcpp: "client::NodeList", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  NodeListOf*[TNode] {.importcpp: "client::NodeListOf<\'0>",
                       header: "cheerp/clientlib.h", bycopy.} = object of NodeList


  NodeSelector* {.importcpp: "client::NodeSelector",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  NotificationEventMap* {.importcpp: "client::NotificationEventMap",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  Notification* {.importcpp: "client::Notification",
                  header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  OfflineAudioCompletionEvent* {.importcpp: "client::OfflineAudioCompletionEvent",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Event


  OfflineAudioContextEventMap* {.importcpp: "client::OfflineAudioContextEventMap",
                                 header: "cheerp/clientlib.h", bycopy.} = object of AudioContextEventMap


  OfflineAudioContext* {.importcpp: "client::OfflineAudioContext",
                         header: "cheerp/clientlib.h", bycopy.} = object of AudioContextBase


  OscillatorNodeEventMap* {.importcpp: "client::OscillatorNodeEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  OscillatorNode* {.importcpp: "client::OscillatorNode",
                    header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  OverflowEvent* {.importcpp: "client::OverflowEvent",
                   header: "cheerp/clientlib.h", bycopy.} = object of UIEvent


  PageTransitionEvent* {.importcpp: "client::PageTransitionEvent",
                         header: "cheerp/clientlib.h", bycopy.} = object of Event


  PannerNode* {.importcpp: "client::PannerNode", header: "cheerp/clientlib.h",
                bycopy.} = object of AudioNode


  Path2D* {.importcpp: "client::Path2D", header: "cheerp/clientlib.h", bycopy.} = object of CanvasPathMethods


  PaymentAddress* {.importcpp: "client::PaymentAddress",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentRequestEventMap* {.importcpp: "client::PaymentRequestEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  PaymentRequest* {.importcpp: "client::PaymentRequest",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  PaymentRequestUpdateEvent* {.importcpp: "client::PaymentRequestUpdateEvent",
                               header: "cheerp/clientlib.h", bycopy.} = object of Event


  PaymentResponse* {.importcpp: "client::PaymentResponse",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  PerfWidgetExternal* {.importcpp: "client::PerfWidgetExternal",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  Performance* {.importcpp: "client::Performance", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  PerformanceEntry* {.importcpp: "client::PerformanceEntry",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  PerformanceMark* {.importcpp: "client::PerformanceMark",
                     header: "cheerp/clientlib.h", bycopy.} = object of PerformanceEntry


  PerformanceMeasure* {.importcpp: "client::PerformanceMeasure",
                        header: "cheerp/clientlib.h", bycopy.} = object of PerformanceEntry


  PerformanceNavigation* {.importcpp: "client::PerformanceNavigation",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  PerformanceNavigationTiming* {.importcpp: "client::PerformanceNavigationTiming",
                                 header: "cheerp/clientlib.h", bycopy.} = object of PerformanceEntry


  PerformanceResourceTiming* {.importcpp: "client::PerformanceResourceTiming",
                               header: "cheerp/clientlib.h", bycopy.} = object of PerformanceEntry


  PerformanceTiming* {.importcpp: "client::PerformanceTiming",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  PeriodicWave* {.importcpp: "client::PeriodicWave",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  PermissionRequest* {.importcpp: "client::PermissionRequest",
                       header: "cheerp/clientlib.h", bycopy.} = object of DeferredPermissionRequest


  PermissionRequestedEvent* {.importcpp: "client::PermissionRequestedEvent",
                              header: "cheerp/clientlib.h", bycopy.} = object of Event


  Plugin* {.importcpp: "client::Plugin", header: "cheerp/clientlib.h", bycopy.} = object of Object


  PluginArray* {.importcpp: "client::PluginArray", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  PointerEvent* {.importcpp: "client::PointerEvent",
                  header: "cheerp/clientlib.h", bycopy.} = object of MouseEvent


  PopStateEvent* {.importcpp: "client::PopStateEvent",
                   header: "cheerp/clientlib.h", bycopy.} = object of Event


  Position* {.importcpp: "client::Position", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  PositionError* {.importcpp: "client::PositionError",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  ProcessingInstruction* {.importcpp: "client::ProcessingInstruction",
                           header: "cheerp/clientlib.h", bycopy.} = object of CharacterData


  PromiseRejectionEvent* {.importcpp: "client::PromiseRejectionEvent",
                           header: "cheerp/clientlib.h", bycopy.} = object of Event


  PromiseRejectionEventInit* {.importcpp: "client::PromiseRejectionEventInit",
                               header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  PushManager* {.importcpp: "client::PushManager", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  PushSubscription* {.importcpp: "client::PushSubscription",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  PushSubscriptionOptions* {.importcpp: "client::PushSubscriptionOptions",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCDTMFToneChangeEvent* {.importcpp: "client::RTCDTMFToneChangeEvent",
                            header: "cheerp/clientlib.h", bycopy.} = object of Event


  RTCDtlsTransportEventMap* {.importcpp: "client::RTCDtlsTransportEventMap",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCStatsProvider* {.importcpp: "client::RTCStatsProvider",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  RTCDtlsTransport* {.importcpp: "client::RTCDtlsTransport",
                      header: "cheerp/clientlib.h", bycopy.} = object of RTCStatsProvider


  RTCDtlsTransportStateChangedEvent* {.importcpp: "client::RTCDtlsTransportStateChangedEvent",
                                       header: "cheerp/clientlib.h", bycopy.} = object of Event


  RTCDtmfSenderEventMap* {.importcpp: "client::RTCDtmfSenderEventMap",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCDtmfSender* {.importcpp: "client::RTCDtmfSender",
                   header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  RTCIceCandidate* {.importcpp: "client::RTCIceCandidate",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceCandidatePairChangedEvent* {.importcpp: "client::RTCIceCandidatePairChangedEvent",
                                     header: "cheerp/clientlib.h", bycopy.} = object of Event


  RTCIceGathererEventMap* {.importcpp: "client::RTCIceGathererEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceGatherer* {.importcpp: "client::RTCIceGatherer",
                    header: "cheerp/clientlib.h", bycopy.} = object of RTCStatsProvider


  RTCIceGathererEvent* {.importcpp: "client::RTCIceGathererEvent",
                         header: "cheerp/clientlib.h", bycopy.} = object of Event


  RTCIceTransportEventMap* {.importcpp: "client::RTCIceTransportEventMap",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCIceTransport* {.importcpp: "client::RTCIceTransport",
                     header: "cheerp/clientlib.h", bycopy.} = object of RTCStatsProvider


  RTCIceTransportStateChangedEvent* {.importcpp: "client::RTCIceTransportStateChangedEvent",
                                      header: "cheerp/clientlib.h", bycopy.} = object of Event


  RTCPeerConnectionEventMap* {.importcpp: "client::RTCPeerConnectionEventMap",
                               header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCPeerConnection* {.importcpp: "client::RTCPeerConnection",
                       header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  RTCPeerConnectionIceEvent* {.importcpp: "client::RTCPeerConnectionIceEvent",
                               header: "cheerp/clientlib.h", bycopy.} = object of Event


  RTCRtpReceiverEventMap* {.importcpp: "client::RTCRtpReceiverEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpReceiver* {.importcpp: "client::RTCRtpReceiver",
                    header: "cheerp/clientlib.h", bycopy.} = object of RTCStatsProvider


  RTCRtpSenderEventMap* {.importcpp: "client::RTCRtpSenderEventMap",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCRtpSender* {.importcpp: "client::RTCRtpSender",
                  header: "cheerp/clientlib.h", bycopy.} = object of RTCStatsProvider


  RTCSessionDescription* {.importcpp: "client::RTCSessionDescription",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSrtpSdesTransportEventMap* {.importcpp: "client::RTCSrtpSdesTransportEventMap",
                                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSrtpSdesTransport* {.importcpp: "client::RTCSrtpSdesTransport",
                          header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  RTCSsrcConflictEvent* {.importcpp: "client::RTCSsrcConflictEvent",
                          header: "cheerp/clientlib.h", bycopy.} = object of Event


  RandomSource* {.importcpp: "client::RandomSource",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  Range* {.importcpp: "client::Range", header: "cheerp/clientlib.h", bycopy.} = object of Object


  ReadableStream* {.importcpp: "client::ReadableStream",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  ReadableStreamReader* {.importcpp: "client::ReadableStreamReader",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  Request* {.importcpp: "client::Request", header: "cheerp/clientlib.h", bycopy.} = object of Body


  Response* {.importcpp: "client::Response", header: "cheerp/clientlib.h",
              bycopy.} = object of Body


  SVGElement* {.importcpp: "client::SVGElement", header: "cheerp/clientlib.h",
                bycopy.} = object of Element


  SVGTests* {.importcpp: "client::SVGTests", header: "cheerp/clientlib.h",
              bycopy.} = object


  SVGGraphicsElement* {.importcpp: "client::SVGGraphicsElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGURIReference* {.importcpp: "client::SVGURIReference",
                     header: "cheerp/clientlib.h", bycopy.} = object


  SVGAElement* {.importcpp: "client::SVGAElement", header: "cheerp/clientlib.h",
                 bycopy.} = object of SVGGraphicsElement


  SVGAngle* {.importcpp: "client::SVGAngle", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  SVGAnimatedAngle* {.importcpp: "client::SVGAnimatedAngle",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedBoolean* {.importcpp: "client::SVGAnimatedBoolean",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedEnumeration* {.importcpp: "client::SVGAnimatedEnumeration",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedInteger* {.importcpp: "client::SVGAnimatedInteger",
                        header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedLength* {.importcpp: "client::SVGAnimatedLength",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedLengthList* {.importcpp: "client::SVGAnimatedLengthList",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedNumber* {.importcpp: "client::SVGAnimatedNumber",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedNumberList* {.importcpp: "client::SVGAnimatedNumberList",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedPoints* {.importcpp: "client::SVGAnimatedPoints",
                       header: "cheerp/clientlib.h", bycopy.} = object


  SVGAnimatedPreserveAspectRatio* {.importcpp: "client::SVGAnimatedPreserveAspectRatio",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedRect* {.importcpp: "client::SVGAnimatedRect",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedString* {.importcpp: "client::SVGAnimatedString",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGAnimatedTransformList* {.importcpp: "client::SVGAnimatedTransformList",
                              header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGCircleElement* {.importcpp: "client::SVGCircleElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGUnitTypes* {.importcpp: "client::SVGUnitTypes",
                  header: "cheerp/clientlib.h", bycopy.} = object


  SVGClipPathElement* {.importcpp: "client::SVGClipPathElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGComponentTransferFunctionElement* {.
      importcpp: "client::SVGComponentTransferFunctionElement",
      header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGDefsElement* {.importcpp: "client::SVGDefsElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGDescElement* {.importcpp: "client::SVGDescElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGElementEventMap* {.importcpp: "client::SVGElementEventMap",
                        header: "cheerp/clientlib.h", bycopy.} = object of ElementEventMap


  SVGElementInstance* {.importcpp: "client::SVGElementInstance",
                        header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  SVGElementInstanceList* {.importcpp: "client::SVGElementInstanceList",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGEllipseElement* {.importcpp: "client::SVGEllipseElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGFilterPrimitiveStandardAttributes* {.
      importcpp: "client::SVGFilterPrimitiveStandardAttributes",
      header: "cheerp/clientlib.h", bycopy.} = object


  SVGFEBlendElement* {.importcpp: "client::SVGFEBlendElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEColorMatrixElement* {.importcpp: "client::SVGFEColorMatrixElement",
                             header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEComponentTransferElement* {.importcpp: "client::SVGFEComponentTransferElement",
                                   header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFECompositeElement* {.importcpp: "client::SVGFECompositeElement",
                           header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEConvolveMatrixElement* {.importcpp: "client::SVGFEConvolveMatrixElement",
                                header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEDiffuseLightingElement* {.importcpp: "client::SVGFEDiffuseLightingElement",
                                 header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEDisplacementMapElement* {.importcpp: "client::SVGFEDisplacementMapElement",
                                 header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEDistantLightElement* {.importcpp: "client::SVGFEDistantLightElement",
                              header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEFloodElement* {.importcpp: "client::SVGFEFloodElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEFuncAElement* {.importcpp: "client::SVGFEFuncAElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGComponentTransferFunctionElement


  SVGFEFuncBElement* {.importcpp: "client::SVGFEFuncBElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGComponentTransferFunctionElement


  SVGFEFuncGElement* {.importcpp: "client::SVGFEFuncGElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGComponentTransferFunctionElement


  SVGFEFuncRElement* {.importcpp: "client::SVGFEFuncRElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGComponentTransferFunctionElement


  SVGFEGaussianBlurElement* {.importcpp: "client::SVGFEGaussianBlurElement",
                              header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEImageElement* {.importcpp: "client::SVGFEImageElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEMergeElement* {.importcpp: "client::SVGFEMergeElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEMergeNodeElement* {.importcpp: "client::SVGFEMergeNodeElement",
                           header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEMorphologyElement* {.importcpp: "client::SVGFEMorphologyElement",
                            header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEOffsetElement* {.importcpp: "client::SVGFEOffsetElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFEPointLightElement* {.importcpp: "client::SVGFEPointLightElement",
                            header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFESpecularLightingElement* {.importcpp: "client::SVGFESpecularLightingElement",
                                  header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFESpotLightElement* {.importcpp: "client::SVGFESpotLightElement",
                           header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFETileElement* {.importcpp: "client::SVGFETileElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFETurbulenceElement* {.importcpp: "client::SVGFETurbulenceElement",
                            header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFilterElement* {.importcpp: "client::SVGFilterElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGFitToViewBox* {.importcpp: "client::SVGFitToViewBox",
                     header: "cheerp/clientlib.h", bycopy.} = object


  SVGForeignObjectElement* {.importcpp: "client::SVGForeignObjectElement",
                             header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGGElement* {.importcpp: "client::SVGGElement", header: "cheerp/clientlib.h",
                 bycopy.} = object of SVGGraphicsElement


  SVGGradientElement* {.importcpp: "client::SVGGradientElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGImageElement* {.importcpp: "client::SVGImageElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGLength* {.importcpp: "client::SVGLength", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  SVGLengthList* {.importcpp: "client::SVGLengthList",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGLineElement* {.importcpp: "client::SVGLineElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGLinearGradientElement* {.importcpp: "client::SVGLinearGradientElement",
                              header: "cheerp/clientlib.h", bycopy.} = object of SVGGradientElement


  SVGMarkerElement* {.importcpp: "client::SVGMarkerElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGMaskElement* {.importcpp: "client::SVGMaskElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGMatrix* {.importcpp: "client::SVGMatrix", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  SVGMetadataElement* {.importcpp: "client::SVGMetadataElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGNumber* {.importcpp: "client::SVGNumber", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  SVGNumberList* {.importcpp: "client::SVGNumberList",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGPathElement* {.importcpp: "client::SVGPathElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGPathSeg* {.importcpp: "client::SVGPathSeg", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  SVGPathSegArcAbs* {.importcpp: "client::SVGPathSegArcAbs",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegArcRel* {.importcpp: "client::SVGPathSegArcRel",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegClosePath* {.importcpp: "client::SVGPathSegClosePath",
                         header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoCubicAbs* {.importcpp: "client::SVGPathSegCurvetoCubicAbs",
                               header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoCubicRel* {.importcpp: "client::SVGPathSegCurvetoCubicRel",
                               header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoCubicSmoothAbs* {.importcpp: "client::SVGPathSegCurvetoCubicSmoothAbs",
                                     header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoCubicSmoothRel* {.importcpp: "client::SVGPathSegCurvetoCubicSmoothRel",
                                     header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoQuadraticAbs* {.importcpp: "client::SVGPathSegCurvetoQuadraticAbs",
                                   header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoQuadraticRel* {.importcpp: "client::SVGPathSegCurvetoQuadraticRel",
                                   header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoQuadraticSmoothAbs* {.
      importcpp: "client::SVGPathSegCurvetoQuadraticSmoothAbs",
      header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegCurvetoQuadraticSmoothRel* {.
      importcpp: "client::SVGPathSegCurvetoQuadraticSmoothRel",
      header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegLinetoAbs* {.importcpp: "client::SVGPathSegLinetoAbs",
                         header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegLinetoHorizontalAbs* {.importcpp: "client::SVGPathSegLinetoHorizontalAbs",
                                   header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegLinetoHorizontalRel* {.importcpp: "client::SVGPathSegLinetoHorizontalRel",
                                   header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegLinetoRel* {.importcpp: "client::SVGPathSegLinetoRel",
                         header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegLinetoVerticalAbs* {.importcpp: "client::SVGPathSegLinetoVerticalAbs",
                                 header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegLinetoVerticalRel* {.importcpp: "client::SVGPathSegLinetoVerticalRel",
                                 header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegList* {.importcpp: "client::SVGPathSegList",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGPathSegMovetoAbs* {.importcpp: "client::SVGPathSegMovetoAbs",
                         header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPathSegMovetoRel* {.importcpp: "client::SVGPathSegMovetoRel",
                         header: "cheerp/clientlib.h", bycopy.} = object of SVGPathSeg


  SVGPatternElement* {.importcpp: "client::SVGPatternElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGPoint* {.importcpp: "client::SVGPoint", header: "cheerp/clientlib.h",
              bycopy.} = object of Object


  SVGPointList* {.importcpp: "client::SVGPointList",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGPolygonElement* {.importcpp: "client::SVGPolygonElement",
                       header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGPolylineElement* {.importcpp: "client::SVGPolylineElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGPreserveAspectRatio* {.importcpp: "client::SVGPreserveAspectRatio",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGRadialGradientElement* {.importcpp: "client::SVGRadialGradientElement",
                              header: "cheerp/clientlib.h", bycopy.} = object of SVGGradientElement


  SVGRect* {.importcpp: "client::SVGRect", header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGRectElement* {.importcpp: "client::SVGRectElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGSVGElementEventMap* {.importcpp: "client::SVGSVGElementEventMap",
                           header: "cheerp/clientlib.h", bycopy.} = object of SVGElementEventMap


  SVGZoomAndPan* {.importcpp: "client::SVGZoomAndPan",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGSVGElement* {.importcpp: "client::SVGSVGElement",
                   header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGScriptElement* {.importcpp: "client::SVGScriptElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGStopElement* {.importcpp: "client::SVGStopElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGStringList* {.importcpp: "client::SVGStringList",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGStylable* {.importcpp: "client::SVGStylable", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  SVGStyleElement* {.importcpp: "client::SVGStyleElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGSwitchElement* {.importcpp: "client::SVGSwitchElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGSymbolElement* {.importcpp: "client::SVGSymbolElement",
                      header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGTextContentElement* {.importcpp: "client::SVGTextContentElement",
                           header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGTextPositioningElement* {.importcpp: "client::SVGTextPositioningElement",
                               header: "cheerp/clientlib.h", bycopy.} = object of SVGTextContentElement


  SVGTSpanElement* {.importcpp: "client::SVGTSpanElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of SVGTextPositioningElement


  SVGTextElement* {.importcpp: "client::SVGTextElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGTextPositioningElement


  SVGTextPathElement* {.importcpp: "client::SVGTextPathElement",
                        header: "cheerp/clientlib.h", bycopy.} = object of SVGTextContentElement


  SVGTitleElement* {.importcpp: "client::SVGTitleElement",
                     header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGTransform* {.importcpp: "client::SVGTransform",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGTransformList* {.importcpp: "client::SVGTransformList",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGUseElement* {.importcpp: "client::SVGUseElement",
                   header: "cheerp/clientlib.h", bycopy.} = object of SVGGraphicsElement


  SVGViewElement* {.importcpp: "client::SVGViewElement",
                    header: "cheerp/clientlib.h", bycopy.} = object of SVGElement


  SVGZoomEvent* {.importcpp: "client::SVGZoomEvent",
                  header: "cheerp/clientlib.h", bycopy.} = object of UIEvent


  ScopedCredential* {.importcpp: "client::ScopedCredential",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  ScopedCredentialInfo* {.importcpp: "client::ScopedCredentialInfo",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  ScreenEventMap* {.importcpp: "client::ScreenEventMap",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  Screen* {.importcpp: "client::Screen", header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  ScriptProcessorNodeEventMap* {.importcpp: "client::ScriptProcessorNodeEventMap",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  ScriptProcessorNode* {.importcpp: "client::ScriptProcessorNode",
                         header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  ScrollOptions* {.importcpp: "client::ScrollOptions",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  ScrollIntoViewOptions* {.importcpp: "client::ScrollIntoViewOptions",
                           header: "cheerp/clientlib.h", bycopy.} = object of ScrollOptions


  ScrollToOptions* {.importcpp: "client::ScrollToOptions",
                     header: "cheerp/clientlib.h", bycopy.} = object of ScrollOptions


  SecurityPolicyViolationEvent* {.importcpp: "client::SecurityPolicyViolationEvent",
                                  header: "cheerp/clientlib.h", bycopy.} = object of Event


  Selection* {.importcpp: "client::Selection", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  ServiceUIFrameContext* {.importcpp: "client::ServiceUIFrameContext",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  ServiceWorkerEventMap* {.importcpp: "client::ServiceWorkerEventMap",
                           header: "cheerp/clientlib.h", bycopy.} = object of AbstractWorkerEventMap


  ServiceWorker* {.importcpp: "client::ServiceWorker",
                   header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  ServiceWorkerContainerEventMap* {.importcpp: "client::ServiceWorkerContainerEventMap",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  ServiceWorkerContainer* {.importcpp: "client::ServiceWorkerContainer",
                            header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  ServiceWorkerMessageEvent* {.importcpp: "client::ServiceWorkerMessageEvent",
                               header: "cheerp/clientlib.h", bycopy.} = object of Event


  ServiceWorkerRegistrationEventMap* {.importcpp: "client::ServiceWorkerRegistrationEventMap",
                                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  ServiceWorkerRegistration* {.importcpp: "client::ServiceWorkerRegistration",
                               header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  ShadowRoot* {.importcpp: "client::ShadowRoot", header: "cheerp/clientlib.h",
                bycopy.} = object of DocumentOrShadowRoot


  ShadowRootInit* {.importcpp: "client::ShadowRootInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  SourceBuffer* {.importcpp: "client::SourceBuffer",
                  header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  SourceBufferList* {.importcpp: "client::SourceBufferList",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  SpeechSynthesisEventMap* {.importcpp: "client::SpeechSynthesisEventMap",
                             header: "cheerp/clientlib.h", bycopy.} = object of Object


  SpeechSynthesis* {.importcpp: "client::SpeechSynthesis",
                     header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  SpeechSynthesisEvent* {.importcpp: "client::SpeechSynthesisEvent",
                          header: "cheerp/clientlib.h", bycopy.} = object of Event


  SpeechSynthesisUtteranceEventMap* {.importcpp: "client::SpeechSynthesisUtteranceEventMap",
                                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  SpeechSynthesisUtterance* {.importcpp: "client::SpeechSynthesisUtterance",
                              header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  SpeechSynthesisVoice* {.importcpp: "client::SpeechSynthesisVoice",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  StereoPannerNode* {.importcpp: "client::StereoPannerNode",
                      header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  Storage* {.importcpp: "client::Storage", header: "cheerp/clientlib.h", bycopy.} = object of Object


  StorageEvent* {.importcpp: "client::StorageEvent",
                  header: "cheerp/clientlib.h", bycopy.} = object of Event


  StorageEventInit* {.importcpp: "client::StorageEventInit",
                      header: "cheerp/clientlib.h", bycopy.} = object of EventInit


  StyleMedia* {.importcpp: "client::StyleMedia", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  StyleSheetList* {.importcpp: "client::StyleSheetList",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  SubtleCrypto* {.importcpp: "client::SubtleCrypto",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  SyncManager* {.importcpp: "client::SyncManager", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  TextDecoder* {.importcpp: "client::TextDecoder", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  TextEncoder* {.importcpp: "client::TextEncoder", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  TextEvent* {.importcpp: "client::TextEvent", header: "cheerp/clientlib.h",
               bycopy.} = object of UIEvent


  TextMetrics* {.importcpp: "client::TextMetrics", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  TextTrackEventMap* {.importcpp: "client::TextTrackEventMap",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextTrack* {.importcpp: "client::TextTrack", header: "cheerp/clientlib.h",
               bycopy.} = object of EventTarget


  TextTrackCueEventMap* {.importcpp: "client::TextTrackCueEventMap",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextTrackCueList* {.importcpp: "client::TextTrackCueList",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextTrackListEventMap* {.importcpp: "client::TextTrackListEventMap",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextTrackList* {.importcpp: "client::TextTrackList",
                   header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  TimeRanges* {.importcpp: "client::TimeRanges", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  Touch* {.importcpp: "client::Touch", header: "cheerp/clientlib.h", bycopy.} = object of Object


  TouchEvent* {.importcpp: "client::TouchEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of UIEvent


  TouchEventInit* {.importcpp: "client::TouchEventInit",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventModifierInit


  TouchList* {.importcpp: "client::TouchList", header: "cheerp/clientlib.h",
               bycopy.} = object of Object


  TrackEvent* {.importcpp: "client::TrackEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of Event


  TransitionEvent* {.importcpp: "client::TransitionEvent",
                     header: "cheerp/clientlib.h", bycopy.} = object of Event


  TreeWalker* {.importcpp: "client::TreeWalker", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  URL* {.importcpp: "client::URL", header: "cheerp/clientlib.h", bycopy.} = object of Object


  URLSearchParams* {.importcpp: "client::URLSearchParams",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  VRDisplay* {.importcpp: "client::VRDisplay", header: "cheerp/clientlib.h",
               bycopy.} = object of EventTarget


  VRDisplayCapabilities* {.importcpp: "client::VRDisplayCapabilities",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  VRDisplayEvent* {.importcpp: "client::VRDisplayEvent",
                    header: "cheerp/clientlib.h", bycopy.} = object of Event


  VREyeParameters* {.importcpp: "client::VREyeParameters",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  VRFieldOfView* {.importcpp: "client::VRFieldOfView",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  VRFrameData* {.importcpp: "client::VRFrameData", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  VRPose* {.importcpp: "client::VRPose", header: "cheerp/clientlib.h", bycopy.} = object of Object


  ValidityState* {.importcpp: "client::ValidityState",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  VideoPlaybackQuality* {.importcpp: "client::VideoPlaybackQuality",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  VideoTrack* {.importcpp: "client::VideoTrack", header: "cheerp/clientlib.h",
                bycopy.} = object of Object


  VideoTrackListEventMap* {.importcpp: "client::VideoTrackListEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  VideoTrackList* {.importcpp: "client::VideoTrackList",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  WaveShaperNode* {.importcpp: "client::WaveShaperNode",
                    header: "cheerp/clientlib.h", bycopy.} = object of AudioNode


  WebAuthentication* {.importcpp: "client::WebAuthentication",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  WebAuthnAssertion* {.importcpp: "client::WebAuthnAssertion",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  WebKitCSSMatrix* {.importcpp: "client::WebKitCSSMatrix",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  WebKitEntry* {.importcpp: "client::WebKitEntry", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  WebKitDirectoryEntry* {.importcpp: "client::WebKitDirectoryEntry",
                          header: "cheerp/clientlib.h", bycopy.} = object of WebKitEntry


  WebKitDirectoryReader* {.importcpp: "client::WebKitDirectoryReader",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  WebKitFileEntry* {.importcpp: "client::WebKitFileEntry",
                     header: "cheerp/clientlib.h", bycopy.} = object of WebKitEntry


  WebKitFileSystem* {.importcpp: "client::WebKitFileSystem",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  WebKitPoint* {.importcpp: "client::WebKitPoint", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  WebSocketEventMap* {.importcpp: "client::WebSocketEventMap",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  WebSocket* {.importcpp: "client::WebSocket", header: "cheerp/clientlib.h",
               bycopy.} = object of EventTarget


  WheelEvent* {.importcpp: "client::WheelEvent", header: "cheerp/clientlib.h",
                bycopy.} = object of MouseEvent


  WindowEventMap* {.importcpp: "client::WindowEventMap",
                    header: "cheerp/clientlib.h", bycopy.} = object of GlobalEventHandlersEventMap


  WindowTimersExtension* {.importcpp: "client::WindowTimersExtension",
                           header: "cheerp/clientlib.h", inheritable, pure,
                           bycopy.} = object


  WindowTimers* {.importcpp: "client::WindowTimers",
                  header: "cheerp/clientlib.h", bycopy.} = object of WindowTimersExtension


  WindowSessionStorage* {.importcpp: "client::WindowSessionStorage",
                          header: "cheerp/clientlib.h", bycopy.} = object


  WindowLocalStorage* {.importcpp: "client::WindowLocalStorage",
                        header: "cheerp/clientlib.h", bycopy.} = object


  WindowConsole* {.importcpp: "client::WindowConsole",
                   header: "cheerp/clientlib.h", bycopy.} = object


  WindowBase64* {.importcpp: "client::WindowBase64",
                  header: "cheerp/clientlib.h", bycopy.} = object


  Window* {.importcpp: "client::Window", header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  WorkerEventMap* {.importcpp: "client::WorkerEventMap",
                    header: "cheerp/clientlib.h", bycopy.} = object of AbstractWorkerEventMap


  Worker* {.importcpp: "client::Worker", header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  WritableStream* {.importcpp: "client::WritableStream",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  WritableStreamDefaultController* {.importcpp: "client::WritableStreamDefaultController",
                                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  WritableStreamDefaultWriter* {.importcpp: "client::WritableStreamDefaultWriter",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  XMLDocument* {.importcpp: "client::XMLDocument", header: "cheerp/clientlib.h",
                 bycopy.} = object of Document


  XMLHttpRequestEventTargetEventMap* {.importcpp: "client::XMLHttpRequestEventTargetEventMap",
                                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  XMLHttpRequestEventMap* {.importcpp: "client::XMLHttpRequestEventMap",
                            header: "cheerp/clientlib.h", bycopy.} = object of XMLHttpRequestEventTargetEventMap


  XMLHttpRequestEventTarget* {.importcpp: "client::XMLHttpRequestEventTarget",
                               header: "cheerp/clientlib.h", bycopy.} = object


  XMLHttpRequest* {.importcpp: "client::XMLHttpRequest",
                    header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  XMLHttpRequestUpload* {.importcpp: "client::XMLHttpRequestUpload",
                          header: "cheerp/clientlib.h", bycopy.} = object of EventTarget


  XMLSerializer* {.importcpp: "client::XMLSerializer",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  XPathEvaluator* {.importcpp: "client::XPathEvaluator",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  XPathExpression* {.importcpp: "client::XPathExpression",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  XPathNSResolver* {.importcpp: "client::XPathNSResolver",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  XPathResult* {.importcpp: "client::XPathResult", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  XSLTProcessor* {.importcpp: "client::XSLTProcessor",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  webkitRTCPeerConnection* {.importcpp: "client::webkitRTCPeerConnection",
                             header: "cheerp/clientlib.h", bycopy.} = object of RTCPeerConnection


  DecodeErrorCallback* {.importcpp: "client::DecodeErrorCallback",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  DecodeSuccessCallback* {.importcpp: "client::DecodeSuccessCallback",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  ErrorEventHandler* {.importcpp: "client::ErrorEventHandler",
                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  EventHandlerNonNull* {.importcpp: "client::EventHandlerNonNull",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  ForEachCallback* {.importcpp: "client::ForEachCallback",
                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  FrameRequestCallback* {.importcpp: "client::FrameRequestCallback",
                          header: "cheerp/clientlib.h", bycopy.} = object of Object


  FunctionStringCallback* {.importcpp: "client::FunctionStringCallback",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  IntersectionObserverCallback* {.importcpp: "client::IntersectionObserverCallback",
                                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  MSLaunchUriCallback* {.importcpp: "client::MSLaunchUriCallback",
                         header: "cheerp/clientlib.h", bycopy.} = object of Object


  MediaQueryListListener* {.importcpp: "client::MediaQueryListListener",
                            header: "cheerp/clientlib.h", bycopy.} = object of Object


  MutationCallback* {.importcpp: "client::MutationCallback",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  NavigatorUserMediaErrorCallback* {.importcpp: "client::NavigatorUserMediaErrorCallback",
                                     header: "cheerp/clientlib.h", bycopy.} = object of Object


  NavigatorUserMediaSuccessCallback* {.importcpp: "client::NavigatorUserMediaSuccessCallback",
                                       header: "cheerp/clientlib.h", bycopy.} = object of Object


  NotificationPermissionCallback* {.importcpp: "client::NotificationPermissionCallback",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  PositionCallback* {.importcpp: "client::PositionCallback",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  PositionErrorCallback* {.importcpp: "client::PositionErrorCallback",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCPeerConnectionErrorCallback* {.importcpp: "client::RTCPeerConnectionErrorCallback",
                                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCSessionDescriptionCallback* {.importcpp: "client::RTCSessionDescriptionCallback",
                                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  RTCStatsCallback* {.importcpp: "client::RTCStatsCallback",
                      header: "cheerp/clientlib.h", bycopy.} = object of Object


  VoidFunction* {.importcpp: "client::VoidFunction",
                  header: "cheerp/clientlib.h", bycopy.} = object of Object


  WritableStreamChunkCallback* {.importcpp: "client::WritableStreamChunkCallback",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  WritableStreamDefaultControllerCallback* {.
      importcpp: "client::WritableStreamDefaultControllerCallback",
      header: "cheerp/clientlib.h", bycopy.} = object of Object


  WritableStreamErrorCallback* {.importcpp: "client::WritableStreamErrorCallback",
                                 header: "cheerp/clientlib.h", bycopy.} = object of Object


  HTMLElementTagNameMap* {.importcpp: "client::HTMLElementTagNameMap",
                           header: "cheerp/clientlib.h", bycopy.} = object of Object


  SVGElementTagNameMap* {.importcpp: "client::SVGElementTagNameMap",
                          header: "cheerp/clientlib.h", bycopy.} = object


  ElementTagNameMap* {.importcpp: "client::ElementTagNameMap",
                       header: "cheerp/clientlib.h", bycopy.} = object of HTMLElementTagNameMap


  ActiveXObject* {.importcpp: "client::ActiveXObject",
                   header: "cheerp/clientlib.h", bycopy.} = object of Object


  ITextWriter* {.importcpp: "client::ITextWriter", header: "cheerp/clientlib.h",
                 bycopy.} = object of Object


  TextStreamBase* {.importcpp: "client::TextStreamBase",
                    header: "cheerp/clientlib.h", bycopy.} = object of Object


  TextStreamWriter* {.importcpp: "client::TextStreamWriter",
                      header: "cheerp/clientlib.h", bycopy.} = object of TextStreamBase


  TextStreamReader* {.importcpp: "client::TextStreamReader",
                      header: "cheerp/clientlib.h", bycopy.} = object of TextStreamBase



proc get_configurable*(this: var PropertyDescriptor): bool {.
    importcpp: "get_configurable", header: "cheerp/clientlib.h".}

proc set_configurable*(this: var PropertyDescriptor; a2: bool) {.
    importcpp: "set_configurable", header: "cheerp/clientlib.h".}

proc get_enumerable*(this: var PropertyDescriptor): bool {.
    importcpp: "get_enumerable", header: "cheerp/clientlib.h".}

proc set_enumerable*(this: var PropertyDescriptor; a2: bool) {.
    importcpp: "set_enumerable", header: "cheerp/clientlib.h".}

proc set_value*(this: var PropertyDescriptor; a2: ptr Object) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_writable*(this: var PropertyDescriptor): bool {.
    importcpp: "get_writable", header: "cheerp/clientlib.h".}

proc set_writable*(this: var PropertyDescriptor; a2: bool) {.
    importcpp: "set_writable", header: "cheerp/clientlib.h".}

proc set*(this: var PropertyDescriptor; v: ptr Object) {.importcpp: "set",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var PropertyDescriptorMap; index: cint): ptr PropertyDescriptor {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: PropertyDescriptorMap; index: cint): ptr PropertyDescriptor {.
    noSideEffect, importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: var IArguments; index: cint): ptr Object {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: IArguments; index: cint): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_length*(this: var IArguments): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var IArguments; a2: cdouble) {.importcpp: "set_length",
    header: "cheerp/clientlib.h".}

proc get_callee*(this: var IArguments): ptr Function {.importcpp: "get_callee",
    header: "cheerp/clientlib.h".}

proc set_callee*(this: var IArguments; a2: ptr Function) {.
    importcpp: "set_callee", header: "cheerp/clientlib.h".}

proc get_length*[T](this: var ReadonlyArray[T]): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc toString*[T](this: var ReadonlyArray[T]): ptr String {.
    importcpp: "toString", header: "cheerp/clientlib.h".}

proc toLocaleString*[T](this: var ReadonlyArray[T]): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc concat*[T](this: var ReadonlyArray[T]): ptr Array {.importcpp: "concat",
    header: "cheerp/clientlib.h".}

proc join*[T](this: var ReadonlyArray[T]): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*[T](this: var ReadonlyArray[T]; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc slice*[T](this: var ReadonlyArray[T]): ptr Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*[T](this: var ReadonlyArray[T]; start: cdouble): ptr Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*[T](this: var ReadonlyArray[T]; start: cdouble; `end`: cdouble): ptr Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc indexOf*[T](this: var ReadonlyArray[T]; searchElement: ptr T): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*[T](this: var ReadonlyArray[T]; searchElement: ptr T;
                 fromIndex: cdouble): cdouble {.importcpp: "indexOf",
    header: "cheerp/clientlib.h".}

proc lastIndexOf*[T](this: var ReadonlyArray[T]; searchElement: ptr T): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*[T](this: var ReadonlyArray[T]; searchElement: ptr T;
                     fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc every*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
               thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc some*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
              thisArg: ptr Object): bool {.importcpp: "some",
    header: "cheerp/clientlib.h".}

proc forEach*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
                 thisArg: ptr Object) {.importcpp: "forEach",
                                        header: "cheerp/clientlib.h".}

proc map*[T; U](this: var ReadonlyArray[T]; callbackfn: ptr EventListener): ptr Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*[T; U](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
                thisArg: ptr Object): ptr Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc filter*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener): ptr Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
                thisArg: ptr Object): ptr Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc reduce*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener): ptr T {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
                initialValue: ptr T): ptr T {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[T; U](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
                   initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener): ptr T {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*[T](this: var ReadonlyArray[T]; callbackfn: ptr EventListener;
                     initialValue: ptr T): ptr T {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[T; U](this: var ReadonlyArray[T];
                        callbackfn: ptr EventListener; initialValue: ptr U): ptr U {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc `[]`*[T](this: var ReadonlyArray[T]; index: cint): ptr T {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*[T](this: ReadonlyArray[T]; index: cint): ptr T {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_raw*(this: var TemplateStringsArray): ptr ReadonlyArray[String] {.
    importcpp: "get_raw", header: "cheerp/clientlib.h".}

proc get_E*(this: var Math): cdouble {.importcpp: "get_E",
                                       header: "cheerp/clientlib.h".}

proc get_LN10*(this: var Math): cdouble {.importcpp: "get_LN10",
    header: "cheerp/clientlib.h".}

proc get_LN2*(this: var Math): cdouble {.importcpp: "get_LN2",
    header: "cheerp/clientlib.h".}

proc get_LOG2E*(this: var Math): cdouble {.importcpp: "get_LOG2E",
    header: "cheerp/clientlib.h".}

proc get_LOG10E*(this: var Math): cdouble {.importcpp: "get_LOG10E",
    header: "cheerp/clientlib.h".}

proc get_PI*(this: var Math): cdouble {.importcpp: "get_PI",
                                        header: "cheerp/clientlib.h".}

proc get_SQRT1_2*(this: var Math): cdouble {.importcpp: "get_SQRT1_2",
    header: "cheerp/clientlib.h".}

proc get_SQRT2*(this: var Math): cdouble {.importcpp: "get_SQRT2",
    header: "cheerp/clientlib.h".}

proc abs*(this: var Math; x: cdouble): cdouble {.importcpp: "abs",
    header: "cheerp/clientlib.h".}

proc acos*(this: var Math; x: cdouble): cdouble {.importcpp: "acos",
    header: "cheerp/clientlib.h".}

proc asin*(this: var Math; x: cdouble): cdouble {.importcpp: "asin",
    header: "cheerp/clientlib.h".}

proc atan*(this: var Math; x: cdouble): cdouble {.importcpp: "atan",
    header: "cheerp/clientlib.h".}

proc atan2*(this: var Math; y: cdouble; x: cdouble): cdouble {.
    importcpp: "atan2", header: "cheerp/clientlib.h".}

proc ceil*(this: var Math; x: cdouble): cdouble {.importcpp: "ceil",
    header: "cheerp/clientlib.h".}

proc cos*(this: var Math; x: cdouble): cdouble {.importcpp: "cos",
    header: "cheerp/clientlib.h".}

proc exp*(this: var Math; x: cdouble): cdouble {.importcpp: "exp",
    header: "cheerp/clientlib.h".}

proc floor*(this: var Math; x: cdouble): cdouble {.importcpp: "floor",
    header: "cheerp/clientlib.h".}

proc log*(this: var Math; x: cdouble): cdouble {.importcpp: "log",
    header: "cheerp/clientlib.h".}

proc max*(this: var Math): cdouble {.importcpp: "max",
                                     header: "cheerp/clientlib.h".}

proc min*(this: var Math): cdouble {.importcpp: "min",
                                     header: "cheerp/clientlib.h".}

proc pow*(this: var Math; x: cdouble; y: cdouble): cdouble {.importcpp: "pow",
    header: "cheerp/clientlib.h".}

proc random*(this: var Math): cdouble {.importcpp: "random",
                                        header: "cheerp/clientlib.h".}

proc round*(this: var Math; x: cdouble): cdouble {.importcpp: "round",
    header: "cheerp/clientlib.h".}

proc sin*(this: var Math; x: cdouble): cdouble {.importcpp: "sin",
    header: "cheerp/clientlib.h".}

proc sqrt*(this: var Math; x: cdouble): cdouble {.importcpp: "sqrt",
    header: "cheerp/clientlib.h".}

proc tan*(this: var Math; x: cdouble): cdouble {.importcpp: "tan",
    header: "cheerp/clientlib.h".}

proc toString*(this: var Date): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc toDateString*(this: var Date): ptr String {.importcpp: "toDateString",
    header: "cheerp/clientlib.h".}

proc toTimeString*(this: var Date): ptr String {.importcpp: "toTimeString",
    header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Date): ptr String {.importcpp: "toLocaleString",
    header: "cheerp/clientlib.h".}

proc toLocaleDateString*(this: var Date): ptr String {.
    importcpp: "toLocaleDateString", header: "cheerp/clientlib.h".}

proc toLocaleTimeString*(this: var Date): ptr String {.
    importcpp: "toLocaleTimeString", header: "cheerp/clientlib.h".}

proc valueOf*(this: var Date): cdouble {.importcpp: "valueOf",
    header: "cheerp/clientlib.h".}

proc getTime*(this: var Date): cdouble {.importcpp: "getTime",
    header: "cheerp/clientlib.h".}

proc getFullYear*(this: var Date): cdouble {.importcpp: "getFullYear",
    header: "cheerp/clientlib.h".}

proc getUTCFullYear*(this: var Date): cdouble {.importcpp: "getUTCFullYear",
    header: "cheerp/clientlib.h".}

proc getMonth*(this: var Date): cdouble {.importcpp: "getMonth",
    header: "cheerp/clientlib.h".}

proc getUTCMonth*(this: var Date): cdouble {.importcpp: "getUTCMonth",
    header: "cheerp/clientlib.h".}

proc getDate*(this: var Date): cdouble {.importcpp: "getDate",
    header: "cheerp/clientlib.h".}

proc getUTCDate*(this: var Date): cdouble {.importcpp: "getUTCDate",
    header: "cheerp/clientlib.h".}

proc getDay*(this: var Date): cdouble {.importcpp: "getDay",
                                        header: "cheerp/clientlib.h".}

proc getUTCDay*(this: var Date): cdouble {.importcpp: "getUTCDay",
    header: "cheerp/clientlib.h".}

proc getHours*(this: var Date): cdouble {.importcpp: "getHours",
    header: "cheerp/clientlib.h".}

proc getUTCHours*(this: var Date): cdouble {.importcpp: "getUTCHours",
    header: "cheerp/clientlib.h".}

proc getMinutes*(this: var Date): cdouble {.importcpp: "getMinutes",
    header: "cheerp/clientlib.h".}

proc getUTCMinutes*(this: var Date): cdouble {.importcpp: "getUTCMinutes",
    header: "cheerp/clientlib.h".}

proc getSeconds*(this: var Date): cdouble {.importcpp: "getSeconds",
    header: "cheerp/clientlib.h".}

proc getUTCSeconds*(this: var Date): cdouble {.importcpp: "getUTCSeconds",
    header: "cheerp/clientlib.h".}

proc getMilliseconds*(this: var Date): cdouble {.importcpp: "getMilliseconds",
    header: "cheerp/clientlib.h".}

proc getUTCMilliseconds*(this: var Date): cdouble {.
    importcpp: "getUTCMilliseconds", header: "cheerp/clientlib.h".}

proc getTimezoneOffset*(this: var Date): cdouble {.
    importcpp: "getTimezoneOffset", header: "cheerp/clientlib.h".}

proc setTime*(this: var Date; time: cdouble): cdouble {.importcpp: "setTime",
    header: "cheerp/clientlib.h".}

proc setMilliseconds*(this: var Date; ms: cdouble): cdouble {.
    importcpp: "setMilliseconds", header: "cheerp/clientlib.h".}

proc setUTCMilliseconds*(this: var Date; ms: cdouble): cdouble {.
    importcpp: "setUTCMilliseconds", header: "cheerp/clientlib.h".}

proc setSeconds*(this: var Date; sec: cdouble): cdouble {.
    importcpp: "setSeconds", header: "cheerp/clientlib.h".}

proc setSeconds*(this: var Date; sec: cdouble; ms: cdouble): cdouble {.
    importcpp: "setSeconds", header: "cheerp/clientlib.h".}

proc setUTCSeconds*(this: var Date; sec: cdouble): cdouble {.
    importcpp: "setUTCSeconds", header: "cheerp/clientlib.h".}

proc setUTCSeconds*(this: var Date; sec: cdouble; ms: cdouble): cdouble {.
    importcpp: "setUTCSeconds", header: "cheerp/clientlib.h".}

proc setMinutes*(this: var Date; min: cdouble): cdouble {.
    importcpp: "setMinutes", header: "cheerp/clientlib.h".}

proc setMinutes*(this: var Date; min: cdouble; sec: cdouble): cdouble {.
    importcpp: "setMinutes", header: "cheerp/clientlib.h".}

proc setMinutes*(this: var Date; min: cdouble; sec: cdouble; ms: cdouble): cdouble {.
    importcpp: "setMinutes", header: "cheerp/clientlib.h".}

proc setUTCMinutes*(this: var Date; min: cdouble): cdouble {.
    importcpp: "setUTCMinutes", header: "cheerp/clientlib.h".}

proc setUTCMinutes*(this: var Date; min: cdouble; sec: cdouble): cdouble {.
    importcpp: "setUTCMinutes", header: "cheerp/clientlib.h".}

proc setUTCMinutes*(this: var Date; min: cdouble; sec: cdouble; ms: cdouble): cdouble {.
    importcpp: "setUTCMinutes", header: "cheerp/clientlib.h".}

proc setHours*(this: var Date; hours: cdouble): cdouble {.importcpp: "setHours",
    header: "cheerp/clientlib.h".}

proc setHours*(this: var Date; hours: cdouble; min: cdouble): cdouble {.
    importcpp: "setHours", header: "cheerp/clientlib.h".}

proc setHours*(this: var Date; hours: cdouble; min: cdouble; sec: cdouble): cdouble {.
    importcpp: "setHours", header: "cheerp/clientlib.h".}

proc setHours*(this: var Date; hours: cdouble; min: cdouble; sec: cdouble;
               ms: cdouble): cdouble {.importcpp: "setHours",
                                       header: "cheerp/clientlib.h".}

proc setUTCHours*(this: var Date; hours: cdouble): cdouble {.
    importcpp: "setUTCHours", header: "cheerp/clientlib.h".}

proc setUTCHours*(this: var Date; hours: cdouble; min: cdouble): cdouble {.
    importcpp: "setUTCHours", header: "cheerp/clientlib.h".}

proc setUTCHours*(this: var Date; hours: cdouble; min: cdouble; sec: cdouble): cdouble {.
    importcpp: "setUTCHours", header: "cheerp/clientlib.h".}

proc setUTCHours*(this: var Date; hours: cdouble; min: cdouble; sec: cdouble;
                  ms: cdouble): cdouble {.importcpp: "setUTCHours",
    header: "cheerp/clientlib.h".}

proc setDate*(this: var Date; date: cdouble): cdouble {.importcpp: "setDate",
    header: "cheerp/clientlib.h".}

proc setUTCDate*(this: var Date; date: cdouble): cdouble {.
    importcpp: "setUTCDate", header: "cheerp/clientlib.h".}

proc setMonth*(this: var Date; month: cdouble): cdouble {.importcpp: "setMonth",
    header: "cheerp/clientlib.h".}

proc setMonth*(this: var Date; month: cdouble; date: cdouble): cdouble {.
    importcpp: "setMonth", header: "cheerp/clientlib.h".}

proc setUTCMonth*(this: var Date; month: cdouble): cdouble {.
    importcpp: "setUTCMonth", header: "cheerp/clientlib.h".}

proc setUTCMonth*(this: var Date; month: cdouble; date: cdouble): cdouble {.
    importcpp: "setUTCMonth", header: "cheerp/clientlib.h".}

proc setFullYear*(this: var Date; year: cdouble): cdouble {.
    importcpp: "setFullYear", header: "cheerp/clientlib.h".}

proc setFullYear*(this: var Date; year: cdouble; month: cdouble): cdouble {.
    importcpp: "setFullYear", header: "cheerp/clientlib.h".}

proc setFullYear*(this: var Date; year: cdouble; month: cdouble; date: cdouble): cdouble {.
    importcpp: "setFullYear", header: "cheerp/clientlib.h".}

proc setUTCFullYear*(this: var Date; year: cdouble): cdouble {.
    importcpp: "setUTCFullYear", header: "cheerp/clientlib.h".}

proc setUTCFullYear*(this: var Date; year: cdouble; month: cdouble): cdouble {.
    importcpp: "setUTCFullYear", header: "cheerp/clientlib.h".}

proc setUTCFullYear*(this: var Date; year: cdouble; month: cdouble;
                     date: cdouble): cdouble {.importcpp: "setUTCFullYear",
    header: "cheerp/clientlib.h".}

proc toUTCString*(this: var Date): ptr String {.importcpp: "toUTCString",
    header: "cheerp/clientlib.h".}

proc toISOString*(this: var Date): ptr String {.importcpp: "toISOString",
    header: "cheerp/clientlib.h".}

proc toJSON*(this: var Date): ptr String {.importcpp: "toJSON",
    header: "cheerp/clientlib.h".}

proc toJSON*(this: var Date; key: ptr Object): ptr String {.importcpp: "toJSON",
    header: "cheerp/clientlib.h".}

proc get_getVarDate*(this: var Date): ptr EventListener {.
    importcpp: "get_getVarDate", header: "cheerp/clientlib.h".}

proc set_getVarDate*(this: var Date; a2: ptr EventListener) {.
    importcpp: "set_getVarDate", header: "cheerp/clientlib.h".}

proc constructDate*(): Date {.constructor, importcpp: "client::Date(@)",
                              header: "cheerp/clientlib.h".}

proc constructDate*(value: cdouble): Date {.constructor,
    importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(value: String): Date {.constructor,
    importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(year: cdouble; month: cdouble): Date {.constructor,
    importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(year: cdouble; month: cdouble; date: cdouble): Date {.
    constructor, importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(year: cdouble; month: cdouble; date: cdouble; hours: cdouble): Date {.
    constructor, importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(year: cdouble; month: cdouble; date: cdouble;
                    hours: cdouble; minutes: cdouble): Date {.constructor,
    importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(year: cdouble; month: cdouble; date: cdouble;
                    hours: cdouble; minutes: cdouble; seconds: cdouble): Date {.
    constructor, importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc constructDate*(year: cdouble; month: cdouble; date: cdouble;
                    hours: cdouble; minutes: cdouble; seconds: cdouble;
                    ms: cdouble): Date {.constructor,
    importcpp: "client::Date(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Date): ptr Date {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc parse*(s: String): cdouble {.importcpp: "client::Date::parse(@)",
                                  header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc UTC*(year: cdouble; month: cdouble): cdouble {.
    importcpp: "client::Date::UTC(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc UTC*(year: cdouble; month: cdouble; date: cdouble): cdouble {.
    importcpp: "client::Date::UTC(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc UTC*(year: cdouble; month: cdouble; date: cdouble; hours: cdouble): cdouble {.
    importcpp: "client::Date::UTC(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc UTC*(year: cdouble; month: cdouble; date: cdouble; hours: cdouble;
          minutes: cdouble): cdouble {.importcpp: "client::Date::UTC(@)",
                                       header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc UTC*(year: cdouble; month: cdouble; date: cdouble; hours: cdouble;
          minutes: cdouble; seconds: cdouble): cdouble {.
    importcpp: "client::Date::UTC(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc UTC*(year: cdouble; month: cdouble; date: cdouble; hours: cdouble;
          minutes: cdouble; seconds: cdouble; ms: cdouble): cdouble {.
    importcpp: "client::Date::UTC(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc now*(): cdouble {.importcpp: "client::Date::now(@)",
                       header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc get_index*(this: var RegExpMatchArray): cdouble {.importcpp: "get_index",
    header: "cheerp/clientlib.h".}

proc set_index*(this: var RegExpMatchArray; a2: cdouble) {.
    importcpp: "set_index", header: "cheerp/clientlib.h".}

proc get_input*(this: var RegExpMatchArray): ptr String {.
    importcpp: "get_input", header: "cheerp/clientlib.h".}

proc set_input*(this: var RegExpMatchArray; a2: String) {.
    importcpp: "set_input", header: "cheerp/clientlib.h".}

proc get_index*(this: var RegExpExecArray): cdouble {.importcpp: "get_index",
    header: "cheerp/clientlib.h".}

proc set_index*(this: var RegExpExecArray; a2: cdouble) {.
    importcpp: "set_index", header: "cheerp/clientlib.h".}

proc get_input*(this: var RegExpExecArray): ptr String {.importcpp: "get_input",
    header: "cheerp/clientlib.h".}

proc set_input*(this: var RegExpExecArray; a2: String) {.importcpp: "set_input",
    header: "cheerp/clientlib.h".}

proc exec*(this: var RegExp; string: String): ptr RegExpExecArray {.
    importcpp: "exec", header: "cheerp/clientlib.h".}

proc test*(this: var RegExp; string: String): bool {.importcpp: "test",
    header: "cheerp/clientlib.h".}

proc get_source*(this: var RegExp): ptr String {.importcpp: "get_source",
    header: "cheerp/clientlib.h".}

proc get_global*(this: var RegExp): bool {.importcpp: "get_global",
    header: "cheerp/clientlib.h".}

proc get_ignoreCase*(this: var RegExp): bool {.importcpp: "get_ignoreCase",
    header: "cheerp/clientlib.h".}

proc get_multiline*(this: var RegExp): bool {.importcpp: "get_multiline",
    header: "cheerp/clientlib.h".}

proc get_lastIndex*(this: var RegExp): cdouble {.importcpp: "get_lastIndex",
    header: "cheerp/clientlib.h".}

proc set_lastIndex*(this: var RegExp; a2: cdouble) {.importcpp: "set_lastIndex",
    header: "cheerp/clientlib.h".}

proc constructRegExp*(pattern: ptr RegExp): RegExp {.constructor,
    importcpp: "client::RegExp(@)", header: "cheerp/clientlib.h".}

proc constructRegExp*(pattern: String): RegExp {.constructor,
    importcpp: "client::RegExp(@)", header: "cheerp/clientlib.h".}

proc constructRegExp*(pattern: String; flags: String): RegExp {.constructor,
    importcpp: "client::RegExp(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RegExp): ptr RegExp {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc get_lastMatch*(this: var RegExp): ptr String {.importcpp: "get_lastMatch",
    header: "cheerp/clientlib.h".}

proc set_lastMatch*(this: var RegExp; a2: String) {.importcpp: "set_lastMatch",
    header: "cheerp/clientlib.h".}

proc get_name*(this: var Error): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var Error; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var Error): ptr String {.importcpp: "get_message",
    header: "cheerp/clientlib.h".}

proc set_message*(this: var Error; a2: String) {.importcpp: "set_message",
    header: "cheerp/clientlib.h".}

proc get_stack*(this: var Error): ptr String {.importcpp: "get_stack",
    header: "cheerp/clientlib.h".}

proc set_stack*(this: var Error; a2: String) {.importcpp: "set_stack",
    header: "cheerp/clientlib.h".}

proc constructError*(): Error {.constructor, importcpp: "client::Error(@)",
                                header: "cheerp/clientlib.h".}

proc constructError*(message: String): Error {.constructor,
    importcpp: "client::Error(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Error): ptr Error {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc constructEvalError*(): EvalError {.constructor,
                                        importcpp: "client::EvalError(@)",
                                        header: "cheerp/clientlib.h".}

proc constructEvalError*(message: String): EvalError {.constructor,
    importcpp: "client::EvalError(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var EvalError): ptr EvalError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructRangeError*(): RangeError {.constructor,
    importcpp: "client::RangeError(@)", header: "cheerp/clientlib.h".}

proc constructRangeError*(message: String): RangeError {.constructor,
    importcpp: "client::RangeError(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RangeError): ptr RangeError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructReferenceError*(): ReferenceError {.constructor,
    importcpp: "client::ReferenceError(@)", header: "cheerp/clientlib.h".}

proc constructReferenceError*(message: String): ReferenceError {.constructor,
    importcpp: "client::ReferenceError(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ReferenceError): ptr ReferenceError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructSyntaxError*(): SyntaxError {.constructor,
    importcpp: "client::SyntaxError(@)", header: "cheerp/clientlib.h".}

proc constructSyntaxError*(message: String): SyntaxError {.constructor,
    importcpp: "client::SyntaxError(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SyntaxError): ptr SyntaxError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructTypeError*(): TypeError {.constructor,
                                        importcpp: "client::TypeError(@)",
                                        header: "cheerp/clientlib.h".}

proc constructTypeError*(message: String): TypeError {.constructor,
    importcpp: "client::TypeError(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TypeError): ptr TypeError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructURIError*(): URIError {.constructor,
                                      importcpp: "client::URIError(@)",
                                      header: "cheerp/clientlib.h".}

proc constructURIError*(message: String): URIError {.constructor,
    importcpp: "client::URIError(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var URIError): ptr URIError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object): ptr String {.
    importcpp: "stringify", header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object; replacer: ptr EventListener): ptr String {.
    importcpp: "stringify", header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object; replacer: ptr EventListener;
                space: String): ptr String {.importcpp: "stringify",
    header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object; replacer: ptr EventListener;
                space: cdouble): ptr String {.importcpp: "stringify",
    header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object; replacer: ptr Array): ptr String {.
    importcpp: "stringify", header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object; replacer: ptr Array;
                space: String): ptr String {.importcpp: "stringify",
    header: "cheerp/clientlib.h".}

proc stringify*(this: var JSON; value: ptr Object; replacer: ptr Array;
                space: cdouble): ptr String {.importcpp: "stringify",
    header: "cheerp/clientlib.h".}

proc get_length*[T](this: var ConcatArray[T]): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc `[]`*[T](this: var ConcatArray[T]; index: cint): ptr T {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*[T](this: ConcatArray[T]; index: cint): ptr T {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc join*[T](this: var ConcatArray[T]): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*[T](this: var ConcatArray[T]; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc slice*[T](this: var ConcatArray[T]): ptr Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*[T](this: var ConcatArray[T]; start: cdouble): ptr Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*[T](this: var ConcatArray[T]; start: cdouble; `end`: cdouble): ptr Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc get_enumerable*[T](this: var TypedPropertyDescriptor[T]): bool {.
    importcpp: "get_enumerable", header: "cheerp/clientlib.h".}

proc set_enumerable*[T](this: var TypedPropertyDescriptor[T]; a2: bool) {.
    importcpp: "set_enumerable", header: "cheerp/clientlib.h".}

proc get_configurable*[T](this: var TypedPropertyDescriptor[T]): bool {.
    importcpp: "get_configurable", header: "cheerp/clientlib.h".}

proc set_configurable*[T](this: var TypedPropertyDescriptor[T]; a2: bool) {.
    importcpp: "set_configurable", header: "cheerp/clientlib.h".}

proc get_writable*[T](this: var TypedPropertyDescriptor[T]): bool {.
    importcpp: "get_writable", header: "cheerp/clientlib.h".}

proc set_writable*[T](this: var TypedPropertyDescriptor[T]; a2: bool) {.
    importcpp: "set_writable", header: "cheerp/clientlib.h".}

proc get_value*[T](this: var TypedPropertyDescriptor[T]): ptr T {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*[T](this: var TypedPropertyDescriptor[T]; a2: ptr T) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_get*[T](this: var TypedPropertyDescriptor[T]): ptr EventListener {.
    importcpp: "get_get", header: "cheerp/clientlib.h".}

proc set_get*[T](this: var TypedPropertyDescriptor[T]; a2: ptr EventListener) {.
    importcpp: "set_get", header: "cheerp/clientlib.h".}

proc get_set*[T](this: var TypedPropertyDescriptor[T]): ptr EventListener {.
    importcpp: "get_set", header: "cheerp/clientlib.h".}

proc set_set*[T](this: var TypedPropertyDescriptor[T]; a2: ptr EventListener) {.
    importcpp: "set_set", header: "cheerp/clientlib.h".}

proc then*(this: var Promise): ptr Promise {.importcpp: "then",
    header: "cheerp/clientlib.h".}

proc then*(this: var Promise; onfulfilled: ptr EventListener): ptr Promise {.
    importcpp: "then", header: "cheerp/clientlib.h".}

proc then*(this: var Promise; onfulfilled: ptr EventListener;
           onrejected: ptr EventListener): ptr Promise {.importcpp: "then",
    header: "cheerp/clientlib.h".}

proc p_catch*(this: var Promise): ptr Promise {.importcpp: "_catch",
    header: "cheerp/clientlib.h".}

proc p_catch*(this: var Promise; onrejected: ptr EventListener): ptr Promise {.
    importcpp: "_catch", header: "cheerp/clientlib.h".}

proc get_byteLength*(this: var ArrayBuffer): cdouble {.
    importcpp: "get_byteLength", header: "cheerp/clientlib.h".}

proc slice*(this: var ArrayBuffer; begin: cdouble): ptr ArrayBuffer {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var ArrayBuffer; begin: cdouble; `end`: cdouble): ptr ArrayBuffer {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ArrayBuffer): ptr ArrayBuffer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructArrayBuffer*(byteLength: cdouble): ArrayBuffer {.constructor,
    importcpp: "client::ArrayBuffer(@)", header: "cheerp/clientlib.h".}

proc isView*(arg: ptr Object): bool {.importcpp: "client::ArrayBuffer::isView(@)",
                                      header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc get_ArrayBuffer*(this: var ArrayBufferTypes): ptr ArrayBuffer {.
    importcpp: "get_ArrayBuffer", header: "cheerp/clientlib.h".}

proc set_ArrayBuffer*(this: var ArrayBufferTypes; a2: ptr ArrayBuffer) {.
    importcpp: "set_ArrayBuffer", header: "cheerp/clientlib.h".}

proc get_buffer*(this: var ArrayBufferView): ptr ArrayBuffer {.
    importcpp: "get_buffer", header: "cheerp/clientlib.h".}

proc set_buffer*(this: var ArrayBufferView; a2: ptr ArrayBuffer) {.
    importcpp: "set_buffer", header: "cheerp/clientlib.h".}

proc get_byteLength*(this: var ArrayBufferView): cdouble {.
    importcpp: "get_byteLength", header: "cheerp/clientlib.h".}

proc set_byteLength*(this: var ArrayBufferView; a2: cdouble) {.
    importcpp: "set_byteLength", header: "cheerp/clientlib.h".}

proc get_byteOffset*(this: var ArrayBufferView): cdouble {.
    importcpp: "get_byteOffset", header: "cheerp/clientlib.h".}

proc set_byteOffset*(this: var ArrayBufferView; a2: cdouble) {.
    importcpp: "set_byteOffset", header: "cheerp/clientlib.h".}

proc get_buffer*(this: var DataView): ptr ArrayBuffer {.importcpp: "get_buffer",
    header: "cheerp/clientlib.h".}

proc get_byteLength*(this: var DataView): cdouble {.importcpp: "get_byteLength",
    header: "cheerp/clientlib.h".}

proc get_byteOffset*(this: var DataView): cdouble {.importcpp: "get_byteOffset",
    header: "cheerp/clientlib.h".}

proc getFloat32*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getFloat32", header: "cheerp/clientlib.h".}

proc getFloat32*(this: var DataView; byteOffset: cdouble; littleEndian: bool): cdouble {.
    importcpp: "getFloat32", header: "cheerp/clientlib.h".}

proc getFloat64*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getFloat64", header: "cheerp/clientlib.h".}

proc getFloat64*(this: var DataView; byteOffset: cdouble; littleEndian: bool): cdouble {.
    importcpp: "getFloat64", header: "cheerp/clientlib.h".}

proc getInt8*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getInt8", header: "cheerp/clientlib.h".}

proc getInt16*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getInt16", header: "cheerp/clientlib.h".}

proc getInt16*(this: var DataView; byteOffset: cdouble; littleEndian: bool): cdouble {.
    importcpp: "getInt16", header: "cheerp/clientlib.h".}

proc getInt32*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getInt32", header: "cheerp/clientlib.h".}

proc getInt32*(this: var DataView; byteOffset: cdouble; littleEndian: bool): cdouble {.
    importcpp: "getInt32", header: "cheerp/clientlib.h".}

proc getUint8*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getUint8", header: "cheerp/clientlib.h".}

proc getUint16*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getUint16", header: "cheerp/clientlib.h".}

proc getUint16*(this: var DataView; byteOffset: cdouble; littleEndian: bool): cdouble {.
    importcpp: "getUint16", header: "cheerp/clientlib.h".}

proc getUint32*(this: var DataView; byteOffset: cdouble): cdouble {.
    importcpp: "getUint32", header: "cheerp/clientlib.h".}

proc getUint32*(this: var DataView; byteOffset: cdouble; littleEndian: bool): cdouble {.
    importcpp: "getUint32", header: "cheerp/clientlib.h".}

proc setFloat32*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setFloat32", header: "cheerp/clientlib.h".}

proc setFloat32*(this: var DataView; byteOffset: cdouble; value: cdouble;
                 littleEndian: bool) {.importcpp: "setFloat32",
                                       header: "cheerp/clientlib.h".}

proc setFloat64*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setFloat64", header: "cheerp/clientlib.h".}

proc setFloat64*(this: var DataView; byteOffset: cdouble; value: cdouble;
                 littleEndian: bool) {.importcpp: "setFloat64",
                                       header: "cheerp/clientlib.h".}

proc setInt8*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setInt8", header: "cheerp/clientlib.h".}

proc setInt16*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setInt16", header: "cheerp/clientlib.h".}

proc setInt16*(this: var DataView; byteOffset: cdouble; value: cdouble;
               littleEndian: bool) {.importcpp: "setInt16",
                                     header: "cheerp/clientlib.h".}

proc setInt32*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setInt32", header: "cheerp/clientlib.h".}

proc setInt32*(this: var DataView; byteOffset: cdouble; value: cdouble;
               littleEndian: bool) {.importcpp: "setInt32",
                                     header: "cheerp/clientlib.h".}

proc setUint8*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setUint8", header: "cheerp/clientlib.h".}

proc setUint16*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setUint16", header: "cheerp/clientlib.h".}

proc setUint16*(this: var DataView; byteOffset: cdouble; value: cdouble;
                littleEndian: bool) {.importcpp: "setUint16",
                                      header: "cheerp/clientlib.h".}

proc setUint32*(this: var DataView; byteOffset: cdouble; value: cdouble) {.
    importcpp: "setUint32", header: "cheerp/clientlib.h".}

proc setUint32*(this: var DataView; byteOffset: cdouble; value: cdouble;
                littleEndian: bool) {.importcpp: "setUint32",
                                      header: "cheerp/clientlib.h".}

proc constructDataView*[ArrayBufferLike](buffer: ptr ArrayBufferLike): DataView {.
    constructor, importcpp: "client::DataView(@)", header: "cheerp/clientlib.h".}

proc constructDataView*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): DataView {.constructor,
                                     importcpp: "client::DataView(@)",
                                     header: "cheerp/clientlib.h".}

proc constructDataView*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; byteLength: cdouble): DataView {.constructor,
    importcpp: "client::DataView(@)", header: "cheerp/clientlib.h".}

proc every*(this: var Int8Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Int8Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Int8Array; callbackfn: ptr EventListener): ptr Int8Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Int8Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Int8Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Int8Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Int8Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Int8Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Int8Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Int8Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Int8Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Int8Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Int8Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Int8Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Int8Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Int8Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Int8Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Int8Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Int8Array; callbackfn: ptr EventListener): ptr Int8Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Int8Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Int8Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Int8Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Int8Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Int8Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Int8Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Int8Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Int8Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Int8Array): ptr Int8Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Int8Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Int8Array; array: ptr ArrayLike; offset: cdouble) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc slice*(this: var Int8Array): ptr Int8Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Int8Array; start: cdouble): ptr Int8Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Int8Array; start: cdouble; `end`: cdouble): ptr Int8Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Int8Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Int8Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Int8Array; begin: cdouble): ptr Int8Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Int8Array; begin: cdouble; `end`: cdouble): ptr Int8Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Int8Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Int8Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Int8Array; index: cint): var char {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Int8Array; index: cint): char {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Int8Array): ptr Int8Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructInt8Array*(length: cdouble): Int8Array {.constructor,
    importcpp: "client::Int8Array(@)", header: "cheerp/clientlib.h".}

proc constructInt8Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Int8Array {.
    constructor, importcpp: "client::Int8Array(@)", header: "cheerp/clientlib.h".}

proc constructInt8Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Int8Array {.constructor,
                                      importcpp: "client::Int8Array(@)",
                                      header: "cheerp/clientlib.h".}

proc constructInt8Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Int8Array {.constructor,
    importcpp: "client::Int8Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Int8Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Uint8Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Uint8Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Uint8Array; callbackfn: ptr EventListener): ptr Uint8Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Uint8Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Uint8Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Uint8Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Uint8Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint8Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint8Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint8Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint8Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint8Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint8Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Uint8Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Uint8Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint8Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint8Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Uint8Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Uint8Array; callbackfn: ptr EventListener): ptr Uint8Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Uint8Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Uint8Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint8Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint8Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Uint8Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint8Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint8Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Uint8Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Uint8Array): ptr Uint8Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint8Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint8Array; array: ptr ArrayLike; offset: cdouble) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc slice*(this: var Uint8Array): ptr Uint8Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Uint8Array; start: cdouble): ptr Uint8Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Uint8Array; start: cdouble; `end`: cdouble): ptr Uint8Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Uint8Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Uint8Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint8Array; begin: cdouble): ptr Uint8Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint8Array; begin: cdouble; `end`: cdouble): ptr Uint8Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Uint8Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Uint8Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Uint8Array; index: cint): var cuchar {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Uint8Array; index: cint): cuchar {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Uint8Array): ptr Uint8Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructUint8Array*(length: cdouble): Uint8Array {.constructor,
    importcpp: "client::Uint8Array(@)", header: "cheerp/clientlib.h".}

proc constructUint8Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Uint8Array {.
    constructor, importcpp: "client::Uint8Array(@)",
    header: "cheerp/clientlib.h".}

proc constructUint8Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Uint8Array {.constructor,
                                       importcpp: "client::Uint8Array(@)",
                                       header: "cheerp/clientlib.h".}

proc constructUint8Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Uint8Array {.constructor,
    importcpp: "client::Uint8Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Uint8Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Uint8ClampedArray; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Uint8ClampedArray; callbackfn: ptr EventListener): ptr Uint8ClampedArray {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Uint8ClampedArray {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Uint8ClampedArray; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Uint8ClampedArray; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint8ClampedArray; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint8ClampedArray; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint8ClampedArray; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint8ClampedArray; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint8ClampedArray; searchElement: cdouble;
              fromIndex: cdouble): cdouble {.importcpp: "indexOf",
    header: "cheerp/clientlib.h".}

proc join*(this: var Uint8ClampedArray): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Uint8ClampedArray; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint8ClampedArray; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint8ClampedArray; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Uint8ClampedArray): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc map*(this: var Uint8ClampedArray; callbackfn: ptr EventListener): ptr Uint8ClampedArray {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Uint8ClampedArray {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint8ClampedArray; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Uint8ClampedArray; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint8ClampedArray; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Uint8ClampedArray; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Uint8ClampedArray): ptr Uint8ClampedArray {.
    importcpp: "reverse", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint8ClampedArray; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint8ClampedArray; array: ptr ArrayLike;
                     offset: cdouble) {.importcpp: "set",
                                        header: "cheerp/clientlib.h".}

proc slice*(this: var Uint8ClampedArray): ptr Uint8ClampedArray {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Uint8ClampedArray; start: cdouble): ptr Uint8ClampedArray {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Uint8ClampedArray; start: cdouble; `end`: cdouble): ptr Uint8ClampedArray {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Uint8ClampedArray; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Uint8ClampedArray; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint8ClampedArray; begin: cdouble): ptr Uint8ClampedArray {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint8ClampedArray; begin: cdouble; `end`: cdouble): ptr Uint8ClampedArray {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Uint8ClampedArray): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Uint8ClampedArray): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Uint8ClampedArray; index: cint): var cdouble {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: Uint8ClampedArray; index: cint): cdouble {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Uint8ClampedArray): ptr Uint8ClampedArray {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructUint8ClampedArray*(length: cdouble): Uint8ClampedArray {.
    constructor, importcpp: "client::Uint8ClampedArray(@)",
    header: "cheerp/clientlib.h".}

proc constructUint8ClampedArray*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Uint8ClampedArray {.
    constructor, importcpp: "client::Uint8ClampedArray(@)",
    header: "cheerp/clientlib.h".}

proc constructUint8ClampedArray*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Uint8ClampedArray {.constructor,
    importcpp: "client::Uint8ClampedArray(@)", header: "cheerp/clientlib.h".}

proc constructUint8ClampedArray*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Uint8ClampedArray {.constructor,
    importcpp: "client::Uint8ClampedArray(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Uint8ClampedArray): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Int16Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Int16Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Int16Array; callbackfn: ptr EventListener): ptr Int16Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Int16Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Int16Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Int16Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Int16Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Int16Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Int16Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Int16Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Int16Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Int16Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Int16Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Int16Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Int16Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Int16Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Int16Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Int16Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Int16Array; callbackfn: ptr EventListener): ptr Int16Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Int16Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Int16Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Int16Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Int16Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Int16Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Int16Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Int16Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Int16Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Int16Array): ptr Int16Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Int16Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Int16Array; array: ptr ArrayLike; offset: cdouble) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc slice*(this: var Int16Array): ptr Int16Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Int16Array; start: cdouble): ptr Int16Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Int16Array; start: cdouble; `end`: cdouble): ptr Int16Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Int16Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Int16Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Int16Array; begin: cdouble): ptr Int16Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Int16Array; begin: cdouble; `end`: cdouble): ptr Int16Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Int16Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Int16Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Int16Array; index: cint): var cshort {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Int16Array; index: cint): cshort {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Int16Array): ptr Int16Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructInt16Array*(length: cdouble): Int16Array {.constructor,
    importcpp: "client::Int16Array(@)", header: "cheerp/clientlib.h".}

proc constructInt16Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Int16Array {.
    constructor, importcpp: "client::Int16Array(@)",
    header: "cheerp/clientlib.h".}

proc constructInt16Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Int16Array {.constructor,
                                       importcpp: "client::Int16Array(@)",
                                       header: "cheerp/clientlib.h".}

proc constructInt16Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Int16Array {.constructor,
    importcpp: "client::Int16Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Int16Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Uint16Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Uint16Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Uint16Array; callbackfn: ptr EventListener): ptr Uint16Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Uint16Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Uint16Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Uint16Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Uint16Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint16Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint16Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint16Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint16Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint16Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint16Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Uint16Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Uint16Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint16Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint16Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Uint16Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Uint16Array; callbackfn: ptr EventListener): ptr Uint16Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Uint16Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Uint16Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint16Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint16Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Uint16Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint16Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint16Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Uint16Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Uint16Array): ptr Uint16Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint16Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint16Array; array: ptr ArrayLike;
                     offset: cdouble) {.importcpp: "set",
                                        header: "cheerp/clientlib.h".}

proc slice*(this: var Uint16Array): ptr Uint16Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Uint16Array; start: cdouble): ptr Uint16Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Uint16Array; start: cdouble; `end`: cdouble): ptr Uint16Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Uint16Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Uint16Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint16Array; begin: cdouble): ptr Uint16Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint16Array; begin: cdouble; `end`: cdouble): ptr Uint16Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Uint16Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Uint16Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Uint16Array; index: cint): var cushort {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Uint16Array; index: cint): cushort {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Uint16Array): ptr Uint16Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructUint16Array*(length: cdouble): Uint16Array {.constructor,
    importcpp: "client::Uint16Array(@)", header: "cheerp/clientlib.h".}

proc constructUint16Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Uint16Array {.
    constructor, importcpp: "client::Uint16Array(@)",
    header: "cheerp/clientlib.h".}

proc constructUint16Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Uint16Array {.constructor,
                                        importcpp: "client::Uint16Array(@)",
                                        header: "cheerp/clientlib.h".}

proc constructUint16Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Uint16Array {.constructor,
    importcpp: "client::Uint16Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Uint16Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Int32Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Int32Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Int32Array; callbackfn: ptr EventListener): ptr Int32Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Int32Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Int32Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Int32Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Int32Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Int32Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Int32Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Int32Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Int32Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Int32Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Int32Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Int32Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Int32Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Int32Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Int32Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Int32Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Int32Array; callbackfn: ptr EventListener): ptr Int32Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Int32Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Int32Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Int32Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Int32Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Int32Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Int32Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Int32Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Int32Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Int32Array): ptr Int32Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Int32Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Int32Array; array: ptr ArrayLike; offset: cdouble) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc slice*(this: var Int32Array): ptr Int32Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Int32Array; start: cdouble): ptr Int32Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Int32Array; start: cdouble; `end`: cdouble): ptr Int32Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Int32Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Int32Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Int32Array; begin: cdouble): ptr Int32Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Int32Array; begin: cdouble; `end`: cdouble): ptr Int32Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Int32Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Int32Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Int32Array; index: cint): var cint {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Int32Array; index: cint): cint {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Int32Array): ptr Int32Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructInt32Array*(length: cdouble): Int32Array {.constructor,
    importcpp: "client::Int32Array(@)", header: "cheerp/clientlib.h".}

proc constructInt32Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Int32Array {.
    constructor, importcpp: "client::Int32Array(@)",
    header: "cheerp/clientlib.h".}

proc constructInt32Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Int32Array {.constructor,
                                       importcpp: "client::Int32Array(@)",
                                       header: "cheerp/clientlib.h".}

proc constructInt32Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Int32Array {.constructor,
    importcpp: "client::Int32Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Int32Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Uint32Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Uint32Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Uint32Array; callbackfn: ptr EventListener): ptr Uint32Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Uint32Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Uint32Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Uint32Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Uint32Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint32Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Uint32Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint32Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Uint32Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint32Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Uint32Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Uint32Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Uint32Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint32Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Uint32Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Uint32Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Uint32Array; callbackfn: ptr EventListener): ptr Uint32Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Uint32Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Uint32Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint32Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Uint32Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Uint32Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint32Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Uint32Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Uint32Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Uint32Array): ptr Uint32Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint32Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Uint32Array; array: ptr ArrayLike;
                     offset: cdouble) {.importcpp: "set",
                                        header: "cheerp/clientlib.h".}

proc slice*(this: var Uint32Array): ptr Uint32Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Uint32Array; start: cdouble): ptr Uint32Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Uint32Array; start: cdouble; `end`: cdouble): ptr Uint32Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Uint32Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Uint32Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint32Array; begin: cdouble): ptr Uint32Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Uint32Array; begin: cdouble; `end`: cdouble): ptr Uint32Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Uint32Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Uint32Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Uint32Array; index: cint): var cuint {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Uint32Array; index: cint): cuint {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Uint32Array): ptr Uint32Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructUint32Array*(length: cdouble): Uint32Array {.constructor,
    importcpp: "client::Uint32Array(@)", header: "cheerp/clientlib.h".}

proc constructUint32Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Uint32Array {.
    constructor, importcpp: "client::Uint32Array(@)",
    header: "cheerp/clientlib.h".}

proc constructUint32Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Uint32Array {.constructor,
                                        importcpp: "client::Uint32Array(@)",
                                        header: "cheerp/clientlib.h".}

proc constructUint32Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Uint32Array {.constructor,
    importcpp: "client::Uint32Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Uint32Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Float32Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Float32Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Float32Array; callbackfn: ptr EventListener): ptr Float32Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Float32Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Float32Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Float32Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Float32Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Float32Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Float32Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Float32Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Float32Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Float32Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Float32Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Float32Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Float32Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Float32Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Float32Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Float32Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Float32Array; callbackfn: ptr EventListener): ptr Float32Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Float32Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Float32Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Float32Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Float32Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Float32Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Float32Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Float32Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Float32Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Float32Array): ptr Float32Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Float32Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Float32Array; array: ptr ArrayLike;
                     offset: cdouble) {.importcpp: "set",
                                        header: "cheerp/clientlib.h".}

proc slice*(this: var Float32Array): ptr Float32Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Float32Array; start: cdouble): ptr Float32Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Float32Array; start: cdouble; `end`: cdouble): ptr Float32Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Float32Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Float32Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Float32Array; begin: cdouble): ptr Float32Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Float32Array; begin: cdouble; `end`: cdouble): ptr Float32Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Float32Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Float32Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Float32Array; index: cint): var cfloat {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Float32Array; index: cint): cfloat {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Float32Array): ptr Float32Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructFloat32Array*(length: cdouble): Float32Array {.constructor,
    importcpp: "client::Float32Array(@)", header: "cheerp/clientlib.h".}

proc constructFloat32Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Float32Array {.
    constructor, importcpp: "client::Float32Array(@)",
    header: "cheerp/clientlib.h".}

proc constructFloat32Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Float32Array {.constructor,
    importcpp: "client::Float32Array(@)", header: "cheerp/clientlib.h".}

proc constructFloat32Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Float32Array {.constructor,
    importcpp: "client::Float32Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Float32Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc every*(this: var Float64Array; callbackfn: ptr EventListener): bool {.
    importcpp: "every", header: "cheerp/clientlib.h".}

proc every*(this: var Float64Array; callbackfn: ptr EventListener;
            thisArg: ptr Object): bool {.importcpp: "every",
    header: "cheerp/clientlib.h".}

proc filter*(this: var Float64Array; callbackfn: ptr EventListener): ptr Float64Array {.
    importcpp: "filter", header: "cheerp/clientlib.h".}

proc filter*(this: var Float64Array; callbackfn: ptr EventListener;
             thisArg: ptr Object): ptr Float64Array {.importcpp: "filter",
    header: "cheerp/clientlib.h".}

proc find*(this: var Float64Array; predicate: ptr EventListener): cdouble {.
    importcpp: "find", header: "cheerp/clientlib.h".}

proc find*(this: var Float64Array; predicate: ptr EventListener;
           thisArg: ptr Object): cdouble {.importcpp: "find",
    header: "cheerp/clientlib.h".}

proc findIndex*(this: var Float64Array; predicate: ptr EventListener): cdouble {.
    importcpp: "findIndex", header: "cheerp/clientlib.h".}

proc findIndex*(this: var Float64Array; predicate: ptr EventListener;
                thisArg: ptr Object): cdouble {.importcpp: "findIndex",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Float64Array; callbackfn: ptr EventListener) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var Float64Array; callbackfn: ptr EventListener;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc indexOf*(this: var Float64Array; searchElement: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc indexOf*(this: var Float64Array; searchElement: cdouble; fromIndex: cdouble): cdouble {.
    importcpp: "indexOf", header: "cheerp/clientlib.h".}

proc join*(this: var Float64Array): ptr String {.importcpp: "join",
    header: "cheerp/clientlib.h".}

proc join*(this: var Float64Array; separator: String): ptr String {.
    importcpp: "join", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Float64Array; searchElement: cdouble): cdouble {.
    importcpp: "lastIndexOf", header: "cheerp/clientlib.h".}

proc lastIndexOf*(this: var Float64Array; searchElement: cdouble;
                  fromIndex: cdouble): cdouble {.importcpp: "lastIndexOf",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Float64Array): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc map*(this: var Float64Array; callbackfn: ptr EventListener): ptr Float64Array {.
    importcpp: "map", header: "cheerp/clientlib.h".}

proc map*(this: var Float64Array; callbackfn: ptr EventListener;
          thisArg: ptr Object): ptr Float64Array {.importcpp: "map",
    header: "cheerp/clientlib.h".}

proc reduce*(this: var Float64Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduce", header: "cheerp/clientlib.h".}

proc reduce*(this: var Float64Array; callbackfn: ptr EventListener;
             initialValue: cdouble): cdouble {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduce*[U](this: var Float64Array; callbackfn: ptr EventListener;
                initialValue: ptr U): ptr U {.importcpp: "reduce",
    header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Float64Array; callbackfn: ptr EventListener): cdouble {.
    importcpp: "reduceRight", header: "cheerp/clientlib.h".}

proc reduceRight*(this: var Float64Array; callbackfn: ptr EventListener;
                  initialValue: cdouble): cdouble {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reduceRight*[U](this: var Float64Array; callbackfn: ptr EventListener;
                     initialValue: ptr U): ptr U {.importcpp: "reduceRight",
    header: "cheerp/clientlib.h".}

proc reverse*(this: var Float64Array): ptr Float64Array {.importcpp: "reverse",
    header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Float64Array; array: ptr ArrayLike) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*[ArrayLike](this: var Float64Array; array: ptr ArrayLike;
                     offset: cdouble) {.importcpp: "set",
                                        header: "cheerp/clientlib.h".}

proc slice*(this: var Float64Array): ptr Float64Array {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Float64Array; start: cdouble): ptr Float64Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Float64Array; start: cdouble; `end`: cdouble): ptr Float64Array {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc some*(this: var Float64Array; callbackfn: ptr EventListener): bool {.
    importcpp: "some", header: "cheerp/clientlib.h".}

proc some*(this: var Float64Array; callbackfn: ptr EventListener;
           thisArg: ptr Object): bool {.importcpp: "some",
                                        header: "cheerp/clientlib.h".}

proc subarray*(this: var Float64Array; begin: cdouble): ptr Float64Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc subarray*(this: var Float64Array; begin: cdouble; `end`: cdouble): ptr Float64Array {.
    importcpp: "subarray", header: "cheerp/clientlib.h".}

proc toLocaleString*(this: var Float64Array): ptr String {.
    importcpp: "toLocaleString", header: "cheerp/clientlib.h".}

proc toString*(this: var Float64Array): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var Float64Array; index: cint): var cdouble {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: Float64Array; index: cint): cdouble {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Float64Array): ptr Float64Array {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc constructFloat64Array*(length: cdouble): Float64Array {.constructor,
    importcpp: "client::Float64Array(@)", header: "cheerp/clientlib.h".}

proc constructFloat64Array*[ArrayLike](arrayOrArrayBuffer: ptr ArrayLike): Float64Array {.
    constructor, importcpp: "client::Float64Array(@)",
    header: "cheerp/clientlib.h".}

proc constructFloat64Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble): Float64Array {.constructor,
    importcpp: "client::Float64Array(@)", header: "cheerp/clientlib.h".}

proc constructFloat64Array*[ArrayBufferLike](buffer: ptr ArrayBufferLike;
    byteOffset: cdouble; length: cdouble): Float64Array {.constructor,
    importcpp: "client::Float64Array(@)", header: "cheerp/clientlib.h".}

proc get_BYTES_PER_ELEMENT*(this: var Float64Array): cdouble {.
    importcpp: "get_BYTES_PER_ELEMENT", header: "cheerp/clientlib.h".}

proc get_displayName*(this: var Account): ptr String {.
    importcpp: "get_displayName", header: "cheerp/clientlib.h".}

proc set_displayName*(this: var Account; a2: String) {.
    importcpp: "set_displayName", header: "cheerp/clientlib.h".}

proc get_id*(this: var Account): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var Account; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_imageURL*(this: var Account): ptr String {.importcpp: "get_imageURL",
    header: "cheerp/clientlib.h".}

proc set_imageURL*(this: var Account; a2: String) {.importcpp: "set_imageURL",
    header: "cheerp/clientlib.h".}

proc get_name*(this: var Account): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var Account; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_rpDisplayName*(this: var Account): ptr String {.
    importcpp: "get_rpDisplayName", header: "cheerp/clientlib.h".}

proc set_rpDisplayName*(this: var Account; a2: String) {.
    importcpp: "set_rpDisplayName", header: "cheerp/clientlib.h".}

proc get_capture*(this: var EventListenerOptions): bool {.
    importcpp: "get_capture", header: "cheerp/clientlib.h".}

proc set_capture*(this: var EventListenerOptions; a2: bool) {.
    importcpp: "set_capture", header: "cheerp/clientlib.h".}

proc get_once*(this: var AddEventListenerOptions): bool {.importcpp: "get_once",
    header: "cheerp/clientlib.h".}

proc set_once*(this: var AddEventListenerOptions; a2: bool) {.
    importcpp: "set_once", header: "cheerp/clientlib.h".}

proc get_passive*(this: var AddEventListenerOptions): bool {.
    importcpp: "get_passive", header: "cheerp/clientlib.h".}

proc set_passive*(this: var AddEventListenerOptions; a2: bool) {.
    importcpp: "set_passive", header: "cheerp/clientlib.h".}

proc get_name*(this: var Algorithm): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var Algorithm; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_iv*(this: var AesCbcParams): ptr Int8Array {.importcpp: "get_iv",
    header: "cheerp/clientlib.h".}

proc set_iv*(this: var AesCbcParams; a2: ptr Int8Array) {.importcpp: "set_iv",
    header: "cheerp/clientlib.h".}

proc get_counter*(this: var AesCtrParams): ptr Int8Array {.
    importcpp: "get_counter", header: "cheerp/clientlib.h".}

proc set_counter*(this: var AesCtrParams; a2: ptr Int8Array) {.
    importcpp: "set_counter", header: "cheerp/clientlib.h".}

proc get_length*(this: var AesCtrParams): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var AesCtrParams; a2: cdouble) {.importcpp: "set_length",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var AesDerivedKeyParams): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc set_length*(this: var AesDerivedKeyParams; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_additionalData*(this: var AesGcmParams): ptr Int8Array {.
    importcpp: "get_additionalData", header: "cheerp/clientlib.h".}

proc set_additionalData*(this: var AesGcmParams; a2: ptr Int8Array) {.
    importcpp: "set_additionalData", header: "cheerp/clientlib.h".}

proc get_iv*(this: var AesGcmParams): ptr Int8Array {.importcpp: "get_iv",
    header: "cheerp/clientlib.h".}

proc set_iv*(this: var AesGcmParams; a2: ptr Int8Array) {.importcpp: "set_iv",
    header: "cheerp/clientlib.h".}

proc get_tagLength*(this: var AesGcmParams): cdouble {.
    importcpp: "get_tagLength", header: "cheerp/clientlib.h".}

proc set_tagLength*(this: var AesGcmParams; a2: cdouble) {.
    importcpp: "set_tagLength", header: "cheerp/clientlib.h".}

proc get_name*(this: var KeyAlgorithm): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var KeyAlgorithm; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var AesKeyAlgorithm): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var AesKeyAlgorithm; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_length*(this: var AesKeyGenParams): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var AesKeyGenParams; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_channelCount*(this: var AudioNodeOptions): cdouble {.
    importcpp: "get_channelCount", header: "cheerp/clientlib.h".}

proc set_channelCount*(this: var AudioNodeOptions; a2: cdouble) {.
    importcpp: "set_channelCount", header: "cheerp/clientlib.h".}

proc get_channelCountMode*(this: var AudioNodeOptions): ptr String {.
    importcpp: "get_channelCountMode", header: "cheerp/clientlib.h".}

proc set_channelCountMode*(this: var AudioNodeOptions; a2: String) {.
    importcpp: "set_channelCountMode", header: "cheerp/clientlib.h".}

proc get_channelInterpretation*(this: var AudioNodeOptions): ptr String {.
    importcpp: "get_channelInterpretation", header: "cheerp/clientlib.h".}

proc set_channelInterpretation*(this: var AudioNodeOptions; a2: String) {.
    importcpp: "set_channelInterpretation", header: "cheerp/clientlib.h".}

proc get_fftSize*(this: var AnalyserOptions): cdouble {.
    importcpp: "get_fftSize", header: "cheerp/clientlib.h".}

proc set_fftSize*(this: var AnalyserOptions; a2: cdouble) {.
    importcpp: "set_fftSize", header: "cheerp/clientlib.h".}

proc get_maxDecibels*(this: var AnalyserOptions): cdouble {.
    importcpp: "get_maxDecibels", header: "cheerp/clientlib.h".}

proc set_maxDecibels*(this: var AnalyserOptions; a2: cdouble) {.
    importcpp: "set_maxDecibels", header: "cheerp/clientlib.h".}

proc get_minDecibels*(this: var AnalyserOptions): cdouble {.
    importcpp: "get_minDecibels", header: "cheerp/clientlib.h".}

proc set_minDecibels*(this: var AnalyserOptions; a2: cdouble) {.
    importcpp: "set_minDecibels", header: "cheerp/clientlib.h".}

proc get_smoothingTimeConstant*(this: var AnalyserOptions): cdouble {.
    importcpp: "get_smoothingTimeConstant", header: "cheerp/clientlib.h".}

proc set_smoothingTimeConstant*(this: var AnalyserOptions; a2: cdouble) {.
    importcpp: "set_smoothingTimeConstant", header: "cheerp/clientlib.h".}

proc get_bubbles*(this: var EventInit): bool {.importcpp: "get_bubbles",
    header: "cheerp/clientlib.h".}

proc set_bubbles*(this: var EventInit; a2: bool) {.importcpp: "set_bubbles",
    header: "cheerp/clientlib.h".}

proc get_cancelable*(this: var EventInit): bool {.importcpp: "get_cancelable",
    header: "cheerp/clientlib.h".}

proc set_cancelable*(this: var EventInit; a2: bool) {.
    importcpp: "set_cancelable", header: "cheerp/clientlib.h".}

proc get_scoped*(this: var EventInit): bool {.importcpp: "get_scoped",
    header: "cheerp/clientlib.h".}

proc set_scoped*(this: var EventInit; a2: bool) {.importcpp: "set_scoped",
    header: "cheerp/clientlib.h".}

proc get_animationName*(this: var AnimationEventInit): ptr String {.
    importcpp: "get_animationName", header: "cheerp/clientlib.h".}

proc set_animationName*(this: var AnimationEventInit; a2: String) {.
    importcpp: "set_animationName", header: "cheerp/clientlib.h".}

proc get_elapsedTime*(this: var AnimationEventInit): cdouble {.
    importcpp: "get_elapsedTime", header: "cheerp/clientlib.h".}

proc set_elapsedTime*(this: var AnimationEventInit; a2: cdouble) {.
    importcpp: "set_elapsedTime", header: "cheerp/clientlib.h".}

proc get_allowList*(this: var AssertionOptions): ptr Array {.
    importcpp: "get_allowList", header: "cheerp/clientlib.h".}

proc set_allowList*(this: var AssertionOptions; a2: ptr Array) {.
    importcpp: "set_allowList", header: "cheerp/clientlib.h".}

proc get_extensions*(this: var AssertionOptions): ptr WebAuthnExtensions {.
    importcpp: "get_extensions", header: "cheerp/clientlib.h".}

proc set_extensions*(this: var AssertionOptions; a2: ptr WebAuthnExtensions) {.
    importcpp: "set_extensions", header: "cheerp/clientlib.h".}

proc get_rpId*(this: var AssertionOptions): ptr String {.importcpp: "get_rpId",
    header: "cheerp/clientlib.h".}

proc set_rpId*(this: var AssertionOptions; a2: String) {.importcpp: "set_rpId",
    header: "cheerp/clientlib.h".}

proc get_timeoutSeconds*(this: var AssertionOptions): cdouble {.
    importcpp: "get_timeoutSeconds", header: "cheerp/clientlib.h".}

proc set_timeoutSeconds*(this: var AssertionOptions; a2: cdouble) {.
    importcpp: "set_timeoutSeconds", header: "cheerp/clientlib.h".}

proc get_length*(this: var AudioBufferOptions): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc set_length*(this: var AudioBufferOptions; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_numberOfChannels*(this: var AudioBufferOptions): cdouble {.
    importcpp: "get_numberOfChannels", header: "cheerp/clientlib.h".}

proc set_numberOfChannels*(this: var AudioBufferOptions; a2: cdouble) {.
    importcpp: "set_numberOfChannels", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var AudioBufferOptions): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var AudioBufferOptions; a2: cdouble) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_buffer*(this: var AudioBufferSourceOptions): ptr AudioBuffer {.
    importcpp: "get_buffer", header: "cheerp/clientlib.h".}

proc set_buffer*(this: var AudioBufferSourceOptions; a2: ptr AudioBuffer) {.
    importcpp: "set_buffer", header: "cheerp/clientlib.h".}

proc get_detune*(this: var AudioBufferSourceOptions): cdouble {.
    importcpp: "get_detune", header: "cheerp/clientlib.h".}

proc set_detune*(this: var AudioBufferSourceOptions; a2: cdouble) {.
    importcpp: "set_detune", header: "cheerp/clientlib.h".}

proc get_loop*(this: var AudioBufferSourceOptions): bool {.
    importcpp: "get_loop", header: "cheerp/clientlib.h".}

proc set_loop*(this: var AudioBufferSourceOptions; a2: bool) {.
    importcpp: "set_loop", header: "cheerp/clientlib.h".}

proc get_loopEnd*(this: var AudioBufferSourceOptions): cdouble {.
    importcpp: "get_loopEnd", header: "cheerp/clientlib.h".}

proc set_loopEnd*(this: var AudioBufferSourceOptions; a2: cdouble) {.
    importcpp: "set_loopEnd", header: "cheerp/clientlib.h".}

proc get_loopStart*(this: var AudioBufferSourceOptions): cdouble {.
    importcpp: "get_loopStart", header: "cheerp/clientlib.h".}

proc set_loopStart*(this: var AudioBufferSourceOptions; a2: cdouble) {.
    importcpp: "set_loopStart", header: "cheerp/clientlib.h".}

proc get_playbackRate*(this: var AudioBufferSourceOptions): cdouble {.
    importcpp: "get_playbackRate", header: "cheerp/clientlib.h".}

proc set_playbackRate*(this: var AudioBufferSourceOptions; a2: cdouble) {.
    importcpp: "set_playbackRate", header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var AudioContextInfo): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc set_currentTime*(this: var AudioContextInfo; a2: cdouble) {.
    importcpp: "set_currentTime", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var AudioContextInfo): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var AudioContextInfo; a2: cdouble) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_latencyHint*(this: var AudioContextOptions): ptr String {.
    importcpp: "get_latencyHint", header: "cheerp/clientlib.h".}

proc set_latencyHint*(this: var AudioContextOptions; a2: String) {.
    importcpp: "set_latencyHint", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var AudioContextOptions): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var AudioContextOptions; a2: cdouble) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_defaultValue*(this: var AudioParamDescriptor): cdouble {.
    importcpp: "get_defaultValue", header: "cheerp/clientlib.h".}

proc set_defaultValue*(this: var AudioParamDescriptor; a2: cdouble) {.
    importcpp: "set_defaultValue", header: "cheerp/clientlib.h".}

proc get_maxValue*(this: var AudioParamDescriptor): cdouble {.
    importcpp: "get_maxValue", header: "cheerp/clientlib.h".}

proc set_maxValue*(this: var AudioParamDescriptor; a2: cdouble) {.
    importcpp: "set_maxValue", header: "cheerp/clientlib.h".}

proc get_minValue*(this: var AudioParamDescriptor): cdouble {.
    importcpp: "get_minValue", header: "cheerp/clientlib.h".}

proc set_minValue*(this: var AudioParamDescriptor; a2: cdouble) {.
    importcpp: "set_minValue", header: "cheerp/clientlib.h".}

proc get_name*(this: var AudioParamDescriptor): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var AudioParamDescriptor; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_inputBuffer*(this: var AudioProcessingEventInit): ptr AudioBuffer {.
    importcpp: "get_inputBuffer", header: "cheerp/clientlib.h".}

proc set_inputBuffer*(this: var AudioProcessingEventInit; a2: ptr AudioBuffer) {.
    importcpp: "set_inputBuffer", header: "cheerp/clientlib.h".}

proc get_outputBuffer*(this: var AudioProcessingEventInit): ptr AudioBuffer {.
    importcpp: "get_outputBuffer", header: "cheerp/clientlib.h".}

proc set_outputBuffer*(this: var AudioProcessingEventInit; a2: ptr AudioBuffer) {.
    importcpp: "set_outputBuffer", header: "cheerp/clientlib.h".}

proc get_playbackTime*(this: var AudioProcessingEventInit): cdouble {.
    importcpp: "get_playbackTime", header: "cheerp/clientlib.h".}

proc set_playbackTime*(this: var AudioProcessingEventInit; a2: cdouble) {.
    importcpp: "set_playbackTime", header: "cheerp/clientlib.h".}

proc get_contextTime*(this: var AudioTimestamp): cdouble {.
    importcpp: "get_contextTime", header: "cheerp/clientlib.h".}

proc set_contextTime*(this: var AudioTimestamp; a2: cdouble) {.
    importcpp: "set_contextTime", header: "cheerp/clientlib.h".}

proc get_performanceTime*(this: var AudioTimestamp): cdouble {.
    importcpp: "get_performanceTime", header: "cheerp/clientlib.h".}

proc set_performanceTime*(this: var AudioTimestamp; a2: cdouble) {.
    importcpp: "set_performanceTime", header: "cheerp/clientlib.h".}

proc get_Q*(this: var BiquadFilterOptions): cdouble {.importcpp: "get_Q",
    header: "cheerp/clientlib.h".}

proc get_detune*(this: var BiquadFilterOptions): cdouble {.
    importcpp: "get_detune", header: "cheerp/clientlib.h".}

proc set_detune*(this: var BiquadFilterOptions; a2: cdouble) {.
    importcpp: "set_detune", header: "cheerp/clientlib.h".}

proc get_frequency*(this: var BiquadFilterOptions): cdouble {.
    importcpp: "get_frequency", header: "cheerp/clientlib.h".}

proc set_frequency*(this: var BiquadFilterOptions; a2: cdouble) {.
    importcpp: "set_frequency", header: "cheerp/clientlib.h".}

proc get_gain*(this: var BiquadFilterOptions): cdouble {.importcpp: "get_gain",
    header: "cheerp/clientlib.h".}

proc set_gain*(this: var BiquadFilterOptions; a2: cdouble) {.
    importcpp: "set_gain", header: "cheerp/clientlib.h".}

proc get_type*(this: var BiquadFilterOptions): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var BiquadFilterOptions; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_byteLength*(this: var ByteLengthChunk): cdouble {.
    importcpp: "get_byteLength", header: "cheerp/clientlib.h".}

proc set_byteLength*(this: var ByteLengthChunk; a2: cdouble) {.
    importcpp: "set_byteLength", header: "cheerp/clientlib.h".}

proc get_cacheName*(this: var CacheQueryOptions): ptr String {.
    importcpp: "get_cacheName", header: "cheerp/clientlib.h".}

proc set_cacheName*(this: var CacheQueryOptions; a2: String) {.
    importcpp: "set_cacheName", header: "cheerp/clientlib.h".}

proc get_ignoreMethod*(this: var CacheQueryOptions): bool {.
    importcpp: "get_ignoreMethod", header: "cheerp/clientlib.h".}

proc set_ignoreMethod*(this: var CacheQueryOptions; a2: bool) {.
    importcpp: "set_ignoreMethod", header: "cheerp/clientlib.h".}

proc get_ignoreSearch*(this: var CacheQueryOptions): bool {.
    importcpp: "get_ignoreSearch", header: "cheerp/clientlib.h".}

proc set_ignoreSearch*(this: var CacheQueryOptions; a2: bool) {.
    importcpp: "set_ignoreSearch", header: "cheerp/clientlib.h".}

proc get_ignoreVary*(this: var CacheQueryOptions): bool {.
    importcpp: "get_ignoreVary", header: "cheerp/clientlib.h".}

proc set_ignoreVary*(this: var CacheQueryOptions; a2: bool) {.
    importcpp: "set_ignoreVary", header: "cheerp/clientlib.h".}

proc get_numberOfInputs*(this: var ChannelMergerOptions): cdouble {.
    importcpp: "get_numberOfInputs", header: "cheerp/clientlib.h".}

proc set_numberOfInputs*(this: var ChannelMergerOptions; a2: cdouble) {.
    importcpp: "set_numberOfInputs", header: "cheerp/clientlib.h".}

proc get_numberOfOutputs*(this: var ChannelSplitterOptions): cdouble {.
    importcpp: "get_numberOfOutputs", header: "cheerp/clientlib.h".}

proc set_numberOfOutputs*(this: var ChannelSplitterOptions; a2: cdouble) {.
    importcpp: "set_numberOfOutputs", header: "cheerp/clientlib.h".}

proc get_challenge*(this: var ClientData): ptr String {.
    importcpp: "get_challenge", header: "cheerp/clientlib.h".}

proc set_challenge*(this: var ClientData; a2: String) {.
    importcpp: "set_challenge", header: "cheerp/clientlib.h".}

proc get_extensions*(this: var ClientData): ptr WebAuthnExtensions {.
    importcpp: "get_extensions", header: "cheerp/clientlib.h".}

proc set_extensions*(this: var ClientData; a2: ptr WebAuthnExtensions) {.
    importcpp: "set_extensions", header: "cheerp/clientlib.h".}

proc get_hashAlg*(this: var ClientData): ptr String {.importcpp: "get_hashAlg",
    header: "cheerp/clientlib.h".}

proc set_hashAlg*(this: var ClientData; a2: String) {.importcpp: "set_hashAlg",
    header: "cheerp/clientlib.h".}

proc get_origin*(this: var ClientData): ptr String {.importcpp: "get_origin",
    header: "cheerp/clientlib.h".}

proc set_origin*(this: var ClientData; a2: String) {.importcpp: "set_origin",
    header: "cheerp/clientlib.h".}

proc get_rpId*(this: var ClientData): ptr String {.importcpp: "get_rpId",
    header: "cheerp/clientlib.h".}

proc set_rpId*(this: var ClientData; a2: String) {.importcpp: "set_rpId",
    header: "cheerp/clientlib.h".}

proc get_tokenBinding*(this: var ClientData): ptr String {.
    importcpp: "get_tokenBinding", header: "cheerp/clientlib.h".}

proc set_tokenBinding*(this: var ClientData; a2: String) {.
    importcpp: "set_tokenBinding", header: "cheerp/clientlib.h".}

proc get_includeReserved*(this: var ClientQueryOptions): bool {.
    importcpp: "get_includeReserved", header: "cheerp/clientlib.h".}

proc set_includeReserved*(this: var ClientQueryOptions; a2: bool) {.
    importcpp: "set_includeReserved", header: "cheerp/clientlib.h".}

proc get_includeUncontrolled*(this: var ClientQueryOptions): bool {.
    importcpp: "get_includeUncontrolled", header: "cheerp/clientlib.h".}

proc set_includeUncontrolled*(this: var ClientQueryOptions; a2: bool) {.
    importcpp: "set_includeUncontrolled", header: "cheerp/clientlib.h".}

proc get_type*(this: var ClientQueryOptions): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var ClientQueryOptions; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_code*(this: var CloseEventInit): cdouble {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc set_code*(this: var CloseEventInit; a2: cdouble) {.importcpp: "set_code",
    header: "cheerp/clientlib.h".}

proc get_reason*(this: var CloseEventInit): ptr String {.
    importcpp: "get_reason", header: "cheerp/clientlib.h".}

proc set_reason*(this: var CloseEventInit; a2: String) {.
    importcpp: "set_reason", header: "cheerp/clientlib.h".}

proc get_wasClean*(this: var CloseEventInit): bool {.importcpp: "get_wasClean",
    header: "cheerp/clientlib.h".}

proc set_wasClean*(this: var CloseEventInit; a2: bool) {.
    importcpp: "set_wasClean", header: "cheerp/clientlib.h".}

proc get_detail*(this: var UIEventInit): cdouble {.importcpp: "get_detail",
    header: "cheerp/clientlib.h".}

proc set_detail*(this: var UIEventInit; a2: cdouble) {.importcpp: "set_detail",
    header: "cheerp/clientlib.h".}

proc get_view*(this: var UIEventInit): ptr Window {.importcpp: "get_view",
    header: "cheerp/clientlib.h".}

proc set_view*(this: var UIEventInit; a2: ptr Window) {.importcpp: "set_view",
    header: "cheerp/clientlib.h".}

proc get_data*(this: var CompositionEventInit): ptr String {.
    importcpp: "get_data", header: "cheerp/clientlib.h".}

proc set_data*(this: var CompositionEventInit; a2: String) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_domain*(this: var ExceptionInformation): ptr String {.
    importcpp: "get_domain", header: "cheerp/clientlib.h".}

proc set_domain*(this: var ExceptionInformation; a2: String) {.
    importcpp: "set_domain", header: "cheerp/clientlib.h".}

proc get_arrayOfDomainStrings*(this: var ConfirmSiteSpecificExceptionsInformation): ptr Array {.
    importcpp: "get_arrayOfDomainStrings", header: "cheerp/clientlib.h".}

proc set_arrayOfDomainStrings*(this: var ConfirmSiteSpecificExceptionsInformation;
                               a2: ptr Array) {.
    importcpp: "set_arrayOfDomainStrings", header: "cheerp/clientlib.h".}

proc get_offset*(this: var ConstantSourceOptions): cdouble {.
    importcpp: "get_offset", header: "cheerp/clientlib.h".}

proc set_offset*(this: var ConstantSourceOptions; a2: cdouble) {.
    importcpp: "set_offset", header: "cheerp/clientlib.h".}

proc get_exact*(this: var ConstrainBooleanParameters): bool {.
    importcpp: "get_exact", header: "cheerp/clientlib.h".}

proc set_exact*(this: var ConstrainBooleanParameters; a2: bool) {.
    importcpp: "set_exact", header: "cheerp/clientlib.h".}

proc get_ideal*(this: var ConstrainBooleanParameters): bool {.
    importcpp: "get_ideal", header: "cheerp/clientlib.h".}

proc set_ideal*(this: var ConstrainBooleanParameters; a2: bool) {.
    importcpp: "set_ideal", header: "cheerp/clientlib.h".}

proc get_exact*(this: var ConstrainDOMStringParameters): ptr String {.
    importcpp: "get_exact", header: "cheerp/clientlib.h".}

proc set_exact*(this: var ConstrainDOMStringParameters; a2: String) {.
    importcpp: "set_exact", header: "cheerp/clientlib.h".}

proc get_ideal*(this: var ConstrainDOMStringParameters): ptr String {.
    importcpp: "get_ideal", header: "cheerp/clientlib.h".}

proc set_ideal*(this: var ConstrainDOMStringParameters; a2: String) {.
    importcpp: "set_ideal", header: "cheerp/clientlib.h".}

proc get_max*(this: var DoubleRange): cdouble {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var DoubleRange; a2: cdouble) {.importcpp: "set_max",
    header: "cheerp/clientlib.h".}

proc get_min*(this: var DoubleRange): cdouble {.importcpp: "get_min",
    header: "cheerp/clientlib.h".}

proc set_min*(this: var DoubleRange; a2: cdouble) {.importcpp: "set_min",
    header: "cheerp/clientlib.h".}

proc get_exact*(this: var ConstrainDoubleRange): cdouble {.
    importcpp: "get_exact", header: "cheerp/clientlib.h".}

proc set_exact*(this: var ConstrainDoubleRange; a2: cdouble) {.
    importcpp: "set_exact", header: "cheerp/clientlib.h".}

proc get_ideal*(this: var ConstrainDoubleRange): cdouble {.
    importcpp: "get_ideal", header: "cheerp/clientlib.h".}

proc set_ideal*(this: var ConstrainDoubleRange; a2: cdouble) {.
    importcpp: "set_ideal", header: "cheerp/clientlib.h".}

proc get_max*(this: var LongRange): cdouble {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var LongRange; a2: cdouble) {.importcpp: "set_max",
    header: "cheerp/clientlib.h".}

proc get_min*(this: var LongRange): cdouble {.importcpp: "get_min",
    header: "cheerp/clientlib.h".}

proc set_min*(this: var LongRange; a2: cdouble) {.importcpp: "set_min",
    header: "cheerp/clientlib.h".}

proc get_exact*(this: var ConstrainLongRange): cdouble {.importcpp: "get_exact",
    header: "cheerp/clientlib.h".}

proc set_exact*(this: var ConstrainLongRange; a2: cdouble) {.
    importcpp: "set_exact", header: "cheerp/clientlib.h".}

proc get_ideal*(this: var ConstrainLongRange): cdouble {.importcpp: "get_ideal",
    header: "cheerp/clientlib.h".}

proc set_ideal*(this: var ConstrainLongRange; a2: cdouble) {.
    importcpp: "set_ideal", header: "cheerp/clientlib.h".}

proc set_exact*(this: var ConstrainVideoFacingModeParameters; a2: ptr Object) {.
    importcpp: "set_exact", header: "cheerp/clientlib.h".}

proc set_ideal*(this: var ConstrainVideoFacingModeParameters; a2: ptr Object) {.
    importcpp: "set_ideal", header: "cheerp/clientlib.h".}

proc get_buffer*(this: var ConvolverOptions): ptr AudioBuffer {.
    importcpp: "get_buffer", header: "cheerp/clientlib.h".}

proc set_buffer*(this: var ConvolverOptions; a2: ptr AudioBuffer) {.
    importcpp: "set_buffer", header: "cheerp/clientlib.h".}

proc get_disableNormalization*(this: var ConvolverOptions): bool {.
    importcpp: "get_disableNormalization", header: "cheerp/clientlib.h".}

proc set_disableNormalization*(this: var ConvolverOptions; a2: bool) {.
    importcpp: "set_disableNormalization", header: "cheerp/clientlib.h".}

proc get_detail*[T](this: var CustomEventInit[T]): ptr T {.
    importcpp: "get_detail", header: "cheerp/clientlib.h".}

proc set_detail*[T](this: var CustomEventInit[T]; a2: ptr T) {.
    importcpp: "set_detail", header: "cheerp/clientlib.h".}

proc get_height*(this: var DOMRectInit): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var DOMRectInit; a2: cdouble) {.importcpp: "set_height",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var DOMRectInit): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var DOMRectInit; a2: cdouble) {.importcpp: "set_width",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var DOMRectInit): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var DOMRectInit; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var DOMRectInit): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var DOMRectInit; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_delayTime*(this: var DelayOptions): cdouble {.
    importcpp: "get_delayTime", header: "cheerp/clientlib.h".}

proc set_delayTime*(this: var DelayOptions; a2: cdouble) {.
    importcpp: "set_delayTime", header: "cheerp/clientlib.h".}

proc get_maxDelayTime*(this: var DelayOptions): cdouble {.
    importcpp: "get_maxDelayTime", header: "cheerp/clientlib.h".}

proc set_maxDelayTime*(this: var DelayOptions; a2: cdouble) {.
    importcpp: "set_maxDelayTime", header: "cheerp/clientlib.h".}

proc get_x*(this: var DeviceAccelerationDict): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var DeviceAccelerationDict; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var DeviceAccelerationDict): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var DeviceAccelerationDict; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_z*(this: var DeviceAccelerationDict): cdouble {.importcpp: "get_z",
    header: "cheerp/clientlib.h".}

proc set_z*(this: var DeviceAccelerationDict; a2: cdouble) {.importcpp: "set_z",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var DeviceLightEventInit): cdouble {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var DeviceLightEventInit; a2: cdouble) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_acceleration*(this: var DeviceMotionEventInit): ptr DeviceAccelerationDict {.
    importcpp: "get_acceleration", header: "cheerp/clientlib.h".}

proc set_acceleration*(this: var DeviceMotionEventInit;
                       a2: ptr DeviceAccelerationDict) {.
    importcpp: "set_acceleration", header: "cheerp/clientlib.h".}

proc get_accelerationIncludingGravity*(this: var DeviceMotionEventInit): ptr DeviceAccelerationDict {.
    importcpp: "get_accelerationIncludingGravity", header: "cheerp/clientlib.h".}

proc set_accelerationIncludingGravity*(this: var DeviceMotionEventInit;
                                       a2: ptr DeviceAccelerationDict) {.
    importcpp: "set_accelerationIncludingGravity", header: "cheerp/clientlib.h".}

proc get_interval*(this: var DeviceMotionEventInit): cdouble {.
    importcpp: "get_interval", header: "cheerp/clientlib.h".}

proc set_interval*(this: var DeviceMotionEventInit; a2: cdouble) {.
    importcpp: "set_interval", header: "cheerp/clientlib.h".}

proc get_rotationRate*(this: var DeviceMotionEventInit): ptr DeviceRotationRateDict {.
    importcpp: "get_rotationRate", header: "cheerp/clientlib.h".}

proc set_rotationRate*(this: var DeviceMotionEventInit;
                       a2: ptr DeviceRotationRateDict) {.
    importcpp: "set_rotationRate", header: "cheerp/clientlib.h".}

proc get_absolute*(this: var DeviceOrientationEventInit): bool {.
    importcpp: "get_absolute", header: "cheerp/clientlib.h".}

proc set_absolute*(this: var DeviceOrientationEventInit; a2: bool) {.
    importcpp: "set_absolute", header: "cheerp/clientlib.h".}

proc get_alpha*(this: var DeviceOrientationEventInit): cdouble {.
    importcpp: "get_alpha", header: "cheerp/clientlib.h".}

proc set_alpha*(this: var DeviceOrientationEventInit; a2: cdouble) {.
    importcpp: "set_alpha", header: "cheerp/clientlib.h".}

proc get_beta*(this: var DeviceOrientationEventInit): cdouble {.
    importcpp: "get_beta", header: "cheerp/clientlib.h".}

proc set_beta*(this: var DeviceOrientationEventInit; a2: cdouble) {.
    importcpp: "set_beta", header: "cheerp/clientlib.h".}

proc get_gamma*(this: var DeviceOrientationEventInit): cdouble {.
    importcpp: "get_gamma", header: "cheerp/clientlib.h".}

proc set_gamma*(this: var DeviceOrientationEventInit; a2: cdouble) {.
    importcpp: "set_gamma", header: "cheerp/clientlib.h".}

proc get_alpha*(this: var DeviceRotationRateDict): cdouble {.
    importcpp: "get_alpha", header: "cheerp/clientlib.h".}

proc set_alpha*(this: var DeviceRotationRateDict; a2: cdouble) {.
    importcpp: "set_alpha", header: "cheerp/clientlib.h".}

proc get_beta*(this: var DeviceRotationRateDict): cdouble {.
    importcpp: "get_beta", header: "cheerp/clientlib.h".}

proc set_beta*(this: var DeviceRotationRateDict; a2: cdouble) {.
    importcpp: "set_beta", header: "cheerp/clientlib.h".}

proc get_gamma*(this: var DeviceRotationRateDict): cdouble {.
    importcpp: "get_gamma", header: "cheerp/clientlib.h".}

proc set_gamma*(this: var DeviceRotationRateDict; a2: cdouble) {.
    importcpp: "set_gamma", header: "cheerp/clientlib.h".}

proc get_attack*(this: var DynamicsCompressorOptions): cdouble {.
    importcpp: "get_attack", header: "cheerp/clientlib.h".}

proc set_attack*(this: var DynamicsCompressorOptions; a2: cdouble) {.
    importcpp: "set_attack", header: "cheerp/clientlib.h".}

proc get_knee*(this: var DynamicsCompressorOptions): cdouble {.
    importcpp: "get_knee", header: "cheerp/clientlib.h".}

proc set_knee*(this: var DynamicsCompressorOptions; a2: cdouble) {.
    importcpp: "set_knee", header: "cheerp/clientlib.h".}

proc get_ratio*(this: var DynamicsCompressorOptions): cdouble {.
    importcpp: "get_ratio", header: "cheerp/clientlib.h".}

proc set_ratio*(this: var DynamicsCompressorOptions; a2: cdouble) {.
    importcpp: "set_ratio", header: "cheerp/clientlib.h".}

proc get_release*(this: var DynamicsCompressorOptions): cdouble {.
    importcpp: "get_release", header: "cheerp/clientlib.h".}

proc set_release*(this: var DynamicsCompressorOptions; a2: cdouble) {.
    importcpp: "set_release", header: "cheerp/clientlib.h".}

proc get_threshold*(this: var DynamicsCompressorOptions): cdouble {.
    importcpp: "get_threshold", header: "cheerp/clientlib.h".}

proc set_threshold*(this: var DynamicsCompressorOptions; a2: cdouble) {.
    importcpp: "set_threshold", header: "cheerp/clientlib.h".}

proc get_namedCurve*(this: var EcKeyAlgorithm): ptr String {.
    importcpp: "get_namedCurve", header: "cheerp/clientlib.h".}

proc set_namedCurve*(this: var EcKeyAlgorithm; a2: String) {.
    importcpp: "set_namedCurve", header: "cheerp/clientlib.h".}

proc get_namedCurve*(this: var EcKeyGenParams): ptr String {.
    importcpp: "get_namedCurve", header: "cheerp/clientlib.h".}

proc set_namedCurve*(this: var EcKeyGenParams; a2: String) {.
    importcpp: "set_namedCurve", header: "cheerp/clientlib.h".}

proc get_namedCurve*(this: var EcKeyImportParams): ptr String {.
    importcpp: "get_namedCurve", header: "cheerp/clientlib.h".}

proc set_namedCurve*(this: var EcKeyImportParams; a2: String) {.
    importcpp: "set_namedCurve", header: "cheerp/clientlib.h".}

proc get_public*(this: var EcdhKeyDeriveParams): ptr CryptoKey {.
    importcpp: "get_public", header: "cheerp/clientlib.h".}

proc set_public*(this: var EcdhKeyDeriveParams; a2: ptr CryptoKey) {.
    importcpp: "set_public", header: "cheerp/clientlib.h".}

proc get_hash*(this: var EcdsaParams): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var EcdsaParams; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_colno*(this: var ErrorEventInit): cdouble {.importcpp: "get_colno",
    header: "cheerp/clientlib.h".}

proc set_colno*(this: var ErrorEventInit; a2: cdouble) {.importcpp: "set_colno",
    header: "cheerp/clientlib.h".}

proc set_error*(this: var ErrorEventInit; a2: ptr Object) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_filename*(this: var ErrorEventInit): ptr String {.
    importcpp: "get_filename", header: "cheerp/clientlib.h".}

proc set_filename*(this: var ErrorEventInit; a2: String) {.
    importcpp: "set_filename", header: "cheerp/clientlib.h".}

proc get_lineno*(this: var ErrorEventInit): cdouble {.importcpp: "get_lineno",
    header: "cheerp/clientlib.h".}

proc set_lineno*(this: var ErrorEventInit; a2: cdouble) {.
    importcpp: "set_lineno", header: "cheerp/clientlib.h".}

proc get_message*(this: var ErrorEventInit): ptr String {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var ErrorEventInit; a2: String) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_altKey*(this: var EventModifierInit): bool {.importcpp: "get_altKey",
    header: "cheerp/clientlib.h".}

proc set_altKey*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_altKey", header: "cheerp/clientlib.h".}

proc get_ctrlKey*(this: var EventModifierInit): bool {.importcpp: "get_ctrlKey",
    header: "cheerp/clientlib.h".}

proc set_ctrlKey*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_ctrlKey", header: "cheerp/clientlib.h".}

proc get_metaKey*(this: var EventModifierInit): bool {.importcpp: "get_metaKey",
    header: "cheerp/clientlib.h".}

proc set_metaKey*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_metaKey", header: "cheerp/clientlib.h".}

proc get_modifierAltGraph*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierAltGraph", header: "cheerp/clientlib.h".}

proc set_modifierAltGraph*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierAltGraph", header: "cheerp/clientlib.h".}

proc get_modifierCapsLock*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierCapsLock", header: "cheerp/clientlib.h".}

proc set_modifierCapsLock*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierCapsLock", header: "cheerp/clientlib.h".}

proc get_modifierFn*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierFn", header: "cheerp/clientlib.h".}

proc set_modifierFn*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierFn", header: "cheerp/clientlib.h".}

proc get_modifierFnLock*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierFnLock", header: "cheerp/clientlib.h".}

proc set_modifierFnLock*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierFnLock", header: "cheerp/clientlib.h".}

proc get_modifierHyper*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierHyper", header: "cheerp/clientlib.h".}

proc set_modifierHyper*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierHyper", header: "cheerp/clientlib.h".}

proc get_modifierNumLock*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierNumLock", header: "cheerp/clientlib.h".}

proc set_modifierNumLock*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierNumLock", header: "cheerp/clientlib.h".}

proc get_modifierOS*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierOS", header: "cheerp/clientlib.h".}

proc set_modifierOS*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierOS", header: "cheerp/clientlib.h".}

proc get_modifierScrollLock*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierScrollLock", header: "cheerp/clientlib.h".}

proc set_modifierScrollLock*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierScrollLock", header: "cheerp/clientlib.h".}

proc get_modifierSuper*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierSuper", header: "cheerp/clientlib.h".}

proc set_modifierSuper*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierSuper", header: "cheerp/clientlib.h".}

proc get_modifierSymbol*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierSymbol", header: "cheerp/clientlib.h".}

proc set_modifierSymbol*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierSymbol", header: "cheerp/clientlib.h".}

proc get_modifierSymbolLock*(this: var EventModifierInit): bool {.
    importcpp: "get_modifierSymbolLock", header: "cheerp/clientlib.h".}

proc set_modifierSymbolLock*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_modifierSymbolLock", header: "cheerp/clientlib.h".}

proc get_shiftKey*(this: var EventModifierInit): bool {.
    importcpp: "get_shiftKey", header: "cheerp/clientlib.h".}

proc set_shiftKey*(this: var EventModifierInit; a2: bool) {.
    importcpp: "set_shiftKey", header: "cheerp/clientlib.h".}

proc set_data*(this: var ExtendableMessageEventInit; a2: ptr Object) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_lastEventId*(this: var ExtendableMessageEventInit): ptr String {.
    importcpp: "get_lastEventId", header: "cheerp/clientlib.h".}

proc set_lastEventId*(this: var ExtendableMessageEventInit; a2: String) {.
    importcpp: "set_lastEventId", header: "cheerp/clientlib.h".}

proc get_origin*(this: var ExtendableMessageEventInit): ptr String {.
    importcpp: "get_origin", header: "cheerp/clientlib.h".}

proc set_origin*(this: var ExtendableMessageEventInit; a2: String) {.
    importcpp: "set_origin", header: "cheerp/clientlib.h".}

proc get_ports*(this: var ExtendableMessageEventInit): ptr Array {.
    importcpp: "get_ports", header: "cheerp/clientlib.h".}

proc set_ports*(this: var ExtendableMessageEventInit; a2: ptr Array) {.
    importcpp: "set_ports", header: "cheerp/clientlib.h".}

proc set_source*(this: var ExtendableMessageEventInit; a2: ptr Object) {.
    importcpp: "set_source", header: "cheerp/clientlib.h".}

proc get_clientId*(this: var FetchEventInit): ptr String {.
    importcpp: "get_clientId", header: "cheerp/clientlib.h".}

proc set_clientId*(this: var FetchEventInit; a2: String) {.
    importcpp: "set_clientId", header: "cheerp/clientlib.h".}

proc get_request*(this: var FetchEventInit): ptr Request {.
    importcpp: "get_request", header: "cheerp/clientlib.h".}

proc set_request*(this: var FetchEventInit; a2: ptr Request) {.
    importcpp: "set_request", header: "cheerp/clientlib.h".}

proc get_reservedClientId*(this: var FetchEventInit): ptr String {.
    importcpp: "get_reservedClientId", header: "cheerp/clientlib.h".}

proc set_reservedClientId*(this: var FetchEventInit; a2: String) {.
    importcpp: "set_reservedClientId", header: "cheerp/clientlib.h".}

proc get_targetClientId*(this: var FetchEventInit): ptr String {.
    importcpp: "get_targetClientId", header: "cheerp/clientlib.h".}

proc set_targetClientId*(this: var FetchEventInit; a2: String) {.
    importcpp: "set_targetClientId", header: "cheerp/clientlib.h".}

proc get_relatedTarget*(this: var FocusEventInit): ptr EventTarget {.
    importcpp: "get_relatedTarget", header: "cheerp/clientlib.h".}

proc set_relatedTarget*(this: var FocusEventInit; a2: ptr EventTarget) {.
    importcpp: "set_relatedTarget", header: "cheerp/clientlib.h".}

proc get_navigationReason*(this: var FocusNavigationEventInit): ptr String {.
    importcpp: "get_navigationReason", header: "cheerp/clientlib.h".}

proc set_navigationReason*(this: var FocusNavigationEventInit; a2: String) {.
    importcpp: "set_navigationReason", header: "cheerp/clientlib.h".}

proc get_originHeight*(this: var FocusNavigationEventInit): cdouble {.
    importcpp: "get_originHeight", header: "cheerp/clientlib.h".}

proc set_originHeight*(this: var FocusNavigationEventInit; a2: cdouble) {.
    importcpp: "set_originHeight", header: "cheerp/clientlib.h".}

proc get_originLeft*(this: var FocusNavigationEventInit): cdouble {.
    importcpp: "get_originLeft", header: "cheerp/clientlib.h".}

proc set_originLeft*(this: var FocusNavigationEventInit; a2: cdouble) {.
    importcpp: "set_originLeft", header: "cheerp/clientlib.h".}

proc get_originTop*(this: var FocusNavigationEventInit): cdouble {.
    importcpp: "get_originTop", header: "cheerp/clientlib.h".}

proc set_originTop*(this: var FocusNavigationEventInit; a2: cdouble) {.
    importcpp: "set_originTop", header: "cheerp/clientlib.h".}

proc get_originWidth*(this: var FocusNavigationEventInit): cdouble {.
    importcpp: "get_originWidth", header: "cheerp/clientlib.h".}

proc set_originWidth*(this: var FocusNavigationEventInit; a2: cdouble) {.
    importcpp: "set_originWidth", header: "cheerp/clientlib.h".}

proc get_originHeight*(this: var FocusNavigationOrigin): cdouble {.
    importcpp: "get_originHeight", header: "cheerp/clientlib.h".}

proc set_originHeight*(this: var FocusNavigationOrigin; a2: cdouble) {.
    importcpp: "set_originHeight", header: "cheerp/clientlib.h".}

proc get_originLeft*(this: var FocusNavigationOrigin): cdouble {.
    importcpp: "get_originLeft", header: "cheerp/clientlib.h".}

proc set_originLeft*(this: var FocusNavigationOrigin; a2: cdouble) {.
    importcpp: "set_originLeft", header: "cheerp/clientlib.h".}

proc get_originTop*(this: var FocusNavigationOrigin): cdouble {.
    importcpp: "get_originTop", header: "cheerp/clientlib.h".}

proc set_originTop*(this: var FocusNavigationOrigin; a2: cdouble) {.
    importcpp: "set_originTop", header: "cheerp/clientlib.h".}

proc get_originWidth*(this: var FocusNavigationOrigin): cdouble {.
    importcpp: "get_originWidth", header: "cheerp/clientlib.h".}

proc set_originWidth*(this: var FocusNavigationOrigin; a2: cdouble) {.
    importcpp: "set_originWidth", header: "cheerp/clientlib.h".}

proc get_gain*(this: var GainOptions): cdouble {.importcpp: "get_gain",
    header: "cheerp/clientlib.h".}

proc set_gain*(this: var GainOptions; a2: cdouble) {.importcpp: "set_gain",
    header: "cheerp/clientlib.h".}

proc get_gamepad*(this: var GamepadEventInit): ptr Gamepad {.
    importcpp: "get_gamepad", header: "cheerp/clientlib.h".}

proc set_gamepad*(this: var GamepadEventInit; a2: ptr Gamepad) {.
    importcpp: "set_gamepad", header: "cheerp/clientlib.h".}

proc get_tag*(this: var GetNotificationOptions): ptr String {.
    importcpp: "get_tag", header: "cheerp/clientlib.h".}

proc set_tag*(this: var GetNotificationOptions; a2: String) {.
    importcpp: "set_tag", header: "cheerp/clientlib.h".}

proc get_newURL*(this: var HashChangeEventInit): ptr String {.
    importcpp: "get_newURL", header: "cheerp/clientlib.h".}

proc set_newURL*(this: var HashChangeEventInit; a2: String) {.
    importcpp: "set_newURL", header: "cheerp/clientlib.h".}

proc get_oldURL*(this: var HashChangeEventInit): ptr String {.
    importcpp: "get_oldURL", header: "cheerp/clientlib.h".}

proc set_oldURL*(this: var HashChangeEventInit; a2: String) {.
    importcpp: "set_oldURL", header: "cheerp/clientlib.h".}

proc get_hash*(this: var HkdfParams): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var HkdfParams; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_info*(this: var HkdfParams): ptr Int8Array {.importcpp: "get_info",
    header: "cheerp/clientlib.h".}

proc set_info*(this: var HkdfParams; a2: ptr Int8Array) {.importcpp: "set_info",
    header: "cheerp/clientlib.h".}

proc get_salt*(this: var HkdfParams): ptr Int8Array {.importcpp: "get_salt",
    header: "cheerp/clientlib.h".}

proc set_salt*(this: var HkdfParams; a2: ptr Int8Array) {.importcpp: "set_salt",
    header: "cheerp/clientlib.h".}

proc get_hash*(this: var HmacImportParams): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var HmacImportParams; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var HmacImportParams): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var HmacImportParams; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_hash*(this: var HmacKeyAlgorithm): ptr KeyAlgorithm {.
    importcpp: "get_hash", header: "cheerp/clientlib.h".}

proc set_hash*(this: var HmacKeyAlgorithm; a2: ptr KeyAlgorithm) {.
    importcpp: "set_hash", header: "cheerp/clientlib.h".}

proc get_length*(this: var HmacKeyAlgorithm): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var HmacKeyAlgorithm; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_hash*(this: var HmacKeyGenParams): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var HmacKeyGenParams; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var HmacKeyGenParams): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var HmacKeyGenParams; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_multiEntry*(this: var IDBIndexParameters): bool {.
    importcpp: "get_multiEntry", header: "cheerp/clientlib.h".}

proc set_multiEntry*(this: var IDBIndexParameters; a2: bool) {.
    importcpp: "set_multiEntry", header: "cheerp/clientlib.h".}

proc get_unique*(this: var IDBIndexParameters): bool {.importcpp: "get_unique",
    header: "cheerp/clientlib.h".}

proc set_unique*(this: var IDBIndexParameters; a2: bool) {.
    importcpp: "set_unique", header: "cheerp/clientlib.h".}

proc get_autoIncrement*(this: var IDBObjectStoreParameters): bool {.
    importcpp: "get_autoIncrement", header: "cheerp/clientlib.h".}

proc set_autoIncrement*(this: var IDBObjectStoreParameters; a2: bool) {.
    importcpp: "set_autoIncrement", header: "cheerp/clientlib.h".}

proc get_keyPath*(this: var IDBObjectStoreParameters): ptr String {.
    importcpp: "get_keyPath", header: "cheerp/clientlib.h".}

proc set_keyPath*(this: var IDBObjectStoreParameters; a2: String) {.
    importcpp: "set_keyPath", header: "cheerp/clientlib.h".}

proc get_feedback*(this: var IIRFilterOptions): ptr Array {.
    importcpp: "get_feedback", header: "cheerp/clientlib.h".}

proc set_feedback*(this: var IIRFilterOptions; a2: ptr Array) {.
    importcpp: "set_feedback", header: "cheerp/clientlib.h".}

proc get_feedforward*(this: var IIRFilterOptions): ptr Array {.
    importcpp: "get_feedforward", header: "cheerp/clientlib.h".}

proc set_feedforward*(this: var IIRFilterOptions; a2: ptr Array) {.
    importcpp: "set_feedforward", header: "cheerp/clientlib.h".}

proc get_boundingClientRect*(this: var IntersectionObserverEntryInit): ptr DOMRectInit {.
    importcpp: "get_boundingClientRect", header: "cheerp/clientlib.h".}

proc set_boundingClientRect*(this: var IntersectionObserverEntryInit;
                             a2: ptr DOMRectInit) {.
    importcpp: "set_boundingClientRect", header: "cheerp/clientlib.h".}

proc get_intersectionRect*(this: var IntersectionObserverEntryInit): ptr DOMRectInit {.
    importcpp: "get_intersectionRect", header: "cheerp/clientlib.h".}

proc set_intersectionRect*(this: var IntersectionObserverEntryInit;
                           a2: ptr DOMRectInit) {.
    importcpp: "set_intersectionRect", header: "cheerp/clientlib.h".}

proc get_isIntersecting*(this: var IntersectionObserverEntryInit): bool {.
    importcpp: "get_isIntersecting", header: "cheerp/clientlib.h".}

proc set_isIntersecting*(this: var IntersectionObserverEntryInit; a2: bool) {.
    importcpp: "set_isIntersecting", header: "cheerp/clientlib.h".}

proc get_rootBounds*(this: var IntersectionObserverEntryInit): ptr DOMRectInit {.
    importcpp: "get_rootBounds", header: "cheerp/clientlib.h".}

proc set_rootBounds*(this: var IntersectionObserverEntryInit;
                     a2: ptr DOMRectInit) {.importcpp: "set_rootBounds",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var IntersectionObserverEntryInit): ptr Element {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc set_target*(this: var IntersectionObserverEntryInit; a2: ptr Element) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc get_time*(this: var IntersectionObserverEntryInit): cdouble {.
    importcpp: "get_time", header: "cheerp/clientlib.h".}

proc set_time*(this: var IntersectionObserverEntryInit; a2: cdouble) {.
    importcpp: "set_time", header: "cheerp/clientlib.h".}

proc get_root*(this: var IntersectionObserverInit): ptr Element {.
    importcpp: "get_root", header: "cheerp/clientlib.h".}

proc set_root*(this: var IntersectionObserverInit; a2: ptr Element) {.
    importcpp: "set_root", header: "cheerp/clientlib.h".}

proc get_rootMargin*(this: var IntersectionObserverInit): ptr String {.
    importcpp: "get_rootMargin", header: "cheerp/clientlib.h".}

proc set_rootMargin*(this: var IntersectionObserverInit; a2: String) {.
    importcpp: "set_rootMargin", header: "cheerp/clientlib.h".}

proc get_threshold*(this: var IntersectionObserverInit): cdouble {.
    importcpp: "get_threshold", header: "cheerp/clientlib.h".}

proc set_threshold*(this: var IntersectionObserverInit; a2: cdouble) {.
    importcpp: "set_threshold", header: "cheerp/clientlib.h".}

proc get_alg*(this: var JsonWebKey): ptr String {.importcpp: "get_alg",
    header: "cheerp/clientlib.h".}

proc set_alg*(this: var JsonWebKey; a2: String) {.importcpp: "set_alg",
    header: "cheerp/clientlib.h".}

proc get_crv*(this: var JsonWebKey): ptr String {.importcpp: "get_crv",
    header: "cheerp/clientlib.h".}

proc set_crv*(this: var JsonWebKey; a2: String) {.importcpp: "set_crv",
    header: "cheerp/clientlib.h".}

proc get_d*(this: var JsonWebKey): ptr String {.importcpp: "get_d",
    header: "cheerp/clientlib.h".}

proc set_d*(this: var JsonWebKey; a2: String) {.importcpp: "set_d",
    header: "cheerp/clientlib.h".}

proc get_dp*(this: var JsonWebKey): ptr String {.importcpp: "get_dp",
    header: "cheerp/clientlib.h".}

proc set_dp*(this: var JsonWebKey; a2: String) {.importcpp: "set_dp",
    header: "cheerp/clientlib.h".}

proc get_dq*(this: var JsonWebKey): ptr String {.importcpp: "get_dq",
    header: "cheerp/clientlib.h".}

proc set_dq*(this: var JsonWebKey; a2: String) {.importcpp: "set_dq",
    header: "cheerp/clientlib.h".}

proc get_e*(this: var JsonWebKey): ptr String {.importcpp: "get_e",
    header: "cheerp/clientlib.h".}

proc set_e*(this: var JsonWebKey; a2: String) {.importcpp: "set_e",
    header: "cheerp/clientlib.h".}

proc get_ext*(this: var JsonWebKey): bool {.importcpp: "get_ext",
    header: "cheerp/clientlib.h".}

proc set_ext*(this: var JsonWebKey; a2: bool) {.importcpp: "set_ext",
    header: "cheerp/clientlib.h".}

proc get_k*(this: var JsonWebKey): ptr String {.importcpp: "get_k",
    header: "cheerp/clientlib.h".}

proc set_k*(this: var JsonWebKey; a2: String) {.importcpp: "set_k",
    header: "cheerp/clientlib.h".}

proc get_key_ops*(this: var JsonWebKey): ptr Array {.importcpp: "get_key_ops",
    header: "cheerp/clientlib.h".}

proc set_key_ops*(this: var JsonWebKey; a2: ptr Array) {.
    importcpp: "set_key_ops", header: "cheerp/clientlib.h".}

proc get_kty*(this: var JsonWebKey): ptr String {.importcpp: "get_kty",
    header: "cheerp/clientlib.h".}

proc set_kty*(this: var JsonWebKey; a2: String) {.importcpp: "set_kty",
    header: "cheerp/clientlib.h".}

proc get_n*(this: var JsonWebKey): ptr String {.importcpp: "get_n",
    header: "cheerp/clientlib.h".}

proc set_n*(this: var JsonWebKey; a2: String) {.importcpp: "set_n",
    header: "cheerp/clientlib.h".}

proc get_oth*(this: var JsonWebKey): ptr Array {.importcpp: "get_oth",
    header: "cheerp/clientlib.h".}

proc set_oth*(this: var JsonWebKey; a2: ptr Array) {.importcpp: "set_oth",
    header: "cheerp/clientlib.h".}

proc get_p*(this: var JsonWebKey): ptr String {.importcpp: "get_p",
    header: "cheerp/clientlib.h".}

proc set_p*(this: var JsonWebKey; a2: String) {.importcpp: "set_p",
    header: "cheerp/clientlib.h".}

proc get_q*(this: var JsonWebKey): ptr String {.importcpp: "get_q",
    header: "cheerp/clientlib.h".}

proc set_q*(this: var JsonWebKey; a2: String) {.importcpp: "set_q",
    header: "cheerp/clientlib.h".}

proc get_qi*(this: var JsonWebKey): ptr String {.importcpp: "get_qi",
    header: "cheerp/clientlib.h".}

proc set_qi*(this: var JsonWebKey; a2: String) {.importcpp: "set_qi",
    header: "cheerp/clientlib.h".}

proc get_use*(this: var JsonWebKey): ptr String {.importcpp: "get_use",
    header: "cheerp/clientlib.h".}

proc set_use*(this: var JsonWebKey; a2: String) {.importcpp: "set_use",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var JsonWebKey): ptr String {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var JsonWebKey; a2: String) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var JsonWebKey): ptr String {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var JsonWebKey; a2: String) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_code*(this: var KeyboardEventInit): ptr String {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc set_code*(this: var KeyboardEventInit; a2: String) {.importcpp: "set_code",
    header: "cheerp/clientlib.h".}

proc get_key*(this: var KeyboardEventInit): ptr String {.importcpp: "get_key",
    header: "cheerp/clientlib.h".}

proc set_key*(this: var KeyboardEventInit; a2: String) {.importcpp: "set_key",
    header: "cheerp/clientlib.h".}

proc get_location*(this: var KeyboardEventInit): cdouble {.
    importcpp: "get_location", header: "cheerp/clientlib.h".}

proc set_location*(this: var KeyboardEventInit; a2: cdouble) {.
    importcpp: "set_location", header: "cheerp/clientlib.h".}

proc get_repeat*(this: var KeyboardEventInit): bool {.importcpp: "get_repeat",
    header: "cheerp/clientlib.h".}

proc set_repeat*(this: var KeyboardEventInit; a2: bool) {.
    importcpp: "set_repeat", header: "cheerp/clientlib.h".}

proc get_accountImageUri*(this: var MSAccountInfo): ptr String {.
    importcpp: "get_accountImageUri", header: "cheerp/clientlib.h".}

proc set_accountImageUri*(this: var MSAccountInfo; a2: String) {.
    importcpp: "set_accountImageUri", header: "cheerp/clientlib.h".}

proc get_accountName*(this: var MSAccountInfo): ptr String {.
    importcpp: "get_accountName", header: "cheerp/clientlib.h".}

proc set_accountName*(this: var MSAccountInfo; a2: String) {.
    importcpp: "set_accountName", header: "cheerp/clientlib.h".}

proc get_rpDisplayName*(this: var MSAccountInfo): ptr String {.
    importcpp: "get_rpDisplayName", header: "cheerp/clientlib.h".}

proc set_rpDisplayName*(this: var MSAccountInfo; a2: String) {.
    importcpp: "set_rpDisplayName", header: "cheerp/clientlib.h".}

proc get_userDisplayName*(this: var MSAccountInfo): ptr String {.
    importcpp: "get_userDisplayName", header: "cheerp/clientlib.h".}

proc set_userDisplayName*(this: var MSAccountInfo; a2: String) {.
    importcpp: "set_userDisplayName", header: "cheerp/clientlib.h".}

proc get_userId*(this: var MSAccountInfo): ptr String {.importcpp: "get_userId",
    header: "cheerp/clientlib.h".}

proc set_userId*(this: var MSAccountInfo; a2: String) {.importcpp: "set_userId",
    header: "cheerp/clientlib.h".}

proc get_id*(this: var RTCStats): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var RTCStats; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_msType*(this: var RTCStats): ptr String {.importcpp: "get_msType",
    header: "cheerp/clientlib.h".}

proc set_msType*(this: var RTCStats; a2: String) {.importcpp: "set_msType",
    header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var RTCStats): cdouble {.importcpp: "get_timestamp",
    header: "cheerp/clientlib.h".}

proc set_timestamp*(this: var RTCStats; a2: cdouble) {.
    importcpp: "set_timestamp", header: "cheerp/clientlib.h".}

proc get_type*(this: var RTCStats): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var RTCStats; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_networkBandwidthLowEventRatio*(this: var MSLocalClientEventBase): cdouble {.
    importcpp: "get_networkBandwidthLowEventRatio", header: "cheerp/clientlib.h".}

proc set_networkBandwidthLowEventRatio*(this: var MSLocalClientEventBase;
                                        a2: cdouble) {.
    importcpp: "set_networkBandwidthLowEventRatio", header: "cheerp/clientlib.h".}

proc get_networkReceiveQualityEventRatio*(this: var MSLocalClientEventBase): cdouble {.
    importcpp: "get_networkReceiveQualityEventRatio",
    header: "cheerp/clientlib.h".}

proc set_networkReceiveQualityEventRatio*(this: var MSLocalClientEventBase;
    a2: cdouble) {.importcpp: "set_networkReceiveQualityEventRatio",
                   header: "cheerp/clientlib.h".}

proc get_cpuInsufficientEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_cpuInsufficientEventRatio", header: "cheerp/clientlib.h".}

proc set_cpuInsufficientEventRatio*(this: var MSAudioLocalClientEvent;
                                    a2: cdouble) {.
    importcpp: "set_cpuInsufficientEventRatio", header: "cheerp/clientlib.h".}

proc get_deviceCaptureNotFunctioningEventRatio*(
    this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceCaptureNotFunctioningEventRatio",
    header: "cheerp/clientlib.h".}

proc set_deviceCaptureNotFunctioningEventRatio*(
    this: var MSAudioLocalClientEvent; a2: cdouble) {.
    importcpp: "set_deviceCaptureNotFunctioningEventRatio",
    header: "cheerp/clientlib.h".}

proc get_deviceClippingEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceClippingEventRatio", header: "cheerp/clientlib.h".}

proc set_deviceClippingEventRatio*(this: var MSAudioLocalClientEvent;
                                   a2: cdouble) {.
    importcpp: "set_deviceClippingEventRatio", header: "cheerp/clientlib.h".}

proc get_deviceEchoEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceEchoEventRatio", header: "cheerp/clientlib.h".}

proc set_deviceEchoEventRatio*(this: var MSAudioLocalClientEvent; a2: cdouble) {.
    importcpp: "set_deviceEchoEventRatio", header: "cheerp/clientlib.h".}

proc get_deviceGlitchesEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceGlitchesEventRatio", header: "cheerp/clientlib.h".}

proc set_deviceGlitchesEventRatio*(this: var MSAudioLocalClientEvent;
                                   a2: cdouble) {.
    importcpp: "set_deviceGlitchesEventRatio", header: "cheerp/clientlib.h".}

proc get_deviceHalfDuplexAECEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceHalfDuplexAECEventRatio", header: "cheerp/clientlib.h".}

proc set_deviceHalfDuplexAECEventRatio*(this: var MSAudioLocalClientEvent;
                                        a2: cdouble) {.
    importcpp: "set_deviceHalfDuplexAECEventRatio", header: "cheerp/clientlib.h".}

proc get_deviceHowlingEventCount*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceHowlingEventCount", header: "cheerp/clientlib.h".}

proc set_deviceHowlingEventCount*(this: var MSAudioLocalClientEvent; a2: cdouble) {.
    importcpp: "set_deviceHowlingEventCount", header: "cheerp/clientlib.h".}

proc get_deviceLowSNREventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceLowSNREventRatio", header: "cheerp/clientlib.h".}

proc set_deviceLowSNREventRatio*(this: var MSAudioLocalClientEvent; a2: cdouble) {.
    importcpp: "set_deviceLowSNREventRatio", header: "cheerp/clientlib.h".}

proc get_deviceLowSpeechLevelEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceLowSpeechLevelEventRatio",
    header: "cheerp/clientlib.h".}

proc set_deviceLowSpeechLevelEventRatio*(this: var MSAudioLocalClientEvent;
    a2: cdouble) {.importcpp: "set_deviceLowSpeechLevelEventRatio",
                   header: "cheerp/clientlib.h".}

proc get_deviceMultipleEndpointsEventCount*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceMultipleEndpointsEventCount",
    header: "cheerp/clientlib.h".}

proc set_deviceMultipleEndpointsEventCount*(this: var MSAudioLocalClientEvent;
    a2: cdouble) {.importcpp: "set_deviceMultipleEndpointsEventCount",
                   header: "cheerp/clientlib.h".}

proc get_deviceNearEndToEchoRatioEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceNearEndToEchoRatioEventRatio",
    header: "cheerp/clientlib.h".}

proc set_deviceNearEndToEchoRatioEventRatio*(this: var MSAudioLocalClientEvent;
    a2: cdouble) {.importcpp: "set_deviceNearEndToEchoRatioEventRatio",
                   header: "cheerp/clientlib.h".}

proc get_deviceRenderMuteEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceRenderMuteEventRatio", header: "cheerp/clientlib.h".}

proc set_deviceRenderMuteEventRatio*(this: var MSAudioLocalClientEvent;
                                     a2: cdouble) {.
    importcpp: "set_deviceRenderMuteEventRatio", header: "cheerp/clientlib.h".}

proc get_deviceRenderNotFunctioningEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceRenderNotFunctioningEventRatio",
    header: "cheerp/clientlib.h".}

proc set_deviceRenderNotFunctioningEventRatio*(
    this: var MSAudioLocalClientEvent; a2: cdouble) {.
    importcpp: "set_deviceRenderNotFunctioningEventRatio",
    header: "cheerp/clientlib.h".}

proc get_deviceRenderZeroVolumeEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_deviceRenderZeroVolumeEventRatio",
    header: "cheerp/clientlib.h".}

proc set_deviceRenderZeroVolumeEventRatio*(this: var MSAudioLocalClientEvent;
    a2: cdouble) {.importcpp: "set_deviceRenderZeroVolumeEventRatio",
                   header: "cheerp/clientlib.h".}

proc get_networkDelayEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_networkDelayEventRatio", header: "cheerp/clientlib.h".}

proc set_networkDelayEventRatio*(this: var MSAudioLocalClientEvent; a2: cdouble) {.
    importcpp: "set_networkDelayEventRatio", header: "cheerp/clientlib.h".}

proc get_networkSendQualityEventRatio*(this: var MSAudioLocalClientEvent): cdouble {.
    importcpp: "get_networkSendQualityEventRatio", header: "cheerp/clientlib.h".}

proc set_networkSendQualityEventRatio*(this: var MSAudioLocalClientEvent;
                                       a2: cdouble) {.
    importcpp: "set_networkSendQualityEventRatio", header: "cheerp/clientlib.h".}

proc get_payloadDescription*(this: var MSPayloadBase): ptr String {.
    importcpp: "get_payloadDescription", header: "cheerp/clientlib.h".}

proc set_payloadDescription*(this: var MSPayloadBase; a2: String) {.
    importcpp: "set_payloadDescription", header: "cheerp/clientlib.h".}

proc get_burstLossLength1*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength1", header: "cheerp/clientlib.h".}

proc set_burstLossLength1*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength1", header: "cheerp/clientlib.h".}

proc get_burstLossLength2*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength2", header: "cheerp/clientlib.h".}

proc set_burstLossLength2*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength2", header: "cheerp/clientlib.h".}

proc get_burstLossLength3*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength3", header: "cheerp/clientlib.h".}

proc set_burstLossLength3*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength3", header: "cheerp/clientlib.h".}

proc get_burstLossLength4*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength4", header: "cheerp/clientlib.h".}

proc set_burstLossLength4*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength4", header: "cheerp/clientlib.h".}

proc get_burstLossLength5*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength5", header: "cheerp/clientlib.h".}

proc set_burstLossLength5*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength5", header: "cheerp/clientlib.h".}

proc get_burstLossLength6*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength6", header: "cheerp/clientlib.h".}

proc set_burstLossLength6*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength6", header: "cheerp/clientlib.h".}

proc get_burstLossLength7*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength7", header: "cheerp/clientlib.h".}

proc set_burstLossLength7*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength7", header: "cheerp/clientlib.h".}

proc get_burstLossLength8OrHigher*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_burstLossLength8OrHigher", header: "cheerp/clientlib.h".}

proc set_burstLossLength8OrHigher*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_burstLossLength8OrHigher", header: "cheerp/clientlib.h".}

proc get_fecRecvDistance1*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_fecRecvDistance1", header: "cheerp/clientlib.h".}

proc set_fecRecvDistance1*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_fecRecvDistance1", header: "cheerp/clientlib.h".}

proc get_fecRecvDistance2*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_fecRecvDistance2", header: "cheerp/clientlib.h".}

proc set_fecRecvDistance2*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_fecRecvDistance2", header: "cheerp/clientlib.h".}

proc get_fecRecvDistance3*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_fecRecvDistance3", header: "cheerp/clientlib.h".}

proc set_fecRecvDistance3*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_fecRecvDistance3", header: "cheerp/clientlib.h".}

proc get_packetReorderDepthAvg*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_packetReorderDepthAvg", header: "cheerp/clientlib.h".}

proc set_packetReorderDepthAvg*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_packetReorderDepthAvg", header: "cheerp/clientlib.h".}

proc get_packetReorderDepthMax*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_packetReorderDepthMax", header: "cheerp/clientlib.h".}

proc set_packetReorderDepthMax*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_packetReorderDepthMax", header: "cheerp/clientlib.h".}

proc get_packetReorderRatio*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_packetReorderRatio", header: "cheerp/clientlib.h".}

proc set_packetReorderRatio*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_packetReorderRatio", header: "cheerp/clientlib.h".}

proc get_ratioCompressedSamplesAvg*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_ratioCompressedSamplesAvg", header: "cheerp/clientlib.h".}

proc set_ratioCompressedSamplesAvg*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_ratioCompressedSamplesAvg", header: "cheerp/clientlib.h".}

proc get_ratioConcealedSamplesAvg*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_ratioConcealedSamplesAvg", header: "cheerp/clientlib.h".}

proc set_ratioConcealedSamplesAvg*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_ratioConcealedSamplesAvg", header: "cheerp/clientlib.h".}

proc get_ratioStretchedSamplesAvg*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_ratioStretchedSamplesAvg", header: "cheerp/clientlib.h".}

proc set_ratioStretchedSamplesAvg*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_ratioStretchedSamplesAvg", header: "cheerp/clientlib.h".}

proc get_samplingRate*(this: var MSAudioRecvPayload): cdouble {.
    importcpp: "get_samplingRate", header: "cheerp/clientlib.h".}

proc set_samplingRate*(this: var MSAudioRecvPayload; a2: cdouble) {.
    importcpp: "set_samplingRate", header: "cheerp/clientlib.h".}

proc get_signal*(this: var MSAudioRecvPayload): ptr MSAudioRecvSignal {.
    importcpp: "get_signal", header: "cheerp/clientlib.h".}

proc set_signal*(this: var MSAudioRecvPayload; a2: ptr MSAudioRecvSignal) {.
    importcpp: "set_signal", header: "cheerp/clientlib.h".}

proc get_initialSignalLevelRMS*(this: var MSAudioRecvSignal): cdouble {.
    importcpp: "get_initialSignalLevelRMS", header: "cheerp/clientlib.h".}

proc set_initialSignalLevelRMS*(this: var MSAudioRecvSignal; a2: cdouble) {.
    importcpp: "set_initialSignalLevelRMS", header: "cheerp/clientlib.h".}

proc get_recvNoiseLevelCh1*(this: var MSAudioRecvSignal): cdouble {.
    importcpp: "get_recvNoiseLevelCh1", header: "cheerp/clientlib.h".}

proc set_recvNoiseLevelCh1*(this: var MSAudioRecvSignal; a2: cdouble) {.
    importcpp: "set_recvNoiseLevelCh1", header: "cheerp/clientlib.h".}

proc get_recvSignalLevelCh1*(this: var MSAudioRecvSignal): cdouble {.
    importcpp: "get_recvSignalLevelCh1", header: "cheerp/clientlib.h".}

proc set_recvSignalLevelCh1*(this: var MSAudioRecvSignal; a2: cdouble) {.
    importcpp: "set_recvSignalLevelCh1", header: "cheerp/clientlib.h".}

proc get_renderLoopbackSignalLevel*(this: var MSAudioRecvSignal): cdouble {.
    importcpp: "get_renderLoopbackSignalLevel", header: "cheerp/clientlib.h".}

proc set_renderLoopbackSignalLevel*(this: var MSAudioRecvSignal; a2: cdouble) {.
    importcpp: "set_renderLoopbackSignalLevel", header: "cheerp/clientlib.h".}

proc get_renderNoiseLevel*(this: var MSAudioRecvSignal): cdouble {.
    importcpp: "get_renderNoiseLevel", header: "cheerp/clientlib.h".}

proc set_renderNoiseLevel*(this: var MSAudioRecvSignal; a2: cdouble) {.
    importcpp: "set_renderNoiseLevel", header: "cheerp/clientlib.h".}

proc get_renderSignalLevel*(this: var MSAudioRecvSignal): cdouble {.
    importcpp: "get_renderSignalLevel", header: "cheerp/clientlib.h".}

proc set_renderSignalLevel*(this: var MSAudioRecvSignal; a2: cdouble) {.
    importcpp: "set_renderSignalLevel", header: "cheerp/clientlib.h".}

proc get_audioFECUsed*(this: var MSAudioSendPayload): bool {.
    importcpp: "get_audioFECUsed", header: "cheerp/clientlib.h".}

proc set_audioFECUsed*(this: var MSAudioSendPayload; a2: bool) {.
    importcpp: "set_audioFECUsed", header: "cheerp/clientlib.h".}

proc get_samplingRate*(this: var MSAudioSendPayload): cdouble {.
    importcpp: "get_samplingRate", header: "cheerp/clientlib.h".}

proc set_samplingRate*(this: var MSAudioSendPayload; a2: cdouble) {.
    importcpp: "set_samplingRate", header: "cheerp/clientlib.h".}

proc get_sendMutePercent*(this: var MSAudioSendPayload): cdouble {.
    importcpp: "get_sendMutePercent", header: "cheerp/clientlib.h".}

proc set_sendMutePercent*(this: var MSAudioSendPayload; a2: cdouble) {.
    importcpp: "set_sendMutePercent", header: "cheerp/clientlib.h".}

proc get_signal*(this: var MSAudioSendPayload): ptr MSAudioSendSignal {.
    importcpp: "get_signal", header: "cheerp/clientlib.h".}

proc set_signal*(this: var MSAudioSendPayload; a2: ptr MSAudioSendSignal) {.
    importcpp: "set_signal", header: "cheerp/clientlib.h".}

proc get_noiseLevel*(this: var MSAudioSendSignal): cdouble {.
    importcpp: "get_noiseLevel", header: "cheerp/clientlib.h".}

proc set_noiseLevel*(this: var MSAudioSendSignal; a2: cdouble) {.
    importcpp: "set_noiseLevel", header: "cheerp/clientlib.h".}

proc get_sendNoiseLevelCh1*(this: var MSAudioSendSignal): cdouble {.
    importcpp: "get_sendNoiseLevelCh1", header: "cheerp/clientlib.h".}

proc set_sendNoiseLevelCh1*(this: var MSAudioSendSignal; a2: cdouble) {.
    importcpp: "set_sendNoiseLevelCh1", header: "cheerp/clientlib.h".}

proc get_sendSignalLevelCh1*(this: var MSAudioSendSignal): cdouble {.
    importcpp: "get_sendSignalLevelCh1", header: "cheerp/clientlib.h".}

proc set_sendSignalLevelCh1*(this: var MSAudioSendSignal; a2: cdouble) {.
    importcpp: "set_sendSignalLevelCh1", header: "cheerp/clientlib.h".}

proc get_iceType*(this: var MSConnectivity): ptr String {.
    importcpp: "get_iceType", header: "cheerp/clientlib.h".}

proc set_iceType*(this: var MSConnectivity; a2: String) {.
    importcpp: "set_iceType", header: "cheerp/clientlib.h".}

proc get_iceWarningFlags*(this: var MSConnectivity): ptr MSIceWarningFlags {.
    importcpp: "get_iceWarningFlags", header: "cheerp/clientlib.h".}

proc set_iceWarningFlags*(this: var MSConnectivity; a2: ptr MSIceWarningFlags) {.
    importcpp: "set_iceWarningFlags", header: "cheerp/clientlib.h".}

proc get_relayAddress*(this: var MSConnectivity): ptr MSRelayAddress {.
    importcpp: "get_relayAddress", header: "cheerp/clientlib.h".}

proc set_relayAddress*(this: var MSConnectivity; a2: ptr MSRelayAddress) {.
    importcpp: "set_relayAddress", header: "cheerp/clientlib.h".}

proc get_accept*(this: var MSCredentialFilter): ptr Array {.
    importcpp: "get_accept", header: "cheerp/clientlib.h".}

proc set_accept*(this: var MSCredentialFilter; a2: ptr Array) {.
    importcpp: "set_accept", header: "cheerp/clientlib.h".}

proc get_type*(this: var MSCredentialParameters): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var MSCredentialParameters; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_id*(this: var MSCredentialSpec): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var MSCredentialSpec; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var MSCredentialSpec): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var MSCredentialSpec; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_maxFr*(this: var MSDCCEventInit): cdouble {.importcpp: "get_maxFr",
    header: "cheerp/clientlib.h".}

proc set_maxFr*(this: var MSDCCEventInit; a2: cdouble) {.importcpp: "set_maxFr",
    header: "cheerp/clientlib.h".}

proc get_maxFs*(this: var MSDCCEventInit): cdouble {.importcpp: "get_maxFs",
    header: "cheerp/clientlib.h".}

proc set_maxFs*(this: var MSDCCEventInit; a2: cdouble) {.importcpp: "set_maxFs",
    header: "cheerp/clientlib.h".}

proc get_sources*(this: var MSDSHEventInit): ptr Array {.
    importcpp: "get_sources", header: "cheerp/clientlib.h".}

proc set_sources*(this: var MSDSHEventInit; a2: ptr Array) {.
    importcpp: "set_sources", header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var MSDSHEventInit): cdouble {.
    importcpp: "get_timestamp", header: "cheerp/clientlib.h".}

proc set_timestamp*(this: var MSDSHEventInit; a2: cdouble) {.
    importcpp: "set_timestamp", header: "cheerp/clientlib.h".}

proc get_roundTrip*(this: var MSDelay): cdouble {.importcpp: "get_roundTrip",
    header: "cheerp/clientlib.h".}

proc set_roundTrip*(this: var MSDelay; a2: cdouble) {.
    importcpp: "set_roundTrip", header: "cheerp/clientlib.h".}

proc get_roundTripMax*(this: var MSDelay): cdouble {.
    importcpp: "get_roundTripMax", header: "cheerp/clientlib.h".}

proc set_roundTripMax*(this: var MSDelay; a2: cdouble) {.
    importcpp: "set_roundTripMax", header: "cheerp/clientlib.h".}

proc get_connectivity*(this: var MSDescription): ptr MSConnectivity {.
    importcpp: "get_connectivity", header: "cheerp/clientlib.h".}

proc set_connectivity*(this: var MSDescription; a2: ptr MSConnectivity) {.
    importcpp: "set_connectivity", header: "cheerp/clientlib.h".}

proc get_deviceDevName*(this: var MSDescription): ptr String {.
    importcpp: "get_deviceDevName", header: "cheerp/clientlib.h".}

proc set_deviceDevName*(this: var MSDescription; a2: String) {.
    importcpp: "set_deviceDevName", header: "cheerp/clientlib.h".}

proc get_localAddr*(this: var MSDescription): ptr MSIPAddressInfo {.
    importcpp: "get_localAddr", header: "cheerp/clientlib.h".}

proc set_localAddr*(this: var MSDescription; a2: ptr MSIPAddressInfo) {.
    importcpp: "set_localAddr", header: "cheerp/clientlib.h".}

proc get_networkconnectivity*(this: var MSDescription): ptr MSNetworkConnectivityInfo {.
    importcpp: "get_networkconnectivity", header: "cheerp/clientlib.h".}

proc set_networkconnectivity*(this: var MSDescription;
                              a2: ptr MSNetworkConnectivityInfo) {.
    importcpp: "set_networkconnectivity", header: "cheerp/clientlib.h".}

proc get_reflexiveLocalIPAddr*(this: var MSDescription): ptr MSIPAddressInfo {.
    importcpp: "get_reflexiveLocalIPAddr", header: "cheerp/clientlib.h".}

proc set_reflexiveLocalIPAddr*(this: var MSDescription; a2: ptr MSIPAddressInfo) {.
    importcpp: "set_reflexiveLocalIPAddr", header: "cheerp/clientlib.h".}

proc get_remoteAddr*(this: var MSDescription): ptr MSIPAddressInfo {.
    importcpp: "get_remoteAddr", header: "cheerp/clientlib.h".}

proc set_remoteAddr*(this: var MSDescription; a2: ptr MSIPAddressInfo) {.
    importcpp: "set_remoteAddr", header: "cheerp/clientlib.h".}

proc get_transport*(this: var MSDescription): ptr String {.
    importcpp: "get_transport", header: "cheerp/clientlib.h".}

proc set_transport*(this: var MSDescription; a2: String) {.
    importcpp: "set_transport", header: "cheerp/clientlib.h".}

proc get_algorithm*(this: var MSFIDOCredentialParameters): ptr String {.
    importcpp: "get_algorithm", header: "cheerp/clientlib.h".}

proc set_algorithm*(this: var MSFIDOCredentialParameters; a2: String) {.
    importcpp: "set_algorithm", header: "cheerp/clientlib.h".}

proc get_authenticators*(this: var MSFIDOCredentialParameters): ptr Array {.
    importcpp: "get_authenticators", header: "cheerp/clientlib.h".}

proc set_authenticators*(this: var MSFIDOCredentialParameters; a2: ptr Array) {.
    importcpp: "set_authenticators", header: "cheerp/clientlib.h".}

proc get_ipAddr*(this: var MSIPAddressInfo): ptr String {.
    importcpp: "get_ipAddr", header: "cheerp/clientlib.h".}

proc set_ipAddr*(this: var MSIPAddressInfo; a2: String) {.
    importcpp: "set_ipAddr", header: "cheerp/clientlib.h".}

proc get_manufacturerMacAddrMask*(this: var MSIPAddressInfo): ptr String {.
    importcpp: "get_manufacturerMacAddrMask", header: "cheerp/clientlib.h".}

proc set_manufacturerMacAddrMask*(this: var MSIPAddressInfo; a2: String) {.
    importcpp: "set_manufacturerMacAddrMask", header: "cheerp/clientlib.h".}

proc get_port*(this: var MSIPAddressInfo): cdouble {.importcpp: "get_port",
    header: "cheerp/clientlib.h".}

proc set_port*(this: var MSIPAddressInfo; a2: cdouble) {.importcpp: "set_port",
    header: "cheerp/clientlib.h".}

proc get_allocationMessageIntegrityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_allocationMessageIntegrityFailed",
    header: "cheerp/clientlib.h".}

proc set_allocationMessageIntegrityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_allocationMessageIntegrityFailed",
    header: "cheerp/clientlib.h".}

proc get_alternateServerReceived*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_alternateServerReceived", header: "cheerp/clientlib.h".}

proc set_alternateServerReceived*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_alternateServerReceived", header: "cheerp/clientlib.h".}

proc get_connCheckMessageIntegrityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_connCheckMessageIntegrityFailed",
    header: "cheerp/clientlib.h".}

proc set_connCheckMessageIntegrityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_connCheckMessageIntegrityFailed",
    header: "cheerp/clientlib.h".}

proc get_connCheckOtherError*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_connCheckOtherError", header: "cheerp/clientlib.h".}

proc set_connCheckOtherError*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_connCheckOtherError", header: "cheerp/clientlib.h".}

proc get_fipsAllocationFailure*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_fipsAllocationFailure", header: "cheerp/clientlib.h".}

proc set_fipsAllocationFailure*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_fipsAllocationFailure", header: "cheerp/clientlib.h".}

proc get_multipleRelayServersAttempted*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_multipleRelayServersAttempted", header: "cheerp/clientlib.h".}

proc set_multipleRelayServersAttempted*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_multipleRelayServersAttempted", header: "cheerp/clientlib.h".}

proc get_noRelayServersConfigured*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_noRelayServersConfigured", header: "cheerp/clientlib.h".}

proc set_noRelayServersConfigured*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_noRelayServersConfigured", header: "cheerp/clientlib.h".}

proc get_portRangeExhausted*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_portRangeExhausted", header: "cheerp/clientlib.h".}

proc set_portRangeExhausted*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_portRangeExhausted", header: "cheerp/clientlib.h".}

proc get_pseudoTLSFailure*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_pseudoTLSFailure", header: "cheerp/clientlib.h".}

proc set_pseudoTLSFailure*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_pseudoTLSFailure", header: "cheerp/clientlib.h".}

proc get_tcpNatConnectivityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_tcpNatConnectivityFailed", header: "cheerp/clientlib.h".}

proc set_tcpNatConnectivityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_tcpNatConnectivityFailed", header: "cheerp/clientlib.h".}

proc get_tcpRelayConnectivityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_tcpRelayConnectivityFailed", header: "cheerp/clientlib.h".}

proc set_tcpRelayConnectivityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_tcpRelayConnectivityFailed", header: "cheerp/clientlib.h".}

proc get_turnAuthUnknownUsernameError*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnAuthUnknownUsernameError", header: "cheerp/clientlib.h".}

proc set_turnAuthUnknownUsernameError*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnAuthUnknownUsernameError", header: "cheerp/clientlib.h".}

proc get_turnTcpAllocateFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnTcpAllocateFailed", header: "cheerp/clientlib.h".}

proc set_turnTcpAllocateFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnTcpAllocateFailed", header: "cheerp/clientlib.h".}

proc get_turnTcpSendFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnTcpSendFailed", header: "cheerp/clientlib.h".}

proc set_turnTcpSendFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnTcpSendFailed", header: "cheerp/clientlib.h".}

proc get_turnTcpTimedOut*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnTcpTimedOut", header: "cheerp/clientlib.h".}

proc set_turnTcpTimedOut*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnTcpTimedOut", header: "cheerp/clientlib.h".}

proc get_turnTurnTcpConnectivityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnTurnTcpConnectivityFailed", header: "cheerp/clientlib.h".}

proc set_turnTurnTcpConnectivityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnTurnTcpConnectivityFailed", header: "cheerp/clientlib.h".}

proc get_turnUdpAllocateFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnUdpAllocateFailed", header: "cheerp/clientlib.h".}

proc set_turnUdpAllocateFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnUdpAllocateFailed", header: "cheerp/clientlib.h".}

proc get_turnUdpSendFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_turnUdpSendFailed", header: "cheerp/clientlib.h".}

proc set_turnUdpSendFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_turnUdpSendFailed", header: "cheerp/clientlib.h".}

proc get_udpLocalConnectivityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_udpLocalConnectivityFailed", header: "cheerp/clientlib.h".}

proc set_udpLocalConnectivityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_udpLocalConnectivityFailed", header: "cheerp/clientlib.h".}

proc get_udpNatConnectivityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_udpNatConnectivityFailed", header: "cheerp/clientlib.h".}

proc set_udpNatConnectivityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_udpNatConnectivityFailed", header: "cheerp/clientlib.h".}

proc get_udpRelayConnectivityFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_udpRelayConnectivityFailed", header: "cheerp/clientlib.h".}

proc set_udpRelayConnectivityFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_udpRelayConnectivityFailed", header: "cheerp/clientlib.h".}

proc get_useCandidateChecksFailed*(this: var MSIceWarningFlags): bool {.
    importcpp: "get_useCandidateChecksFailed", header: "cheerp/clientlib.h".}

proc set_useCandidateChecksFailed*(this: var MSIceWarningFlags; a2: bool) {.
    importcpp: "set_useCandidateChecksFailed", header: "cheerp/clientlib.h".}

proc get_interArrival*(this: var MSJitter): cdouble {.
    importcpp: "get_interArrival", header: "cheerp/clientlib.h".}

proc set_interArrival*(this: var MSJitter; a2: cdouble) {.
    importcpp: "set_interArrival", header: "cheerp/clientlib.h".}

proc get_interArrivalMax*(this: var MSJitter): cdouble {.
    importcpp: "get_interArrivalMax", header: "cheerp/clientlib.h".}

proc set_interArrivalMax*(this: var MSJitter; a2: cdouble) {.
    importcpp: "set_interArrivalMax", header: "cheerp/clientlib.h".}

proc get_interArrivalSD*(this: var MSJitter): cdouble {.
    importcpp: "get_interArrivalSD", header: "cheerp/clientlib.h".}

proc set_interArrivalSD*(this: var MSJitter; a2: cdouble) {.
    importcpp: "set_interArrivalSD", header: "cheerp/clientlib.h".}

proc get_delay*(this: var MSNetwork): ptr MSDelay {.importcpp: "get_delay",
    header: "cheerp/clientlib.h".}

proc set_delay*(this: var MSNetwork; a2: ptr MSDelay) {.importcpp: "set_delay",
    header: "cheerp/clientlib.h".}

proc get_jitter*(this: var MSNetwork): ptr MSJitter {.importcpp: "get_jitter",
    header: "cheerp/clientlib.h".}

proc set_jitter*(this: var MSNetwork; a2: ptr MSJitter) {.
    importcpp: "set_jitter", header: "cheerp/clientlib.h".}

proc get_packetLoss*(this: var MSNetwork): ptr MSPacketLoss {.
    importcpp: "get_packetLoss", header: "cheerp/clientlib.h".}

proc set_packetLoss*(this: var MSNetwork; a2: ptr MSPacketLoss) {.
    importcpp: "set_packetLoss", header: "cheerp/clientlib.h".}

proc get_utilization*(this: var MSNetwork): ptr MSUtilization {.
    importcpp: "get_utilization", header: "cheerp/clientlib.h".}

proc set_utilization*(this: var MSNetwork; a2: ptr MSUtilization) {.
    importcpp: "set_utilization", header: "cheerp/clientlib.h".}

proc get_linkspeed*(this: var MSNetworkConnectivityInfo): cdouble {.
    importcpp: "get_linkspeed", header: "cheerp/clientlib.h".}

proc set_linkspeed*(this: var MSNetworkConnectivityInfo; a2: cdouble) {.
    importcpp: "set_linkspeed", header: "cheerp/clientlib.h".}

proc get_networkConnectionDetails*(this: var MSNetworkConnectivityInfo): ptr String {.
    importcpp: "get_networkConnectionDetails", header: "cheerp/clientlib.h".}

proc set_networkConnectionDetails*(this: var MSNetworkConnectivityInfo;
                                   a2: String) {.
    importcpp: "set_networkConnectionDetails", header: "cheerp/clientlib.h".}

proc get_vpn*(this: var MSNetworkConnectivityInfo): bool {.importcpp: "get_vpn",
    header: "cheerp/clientlib.h".}

proc set_vpn*(this: var MSNetworkConnectivityInfo; a2: bool) {.
    importcpp: "set_vpn", header: "cheerp/clientlib.h".}

proc get_interfaceTypeEthernet*(this: var MSNetworkInterfaceType): bool {.
    importcpp: "get_interfaceTypeEthernet", header: "cheerp/clientlib.h".}

proc set_interfaceTypeEthernet*(this: var MSNetworkInterfaceType; a2: bool) {.
    importcpp: "set_interfaceTypeEthernet", header: "cheerp/clientlib.h".}

proc get_interfaceTypePPP*(this: var MSNetworkInterfaceType): bool {.
    importcpp: "get_interfaceTypePPP", header: "cheerp/clientlib.h".}

proc set_interfaceTypePPP*(this: var MSNetworkInterfaceType; a2: bool) {.
    importcpp: "set_interfaceTypePPP", header: "cheerp/clientlib.h".}

proc get_interfaceTypeTunnel*(this: var MSNetworkInterfaceType): bool {.
    importcpp: "get_interfaceTypeTunnel", header: "cheerp/clientlib.h".}

proc set_interfaceTypeTunnel*(this: var MSNetworkInterfaceType; a2: bool) {.
    importcpp: "set_interfaceTypeTunnel", header: "cheerp/clientlib.h".}

proc get_interfaceTypeWWAN*(this: var MSNetworkInterfaceType): bool {.
    importcpp: "get_interfaceTypeWWAN", header: "cheerp/clientlib.h".}

proc set_interfaceTypeWWAN*(this: var MSNetworkInterfaceType; a2: bool) {.
    importcpp: "set_interfaceTypeWWAN", header: "cheerp/clientlib.h".}

proc get_interfaceTypeWireless*(this: var MSNetworkInterfaceType): bool {.
    importcpp: "get_interfaceTypeWireless", header: "cheerp/clientlib.h".}

proc set_interfaceTypeWireless*(this: var MSNetworkInterfaceType; a2: bool) {.
    importcpp: "set_interfaceTypeWireless", header: "cheerp/clientlib.h".}

proc get_appliedBandwidthLimit*(this: var MSOutboundNetwork): cdouble {.
    importcpp: "get_appliedBandwidthLimit", header: "cheerp/clientlib.h".}

proc set_appliedBandwidthLimit*(this: var MSOutboundNetwork; a2: cdouble) {.
    importcpp: "set_appliedBandwidthLimit", header: "cheerp/clientlib.h".}

proc get_lossRate*(this: var MSPacketLoss): cdouble {.importcpp: "get_lossRate",
    header: "cheerp/clientlib.h".}

proc set_lossRate*(this: var MSPacketLoss; a2: cdouble) {.
    importcpp: "set_lossRate", header: "cheerp/clientlib.h".}

proc get_lossRateMax*(this: var MSPacketLoss): cdouble {.
    importcpp: "get_lossRateMax", header: "cheerp/clientlib.h".}

proc set_lossRateMax*(this: var MSPacketLoss; a2: cdouble) {.
    importcpp: "set_lossRateMax", header: "cheerp/clientlib.h".}

proc get_max*(this: var MSPortRange): cdouble {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var MSPortRange; a2: cdouble) {.importcpp: "set_max",
    header: "cheerp/clientlib.h".}

proc get_min*(this: var MSPortRange): cdouble {.importcpp: "get_min",
    header: "cheerp/clientlib.h".}

proc set_min*(this: var MSPortRange; a2: cdouble) {.importcpp: "set_min",
    header: "cheerp/clientlib.h".}

proc get_port*(this: var MSRelayAddress): cdouble {.importcpp: "get_port",
    header: "cheerp/clientlib.h".}

proc set_port*(this: var MSRelayAddress; a2: cdouble) {.importcpp: "set_port",
    header: "cheerp/clientlib.h".}

proc get_relayAddress*(this: var MSRelayAddress): ptr String {.
    importcpp: "get_relayAddress", header: "cheerp/clientlib.h".}

proc set_relayAddress*(this: var MSRelayAddress; a2: String) {.
    importcpp: "set_relayAddress", header: "cheerp/clientlib.h".}

proc get_userPrompt*(this: var MSSignatureParameters): ptr String {.
    importcpp: "get_userPrompt", header: "cheerp/clientlib.h".}

proc set_userPrompt*(this: var MSSignatureParameters; a2: String) {.
    importcpp: "set_userPrompt", header: "cheerp/clientlib.h".}

proc get_allocationTimeInMs*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_allocationTimeInMs", header: "cheerp/clientlib.h".}

proc set_allocationTimeInMs*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_allocationTimeInMs", header: "cheerp/clientlib.h".}

proc get_baseAddress*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_baseAddress", header: "cheerp/clientlib.h".}

proc set_baseAddress*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_baseAddress", header: "cheerp/clientlib.h".}

proc get_baseInterface*(this: var MSTransportDiagnosticsStats): ptr MSNetworkInterfaceType {.
    importcpp: "get_baseInterface", header: "cheerp/clientlib.h".}

proc set_baseInterface*(this: var MSTransportDiagnosticsStats;
                        a2: ptr MSNetworkInterfaceType) {.
    importcpp: "set_baseInterface", header: "cheerp/clientlib.h".}

proc get_iceRole*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_iceRole", header: "cheerp/clientlib.h".}

proc set_iceRole*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_iceRole", header: "cheerp/clientlib.h".}

proc get_iceWarningFlags*(this: var MSTransportDiagnosticsStats): ptr MSIceWarningFlags {.
    importcpp: "get_iceWarningFlags", header: "cheerp/clientlib.h".}

proc set_iceWarningFlags*(this: var MSTransportDiagnosticsStats;
                          a2: ptr MSIceWarningFlags) {.
    importcpp: "set_iceWarningFlags", header: "cheerp/clientlib.h".}

proc get_interfaces*(this: var MSTransportDiagnosticsStats): ptr MSNetworkInterfaceType {.
    importcpp: "get_interfaces", header: "cheerp/clientlib.h".}

proc set_interfaces*(this: var MSTransportDiagnosticsStats;
                     a2: ptr MSNetworkInterfaceType) {.
    importcpp: "set_interfaces", header: "cheerp/clientlib.h".}

proc get_localAddrType*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_localAddrType", header: "cheerp/clientlib.h".}

proc set_localAddrType*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_localAddrType", header: "cheerp/clientlib.h".}

proc get_localAddress*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_localAddress", header: "cheerp/clientlib.h".}

proc set_localAddress*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_localAddress", header: "cheerp/clientlib.h".}

proc get_localInterface*(this: var MSTransportDiagnosticsStats): ptr MSNetworkInterfaceType {.
    importcpp: "get_localInterface", header: "cheerp/clientlib.h".}

proc set_localInterface*(this: var MSTransportDiagnosticsStats;
                         a2: ptr MSNetworkInterfaceType) {.
    importcpp: "set_localInterface", header: "cheerp/clientlib.h".}

proc get_localMR*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_localMR", header: "cheerp/clientlib.h".}

proc set_localMR*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_localMR", header: "cheerp/clientlib.h".}

proc get_localMRTCPPort*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_localMRTCPPort", header: "cheerp/clientlib.h".}

proc set_localMRTCPPort*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_localMRTCPPort", header: "cheerp/clientlib.h".}

proc get_localSite*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_localSite", header: "cheerp/clientlib.h".}

proc set_localSite*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_localSite", header: "cheerp/clientlib.h".}

proc get_msRtcEngineVersion*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_msRtcEngineVersion", header: "cheerp/clientlib.h".}

proc set_msRtcEngineVersion*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_msRtcEngineVersion", header: "cheerp/clientlib.h".}

proc get_networkName*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_networkName", header: "cheerp/clientlib.h".}

proc set_networkName*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_networkName", header: "cheerp/clientlib.h".}

proc get_numConsentReqReceived*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_numConsentReqReceived", header: "cheerp/clientlib.h".}

proc set_numConsentReqReceived*(this: var MSTransportDiagnosticsStats;
                                a2: cdouble) {.
    importcpp: "set_numConsentReqReceived", header: "cheerp/clientlib.h".}

proc get_numConsentReqSent*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_numConsentReqSent", header: "cheerp/clientlib.h".}

proc set_numConsentReqSent*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_numConsentReqSent", header: "cheerp/clientlib.h".}

proc get_numConsentRespReceived*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_numConsentRespReceived", header: "cheerp/clientlib.h".}

proc set_numConsentRespReceived*(this: var MSTransportDiagnosticsStats;
                                 a2: cdouble) {.
    importcpp: "set_numConsentRespReceived", header: "cheerp/clientlib.h".}

proc get_numConsentRespSent*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_numConsentRespSent", header: "cheerp/clientlib.h".}

proc set_numConsentRespSent*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_numConsentRespSent", header: "cheerp/clientlib.h".}

proc get_portRangeMax*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_portRangeMax", header: "cheerp/clientlib.h".}

proc set_portRangeMax*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_portRangeMax", header: "cheerp/clientlib.h".}

proc get_portRangeMin*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_portRangeMin", header: "cheerp/clientlib.h".}

proc set_portRangeMin*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_portRangeMin", header: "cheerp/clientlib.h".}

proc get_protocol*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_protocol", header: "cheerp/clientlib.h".}

proc set_protocol*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_protocol", header: "cheerp/clientlib.h".}

proc get_remoteAddrType*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_remoteAddrType", header: "cheerp/clientlib.h".}

proc set_remoteAddrType*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_remoteAddrType", header: "cheerp/clientlib.h".}

proc get_remoteAddress*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_remoteAddress", header: "cheerp/clientlib.h".}

proc set_remoteAddress*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_remoteAddress", header: "cheerp/clientlib.h".}

proc get_remoteMR*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_remoteMR", header: "cheerp/clientlib.h".}

proc set_remoteMR*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_remoteMR", header: "cheerp/clientlib.h".}

proc get_remoteMRTCPPort*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_remoteMRTCPPort", header: "cheerp/clientlib.h".}

proc set_remoteMRTCPPort*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_remoteMRTCPPort", header: "cheerp/clientlib.h".}

proc get_remoteSite*(this: var MSTransportDiagnosticsStats): ptr String {.
    importcpp: "get_remoteSite", header: "cheerp/clientlib.h".}

proc set_remoteSite*(this: var MSTransportDiagnosticsStats; a2: String) {.
    importcpp: "set_remoteSite", header: "cheerp/clientlib.h".}

proc get_rtpRtcpMux*(this: var MSTransportDiagnosticsStats): bool {.
    importcpp: "get_rtpRtcpMux", header: "cheerp/clientlib.h".}

proc set_rtpRtcpMux*(this: var MSTransportDiagnosticsStats; a2: bool) {.
    importcpp: "set_rtpRtcpMux", header: "cheerp/clientlib.h".}

proc get_stunVer*(this: var MSTransportDiagnosticsStats): cdouble {.
    importcpp: "get_stunVer", header: "cheerp/clientlib.h".}

proc set_stunVer*(this: var MSTransportDiagnosticsStats; a2: cdouble) {.
    importcpp: "set_stunVer", header: "cheerp/clientlib.h".}

proc get_bandwidthEstimation*(this: var MSUtilization): cdouble {.
    importcpp: "get_bandwidthEstimation", header: "cheerp/clientlib.h".}

proc set_bandwidthEstimation*(this: var MSUtilization; a2: cdouble) {.
    importcpp: "set_bandwidthEstimation", header: "cheerp/clientlib.h".}

proc get_bandwidthEstimationAvg*(this: var MSUtilization): cdouble {.
    importcpp: "get_bandwidthEstimationAvg", header: "cheerp/clientlib.h".}

proc set_bandwidthEstimationAvg*(this: var MSUtilization; a2: cdouble) {.
    importcpp: "set_bandwidthEstimationAvg", header: "cheerp/clientlib.h".}

proc get_bandwidthEstimationMax*(this: var MSUtilization): cdouble {.
    importcpp: "get_bandwidthEstimationMax", header: "cheerp/clientlib.h".}

proc set_bandwidthEstimationMax*(this: var MSUtilization; a2: cdouble) {.
    importcpp: "set_bandwidthEstimationMax", header: "cheerp/clientlib.h".}

proc get_bandwidthEstimationMin*(this: var MSUtilization): cdouble {.
    importcpp: "get_bandwidthEstimationMin", header: "cheerp/clientlib.h".}

proc set_bandwidthEstimationMin*(this: var MSUtilization; a2: cdouble) {.
    importcpp: "set_bandwidthEstimationMin", header: "cheerp/clientlib.h".}

proc get_bandwidthEstimationStdDev*(this: var MSUtilization): cdouble {.
    importcpp: "get_bandwidthEstimationStdDev", header: "cheerp/clientlib.h".}

proc set_bandwidthEstimationStdDev*(this: var MSUtilization; a2: cdouble) {.
    importcpp: "set_bandwidthEstimationStdDev", header: "cheerp/clientlib.h".}

proc get_packets*(this: var MSUtilization): cdouble {.importcpp: "get_packets",
    header: "cheerp/clientlib.h".}

proc set_packets*(this: var MSUtilization; a2: cdouble) {.
    importcpp: "set_packets", header: "cheerp/clientlib.h".}

proc get_durationSeconds*(this: var MSVideoPayload): cdouble {.
    importcpp: "get_durationSeconds", header: "cheerp/clientlib.h".}

proc set_durationSeconds*(this: var MSVideoPayload; a2: cdouble) {.
    importcpp: "set_durationSeconds", header: "cheerp/clientlib.h".}

proc get_resolution*(this: var MSVideoPayload): ptr String {.
    importcpp: "get_resolution", header: "cheerp/clientlib.h".}

proc set_resolution*(this: var MSVideoPayload; a2: String) {.
    importcpp: "set_resolution", header: "cheerp/clientlib.h".}

proc get_videoBitRateAvg*(this: var MSVideoPayload): cdouble {.
    importcpp: "get_videoBitRateAvg", header: "cheerp/clientlib.h".}

proc set_videoBitRateAvg*(this: var MSVideoPayload; a2: cdouble) {.
    importcpp: "set_videoBitRateAvg", header: "cheerp/clientlib.h".}

proc get_videoBitRateMax*(this: var MSVideoPayload): cdouble {.
    importcpp: "get_videoBitRateMax", header: "cheerp/clientlib.h".}

proc set_videoBitRateMax*(this: var MSVideoPayload; a2: cdouble) {.
    importcpp: "set_videoBitRateMax", header: "cheerp/clientlib.h".}

proc get_videoFrameRateAvg*(this: var MSVideoPayload): cdouble {.
    importcpp: "get_videoFrameRateAvg", header: "cheerp/clientlib.h".}

proc set_videoFrameRateAvg*(this: var MSVideoPayload; a2: cdouble) {.
    importcpp: "set_videoFrameRateAvg", header: "cheerp/clientlib.h".}

proc get_videoPacketLossRate*(this: var MSVideoPayload): cdouble {.
    importcpp: "get_videoPacketLossRate", header: "cheerp/clientlib.h".}

proc set_videoPacketLossRate*(this: var MSVideoPayload; a2: cdouble) {.
    importcpp: "set_videoPacketLossRate", header: "cheerp/clientlib.h".}

proc get_lowBitRateCallPercent*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_lowBitRateCallPercent", header: "cheerp/clientlib.h".}

proc set_lowBitRateCallPercent*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_lowBitRateCallPercent", header: "cheerp/clientlib.h".}

proc get_lowFrameRateCallPercent*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_lowFrameRateCallPercent", header: "cheerp/clientlib.h".}

proc set_lowFrameRateCallPercent*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_lowFrameRateCallPercent", header: "cheerp/clientlib.h".}

proc get_recvBitRateAverage*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvBitRateAverage", header: "cheerp/clientlib.h".}

proc set_recvBitRateAverage*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvBitRateAverage", header: "cheerp/clientlib.h".}

proc get_recvBitRateMaximum*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvBitRateMaximum", header: "cheerp/clientlib.h".}

proc set_recvBitRateMaximum*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvBitRateMaximum", header: "cheerp/clientlib.h".}

proc get_recvCodecType*(this: var MSVideoRecvPayload): ptr String {.
    importcpp: "get_recvCodecType", header: "cheerp/clientlib.h".}

proc set_recvCodecType*(this: var MSVideoRecvPayload; a2: String) {.
    importcpp: "set_recvCodecType", header: "cheerp/clientlib.h".}

proc get_recvFpsHarmonicAverage*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvFpsHarmonicAverage", header: "cheerp/clientlib.h".}

proc set_recvFpsHarmonicAverage*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvFpsHarmonicAverage", header: "cheerp/clientlib.h".}

proc get_recvFrameRateAverage*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvFrameRateAverage", header: "cheerp/clientlib.h".}

proc set_recvFrameRateAverage*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvFrameRateAverage", header: "cheerp/clientlib.h".}

proc get_recvNumResSwitches*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvNumResSwitches", header: "cheerp/clientlib.h".}

proc set_recvNumResSwitches*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvNumResSwitches", header: "cheerp/clientlib.h".}

proc get_recvReorderBufferMaxSuccessfullyOrderedExtent*(
    this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvReorderBufferMaxSuccessfullyOrderedExtent",
    header: "cheerp/clientlib.h".}

proc set_recvReorderBufferMaxSuccessfullyOrderedExtent*(
    this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvReorderBufferMaxSuccessfullyOrderedExtent",
    header: "cheerp/clientlib.h".}

proc get_recvReorderBufferMaxSuccessfullyOrderedLateTime*(
    this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvReorderBufferMaxSuccessfullyOrderedLateTime",
    header: "cheerp/clientlib.h".}

proc set_recvReorderBufferMaxSuccessfullyOrderedLateTime*(
    this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvReorderBufferMaxSuccessfullyOrderedLateTime",
    header: "cheerp/clientlib.h".}

proc get_recvReorderBufferPacketsDroppedDueToBufferExhaustion*(
    this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvReorderBufferPacketsDroppedDueToBufferExhaustion",
    header: "cheerp/clientlib.h".}

proc set_recvReorderBufferPacketsDroppedDueToBufferExhaustion*(
    this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvReorderBufferPacketsDroppedDueToBufferExhaustion",
    header: "cheerp/clientlib.h".}

proc get_recvReorderBufferPacketsDroppedDueToTimeout*(
    this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvReorderBufferPacketsDroppedDueToTimeout",
    header: "cheerp/clientlib.h".}

proc set_recvReorderBufferPacketsDroppedDueToTimeout*(
    this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvReorderBufferPacketsDroppedDueToTimeout",
    header: "cheerp/clientlib.h".}

proc get_recvReorderBufferReorderedPackets*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvReorderBufferReorderedPackets",
    header: "cheerp/clientlib.h".}

proc set_recvReorderBufferReorderedPackets*(this: var MSVideoRecvPayload;
    a2: cdouble) {.importcpp: "set_recvReorderBufferReorderedPackets",
                   header: "cheerp/clientlib.h".}

proc get_recvResolutionHeight*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvResolutionHeight", header: "cheerp/clientlib.h".}

proc set_recvResolutionHeight*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvResolutionHeight", header: "cheerp/clientlib.h".}

proc get_recvResolutionWidth*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvResolutionWidth", header: "cheerp/clientlib.h".}

proc set_recvResolutionWidth*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvResolutionWidth", header: "cheerp/clientlib.h".}

proc get_recvVideoStreamsMax*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvVideoStreamsMax", header: "cheerp/clientlib.h".}

proc set_recvVideoStreamsMax*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvVideoStreamsMax", header: "cheerp/clientlib.h".}

proc get_recvVideoStreamsMin*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvVideoStreamsMin", header: "cheerp/clientlib.h".}

proc set_recvVideoStreamsMin*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvVideoStreamsMin", header: "cheerp/clientlib.h".}

proc get_recvVideoStreamsMode*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_recvVideoStreamsMode", header: "cheerp/clientlib.h".}

proc set_recvVideoStreamsMode*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_recvVideoStreamsMode", header: "cheerp/clientlib.h".}

proc get_reorderBufferTotalPackets*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_reorderBufferTotalPackets", header: "cheerp/clientlib.h".}

proc set_reorderBufferTotalPackets*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_reorderBufferTotalPackets", header: "cheerp/clientlib.h".}

proc get_videoFrameLossRate*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_videoFrameLossRate", header: "cheerp/clientlib.h".}

proc set_videoFrameLossRate*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_videoFrameLossRate", header: "cheerp/clientlib.h".}

proc get_videoPostFECPLR*(this: var MSVideoRecvPayload): cdouble {.
    importcpp: "get_videoPostFECPLR", header: "cheerp/clientlib.h".}

proc set_videoPostFECPLR*(this: var MSVideoRecvPayload; a2: cdouble) {.
    importcpp: "set_videoPostFECPLR", header: "cheerp/clientlib.h".}

proc get_videoResolutions*(this: var MSVideoRecvPayload): ptr MSVideoResolutionDistribution {.
    importcpp: "get_videoResolutions", header: "cheerp/clientlib.h".}

proc set_videoResolutions*(this: var MSVideoRecvPayload;
                           a2: ptr MSVideoResolutionDistribution) {.
    importcpp: "set_videoResolutions", header: "cheerp/clientlib.h".}

proc get_cifQuality*(this: var MSVideoResolutionDistribution): cdouble {.
    importcpp: "get_cifQuality", header: "cheerp/clientlib.h".}

proc set_cifQuality*(this: var MSVideoResolutionDistribution; a2: cdouble) {.
    importcpp: "set_cifQuality", header: "cheerp/clientlib.h".}

proc get_h1080Quality*(this: var MSVideoResolutionDistribution): cdouble {.
    importcpp: "get_h1080Quality", header: "cheerp/clientlib.h".}

proc set_h1080Quality*(this: var MSVideoResolutionDistribution; a2: cdouble) {.
    importcpp: "set_h1080Quality", header: "cheerp/clientlib.h".}

proc get_h1440Quality*(this: var MSVideoResolutionDistribution): cdouble {.
    importcpp: "get_h1440Quality", header: "cheerp/clientlib.h".}

proc set_h1440Quality*(this: var MSVideoResolutionDistribution; a2: cdouble) {.
    importcpp: "set_h1440Quality", header: "cheerp/clientlib.h".}

proc get_h2160Quality*(this: var MSVideoResolutionDistribution): cdouble {.
    importcpp: "get_h2160Quality", header: "cheerp/clientlib.h".}

proc set_h2160Quality*(this: var MSVideoResolutionDistribution; a2: cdouble) {.
    importcpp: "set_h2160Quality", header: "cheerp/clientlib.h".}

proc get_h720Quality*(this: var MSVideoResolutionDistribution): cdouble {.
    importcpp: "get_h720Quality", header: "cheerp/clientlib.h".}

proc set_h720Quality*(this: var MSVideoResolutionDistribution; a2: cdouble) {.
    importcpp: "set_h720Quality", header: "cheerp/clientlib.h".}

proc get_vgaQuality*(this: var MSVideoResolutionDistribution): cdouble {.
    importcpp: "get_vgaQuality", header: "cheerp/clientlib.h".}

proc set_vgaQuality*(this: var MSVideoResolutionDistribution; a2: cdouble) {.
    importcpp: "set_vgaQuality", header: "cheerp/clientlib.h".}

proc get_sendBitRateAverage*(this: var MSVideoSendPayload): cdouble {.
    importcpp: "get_sendBitRateAverage", header: "cheerp/clientlib.h".}

proc set_sendBitRateAverage*(this: var MSVideoSendPayload; a2: cdouble) {.
    importcpp: "set_sendBitRateAverage", header: "cheerp/clientlib.h".}

proc get_sendBitRateMaximum*(this: var MSVideoSendPayload): cdouble {.
    importcpp: "get_sendBitRateMaximum", header: "cheerp/clientlib.h".}

proc set_sendBitRateMaximum*(this: var MSVideoSendPayload; a2: cdouble) {.
    importcpp: "set_sendBitRateMaximum", header: "cheerp/clientlib.h".}

proc get_sendFrameRateAverage*(this: var MSVideoSendPayload): cdouble {.
    importcpp: "get_sendFrameRateAverage", header: "cheerp/clientlib.h".}

proc set_sendFrameRateAverage*(this: var MSVideoSendPayload; a2: cdouble) {.
    importcpp: "set_sendFrameRateAverage", header: "cheerp/clientlib.h".}

proc get_sendResolutionHeight*(this: var MSVideoSendPayload): cdouble {.
    importcpp: "get_sendResolutionHeight", header: "cheerp/clientlib.h".}

proc set_sendResolutionHeight*(this: var MSVideoSendPayload; a2: cdouble) {.
    importcpp: "set_sendResolutionHeight", header: "cheerp/clientlib.h".}

proc get_sendResolutionWidth*(this: var MSVideoSendPayload): cdouble {.
    importcpp: "get_sendResolutionWidth", header: "cheerp/clientlib.h".}

proc set_sendResolutionWidth*(this: var MSVideoSendPayload; a2: cdouble) {.
    importcpp: "set_sendResolutionWidth", header: "cheerp/clientlib.h".}

proc get_sendVideoStreamsMax*(this: var MSVideoSendPayload): cdouble {.
    importcpp: "get_sendVideoStreamsMax", header: "cheerp/clientlib.h".}

proc set_sendVideoStreamsMax*(this: var MSVideoSendPayload; a2: cdouble) {.
    importcpp: "set_sendVideoStreamsMax", header: "cheerp/clientlib.h".}

proc get_mediaElement*(this: var MediaElementAudioSourceOptions): ptr HTMLMediaElement {.
    importcpp: "get_mediaElement", header: "cheerp/clientlib.h".}

proc set_mediaElement*(this: var MediaElementAudioSourceOptions;
                       a2: ptr HTMLMediaElement) {.
    importcpp: "set_mediaElement", header: "cheerp/clientlib.h".}

proc get_initData*(this: var MediaEncryptedEventInit): ptr ArrayBuffer {.
    importcpp: "get_initData", header: "cheerp/clientlib.h".}

proc set_initData*(this: var MediaEncryptedEventInit; a2: ptr ArrayBuffer) {.
    importcpp: "set_initData", header: "cheerp/clientlib.h".}

proc get_initDataType*(this: var MediaEncryptedEventInit): ptr String {.
    importcpp: "get_initDataType", header: "cheerp/clientlib.h".}

proc set_initDataType*(this: var MediaEncryptedEventInit; a2: String) {.
    importcpp: "set_initDataType", header: "cheerp/clientlib.h".}

proc get_message*(this: var MediaKeyMessageEventInit): ptr ArrayBuffer {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var MediaKeyMessageEventInit; a2: ptr ArrayBuffer) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_messageType*(this: var MediaKeyMessageEventInit): ptr String {.
    importcpp: "get_messageType", header: "cheerp/clientlib.h".}

proc set_messageType*(this: var MediaKeyMessageEventInit; a2: String) {.
    importcpp: "set_messageType", header: "cheerp/clientlib.h".}

proc get_audioCapabilities*(this: var MediaKeySystemConfiguration): ptr Array {.
    importcpp: "get_audioCapabilities", header: "cheerp/clientlib.h".}

proc set_audioCapabilities*(this: var MediaKeySystemConfiguration; a2: ptr Array) {.
    importcpp: "set_audioCapabilities", header: "cheerp/clientlib.h".}

proc get_distinctiveIdentifier*(this: var MediaKeySystemConfiguration): ptr String {.
    importcpp: "get_distinctiveIdentifier", header: "cheerp/clientlib.h".}

proc set_distinctiveIdentifier*(this: var MediaKeySystemConfiguration;
                                a2: String) {.
    importcpp: "set_distinctiveIdentifier", header: "cheerp/clientlib.h".}

proc get_initDataTypes*(this: var MediaKeySystemConfiguration): ptr Array {.
    importcpp: "get_initDataTypes", header: "cheerp/clientlib.h".}

proc set_initDataTypes*(this: var MediaKeySystemConfiguration; a2: ptr Array) {.
    importcpp: "set_initDataTypes", header: "cheerp/clientlib.h".}

proc get_persistentState*(this: var MediaKeySystemConfiguration): ptr String {.
    importcpp: "get_persistentState", header: "cheerp/clientlib.h".}

proc set_persistentState*(this: var MediaKeySystemConfiguration; a2: String) {.
    importcpp: "set_persistentState", header: "cheerp/clientlib.h".}

proc get_videoCapabilities*(this: var MediaKeySystemConfiguration): ptr Array {.
    importcpp: "get_videoCapabilities", header: "cheerp/clientlib.h".}

proc set_videoCapabilities*(this: var MediaKeySystemConfiguration; a2: ptr Array) {.
    importcpp: "set_videoCapabilities", header: "cheerp/clientlib.h".}

proc get_contentType*(this: var MediaKeySystemMediaCapability): ptr String {.
    importcpp: "get_contentType", header: "cheerp/clientlib.h".}

proc set_contentType*(this: var MediaKeySystemMediaCapability; a2: String) {.
    importcpp: "set_contentType", header: "cheerp/clientlib.h".}

proc get_robustness*(this: var MediaKeySystemMediaCapability): ptr String {.
    importcpp: "get_robustness", header: "cheerp/clientlib.h".}

proc set_robustness*(this: var MediaKeySystemMediaCapability; a2: String) {.
    importcpp: "set_robustness", header: "cheerp/clientlib.h".}

proc get_audio*(this: var MediaStreamConstraints): bool {.
    importcpp: "get_audio", header: "cheerp/clientlib.h".}

proc set_audio*(this: var MediaStreamConstraints; a2: bool) {.
    importcpp: "set_audio", header: "cheerp/clientlib.h".}

proc get_video*(this: var MediaStreamConstraints): bool {.
    importcpp: "get_video", header: "cheerp/clientlib.h".}

proc set_video*(this: var MediaStreamConstraints; a2: bool) {.
    importcpp: "set_video", header: "cheerp/clientlib.h".}

proc get_error*(this: var MediaStreamErrorEventInit): ptr MediaStreamError {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var MediaStreamErrorEventInit; a2: ptr MediaStreamError) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_stream*(this: var MediaStreamEventInit): ptr MediaStream {.
    importcpp: "get_stream", header: "cheerp/clientlib.h".}

proc set_stream*(this: var MediaStreamEventInit; a2: ptr MediaStream) {.
    importcpp: "set_stream", header: "cheerp/clientlib.h".}

proc get_track*(this: var MediaStreamTrackEventInit): ptr MediaStreamTrack {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc set_track*(this: var MediaStreamTrackEventInit; a2: ptr MediaStreamTrack) {.
    importcpp: "set_track", header: "cheerp/clientlib.h".}

proc get_aspectRatio*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_aspectRatio", header: "cheerp/clientlib.h".}

proc set_aspectRatio*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_aspectRatio", header: "cheerp/clientlib.h".}

proc get_deviceId*(this: var MediaTrackCapabilities): ptr String {.
    importcpp: "get_deviceId", header: "cheerp/clientlib.h".}

proc set_deviceId*(this: var MediaTrackCapabilities; a2: String) {.
    importcpp: "set_deviceId", header: "cheerp/clientlib.h".}

proc get_echoCancellation*(this: var MediaTrackCapabilities): ptr Array {.
    importcpp: "get_echoCancellation", header: "cheerp/clientlib.h".}

proc set_echoCancellation*(this: var MediaTrackCapabilities; a2: ptr Array) {.
    importcpp: "set_echoCancellation", header: "cheerp/clientlib.h".}

proc get_facingMode*(this: var MediaTrackCapabilities): ptr String {.
    importcpp: "get_facingMode", header: "cheerp/clientlib.h".}

proc set_facingMode*(this: var MediaTrackCapabilities; a2: String) {.
    importcpp: "set_facingMode", header: "cheerp/clientlib.h".}

proc get_frameRate*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_frameRate", header: "cheerp/clientlib.h".}

proc set_frameRate*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_frameRate", header: "cheerp/clientlib.h".}

proc get_groupId*(this: var MediaTrackCapabilities): ptr String {.
    importcpp: "get_groupId", header: "cheerp/clientlib.h".}

proc set_groupId*(this: var MediaTrackCapabilities; a2: String) {.
    importcpp: "set_groupId", header: "cheerp/clientlib.h".}

proc get_height*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_sampleSize*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_sampleSize", header: "cheerp/clientlib.h".}

proc set_sampleSize*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_sampleSize", header: "cheerp/clientlib.h".}

proc get_volume*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_volume", header: "cheerp/clientlib.h".}

proc set_volume*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_volume", header: "cheerp/clientlib.h".}

proc get_width*(this: var MediaTrackCapabilities): cdouble {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var MediaTrackCapabilities; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_aspectRatio*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_aspectRatio", header: "cheerp/clientlib.h".}

proc set_aspectRatio*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_aspectRatio", header: "cheerp/clientlib.h".}

proc get_channelCount*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_channelCount", header: "cheerp/clientlib.h".}

proc set_channelCount*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_channelCount", header: "cheerp/clientlib.h".}

proc get_deviceId*(this: var MediaTrackConstraintSet): ptr String {.
    importcpp: "get_deviceId", header: "cheerp/clientlib.h".}

proc set_deviceId*(this: var MediaTrackConstraintSet; a2: String) {.
    importcpp: "set_deviceId", header: "cheerp/clientlib.h".}

proc get_displaySurface*(this: var MediaTrackConstraintSet): ptr String {.
    importcpp: "get_displaySurface", header: "cheerp/clientlib.h".}

proc set_displaySurface*(this: var MediaTrackConstraintSet; a2: String) {.
    importcpp: "set_displaySurface", header: "cheerp/clientlib.h".}

proc get_echoCancellation*(this: var MediaTrackConstraintSet): bool {.
    importcpp: "get_echoCancellation", header: "cheerp/clientlib.h".}

proc set_echoCancellation*(this: var MediaTrackConstraintSet; a2: bool) {.
    importcpp: "set_echoCancellation", header: "cheerp/clientlib.h".}

proc get_facingMode*(this: var MediaTrackConstraintSet): ptr String {.
    importcpp: "get_facingMode", header: "cheerp/clientlib.h".}

proc set_facingMode*(this: var MediaTrackConstraintSet; a2: String) {.
    importcpp: "set_facingMode", header: "cheerp/clientlib.h".}

proc get_frameRate*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_frameRate", header: "cheerp/clientlib.h".}

proc set_frameRate*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_frameRate", header: "cheerp/clientlib.h".}

proc get_groupId*(this: var MediaTrackConstraintSet): ptr String {.
    importcpp: "get_groupId", header: "cheerp/clientlib.h".}

proc set_groupId*(this: var MediaTrackConstraintSet; a2: String) {.
    importcpp: "set_groupId", header: "cheerp/clientlib.h".}

proc get_height*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_latency*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_latency", header: "cheerp/clientlib.h".}

proc set_latency*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_latency", header: "cheerp/clientlib.h".}

proc get_logicalSurface*(this: var MediaTrackConstraintSet): bool {.
    importcpp: "get_logicalSurface", header: "cheerp/clientlib.h".}

proc set_logicalSurface*(this: var MediaTrackConstraintSet; a2: bool) {.
    importcpp: "set_logicalSurface", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_sampleSize*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_sampleSize", header: "cheerp/clientlib.h".}

proc set_sampleSize*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_sampleSize", header: "cheerp/clientlib.h".}

proc get_volume*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_volume", header: "cheerp/clientlib.h".}

proc set_volume*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_volume", header: "cheerp/clientlib.h".}

proc get_width*(this: var MediaTrackConstraintSet): cdouble {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var MediaTrackConstraintSet; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_advanced*(this: var MediaTrackConstraints): ptr Array {.
    importcpp: "get_advanced", header: "cheerp/clientlib.h".}

proc set_advanced*(this: var MediaTrackConstraints; a2: ptr Array) {.
    importcpp: "set_advanced", header: "cheerp/clientlib.h".}

proc get_aspectRatio*(this: var MediaTrackSettings): cdouble {.
    importcpp: "get_aspectRatio", header: "cheerp/clientlib.h".}

proc set_aspectRatio*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_aspectRatio", header: "cheerp/clientlib.h".}

proc get_deviceId*(this: var MediaTrackSettings): ptr String {.
    importcpp: "get_deviceId", header: "cheerp/clientlib.h".}

proc set_deviceId*(this: var MediaTrackSettings; a2: String) {.
    importcpp: "set_deviceId", header: "cheerp/clientlib.h".}

proc get_echoCancellation*(this: var MediaTrackSettings): bool {.
    importcpp: "get_echoCancellation", header: "cheerp/clientlib.h".}

proc set_echoCancellation*(this: var MediaTrackSettings; a2: bool) {.
    importcpp: "set_echoCancellation", header: "cheerp/clientlib.h".}

proc get_facingMode*(this: var MediaTrackSettings): ptr String {.
    importcpp: "get_facingMode", header: "cheerp/clientlib.h".}

proc set_facingMode*(this: var MediaTrackSettings; a2: String) {.
    importcpp: "set_facingMode", header: "cheerp/clientlib.h".}

proc get_frameRate*(this: var MediaTrackSettings): cdouble {.
    importcpp: "get_frameRate", header: "cheerp/clientlib.h".}

proc set_frameRate*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_frameRate", header: "cheerp/clientlib.h".}

proc get_groupId*(this: var MediaTrackSettings): ptr String {.
    importcpp: "get_groupId", header: "cheerp/clientlib.h".}

proc set_groupId*(this: var MediaTrackSettings; a2: String) {.
    importcpp: "set_groupId", header: "cheerp/clientlib.h".}

proc get_height*(this: var MediaTrackSettings): cdouble {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var MediaTrackSettings): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_sampleSize*(this: var MediaTrackSettings): cdouble {.
    importcpp: "get_sampleSize", header: "cheerp/clientlib.h".}

proc set_sampleSize*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_sampleSize", header: "cheerp/clientlib.h".}

proc get_volume*(this: var MediaTrackSettings): cdouble {.
    importcpp: "get_volume", header: "cheerp/clientlib.h".}

proc set_volume*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_volume", header: "cheerp/clientlib.h".}

proc get_width*(this: var MediaTrackSettings): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var MediaTrackSettings; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_aspectRatio*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_aspectRatio", header: "cheerp/clientlib.h".}

proc set_aspectRatio*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_aspectRatio", header: "cheerp/clientlib.h".}

proc get_deviceId*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_deviceId", header: "cheerp/clientlib.h".}

proc set_deviceId*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_deviceId", header: "cheerp/clientlib.h".}

proc get_echoCancellation*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_echoCancellation", header: "cheerp/clientlib.h".}

proc set_echoCancellation*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_echoCancellation", header: "cheerp/clientlib.h".}

proc get_facingMode*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_facingMode", header: "cheerp/clientlib.h".}

proc set_facingMode*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_facingMode", header: "cheerp/clientlib.h".}

proc get_frameRate*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_frameRate", header: "cheerp/clientlib.h".}

proc set_frameRate*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_frameRate", header: "cheerp/clientlib.h".}

proc get_groupId*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_groupId", header: "cheerp/clientlib.h".}

proc set_groupId*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_groupId", header: "cheerp/clientlib.h".}

proc get_height*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc set_sampleRate*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_sampleRate", header: "cheerp/clientlib.h".}

proc get_sampleSize*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_sampleSize", header: "cheerp/clientlib.h".}

proc set_sampleSize*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_sampleSize", header: "cheerp/clientlib.h".}

proc get_volume*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_volume", header: "cheerp/clientlib.h".}

proc set_volume*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_volume", header: "cheerp/clientlib.h".}

proc get_width*(this: var MediaTrackSupportedConstraints): bool {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var MediaTrackSupportedConstraints; a2: bool) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_channel*(this: var MessageEventInit): ptr String {.
    importcpp: "get_channel", header: "cheerp/clientlib.h".}

proc set_channel*(this: var MessageEventInit; a2: String) {.
    importcpp: "set_channel", header: "cheerp/clientlib.h".}

proc set_data*(this: var MessageEventInit; a2: ptr Object) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_lastEventId*(this: var MessageEventInit): ptr String {.
    importcpp: "get_lastEventId", header: "cheerp/clientlib.h".}

proc set_lastEventId*(this: var MessageEventInit; a2: String) {.
    importcpp: "set_lastEventId", header: "cheerp/clientlib.h".}

proc get_origin*(this: var MessageEventInit): ptr String {.
    importcpp: "get_origin", header: "cheerp/clientlib.h".}

proc set_origin*(this: var MessageEventInit; a2: String) {.
    importcpp: "set_origin", header: "cheerp/clientlib.h".}

proc get_ports*(this: var MessageEventInit): ptr Array {.importcpp: "get_ports",
    header: "cheerp/clientlib.h".}

proc set_ports*(this: var MessageEventInit; a2: ptr Array) {.
    importcpp: "set_ports", header: "cheerp/clientlib.h".}

proc get_source*(this: var MessageEventInit): ptr Window {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc set_source*(this: var MessageEventInit; a2: ptr Window) {.
    importcpp: "set_source", header: "cheerp/clientlib.h".}

proc get_button*(this: var MouseEventInit): cdouble {.importcpp: "get_button",
    header: "cheerp/clientlib.h".}

proc set_button*(this: var MouseEventInit; a2: cdouble) {.
    importcpp: "set_button", header: "cheerp/clientlib.h".}

proc get_buttons*(this: var MouseEventInit): cdouble {.importcpp: "get_buttons",
    header: "cheerp/clientlib.h".}

proc set_buttons*(this: var MouseEventInit; a2: cdouble) {.
    importcpp: "set_buttons", header: "cheerp/clientlib.h".}

proc get_clientX*(this: var MouseEventInit): cdouble {.importcpp: "get_clientX",
    header: "cheerp/clientlib.h".}

proc set_clientX*(this: var MouseEventInit; a2: cdouble) {.
    importcpp: "set_clientX", header: "cheerp/clientlib.h".}

proc get_clientY*(this: var MouseEventInit): cdouble {.importcpp: "get_clientY",
    header: "cheerp/clientlib.h".}

proc set_clientY*(this: var MouseEventInit; a2: cdouble) {.
    importcpp: "set_clientY", header: "cheerp/clientlib.h".}

proc get_relatedTarget*(this: var MouseEventInit): ptr EventTarget {.
    importcpp: "get_relatedTarget", header: "cheerp/clientlib.h".}

proc set_relatedTarget*(this: var MouseEventInit; a2: ptr EventTarget) {.
    importcpp: "set_relatedTarget", header: "cheerp/clientlib.h".}

proc get_screenX*(this: var MouseEventInit): cdouble {.importcpp: "get_screenX",
    header: "cheerp/clientlib.h".}

proc set_screenX*(this: var MouseEventInit; a2: cdouble) {.
    importcpp: "set_screenX", header: "cheerp/clientlib.h".}

proc get_screenY*(this: var MouseEventInit): cdouble {.importcpp: "get_screenY",
    header: "cheerp/clientlib.h".}

proc set_screenY*(this: var MouseEventInit; a2: cdouble) {.
    importcpp: "set_screenY", header: "cheerp/clientlib.h".}

proc get_animate*(this: var MsZoomToOptions): ptr String {.
    importcpp: "get_animate", header: "cheerp/clientlib.h".}

proc set_animate*(this: var MsZoomToOptions; a2: String) {.
    importcpp: "set_animate", header: "cheerp/clientlib.h".}

proc get_contentX*(this: var MsZoomToOptions): cdouble {.
    importcpp: "get_contentX", header: "cheerp/clientlib.h".}

proc set_contentX*(this: var MsZoomToOptions; a2: cdouble) {.
    importcpp: "set_contentX", header: "cheerp/clientlib.h".}

proc get_contentY*(this: var MsZoomToOptions): cdouble {.
    importcpp: "get_contentY", header: "cheerp/clientlib.h".}

proc set_contentY*(this: var MsZoomToOptions; a2: cdouble) {.
    importcpp: "set_contentY", header: "cheerp/clientlib.h".}

proc get_scaleFactor*(this: var MsZoomToOptions): cdouble {.
    importcpp: "get_scaleFactor", header: "cheerp/clientlib.h".}

proc set_scaleFactor*(this: var MsZoomToOptions; a2: cdouble) {.
    importcpp: "set_scaleFactor", header: "cheerp/clientlib.h".}

proc get_viewportX*(this: var MsZoomToOptions): ptr String {.
    importcpp: "get_viewportX", header: "cheerp/clientlib.h".}

proc set_viewportX*(this: var MsZoomToOptions; a2: String) {.
    importcpp: "set_viewportX", header: "cheerp/clientlib.h".}

proc get_viewportY*(this: var MsZoomToOptions): ptr String {.
    importcpp: "get_viewportY", header: "cheerp/clientlib.h".}

proc set_viewportY*(this: var MsZoomToOptions; a2: String) {.
    importcpp: "set_viewportY", header: "cheerp/clientlib.h".}

proc get_attributeFilter*(this: var MutationObserverInit): ptr Array {.
    importcpp: "get_attributeFilter", header: "cheerp/clientlib.h".}

proc set_attributeFilter*(this: var MutationObserverInit; a2: ptr Array) {.
    importcpp: "set_attributeFilter", header: "cheerp/clientlib.h".}

proc get_attributeOldValue*(this: var MutationObserverInit): bool {.
    importcpp: "get_attributeOldValue", header: "cheerp/clientlib.h".}

proc set_attributeOldValue*(this: var MutationObserverInit; a2: bool) {.
    importcpp: "set_attributeOldValue", header: "cheerp/clientlib.h".}

proc get_attributes*(this: var MutationObserverInit): bool {.
    importcpp: "get_attributes", header: "cheerp/clientlib.h".}

proc set_attributes*(this: var MutationObserverInit; a2: bool) {.
    importcpp: "set_attributes", header: "cheerp/clientlib.h".}

proc get_characterData*(this: var MutationObserverInit): bool {.
    importcpp: "get_characterData", header: "cheerp/clientlib.h".}

proc set_characterData*(this: var MutationObserverInit; a2: bool) {.
    importcpp: "set_characterData", header: "cheerp/clientlib.h".}

proc get_characterDataOldValue*(this: var MutationObserverInit): bool {.
    importcpp: "get_characterDataOldValue", header: "cheerp/clientlib.h".}

proc set_characterDataOldValue*(this: var MutationObserverInit; a2: bool) {.
    importcpp: "set_characterDataOldValue", header: "cheerp/clientlib.h".}

proc get_childList*(this: var MutationObserverInit): bool {.
    importcpp: "get_childList", header: "cheerp/clientlib.h".}

proc set_childList*(this: var MutationObserverInit; a2: bool) {.
    importcpp: "set_childList", header: "cheerp/clientlib.h".}

proc get_subtree*(this: var MutationObserverInit): bool {.
    importcpp: "get_subtree", header: "cheerp/clientlib.h".}

proc set_subtree*(this: var MutationObserverInit; a2: bool) {.
    importcpp: "set_subtree", header: "cheerp/clientlib.h".}

proc get_action*(this: var NotificationEventInit): ptr String {.
    importcpp: "get_action", header: "cheerp/clientlib.h".}

proc set_action*(this: var NotificationEventInit; a2: String) {.
    importcpp: "set_action", header: "cheerp/clientlib.h".}

proc get_notification*(this: var NotificationEventInit): ptr Notification {.
    importcpp: "get_notification", header: "cheerp/clientlib.h".}

proc set_notification*(this: var NotificationEventInit; a2: ptr Notification) {.
    importcpp: "set_notification", header: "cheerp/clientlib.h".}

proc get_body*(this: var NotificationOptions): ptr String {.
    importcpp: "get_body", header: "cheerp/clientlib.h".}

proc set_body*(this: var NotificationOptions; a2: String) {.
    importcpp: "set_body", header: "cheerp/clientlib.h".}

proc set_data*(this: var NotificationOptions; a2: ptr Object) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_dir*(this: var NotificationOptions): ptr String {.importcpp: "get_dir",
    header: "cheerp/clientlib.h".}

proc set_dir*(this: var NotificationOptions; a2: String) {.importcpp: "set_dir",
    header: "cheerp/clientlib.h".}

proc get_icon*(this: var NotificationOptions): ptr String {.
    importcpp: "get_icon", header: "cheerp/clientlib.h".}

proc set_icon*(this: var NotificationOptions; a2: String) {.
    importcpp: "set_icon", header: "cheerp/clientlib.h".}

proc get_lang*(this: var NotificationOptions): ptr String {.
    importcpp: "get_lang", header: "cheerp/clientlib.h".}

proc set_lang*(this: var NotificationOptions; a2: String) {.
    importcpp: "set_lang", header: "cheerp/clientlib.h".}

proc get_tag*(this: var NotificationOptions): ptr String {.importcpp: "get_tag",
    header: "cheerp/clientlib.h".}

proc set_tag*(this: var NotificationOptions; a2: String) {.importcpp: "set_tag",
    header: "cheerp/clientlib.h".}

proc get_oneTimeOnly*(this: var ObjectURLOptions): bool {.
    importcpp: "get_oneTimeOnly", header: "cheerp/clientlib.h".}

proc set_oneTimeOnly*(this: var ObjectURLOptions; a2: bool) {.
    importcpp: "set_oneTimeOnly", header: "cheerp/clientlib.h".}

proc get_renderedBuffer*(this: var OfflineAudioCompletionEventInit): ptr AudioBuffer {.
    importcpp: "get_renderedBuffer", header: "cheerp/clientlib.h".}

proc set_renderedBuffer*(this: var OfflineAudioCompletionEventInit;
                         a2: ptr AudioBuffer) {.importcpp: "set_renderedBuffer",
    header: "cheerp/clientlib.h".}

proc get_detune*(this: var OscillatorOptions): cdouble {.
    importcpp: "get_detune", header: "cheerp/clientlib.h".}

proc set_detune*(this: var OscillatorOptions; a2: cdouble) {.
    importcpp: "set_detune", header: "cheerp/clientlib.h".}

proc get_frequency*(this: var OscillatorOptions): cdouble {.
    importcpp: "get_frequency", header: "cheerp/clientlib.h".}

proc set_frequency*(this: var OscillatorOptions; a2: cdouble) {.
    importcpp: "set_frequency", header: "cheerp/clientlib.h".}

proc get_periodicWave*(this: var OscillatorOptions): ptr PeriodicWave {.
    importcpp: "get_periodicWave", header: "cheerp/clientlib.h".}

proc set_periodicWave*(this: var OscillatorOptions; a2: ptr PeriodicWave) {.
    importcpp: "set_periodicWave", header: "cheerp/clientlib.h".}

proc get_type*(this: var OscillatorOptions): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var OscillatorOptions; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_coneInnerAngle*(this: var PannerOptions): cdouble {.
    importcpp: "get_coneInnerAngle", header: "cheerp/clientlib.h".}

proc set_coneInnerAngle*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_coneInnerAngle", header: "cheerp/clientlib.h".}

proc get_coneOuterAngle*(this: var PannerOptions): cdouble {.
    importcpp: "get_coneOuterAngle", header: "cheerp/clientlib.h".}

proc set_coneOuterAngle*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_coneOuterAngle", header: "cheerp/clientlib.h".}

proc get_coneOuterGain*(this: var PannerOptions): cdouble {.
    importcpp: "get_coneOuterGain", header: "cheerp/clientlib.h".}

proc set_coneOuterGain*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_coneOuterGain", header: "cheerp/clientlib.h".}

proc get_distanceModel*(this: var PannerOptions): ptr String {.
    importcpp: "get_distanceModel", header: "cheerp/clientlib.h".}

proc set_distanceModel*(this: var PannerOptions; a2: String) {.
    importcpp: "set_distanceModel", header: "cheerp/clientlib.h".}

proc get_maxDistance*(this: var PannerOptions): cdouble {.
    importcpp: "get_maxDistance", header: "cheerp/clientlib.h".}

proc set_maxDistance*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_maxDistance", header: "cheerp/clientlib.h".}

proc get_orientationX*(this: var PannerOptions): cdouble {.
    importcpp: "get_orientationX", header: "cheerp/clientlib.h".}

proc set_orientationX*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_orientationX", header: "cheerp/clientlib.h".}

proc get_orientationY*(this: var PannerOptions): cdouble {.
    importcpp: "get_orientationY", header: "cheerp/clientlib.h".}

proc set_orientationY*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_orientationY", header: "cheerp/clientlib.h".}

proc get_orientationZ*(this: var PannerOptions): cdouble {.
    importcpp: "get_orientationZ", header: "cheerp/clientlib.h".}

proc set_orientationZ*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_orientationZ", header: "cheerp/clientlib.h".}

proc get_panningModel*(this: var PannerOptions): ptr String {.
    importcpp: "get_panningModel", header: "cheerp/clientlib.h".}

proc set_panningModel*(this: var PannerOptions; a2: String) {.
    importcpp: "set_panningModel", header: "cheerp/clientlib.h".}

proc get_positionX*(this: var PannerOptions): cdouble {.
    importcpp: "get_positionX", header: "cheerp/clientlib.h".}

proc set_positionX*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_positionX", header: "cheerp/clientlib.h".}

proc get_positionY*(this: var PannerOptions): cdouble {.
    importcpp: "get_positionY", header: "cheerp/clientlib.h".}

proc set_positionY*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_positionY", header: "cheerp/clientlib.h".}

proc get_positionZ*(this: var PannerOptions): cdouble {.
    importcpp: "get_positionZ", header: "cheerp/clientlib.h".}

proc set_positionZ*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_positionZ", header: "cheerp/clientlib.h".}

proc get_refDistance*(this: var PannerOptions): cdouble {.
    importcpp: "get_refDistance", header: "cheerp/clientlib.h".}

proc set_refDistance*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_refDistance", header: "cheerp/clientlib.h".}

proc get_rolloffFactor*(this: var PannerOptions): cdouble {.
    importcpp: "get_rolloffFactor", header: "cheerp/clientlib.h".}

proc set_rolloffFactor*(this: var PannerOptions; a2: cdouble) {.
    importcpp: "set_rolloffFactor", header: "cheerp/clientlib.h".}

proc get_currency*(this: var PaymentCurrencyAmount): ptr String {.
    importcpp: "get_currency", header: "cheerp/clientlib.h".}

proc set_currency*(this: var PaymentCurrencyAmount; a2: String) {.
    importcpp: "set_currency", header: "cheerp/clientlib.h".}

proc get_currencySystem*(this: var PaymentCurrencyAmount): ptr String {.
    importcpp: "get_currencySystem", header: "cheerp/clientlib.h".}

proc set_currencySystem*(this: var PaymentCurrencyAmount; a2: String) {.
    importcpp: "set_currencySystem", header: "cheerp/clientlib.h".}

proc get_value*(this: var PaymentCurrencyAmount): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var PaymentCurrencyAmount; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_displayItems*(this: var PaymentDetailsBase): ptr Array {.
    importcpp: "get_displayItems", header: "cheerp/clientlib.h".}

proc set_displayItems*(this: var PaymentDetailsBase; a2: ptr Array) {.
    importcpp: "set_displayItems", header: "cheerp/clientlib.h".}

proc get_modifiers*(this: var PaymentDetailsBase): ptr Array {.
    importcpp: "get_modifiers", header: "cheerp/clientlib.h".}

proc set_modifiers*(this: var PaymentDetailsBase; a2: ptr Array) {.
    importcpp: "set_modifiers", header: "cheerp/clientlib.h".}

proc get_shippingOptions*(this: var PaymentDetailsBase): ptr Array {.
    importcpp: "get_shippingOptions", header: "cheerp/clientlib.h".}

proc set_shippingOptions*(this: var PaymentDetailsBase; a2: ptr Array) {.
    importcpp: "set_shippingOptions", header: "cheerp/clientlib.h".}

proc get_id*(this: var PaymentDetailsInit): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var PaymentDetailsInit; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_total*(this: var PaymentDetailsInit): ptr PaymentItem {.
    importcpp: "get_total", header: "cheerp/clientlib.h".}

proc set_total*(this: var PaymentDetailsInit; a2: ptr PaymentItem) {.
    importcpp: "set_total", header: "cheerp/clientlib.h".}

proc get_additionalDisplayItems*(this: var PaymentDetailsModifier): ptr Array {.
    importcpp: "get_additionalDisplayItems", header: "cheerp/clientlib.h".}

proc set_additionalDisplayItems*(this: var PaymentDetailsModifier; a2: ptr Array) {.
    importcpp: "set_additionalDisplayItems", header: "cheerp/clientlib.h".}

proc set_data*(this: var PaymentDetailsModifier; a2: ptr Object) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_supportedMethods*(this: var PaymentDetailsModifier): ptr String {.
    importcpp: "get_supportedMethods", header: "cheerp/clientlib.h".}

proc set_supportedMethods*(this: var PaymentDetailsModifier; a2: String) {.
    importcpp: "set_supportedMethods", header: "cheerp/clientlib.h".}

proc get_total*(this: var PaymentDetailsModifier): ptr PaymentItem {.
    importcpp: "get_total", header: "cheerp/clientlib.h".}

proc set_total*(this: var PaymentDetailsModifier; a2: ptr PaymentItem) {.
    importcpp: "set_total", header: "cheerp/clientlib.h".}

proc get_error*(this: var PaymentDetailsUpdate): ptr String {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var PaymentDetailsUpdate; a2: String) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_total*(this: var PaymentDetailsUpdate): ptr PaymentItem {.
    importcpp: "get_total", header: "cheerp/clientlib.h".}

proc set_total*(this: var PaymentDetailsUpdate; a2: ptr PaymentItem) {.
    importcpp: "set_total", header: "cheerp/clientlib.h".}

proc get_amount*(this: var PaymentItem): ptr PaymentCurrencyAmount {.
    importcpp: "get_amount", header: "cheerp/clientlib.h".}

proc set_amount*(this: var PaymentItem; a2: ptr PaymentCurrencyAmount) {.
    importcpp: "set_amount", header: "cheerp/clientlib.h".}

proc get_label*(this: var PaymentItem): ptr String {.importcpp: "get_label",
    header: "cheerp/clientlib.h".}

proc set_label*(this: var PaymentItem; a2: String) {.importcpp: "set_label",
    header: "cheerp/clientlib.h".}

proc get_pending*(this: var PaymentItem): bool {.importcpp: "get_pending",
    header: "cheerp/clientlib.h".}

proc set_pending*(this: var PaymentItem; a2: bool) {.importcpp: "set_pending",
    header: "cheerp/clientlib.h".}

proc set_data*(this: var PaymentMethodData; a2: ptr Object) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_supportedMethods*(this: var PaymentMethodData): ptr String {.
    importcpp: "get_supportedMethods", header: "cheerp/clientlib.h".}

proc set_supportedMethods*(this: var PaymentMethodData; a2: String) {.
    importcpp: "set_supportedMethods", header: "cheerp/clientlib.h".}

proc get_requestPayerEmail*(this: var PaymentOptions): bool {.
    importcpp: "get_requestPayerEmail", header: "cheerp/clientlib.h".}

proc set_requestPayerEmail*(this: var PaymentOptions; a2: bool) {.
    importcpp: "set_requestPayerEmail", header: "cheerp/clientlib.h".}

proc get_requestPayerName*(this: var PaymentOptions): bool {.
    importcpp: "get_requestPayerName", header: "cheerp/clientlib.h".}

proc set_requestPayerName*(this: var PaymentOptions; a2: bool) {.
    importcpp: "set_requestPayerName", header: "cheerp/clientlib.h".}

proc get_requestPayerPhone*(this: var PaymentOptions): bool {.
    importcpp: "get_requestPayerPhone", header: "cheerp/clientlib.h".}

proc set_requestPayerPhone*(this: var PaymentOptions; a2: bool) {.
    importcpp: "set_requestPayerPhone", header: "cheerp/clientlib.h".}

proc get_requestShipping*(this: var PaymentOptions): bool {.
    importcpp: "get_requestShipping", header: "cheerp/clientlib.h".}

proc set_requestShipping*(this: var PaymentOptions; a2: bool) {.
    importcpp: "set_requestShipping", header: "cheerp/clientlib.h".}

proc get_shippingType*(this: var PaymentOptions): ptr String {.
    importcpp: "get_shippingType", header: "cheerp/clientlib.h".}

proc set_shippingType*(this: var PaymentOptions; a2: String) {.
    importcpp: "set_shippingType", header: "cheerp/clientlib.h".}

proc get_amount*(this: var PaymentShippingOption): ptr PaymentCurrencyAmount {.
    importcpp: "get_amount", header: "cheerp/clientlib.h".}

proc set_amount*(this: var PaymentShippingOption; a2: ptr PaymentCurrencyAmount) {.
    importcpp: "set_amount", header: "cheerp/clientlib.h".}

proc get_id*(this: var PaymentShippingOption): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var PaymentShippingOption; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var PaymentShippingOption): ptr String {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var PaymentShippingOption; a2: String) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc get_selected*(this: var PaymentShippingOption): bool {.
    importcpp: "get_selected", header: "cheerp/clientlib.h".}

proc set_selected*(this: var PaymentShippingOption; a2: bool) {.
    importcpp: "set_selected", header: "cheerp/clientlib.h".}

proc get_hash*(this: var Pbkdf2Params): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var Pbkdf2Params; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_iterations*(this: var Pbkdf2Params): cdouble {.
    importcpp: "get_iterations", header: "cheerp/clientlib.h".}

proc set_iterations*(this: var Pbkdf2Params; a2: cdouble) {.
    importcpp: "set_iterations", header: "cheerp/clientlib.h".}

proc get_salt*(this: var Pbkdf2Params): ptr Int8Array {.importcpp: "get_salt",
    header: "cheerp/clientlib.h".}

proc set_salt*(this: var Pbkdf2Params; a2: ptr Int8Array) {.
    importcpp: "set_salt", header: "cheerp/clientlib.h".}

proc get_disableNormalization*(this: var PeriodicWaveConstraints): bool {.
    importcpp: "get_disableNormalization", header: "cheerp/clientlib.h".}

proc set_disableNormalization*(this: var PeriodicWaveConstraints; a2: bool) {.
    importcpp: "set_disableNormalization", header: "cheerp/clientlib.h".}

proc get_imag*(this: var PeriodicWaveOptions): ptr Array {.
    importcpp: "get_imag", header: "cheerp/clientlib.h".}

proc set_imag*(this: var PeriodicWaveOptions; a2: ptr Array) {.
    importcpp: "set_imag", header: "cheerp/clientlib.h".}

proc get_real*(this: var PeriodicWaveOptions): ptr Array {.
    importcpp: "get_real", header: "cheerp/clientlib.h".}

proc set_real*(this: var PeriodicWaveOptions; a2: ptr Array) {.
    importcpp: "set_real", header: "cheerp/clientlib.h".}

proc get_height*(this: var PointerEventInit): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var PointerEventInit; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_isPrimary*(this: var PointerEventInit): bool {.
    importcpp: "get_isPrimary", header: "cheerp/clientlib.h".}

proc set_isPrimary*(this: var PointerEventInit; a2: bool) {.
    importcpp: "set_isPrimary", header: "cheerp/clientlib.h".}

proc get_pointerId*(this: var PointerEventInit): cdouble {.
    importcpp: "get_pointerId", header: "cheerp/clientlib.h".}

proc set_pointerId*(this: var PointerEventInit; a2: cdouble) {.
    importcpp: "set_pointerId", header: "cheerp/clientlib.h".}

proc get_pointerType*(this: var PointerEventInit): ptr String {.
    importcpp: "get_pointerType", header: "cheerp/clientlib.h".}

proc set_pointerType*(this: var PointerEventInit; a2: String) {.
    importcpp: "set_pointerType", header: "cheerp/clientlib.h".}

proc get_pressure*(this: var PointerEventInit): cdouble {.
    importcpp: "get_pressure", header: "cheerp/clientlib.h".}

proc set_pressure*(this: var PointerEventInit; a2: cdouble) {.
    importcpp: "set_pressure", header: "cheerp/clientlib.h".}

proc get_tiltX*(this: var PointerEventInit): cdouble {.importcpp: "get_tiltX",
    header: "cheerp/clientlib.h".}

proc set_tiltX*(this: var PointerEventInit; a2: cdouble) {.
    importcpp: "set_tiltX", header: "cheerp/clientlib.h".}

proc get_tiltY*(this: var PointerEventInit): cdouble {.importcpp: "get_tiltY",
    header: "cheerp/clientlib.h".}

proc set_tiltY*(this: var PointerEventInit; a2: cdouble) {.
    importcpp: "set_tiltY", header: "cheerp/clientlib.h".}

proc get_width*(this: var PointerEventInit): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var PointerEventInit; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc set_state*(this: var PopStateEventInit; a2: ptr Object) {.
    importcpp: "set_state", header: "cheerp/clientlib.h".}

proc get_enableHighAccuracy*(this: var PositionOptions): bool {.
    importcpp: "get_enableHighAccuracy", header: "cheerp/clientlib.h".}

proc set_enableHighAccuracy*(this: var PositionOptions; a2: bool) {.
    importcpp: "set_enableHighAccuracy", header: "cheerp/clientlib.h".}

proc get_maximumAge*(this: var PositionOptions): cdouble {.
    importcpp: "get_maximumAge", header: "cheerp/clientlib.h".}

proc set_maximumAge*(this: var PositionOptions; a2: cdouble) {.
    importcpp: "set_maximumAge", header: "cheerp/clientlib.h".}

proc get_timeout*(this: var PositionOptions): cdouble {.
    importcpp: "get_timeout", header: "cheerp/clientlib.h".}

proc set_timeout*(this: var PositionOptions; a2: cdouble) {.
    importcpp: "set_timeout", header: "cheerp/clientlib.h".}

proc get_lengthComputable*(this: var ProgressEventInit): bool {.
    importcpp: "get_lengthComputable", header: "cheerp/clientlib.h".}

proc set_lengthComputable*(this: var ProgressEventInit; a2: bool) {.
    importcpp: "set_lengthComputable", header: "cheerp/clientlib.h".}

proc get_loaded*(this: var ProgressEventInit): cdouble {.
    importcpp: "get_loaded", header: "cheerp/clientlib.h".}

proc set_loaded*(this: var ProgressEventInit; a2: cdouble) {.
    importcpp: "set_loaded", header: "cheerp/clientlib.h".}

proc get_total*(this: var ProgressEventInit): cdouble {.importcpp: "get_total",
    header: "cheerp/clientlib.h".}

proc set_total*(this: var ProgressEventInit; a2: cdouble) {.
    importcpp: "set_total", header: "cheerp/clientlib.h".}

proc get_data*(this: var PushEventInit): ptr Int8Array {.importcpp: "get_data",
    header: "cheerp/clientlib.h".}

proc set_data*(this: var PushEventInit; a2: ptr Int8Array) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_newSubscription*(this: var PushSubscriptionChangeInit): ptr PushSubscription {.
    importcpp: "get_newSubscription", header: "cheerp/clientlib.h".}

proc set_newSubscription*(this: var PushSubscriptionChangeInit;
                          a2: ptr PushSubscription) {.
    importcpp: "set_newSubscription", header: "cheerp/clientlib.h".}

proc get_oldSubscription*(this: var PushSubscriptionChangeInit): ptr PushSubscription {.
    importcpp: "get_oldSubscription", header: "cheerp/clientlib.h".}

proc set_oldSubscription*(this: var PushSubscriptionChangeInit;
                          a2: ptr PushSubscription) {.
    importcpp: "set_oldSubscription", header: "cheerp/clientlib.h".}

proc get_applicationServerKey*(this: var PushSubscriptionOptionsInit): ptr Int8Array {.
    importcpp: "get_applicationServerKey", header: "cheerp/clientlib.h".}

proc set_applicationServerKey*(this: var PushSubscriptionOptionsInit;
                               a2: ptr Int8Array) {.
    importcpp: "set_applicationServerKey", header: "cheerp/clientlib.h".}

proc get_userVisibleOnly*(this: var PushSubscriptionOptionsInit): bool {.
    importcpp: "get_userVisibleOnly", header: "cheerp/clientlib.h".}

proc set_userVisibleOnly*(this: var PushSubscriptionOptionsInit; a2: bool) {.
    importcpp: "set_userVisibleOnly", header: "cheerp/clientlib.h".}

proc get_highWaterMark*(this: var QueuingStrategy): cdouble {.
    importcpp: "get_highWaterMark", header: "cheerp/clientlib.h".}

proc set_highWaterMark*(this: var QueuingStrategy; a2: cdouble) {.
    importcpp: "set_highWaterMark", header: "cheerp/clientlib.h".}

proc get_size*(this: var QueuingStrategy): ptr EventListener {.
    importcpp: "get_size", header: "cheerp/clientlib.h".}

proc set_size*(this: var QueuingStrategy; a2: ptr EventListener) {.
    importcpp: "set_size", header: "cheerp/clientlib.h".}

proc get_bundlePolicy*(this: var RTCConfiguration): ptr String {.
    importcpp: "get_bundlePolicy", header: "cheerp/clientlib.h".}

proc set_bundlePolicy*(this: var RTCConfiguration; a2: String) {.
    importcpp: "set_bundlePolicy", header: "cheerp/clientlib.h".}

proc get_iceServers*(this: var RTCConfiguration): ptr Array {.
    importcpp: "get_iceServers", header: "cheerp/clientlib.h".}

proc set_iceServers*(this: var RTCConfiguration; a2: ptr Array) {.
    importcpp: "set_iceServers", header: "cheerp/clientlib.h".}

proc get_iceTransportPolicy*(this: var RTCConfiguration): ptr String {.
    importcpp: "get_iceTransportPolicy", header: "cheerp/clientlib.h".}

proc set_iceTransportPolicy*(this: var RTCConfiguration; a2: String) {.
    importcpp: "set_iceTransportPolicy", header: "cheerp/clientlib.h".}

proc get_peerIdentity*(this: var RTCConfiguration): ptr String {.
    importcpp: "get_peerIdentity", header: "cheerp/clientlib.h".}

proc set_peerIdentity*(this: var RTCConfiguration; a2: String) {.
    importcpp: "set_peerIdentity", header: "cheerp/clientlib.h".}

proc get_tone*(this: var RTCDTMFToneChangeEventInit): ptr String {.
    importcpp: "get_tone", header: "cheerp/clientlib.h".}

proc set_tone*(this: var RTCDTMFToneChangeEventInit; a2: String) {.
    importcpp: "set_tone", header: "cheerp/clientlib.h".}

proc get_algorithm*(this: var RTCDtlsFingerprint): ptr String {.
    importcpp: "get_algorithm", header: "cheerp/clientlib.h".}

proc set_algorithm*(this: var RTCDtlsFingerprint; a2: String) {.
    importcpp: "set_algorithm", header: "cheerp/clientlib.h".}

proc get_value*(this: var RTCDtlsFingerprint): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var RTCDtlsFingerprint; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_fingerprints*(this: var RTCDtlsParameters): ptr Array {.
    importcpp: "get_fingerprints", header: "cheerp/clientlib.h".}

proc set_fingerprints*(this: var RTCDtlsParameters; a2: ptr Array) {.
    importcpp: "set_fingerprints", header: "cheerp/clientlib.h".}

proc get_role*(this: var RTCDtlsParameters): ptr String {.importcpp: "get_role",
    header: "cheerp/clientlib.h".}

proc set_role*(this: var RTCDtlsParameters; a2: String) {.importcpp: "set_role",
    header: "cheerp/clientlib.h".}

proc get_addressSourceUrl*(this: var RTCIceCandidateAttributes): ptr String {.
    importcpp: "get_addressSourceUrl", header: "cheerp/clientlib.h".}

proc set_addressSourceUrl*(this: var RTCIceCandidateAttributes; a2: String) {.
    importcpp: "set_addressSourceUrl", header: "cheerp/clientlib.h".}

proc get_candidateType*(this: var RTCIceCandidateAttributes): ptr String {.
    importcpp: "get_candidateType", header: "cheerp/clientlib.h".}

proc set_candidateType*(this: var RTCIceCandidateAttributes; a2: String) {.
    importcpp: "set_candidateType", header: "cheerp/clientlib.h".}

proc get_ipAddress*(this: var RTCIceCandidateAttributes): ptr String {.
    importcpp: "get_ipAddress", header: "cheerp/clientlib.h".}

proc set_ipAddress*(this: var RTCIceCandidateAttributes; a2: String) {.
    importcpp: "set_ipAddress", header: "cheerp/clientlib.h".}

proc get_portNumber*(this: var RTCIceCandidateAttributes): cdouble {.
    importcpp: "get_portNumber", header: "cheerp/clientlib.h".}

proc set_portNumber*(this: var RTCIceCandidateAttributes; a2: cdouble) {.
    importcpp: "set_portNumber", header: "cheerp/clientlib.h".}

proc get_priority*(this: var RTCIceCandidateAttributes): cdouble {.
    importcpp: "get_priority", header: "cheerp/clientlib.h".}

proc set_priority*(this: var RTCIceCandidateAttributes; a2: cdouble) {.
    importcpp: "set_priority", header: "cheerp/clientlib.h".}

proc get_transport*(this: var RTCIceCandidateAttributes): ptr String {.
    importcpp: "get_transport", header: "cheerp/clientlib.h".}

proc set_transport*(this: var RTCIceCandidateAttributes; a2: String) {.
    importcpp: "set_transport", header: "cheerp/clientlib.h".}

proc get_foundation*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_foundation", header: "cheerp/clientlib.h".}

proc set_foundation*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_foundation", header: "cheerp/clientlib.h".}

proc get_ip*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_ip", header: "cheerp/clientlib.h".}

proc set_ip*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_ip", header: "cheerp/clientlib.h".}

proc get_msMTurnSessionId*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_msMTurnSessionId", header: "cheerp/clientlib.h".}

proc set_msMTurnSessionId*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_msMTurnSessionId", header: "cheerp/clientlib.h".}

proc get_port*(this: var RTCIceCandidateDictionary): cdouble {.
    importcpp: "get_port", header: "cheerp/clientlib.h".}

proc set_port*(this: var RTCIceCandidateDictionary; a2: cdouble) {.
    importcpp: "set_port", header: "cheerp/clientlib.h".}

proc get_priority*(this: var RTCIceCandidateDictionary): cdouble {.
    importcpp: "get_priority", header: "cheerp/clientlib.h".}

proc set_priority*(this: var RTCIceCandidateDictionary; a2: cdouble) {.
    importcpp: "set_priority", header: "cheerp/clientlib.h".}

proc get_protocol*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_protocol", header: "cheerp/clientlib.h".}

proc set_protocol*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_protocol", header: "cheerp/clientlib.h".}

proc get_relatedAddress*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_relatedAddress", header: "cheerp/clientlib.h".}

proc set_relatedAddress*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_relatedAddress", header: "cheerp/clientlib.h".}

proc get_relatedPort*(this: var RTCIceCandidateDictionary): cdouble {.
    importcpp: "get_relatedPort", header: "cheerp/clientlib.h".}

proc set_relatedPort*(this: var RTCIceCandidateDictionary; a2: cdouble) {.
    importcpp: "set_relatedPort", header: "cheerp/clientlib.h".}

proc get_tcpType*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_tcpType", header: "cheerp/clientlib.h".}

proc set_tcpType*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_tcpType", header: "cheerp/clientlib.h".}

proc get_type*(this: var RTCIceCandidateDictionary): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var RTCIceCandidateDictionary; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_candidate*(this: var RTCIceCandidateInit): ptr String {.
    importcpp: "get_candidate", header: "cheerp/clientlib.h".}

proc set_candidate*(this: var RTCIceCandidateInit; a2: String) {.
    importcpp: "set_candidate", header: "cheerp/clientlib.h".}

proc get_sdpMLineIndex*(this: var RTCIceCandidateInit): cdouble {.
    importcpp: "get_sdpMLineIndex", header: "cheerp/clientlib.h".}

proc set_sdpMLineIndex*(this: var RTCIceCandidateInit; a2: cdouble) {.
    importcpp: "set_sdpMLineIndex", header: "cheerp/clientlib.h".}

proc get_sdpMid*(this: var RTCIceCandidateInit): ptr String {.
    importcpp: "get_sdpMid", header: "cheerp/clientlib.h".}

proc set_sdpMid*(this: var RTCIceCandidateInit; a2: String) {.
    importcpp: "set_sdpMid", header: "cheerp/clientlib.h".}

proc get_local*(this: var RTCIceCandidatePair): ptr RTCIceCandidateDictionary {.
    importcpp: "get_local", header: "cheerp/clientlib.h".}

proc set_local*(this: var RTCIceCandidatePair; a2: ptr RTCIceCandidateDictionary) {.
    importcpp: "set_local", header: "cheerp/clientlib.h".}

proc get_remote*(this: var RTCIceCandidatePair): ptr RTCIceCandidateDictionary {.
    importcpp: "get_remote", header: "cheerp/clientlib.h".}

proc set_remote*(this: var RTCIceCandidatePair;
                 a2: ptr RTCIceCandidateDictionary) {.importcpp: "set_remote",
    header: "cheerp/clientlib.h".}

proc get_availableIncomingBitrate*(this: var RTCIceCandidatePairStats): cdouble {.
    importcpp: "get_availableIncomingBitrate", header: "cheerp/clientlib.h".}

proc set_availableIncomingBitrate*(this: var RTCIceCandidatePairStats;
                                   a2: cdouble) {.
    importcpp: "set_availableIncomingBitrate", header: "cheerp/clientlib.h".}

proc get_availableOutgoingBitrate*(this: var RTCIceCandidatePairStats): cdouble {.
    importcpp: "get_availableOutgoingBitrate", header: "cheerp/clientlib.h".}

proc set_availableOutgoingBitrate*(this: var RTCIceCandidatePairStats;
                                   a2: cdouble) {.
    importcpp: "set_availableOutgoingBitrate", header: "cheerp/clientlib.h".}

proc get_bytesReceived*(this: var RTCIceCandidatePairStats): cdouble {.
    importcpp: "get_bytesReceived", header: "cheerp/clientlib.h".}

proc set_bytesReceived*(this: var RTCIceCandidatePairStats; a2: cdouble) {.
    importcpp: "set_bytesReceived", header: "cheerp/clientlib.h".}

proc get_bytesSent*(this: var RTCIceCandidatePairStats): cdouble {.
    importcpp: "get_bytesSent", header: "cheerp/clientlib.h".}

proc set_bytesSent*(this: var RTCIceCandidatePairStats; a2: cdouble) {.
    importcpp: "set_bytesSent", header: "cheerp/clientlib.h".}

proc get_localCandidateId*(this: var RTCIceCandidatePairStats): ptr String {.
    importcpp: "get_localCandidateId", header: "cheerp/clientlib.h".}

proc set_localCandidateId*(this: var RTCIceCandidatePairStats; a2: String) {.
    importcpp: "set_localCandidateId", header: "cheerp/clientlib.h".}

proc get_nominated*(this: var RTCIceCandidatePairStats): bool {.
    importcpp: "get_nominated", header: "cheerp/clientlib.h".}

proc set_nominated*(this: var RTCIceCandidatePairStats; a2: bool) {.
    importcpp: "set_nominated", header: "cheerp/clientlib.h".}

proc get_priority*(this: var RTCIceCandidatePairStats): cdouble {.
    importcpp: "get_priority", header: "cheerp/clientlib.h".}

proc set_priority*(this: var RTCIceCandidatePairStats; a2: cdouble) {.
    importcpp: "set_priority", header: "cheerp/clientlib.h".}

proc get_readable*(this: var RTCIceCandidatePairStats): bool {.
    importcpp: "get_readable", header: "cheerp/clientlib.h".}

proc set_readable*(this: var RTCIceCandidatePairStats; a2: bool) {.
    importcpp: "set_readable", header: "cheerp/clientlib.h".}

proc get_remoteCandidateId*(this: var RTCIceCandidatePairStats): ptr String {.
    importcpp: "get_remoteCandidateId", header: "cheerp/clientlib.h".}

proc set_remoteCandidateId*(this: var RTCIceCandidatePairStats; a2: String) {.
    importcpp: "set_remoteCandidateId", header: "cheerp/clientlib.h".}

proc get_roundTripTime*(this: var RTCIceCandidatePairStats): cdouble {.
    importcpp: "get_roundTripTime", header: "cheerp/clientlib.h".}

proc set_roundTripTime*(this: var RTCIceCandidatePairStats; a2: cdouble) {.
    importcpp: "set_roundTripTime", header: "cheerp/clientlib.h".}

proc get_state*(this: var RTCIceCandidatePairStats): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc set_state*(this: var RTCIceCandidatePairStats; a2: String) {.
    importcpp: "set_state", header: "cheerp/clientlib.h".}

proc get_transportId*(this: var RTCIceCandidatePairStats): ptr String {.
    importcpp: "get_transportId", header: "cheerp/clientlib.h".}

proc set_transportId*(this: var RTCIceCandidatePairStats; a2: String) {.
    importcpp: "set_transportId", header: "cheerp/clientlib.h".}

proc get_writable*(this: var RTCIceCandidatePairStats): bool {.
    importcpp: "get_writable", header: "cheerp/clientlib.h".}

proc set_writable*(this: var RTCIceCandidatePairStats; a2: bool) {.
    importcpp: "set_writable", header: "cheerp/clientlib.h".}

proc get_gatherPolicy*(this: var RTCIceGatherOptions): ptr String {.
    importcpp: "get_gatherPolicy", header: "cheerp/clientlib.h".}

proc set_gatherPolicy*(this: var RTCIceGatherOptions; a2: String) {.
    importcpp: "set_gatherPolicy", header: "cheerp/clientlib.h".}

proc get_iceservers*(this: var RTCIceGatherOptions): ptr Array {.
    importcpp: "get_iceservers", header: "cheerp/clientlib.h".}

proc set_iceservers*(this: var RTCIceGatherOptions; a2: ptr Array) {.
    importcpp: "set_iceservers", header: "cheerp/clientlib.h".}

proc get_portRange*(this: var RTCIceGatherOptions): ptr MSPortRange {.
    importcpp: "get_portRange", header: "cheerp/clientlib.h".}

proc set_portRange*(this: var RTCIceGatherOptions; a2: ptr MSPortRange) {.
    importcpp: "set_portRange", header: "cheerp/clientlib.h".}

proc get_iceLite*(this: var RTCIceParameters): bool {.importcpp: "get_iceLite",
    header: "cheerp/clientlib.h".}

proc set_iceLite*(this: var RTCIceParameters; a2: bool) {.
    importcpp: "set_iceLite", header: "cheerp/clientlib.h".}

proc get_password*(this: var RTCIceParameters): ptr String {.
    importcpp: "get_password", header: "cheerp/clientlib.h".}

proc set_password*(this: var RTCIceParameters; a2: String) {.
    importcpp: "set_password", header: "cheerp/clientlib.h".}

proc get_usernameFragment*(this: var RTCIceParameters): ptr String {.
    importcpp: "get_usernameFragment", header: "cheerp/clientlib.h".}

proc set_usernameFragment*(this: var RTCIceParameters; a2: String) {.
    importcpp: "set_usernameFragment", header: "cheerp/clientlib.h".}

proc get_credential*(this: var RTCIceServer): ptr String {.
    importcpp: "get_credential", header: "cheerp/clientlib.h".}

proc set_credential*(this: var RTCIceServer; a2: String) {.
    importcpp: "set_credential", header: "cheerp/clientlib.h".}

proc set_urls*(this: var RTCIceServer; a2: ptr Object) {.importcpp: "set_urls",
    header: "cheerp/clientlib.h".}

proc get_username*(this: var RTCIceServer): ptr String {.
    importcpp: "get_username", header: "cheerp/clientlib.h".}

proc set_username*(this: var RTCIceServer; a2: String) {.
    importcpp: "set_username", header: "cheerp/clientlib.h".}

proc get_associateStatsId*(this: var RTCRTPStreamStats): ptr String {.
    importcpp: "get_associateStatsId", header: "cheerp/clientlib.h".}

proc set_associateStatsId*(this: var RTCRTPStreamStats; a2: String) {.
    importcpp: "set_associateStatsId", header: "cheerp/clientlib.h".}

proc get_codecId*(this: var RTCRTPStreamStats): ptr String {.
    importcpp: "get_codecId", header: "cheerp/clientlib.h".}

proc set_codecId*(this: var RTCRTPStreamStats; a2: String) {.
    importcpp: "set_codecId", header: "cheerp/clientlib.h".}

proc get_firCount*(this: var RTCRTPStreamStats): cdouble {.
    importcpp: "get_firCount", header: "cheerp/clientlib.h".}

proc set_firCount*(this: var RTCRTPStreamStats; a2: cdouble) {.
    importcpp: "set_firCount", header: "cheerp/clientlib.h".}

proc get_isRemote*(this: var RTCRTPStreamStats): bool {.
    importcpp: "get_isRemote", header: "cheerp/clientlib.h".}

proc set_isRemote*(this: var RTCRTPStreamStats; a2: bool) {.
    importcpp: "set_isRemote", header: "cheerp/clientlib.h".}

proc get_mediaTrackId*(this: var RTCRTPStreamStats): ptr String {.
    importcpp: "get_mediaTrackId", header: "cheerp/clientlib.h".}

proc set_mediaTrackId*(this: var RTCRTPStreamStats; a2: String) {.
    importcpp: "set_mediaTrackId", header: "cheerp/clientlib.h".}

proc get_mediaType*(this: var RTCRTPStreamStats): ptr String {.
    importcpp: "get_mediaType", header: "cheerp/clientlib.h".}

proc set_mediaType*(this: var RTCRTPStreamStats; a2: String) {.
    importcpp: "set_mediaType", header: "cheerp/clientlib.h".}

proc get_nackCount*(this: var RTCRTPStreamStats): cdouble {.
    importcpp: "get_nackCount", header: "cheerp/clientlib.h".}

proc set_nackCount*(this: var RTCRTPStreamStats; a2: cdouble) {.
    importcpp: "set_nackCount", header: "cheerp/clientlib.h".}

proc get_pliCount*(this: var RTCRTPStreamStats): cdouble {.
    importcpp: "get_pliCount", header: "cheerp/clientlib.h".}

proc set_pliCount*(this: var RTCRTPStreamStats; a2: cdouble) {.
    importcpp: "set_pliCount", header: "cheerp/clientlib.h".}

proc get_sliCount*(this: var RTCRTPStreamStats): cdouble {.
    importcpp: "get_sliCount", header: "cheerp/clientlib.h".}

proc set_sliCount*(this: var RTCRTPStreamStats; a2: cdouble) {.
    importcpp: "set_sliCount", header: "cheerp/clientlib.h".}

proc get_ssrc*(this: var RTCRTPStreamStats): ptr String {.importcpp: "get_ssrc",
    header: "cheerp/clientlib.h".}

proc set_ssrc*(this: var RTCRTPStreamStats; a2: String) {.importcpp: "set_ssrc",
    header: "cheerp/clientlib.h".}

proc get_transportId*(this: var RTCRTPStreamStats): ptr String {.
    importcpp: "get_transportId", header: "cheerp/clientlib.h".}

proc set_transportId*(this: var RTCRTPStreamStats; a2: String) {.
    importcpp: "set_transportId", header: "cheerp/clientlib.h".}

proc get_bytesReceived*(this: var RTCInboundRTPStreamStats): cdouble {.
    importcpp: "get_bytesReceived", header: "cheerp/clientlib.h".}

proc set_bytesReceived*(this: var RTCInboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_bytesReceived", header: "cheerp/clientlib.h".}

proc get_fractionLost*(this: var RTCInboundRTPStreamStats): cdouble {.
    importcpp: "get_fractionLost", header: "cheerp/clientlib.h".}

proc set_fractionLost*(this: var RTCInboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_fractionLost", header: "cheerp/clientlib.h".}

proc get_jitter*(this: var RTCInboundRTPStreamStats): cdouble {.
    importcpp: "get_jitter", header: "cheerp/clientlib.h".}

proc set_jitter*(this: var RTCInboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_jitter", header: "cheerp/clientlib.h".}

proc get_packetsLost*(this: var RTCInboundRTPStreamStats): cdouble {.
    importcpp: "get_packetsLost", header: "cheerp/clientlib.h".}

proc set_packetsLost*(this: var RTCInboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_packetsLost", header: "cheerp/clientlib.h".}

proc get_packetsReceived*(this: var RTCInboundRTPStreamStats): cdouble {.
    importcpp: "get_packetsReceived", header: "cheerp/clientlib.h".}

proc set_packetsReceived*(this: var RTCInboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_packetsReceived", header: "cheerp/clientlib.h".}

proc get_audioLevel*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_audioLevel", header: "cheerp/clientlib.h".}

proc set_audioLevel*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_audioLevel", header: "cheerp/clientlib.h".}

proc get_echoReturnLoss*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_echoReturnLoss", header: "cheerp/clientlib.h".}

proc set_echoReturnLoss*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_echoReturnLoss", header: "cheerp/clientlib.h".}

proc get_echoReturnLossEnhancement*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_echoReturnLossEnhancement", header: "cheerp/clientlib.h".}

proc set_echoReturnLossEnhancement*(this: var RTCMediaStreamTrackStats;
                                    a2: cdouble) {.
    importcpp: "set_echoReturnLossEnhancement", header: "cheerp/clientlib.h".}

proc get_frameHeight*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_frameHeight", header: "cheerp/clientlib.h".}

proc set_frameHeight*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_frameHeight", header: "cheerp/clientlib.h".}

proc get_frameWidth*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_frameWidth", header: "cheerp/clientlib.h".}

proc set_frameWidth*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_frameWidth", header: "cheerp/clientlib.h".}

proc get_framesCorrupted*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_framesCorrupted", header: "cheerp/clientlib.h".}

proc set_framesCorrupted*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_framesCorrupted", header: "cheerp/clientlib.h".}

proc get_framesDecoded*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_framesDecoded", header: "cheerp/clientlib.h".}

proc set_framesDecoded*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_framesDecoded", header: "cheerp/clientlib.h".}

proc get_framesDropped*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_framesDropped", header: "cheerp/clientlib.h".}

proc set_framesDropped*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_framesDropped", header: "cheerp/clientlib.h".}

proc get_framesPerSecond*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_framesPerSecond", header: "cheerp/clientlib.h".}

proc set_framesPerSecond*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_framesPerSecond", header: "cheerp/clientlib.h".}

proc get_framesReceived*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_framesReceived", header: "cheerp/clientlib.h".}

proc set_framesReceived*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_framesReceived", header: "cheerp/clientlib.h".}

proc get_framesSent*(this: var RTCMediaStreamTrackStats): cdouble {.
    importcpp: "get_framesSent", header: "cheerp/clientlib.h".}

proc set_framesSent*(this: var RTCMediaStreamTrackStats; a2: cdouble) {.
    importcpp: "set_framesSent", header: "cheerp/clientlib.h".}

proc get_remoteSource*(this: var RTCMediaStreamTrackStats): bool {.
    importcpp: "get_remoteSource", header: "cheerp/clientlib.h".}

proc set_remoteSource*(this: var RTCMediaStreamTrackStats; a2: bool) {.
    importcpp: "set_remoteSource", header: "cheerp/clientlib.h".}

proc get_ssrcIds*(this: var RTCMediaStreamTrackStats): ptr Array {.
    importcpp: "get_ssrcIds", header: "cheerp/clientlib.h".}

proc set_ssrcIds*(this: var RTCMediaStreamTrackStats; a2: ptr Array) {.
    importcpp: "set_ssrcIds", header: "cheerp/clientlib.h".}

proc get_trackIdentifier*(this: var RTCMediaStreamTrackStats): ptr String {.
    importcpp: "get_trackIdentifier", header: "cheerp/clientlib.h".}

proc set_trackIdentifier*(this: var RTCMediaStreamTrackStats; a2: String) {.
    importcpp: "set_trackIdentifier", header: "cheerp/clientlib.h".}

proc get_iceRestart*(this: var RTCOfferOptions): bool {.
    importcpp: "get_iceRestart", header: "cheerp/clientlib.h".}

proc set_iceRestart*(this: var RTCOfferOptions; a2: bool) {.
    importcpp: "set_iceRestart", header: "cheerp/clientlib.h".}

proc get_offerToReceiveAudio*(this: var RTCOfferOptions): cdouble {.
    importcpp: "get_offerToReceiveAudio", header: "cheerp/clientlib.h".}

proc set_offerToReceiveAudio*(this: var RTCOfferOptions; a2: cdouble) {.
    importcpp: "set_offerToReceiveAudio", header: "cheerp/clientlib.h".}

proc get_offerToReceiveVideo*(this: var RTCOfferOptions): cdouble {.
    importcpp: "get_offerToReceiveVideo", header: "cheerp/clientlib.h".}

proc set_offerToReceiveVideo*(this: var RTCOfferOptions; a2: cdouble) {.
    importcpp: "set_offerToReceiveVideo", header: "cheerp/clientlib.h".}

proc get_voiceActivityDetection*(this: var RTCOfferOptions): bool {.
    importcpp: "get_voiceActivityDetection", header: "cheerp/clientlib.h".}

proc set_voiceActivityDetection*(this: var RTCOfferOptions; a2: bool) {.
    importcpp: "set_voiceActivityDetection", header: "cheerp/clientlib.h".}

proc get_bytesSent*(this: var RTCOutboundRTPStreamStats): cdouble {.
    importcpp: "get_bytesSent", header: "cheerp/clientlib.h".}

proc set_bytesSent*(this: var RTCOutboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_bytesSent", header: "cheerp/clientlib.h".}

proc get_packetsSent*(this: var RTCOutboundRTPStreamStats): cdouble {.
    importcpp: "get_packetsSent", header: "cheerp/clientlib.h".}

proc set_packetsSent*(this: var RTCOutboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_packetsSent", header: "cheerp/clientlib.h".}

proc get_roundTripTime*(this: var RTCOutboundRTPStreamStats): cdouble {.
    importcpp: "get_roundTripTime", header: "cheerp/clientlib.h".}

proc set_roundTripTime*(this: var RTCOutboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_roundTripTime", header: "cheerp/clientlib.h".}

proc get_targetBitrate*(this: var RTCOutboundRTPStreamStats): cdouble {.
    importcpp: "get_targetBitrate", header: "cheerp/clientlib.h".}

proc set_targetBitrate*(this: var RTCOutboundRTPStreamStats; a2: cdouble) {.
    importcpp: "set_targetBitrate", header: "cheerp/clientlib.h".}

proc get_candidate*(this: var RTCPeerConnectionIceEventInit): ptr RTCIceCandidate {.
    importcpp: "get_candidate", header: "cheerp/clientlib.h".}

proc set_candidate*(this: var RTCPeerConnectionIceEventInit;
                    a2: ptr RTCIceCandidate) {.importcpp: "set_candidate",
    header: "cheerp/clientlib.h".}

proc get_parameter*(this: var RTCRtcpFeedback): ptr String {.
    importcpp: "get_parameter", header: "cheerp/clientlib.h".}

proc set_parameter*(this: var RTCRtcpFeedback; a2: String) {.
    importcpp: "set_parameter", header: "cheerp/clientlib.h".}

proc get_type*(this: var RTCRtcpFeedback): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var RTCRtcpFeedback; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_cname*(this: var RTCRtcpParameters): ptr String {.
    importcpp: "get_cname", header: "cheerp/clientlib.h".}

proc set_cname*(this: var RTCRtcpParameters; a2: String) {.
    importcpp: "set_cname", header: "cheerp/clientlib.h".}

proc get_mux*(this: var RTCRtcpParameters): bool {.importcpp: "get_mux",
    header: "cheerp/clientlib.h".}

proc set_mux*(this: var RTCRtcpParameters; a2: bool) {.importcpp: "set_mux",
    header: "cheerp/clientlib.h".}

proc get_reducedSize*(this: var RTCRtcpParameters): bool {.
    importcpp: "get_reducedSize", header: "cheerp/clientlib.h".}

proc set_reducedSize*(this: var RTCRtcpParameters; a2: bool) {.
    importcpp: "set_reducedSize", header: "cheerp/clientlib.h".}

proc get_ssrc*(this: var RTCRtcpParameters): cdouble {.importcpp: "get_ssrc",
    header: "cheerp/clientlib.h".}

proc set_ssrc*(this: var RTCRtcpParameters; a2: cdouble) {.
    importcpp: "set_ssrc", header: "cheerp/clientlib.h".}

proc get_codecs*(this: var RTCRtpCapabilities): ptr Array {.
    importcpp: "get_codecs", header: "cheerp/clientlib.h".}

proc set_codecs*(this: var RTCRtpCapabilities; a2: ptr Array) {.
    importcpp: "set_codecs", header: "cheerp/clientlib.h".}

proc get_fecMechanisms*(this: var RTCRtpCapabilities): ptr Array {.
    importcpp: "get_fecMechanisms", header: "cheerp/clientlib.h".}

proc set_fecMechanisms*(this: var RTCRtpCapabilities; a2: ptr Array) {.
    importcpp: "set_fecMechanisms", header: "cheerp/clientlib.h".}

proc get_headerExtensions*(this: var RTCRtpCapabilities): ptr Array {.
    importcpp: "get_headerExtensions", header: "cheerp/clientlib.h".}

proc set_headerExtensions*(this: var RTCRtpCapabilities; a2: ptr Array) {.
    importcpp: "set_headerExtensions", header: "cheerp/clientlib.h".}

proc get_clockRate*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_clockRate", header: "cheerp/clientlib.h".}

proc set_clockRate*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_clockRate", header: "cheerp/clientlib.h".}

proc get_kind*(this: var RTCRtpCodecCapability): ptr String {.
    importcpp: "get_kind", header: "cheerp/clientlib.h".}

proc set_kind*(this: var RTCRtpCodecCapability; a2: String) {.
    importcpp: "set_kind", header: "cheerp/clientlib.h".}

proc get_maxSpatialLayers*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_maxSpatialLayers", header: "cheerp/clientlib.h".}

proc set_maxSpatialLayers*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_maxSpatialLayers", header: "cheerp/clientlib.h".}

proc get_maxTemporalLayers*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_maxTemporalLayers", header: "cheerp/clientlib.h".}

proc set_maxTemporalLayers*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_maxTemporalLayers", header: "cheerp/clientlib.h".}

proc get_maxptime*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_maxptime", header: "cheerp/clientlib.h".}

proc set_maxptime*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_maxptime", header: "cheerp/clientlib.h".}

proc get_name*(this: var RTCRtpCodecCapability): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var RTCRtpCodecCapability; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_numChannels*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_numChannels", header: "cheerp/clientlib.h".}

proc set_numChannels*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_numChannels", header: "cheerp/clientlib.h".}

proc set_options*(this: var RTCRtpCodecCapability; a2: ptr Object) {.
    importcpp: "set_options", header: "cheerp/clientlib.h".}

proc set_parameters*(this: var RTCRtpCodecCapability; a2: ptr Object) {.
    importcpp: "set_parameters", header: "cheerp/clientlib.h".}

proc get_preferredPayloadType*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_preferredPayloadType", header: "cheerp/clientlib.h".}

proc set_preferredPayloadType*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_preferredPayloadType", header: "cheerp/clientlib.h".}

proc get_ptime*(this: var RTCRtpCodecCapability): cdouble {.
    importcpp: "get_ptime", header: "cheerp/clientlib.h".}

proc set_ptime*(this: var RTCRtpCodecCapability; a2: cdouble) {.
    importcpp: "set_ptime", header: "cheerp/clientlib.h".}

proc get_rtcpFeedback*(this: var RTCRtpCodecCapability): ptr Array {.
    importcpp: "get_rtcpFeedback", header: "cheerp/clientlib.h".}

proc set_rtcpFeedback*(this: var RTCRtpCodecCapability; a2: ptr Array) {.
    importcpp: "set_rtcpFeedback", header: "cheerp/clientlib.h".}

proc get_svcMultiStreamSupport*(this: var RTCRtpCodecCapability): bool {.
    importcpp: "get_svcMultiStreamSupport", header: "cheerp/clientlib.h".}

proc set_svcMultiStreamSupport*(this: var RTCRtpCodecCapability; a2: bool) {.
    importcpp: "set_svcMultiStreamSupport", header: "cheerp/clientlib.h".}

proc get_clockRate*(this: var RTCRtpCodecParameters): cdouble {.
    importcpp: "get_clockRate", header: "cheerp/clientlib.h".}

proc set_clockRate*(this: var RTCRtpCodecParameters; a2: cdouble) {.
    importcpp: "set_clockRate", header: "cheerp/clientlib.h".}

proc get_maxptime*(this: var RTCRtpCodecParameters): cdouble {.
    importcpp: "get_maxptime", header: "cheerp/clientlib.h".}

proc set_maxptime*(this: var RTCRtpCodecParameters; a2: cdouble) {.
    importcpp: "set_maxptime", header: "cheerp/clientlib.h".}

proc get_name*(this: var RTCRtpCodecParameters): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var RTCRtpCodecParameters; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_numChannels*(this: var RTCRtpCodecParameters): cdouble {.
    importcpp: "get_numChannels", header: "cheerp/clientlib.h".}

proc set_numChannels*(this: var RTCRtpCodecParameters; a2: cdouble) {.
    importcpp: "set_numChannels", header: "cheerp/clientlib.h".}

proc set_parameters*(this: var RTCRtpCodecParameters; a2: ptr Object) {.
    importcpp: "set_parameters", header: "cheerp/clientlib.h".}

proc get_payloadType*(this: var RTCRtpCodecParameters): cdouble {.
    importcpp: "get_payloadType", header: "cheerp/clientlib.h".}

proc set_payloadType*(this: var RTCRtpCodecParameters; a2: cdouble) {.
    importcpp: "set_payloadType", header: "cheerp/clientlib.h".}

proc get_ptime*(this: var RTCRtpCodecParameters): cdouble {.
    importcpp: "get_ptime", header: "cheerp/clientlib.h".}

proc set_ptime*(this: var RTCRtpCodecParameters; a2: cdouble) {.
    importcpp: "set_ptime", header: "cheerp/clientlib.h".}

proc get_rtcpFeedback*(this: var RTCRtpCodecParameters): ptr Array {.
    importcpp: "get_rtcpFeedback", header: "cheerp/clientlib.h".}

proc set_rtcpFeedback*(this: var RTCRtpCodecParameters; a2: ptr Array) {.
    importcpp: "set_rtcpFeedback", header: "cheerp/clientlib.h".}

proc get_audioLevel*(this: var RTCRtpContributingSource): cdouble {.
    importcpp: "get_audioLevel", header: "cheerp/clientlib.h".}

proc set_audioLevel*(this: var RTCRtpContributingSource; a2: cdouble) {.
    importcpp: "set_audioLevel", header: "cheerp/clientlib.h".}

proc get_csrc*(this: var RTCRtpContributingSource): cdouble {.
    importcpp: "get_csrc", header: "cheerp/clientlib.h".}

proc set_csrc*(this: var RTCRtpContributingSource; a2: cdouble) {.
    importcpp: "set_csrc", header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var RTCRtpContributingSource): cdouble {.
    importcpp: "get_timestamp", header: "cheerp/clientlib.h".}

proc set_timestamp*(this: var RTCRtpContributingSource; a2: cdouble) {.
    importcpp: "set_timestamp", header: "cheerp/clientlib.h".}

proc get_active*(this: var RTCRtpEncodingParameters): bool {.
    importcpp: "get_active", header: "cheerp/clientlib.h".}

proc set_active*(this: var RTCRtpEncodingParameters; a2: bool) {.
    importcpp: "set_active", header: "cheerp/clientlib.h".}

proc get_codecPayloadType*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_codecPayloadType", header: "cheerp/clientlib.h".}

proc set_codecPayloadType*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_codecPayloadType", header: "cheerp/clientlib.h".}

proc get_dependencyEncodingIds*(this: var RTCRtpEncodingParameters): ptr Array {.
    importcpp: "get_dependencyEncodingIds", header: "cheerp/clientlib.h".}

proc set_dependencyEncodingIds*(this: var RTCRtpEncodingParameters;
                                a2: ptr Array) {.
    importcpp: "set_dependencyEncodingIds", header: "cheerp/clientlib.h".}

proc get_encodingId*(this: var RTCRtpEncodingParameters): ptr String {.
    importcpp: "get_encodingId", header: "cheerp/clientlib.h".}

proc set_encodingId*(this: var RTCRtpEncodingParameters; a2: String) {.
    importcpp: "set_encodingId", header: "cheerp/clientlib.h".}

proc get_fec*(this: var RTCRtpEncodingParameters): ptr RTCRtpFecParameters {.
    importcpp: "get_fec", header: "cheerp/clientlib.h".}

proc set_fec*(this: var RTCRtpEncodingParameters; a2: ptr RTCRtpFecParameters) {.
    importcpp: "set_fec", header: "cheerp/clientlib.h".}

proc get_framerateScale*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_framerateScale", header: "cheerp/clientlib.h".}

proc set_framerateScale*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_framerateScale", header: "cheerp/clientlib.h".}

proc get_maxBitrate*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_maxBitrate", header: "cheerp/clientlib.h".}

proc set_maxBitrate*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_maxBitrate", header: "cheerp/clientlib.h".}

proc get_maxFramerate*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_maxFramerate", header: "cheerp/clientlib.h".}

proc set_maxFramerate*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_maxFramerate", header: "cheerp/clientlib.h".}

proc get_minQuality*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_minQuality", header: "cheerp/clientlib.h".}

proc set_minQuality*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_minQuality", header: "cheerp/clientlib.h".}

proc get_priority*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_priority", header: "cheerp/clientlib.h".}

proc set_priority*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_priority", header: "cheerp/clientlib.h".}

proc get_resolutionScale*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_resolutionScale", header: "cheerp/clientlib.h".}

proc set_resolutionScale*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_resolutionScale", header: "cheerp/clientlib.h".}

proc get_rtx*(this: var RTCRtpEncodingParameters): ptr RTCRtpRtxParameters {.
    importcpp: "get_rtx", header: "cheerp/clientlib.h".}

proc set_rtx*(this: var RTCRtpEncodingParameters; a2: ptr RTCRtpRtxParameters) {.
    importcpp: "set_rtx", header: "cheerp/clientlib.h".}

proc get_ssrc*(this: var RTCRtpEncodingParameters): cdouble {.
    importcpp: "get_ssrc", header: "cheerp/clientlib.h".}

proc set_ssrc*(this: var RTCRtpEncodingParameters; a2: cdouble) {.
    importcpp: "set_ssrc", header: "cheerp/clientlib.h".}

proc get_ssrcRange*(this: var RTCRtpEncodingParameters): ptr RTCSsrcRange {.
    importcpp: "get_ssrcRange", header: "cheerp/clientlib.h".}

proc set_ssrcRange*(this: var RTCRtpEncodingParameters; a2: ptr RTCSsrcRange) {.
    importcpp: "set_ssrcRange", header: "cheerp/clientlib.h".}

proc get_mechanism*(this: var RTCRtpFecParameters): ptr String {.
    importcpp: "get_mechanism", header: "cheerp/clientlib.h".}

proc set_mechanism*(this: var RTCRtpFecParameters; a2: String) {.
    importcpp: "set_mechanism", header: "cheerp/clientlib.h".}

proc get_ssrc*(this: var RTCRtpFecParameters): cdouble {.importcpp: "get_ssrc",
    header: "cheerp/clientlib.h".}

proc set_ssrc*(this: var RTCRtpFecParameters; a2: cdouble) {.
    importcpp: "set_ssrc", header: "cheerp/clientlib.h".}

proc get_kind*(this: var RTCRtpHeaderExtension): ptr String {.
    importcpp: "get_kind", header: "cheerp/clientlib.h".}

proc set_kind*(this: var RTCRtpHeaderExtension; a2: String) {.
    importcpp: "set_kind", header: "cheerp/clientlib.h".}

proc get_preferredEncrypt*(this: var RTCRtpHeaderExtension): bool {.
    importcpp: "get_preferredEncrypt", header: "cheerp/clientlib.h".}

proc set_preferredEncrypt*(this: var RTCRtpHeaderExtension; a2: bool) {.
    importcpp: "set_preferredEncrypt", header: "cheerp/clientlib.h".}

proc get_preferredId*(this: var RTCRtpHeaderExtension): cdouble {.
    importcpp: "get_preferredId", header: "cheerp/clientlib.h".}

proc set_preferredId*(this: var RTCRtpHeaderExtension; a2: cdouble) {.
    importcpp: "set_preferredId", header: "cheerp/clientlib.h".}

proc get_uri*(this: var RTCRtpHeaderExtension): ptr String {.
    importcpp: "get_uri", header: "cheerp/clientlib.h".}

proc set_uri*(this: var RTCRtpHeaderExtension; a2: String) {.
    importcpp: "set_uri", header: "cheerp/clientlib.h".}

proc get_encrypt*(this: var RTCRtpHeaderExtensionParameters): bool {.
    importcpp: "get_encrypt", header: "cheerp/clientlib.h".}

proc set_encrypt*(this: var RTCRtpHeaderExtensionParameters; a2: bool) {.
    importcpp: "set_encrypt", header: "cheerp/clientlib.h".}

proc get_id*(this: var RTCRtpHeaderExtensionParameters): cdouble {.
    importcpp: "get_id", header: "cheerp/clientlib.h".}

proc set_id*(this: var RTCRtpHeaderExtensionParameters; a2: cdouble) {.
    importcpp: "set_id", header: "cheerp/clientlib.h".}

proc get_uri*(this: var RTCRtpHeaderExtensionParameters): ptr String {.
    importcpp: "get_uri", header: "cheerp/clientlib.h".}

proc set_uri*(this: var RTCRtpHeaderExtensionParameters; a2: String) {.
    importcpp: "set_uri", header: "cheerp/clientlib.h".}

proc get_codecs*(this: var RTCRtpParameters): ptr Array {.
    importcpp: "get_codecs", header: "cheerp/clientlib.h".}

proc set_codecs*(this: var RTCRtpParameters; a2: ptr Array) {.
    importcpp: "set_codecs", header: "cheerp/clientlib.h".}

proc get_degradationPreference*(this: var RTCRtpParameters): ptr String {.
    importcpp: "get_degradationPreference", header: "cheerp/clientlib.h".}

proc set_degradationPreference*(this: var RTCRtpParameters; a2: String) {.
    importcpp: "set_degradationPreference", header: "cheerp/clientlib.h".}

proc get_encodings*(this: var RTCRtpParameters): ptr Array {.
    importcpp: "get_encodings", header: "cheerp/clientlib.h".}

proc set_encodings*(this: var RTCRtpParameters; a2: ptr Array) {.
    importcpp: "set_encodings", header: "cheerp/clientlib.h".}

proc get_headerExtensions*(this: var RTCRtpParameters): ptr Array {.
    importcpp: "get_headerExtensions", header: "cheerp/clientlib.h".}

proc set_headerExtensions*(this: var RTCRtpParameters; a2: ptr Array) {.
    importcpp: "set_headerExtensions", header: "cheerp/clientlib.h".}

proc get_muxId*(this: var RTCRtpParameters): ptr String {.
    importcpp: "get_muxId", header: "cheerp/clientlib.h".}

proc set_muxId*(this: var RTCRtpParameters; a2: String) {.
    importcpp: "set_muxId", header: "cheerp/clientlib.h".}

proc get_rtcp*(this: var RTCRtpParameters): ptr RTCRtcpParameters {.
    importcpp: "get_rtcp", header: "cheerp/clientlib.h".}

proc set_rtcp*(this: var RTCRtpParameters; a2: ptr RTCRtcpParameters) {.
    importcpp: "set_rtcp", header: "cheerp/clientlib.h".}

proc get_ssrc*(this: var RTCRtpRtxParameters): cdouble {.importcpp: "get_ssrc",
    header: "cheerp/clientlib.h".}

proc set_ssrc*(this: var RTCRtpRtxParameters; a2: cdouble) {.
    importcpp: "set_ssrc", header: "cheerp/clientlib.h".}

proc get_muxId*(this: var RTCRtpUnhandled): ptr String {.importcpp: "get_muxId",
    header: "cheerp/clientlib.h".}

proc set_muxId*(this: var RTCRtpUnhandled; a2: String) {.importcpp: "set_muxId",
    header: "cheerp/clientlib.h".}

proc get_payloadType*(this: var RTCRtpUnhandled): cdouble {.
    importcpp: "get_payloadType", header: "cheerp/clientlib.h".}

proc set_payloadType*(this: var RTCRtpUnhandled; a2: cdouble) {.
    importcpp: "set_payloadType", header: "cheerp/clientlib.h".}

proc get_ssrc*(this: var RTCRtpUnhandled): cdouble {.importcpp: "get_ssrc",
    header: "cheerp/clientlib.h".}

proc set_ssrc*(this: var RTCRtpUnhandled; a2: cdouble) {.importcpp: "set_ssrc",
    header: "cheerp/clientlib.h".}

proc get_sdp*(this: var RTCSessionDescriptionInit): ptr String {.
    importcpp: "get_sdp", header: "cheerp/clientlib.h".}

proc set_sdp*(this: var RTCSessionDescriptionInit; a2: String) {.
    importcpp: "set_sdp", header: "cheerp/clientlib.h".}

proc get_type*(this: var RTCSessionDescriptionInit): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var RTCSessionDescriptionInit; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_keyMethod*(this: var RTCSrtpKeyParam): ptr String {.
    importcpp: "get_keyMethod", header: "cheerp/clientlib.h".}

proc set_keyMethod*(this: var RTCSrtpKeyParam; a2: String) {.
    importcpp: "set_keyMethod", header: "cheerp/clientlib.h".}

proc get_keySalt*(this: var RTCSrtpKeyParam): ptr String {.
    importcpp: "get_keySalt", header: "cheerp/clientlib.h".}

proc set_keySalt*(this: var RTCSrtpKeyParam; a2: String) {.
    importcpp: "set_keySalt", header: "cheerp/clientlib.h".}

proc get_lifetime*(this: var RTCSrtpKeyParam): ptr String {.
    importcpp: "get_lifetime", header: "cheerp/clientlib.h".}

proc set_lifetime*(this: var RTCSrtpKeyParam; a2: String) {.
    importcpp: "set_lifetime", header: "cheerp/clientlib.h".}

proc get_mkiLength*(this: var RTCSrtpKeyParam): cdouble {.
    importcpp: "get_mkiLength", header: "cheerp/clientlib.h".}

proc set_mkiLength*(this: var RTCSrtpKeyParam; a2: cdouble) {.
    importcpp: "set_mkiLength", header: "cheerp/clientlib.h".}

proc get_mkiValue*(this: var RTCSrtpKeyParam): cdouble {.
    importcpp: "get_mkiValue", header: "cheerp/clientlib.h".}

proc set_mkiValue*(this: var RTCSrtpKeyParam; a2: cdouble) {.
    importcpp: "set_mkiValue", header: "cheerp/clientlib.h".}

proc get_cryptoSuite*(this: var RTCSrtpSdesParameters): ptr String {.
    importcpp: "get_cryptoSuite", header: "cheerp/clientlib.h".}

proc set_cryptoSuite*(this: var RTCSrtpSdesParameters; a2: String) {.
    importcpp: "set_cryptoSuite", header: "cheerp/clientlib.h".}

proc get_keyParams*(this: var RTCSrtpSdesParameters): ptr Array {.
    importcpp: "get_keyParams", header: "cheerp/clientlib.h".}

proc set_keyParams*(this: var RTCSrtpSdesParameters; a2: ptr Array) {.
    importcpp: "set_keyParams", header: "cheerp/clientlib.h".}

proc get_sessionParams*(this: var RTCSrtpSdesParameters): ptr Array {.
    importcpp: "get_sessionParams", header: "cheerp/clientlib.h".}

proc set_sessionParams*(this: var RTCSrtpSdesParameters; a2: ptr Array) {.
    importcpp: "set_sessionParams", header: "cheerp/clientlib.h".}

proc get_tag*(this: var RTCSrtpSdesParameters): cdouble {.importcpp: "get_tag",
    header: "cheerp/clientlib.h".}

proc set_tag*(this: var RTCSrtpSdesParameters; a2: cdouble) {.
    importcpp: "set_tag", header: "cheerp/clientlib.h".}

proc get_max*(this: var RTCSsrcRange): cdouble {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var RTCSsrcRange; a2: cdouble) {.importcpp: "set_max",
    header: "cheerp/clientlib.h".}

proc get_min*(this: var RTCSsrcRange): cdouble {.importcpp: "get_min",
    header: "cheerp/clientlib.h".}

proc set_min*(this: var RTCSsrcRange; a2: cdouble) {.importcpp: "set_min",
    header: "cheerp/clientlib.h".}

proc get_activeConnection*(this: var RTCTransportStats): bool {.
    importcpp: "get_activeConnection", header: "cheerp/clientlib.h".}

proc set_activeConnection*(this: var RTCTransportStats; a2: bool) {.
    importcpp: "set_activeConnection", header: "cheerp/clientlib.h".}

proc get_bytesReceived*(this: var RTCTransportStats): cdouble {.
    importcpp: "get_bytesReceived", header: "cheerp/clientlib.h".}

proc set_bytesReceived*(this: var RTCTransportStats; a2: cdouble) {.
    importcpp: "set_bytesReceived", header: "cheerp/clientlib.h".}

proc get_bytesSent*(this: var RTCTransportStats): cdouble {.
    importcpp: "get_bytesSent", header: "cheerp/clientlib.h".}

proc set_bytesSent*(this: var RTCTransportStats; a2: cdouble) {.
    importcpp: "set_bytesSent", header: "cheerp/clientlib.h".}

proc get_localCertificateId*(this: var RTCTransportStats): ptr String {.
    importcpp: "get_localCertificateId", header: "cheerp/clientlib.h".}

proc set_localCertificateId*(this: var RTCTransportStats; a2: String) {.
    importcpp: "set_localCertificateId", header: "cheerp/clientlib.h".}

proc get_remoteCertificateId*(this: var RTCTransportStats): ptr String {.
    importcpp: "get_remoteCertificateId", header: "cheerp/clientlib.h".}

proc set_remoteCertificateId*(this: var RTCTransportStats; a2: String) {.
    importcpp: "set_remoteCertificateId", header: "cheerp/clientlib.h".}

proc get_rtcpTransportStatsId*(this: var RTCTransportStats): ptr String {.
    importcpp: "get_rtcpTransportStatsId", header: "cheerp/clientlib.h".}

proc set_rtcpTransportStatsId*(this: var RTCTransportStats; a2: String) {.
    importcpp: "set_rtcpTransportStatsId", header: "cheerp/clientlib.h".}

proc get_selectedCandidatePairId*(this: var RTCTransportStats): ptr String {.
    importcpp: "get_selectedCandidatePairId", header: "cheerp/clientlib.h".}

proc set_selectedCandidatePairId*(this: var RTCTransportStats; a2: String) {.
    importcpp: "set_selectedCandidatePairId", header: "cheerp/clientlib.h".}

proc get_scope*(this: var RegistrationOptions): ptr String {.
    importcpp: "get_scope", header: "cheerp/clientlib.h".}

proc set_scope*(this: var RegistrationOptions; a2: String) {.
    importcpp: "set_scope", header: "cheerp/clientlib.h".}

proc get_body*(this: var RequestInit): ptr Blob {.importcpp: "get_body",
    header: "cheerp/clientlib.h".}

proc set_body*(this: var RequestInit; a2: ptr Blob) {.importcpp: "set_body",
    header: "cheerp/clientlib.h".}

proc get_cache*(this: var RequestInit): ptr String {.importcpp: "get_cache",
    header: "cheerp/clientlib.h".}

proc set_cache*(this: var RequestInit; a2: String) {.importcpp: "set_cache",
    header: "cheerp/clientlib.h".}

proc get_credentials*(this: var RequestInit): ptr String {.
    importcpp: "get_credentials", header: "cheerp/clientlib.h".}

proc set_credentials*(this: var RequestInit; a2: String) {.
    importcpp: "set_credentials", header: "cheerp/clientlib.h".}

proc get_headers*(this: var RequestInit): ptr Headers {.
    importcpp: "get_headers", header: "cheerp/clientlib.h".}

proc set_headers*(this: var RequestInit; a2: ptr Headers) {.
    importcpp: "set_headers", header: "cheerp/clientlib.h".}

proc get_integrity*(this: var RequestInit): ptr String {.
    importcpp: "get_integrity", header: "cheerp/clientlib.h".}

proc set_integrity*(this: var RequestInit; a2: String) {.
    importcpp: "set_integrity", header: "cheerp/clientlib.h".}

proc get_keepalive*(this: var RequestInit): bool {.importcpp: "get_keepalive",
    header: "cheerp/clientlib.h".}

proc set_keepalive*(this: var RequestInit; a2: bool) {.
    importcpp: "set_keepalive", header: "cheerp/clientlib.h".}

proc get_method*(this: var RequestInit): ptr String {.importcpp: "get_method",
    header: "cheerp/clientlib.h".}

proc set_method*(this: var RequestInit; a2: String) {.importcpp: "set_method",
    header: "cheerp/clientlib.h".}

proc get_mode*(this: var RequestInit): ptr String {.importcpp: "get_mode",
    header: "cheerp/clientlib.h".}

proc set_mode*(this: var RequestInit; a2: String) {.importcpp: "set_mode",
    header: "cheerp/clientlib.h".}

proc get_redirect*(this: var RequestInit): ptr String {.
    importcpp: "get_redirect", header: "cheerp/clientlib.h".}

proc set_redirect*(this: var RequestInit; a2: String) {.
    importcpp: "set_redirect", header: "cheerp/clientlib.h".}

proc get_referrer*(this: var RequestInit): ptr String {.
    importcpp: "get_referrer", header: "cheerp/clientlib.h".}

proc set_referrer*(this: var RequestInit; a2: String) {.
    importcpp: "set_referrer", header: "cheerp/clientlib.h".}

proc get_referrerPolicy*(this: var RequestInit): ptr String {.
    importcpp: "get_referrerPolicy", header: "cheerp/clientlib.h".}

proc set_referrerPolicy*(this: var RequestInit; a2: String) {.
    importcpp: "set_referrerPolicy", header: "cheerp/clientlib.h".}

proc get_signal*(this: var RequestInit): ptr AbortSignal {.
    importcpp: "get_signal", header: "cheerp/clientlib.h".}

proc set_signal*(this: var RequestInit; a2: ptr AbortSignal) {.
    importcpp: "set_signal", header: "cheerp/clientlib.h".}

proc set_window*(this: var RequestInit; a2: ptr Object) {.
    importcpp: "set_window", header: "cheerp/clientlib.h".}

proc get_headers*(this: var ResponseInit): ptr Headers {.
    importcpp: "get_headers", header: "cheerp/clientlib.h".}

proc set_headers*(this: var ResponseInit; a2: ptr Headers) {.
    importcpp: "set_headers", header: "cheerp/clientlib.h".}

proc get_status*(this: var ResponseInit): cdouble {.importcpp: "get_status",
    header: "cheerp/clientlib.h".}

proc set_status*(this: var ResponseInit; a2: cdouble) {.importcpp: "set_status",
    header: "cheerp/clientlib.h".}

proc get_statusText*(this: var ResponseInit): ptr String {.
    importcpp: "get_statusText", header: "cheerp/clientlib.h".}

proc set_statusText*(this: var ResponseInit; a2: String) {.
    importcpp: "set_statusText", header: "cheerp/clientlib.h".}

proc get_hash*(this: var RsaHashedImportParams): ptr String {.
    importcpp: "get_hash", header: "cheerp/clientlib.h".}

proc set_hash*(this: var RsaHashedImportParams; a2: String) {.
    importcpp: "set_hash", header: "cheerp/clientlib.h".}

proc get_modulusLength*(this: var RsaKeyAlgorithm): cdouble {.
    importcpp: "get_modulusLength", header: "cheerp/clientlib.h".}

proc set_modulusLength*(this: var RsaKeyAlgorithm; a2: cdouble) {.
    importcpp: "set_modulusLength", header: "cheerp/clientlib.h".}

proc get_publicExponent*(this: var RsaKeyAlgorithm): ptr Uint8Array {.
    importcpp: "get_publicExponent", header: "cheerp/clientlib.h".}

proc set_publicExponent*(this: var RsaKeyAlgorithm; a2: ptr Uint8Array) {.
    importcpp: "set_publicExponent", header: "cheerp/clientlib.h".}

proc get_hash*(this: var RsaHashedKeyAlgorithm): ptr KeyAlgorithm {.
    importcpp: "get_hash", header: "cheerp/clientlib.h".}

proc set_hash*(this: var RsaHashedKeyAlgorithm; a2: ptr KeyAlgorithm) {.
    importcpp: "set_hash", header: "cheerp/clientlib.h".}

proc get_modulusLength*(this: var RsaKeyGenParams): cdouble {.
    importcpp: "get_modulusLength", header: "cheerp/clientlib.h".}

proc set_modulusLength*(this: var RsaKeyGenParams; a2: cdouble) {.
    importcpp: "set_modulusLength", header: "cheerp/clientlib.h".}

proc get_publicExponent*(this: var RsaKeyGenParams): ptr Uint8Array {.
    importcpp: "get_publicExponent", header: "cheerp/clientlib.h".}

proc set_publicExponent*(this: var RsaKeyGenParams; a2: ptr Uint8Array) {.
    importcpp: "set_publicExponent", header: "cheerp/clientlib.h".}

proc get_hash*(this: var RsaHashedKeyGenParams): ptr String {.
    importcpp: "get_hash", header: "cheerp/clientlib.h".}

proc set_hash*(this: var RsaHashedKeyGenParams; a2: String) {.
    importcpp: "set_hash", header: "cheerp/clientlib.h".}

proc get_label*(this: var RsaOaepParams): ptr Int8Array {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var RsaOaepParams; a2: ptr Int8Array) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc get_d*(this: var RsaOtherPrimesInfo): ptr String {.importcpp: "get_d",
    header: "cheerp/clientlib.h".}

proc set_d*(this: var RsaOtherPrimesInfo; a2: String) {.importcpp: "set_d",
    header: "cheerp/clientlib.h".}

proc get_r*(this: var RsaOtherPrimesInfo): ptr String {.importcpp: "get_r",
    header: "cheerp/clientlib.h".}

proc set_r*(this: var RsaOtherPrimesInfo; a2: String) {.importcpp: "set_r",
    header: "cheerp/clientlib.h".}

proc get_t*(this: var RsaOtherPrimesInfo): ptr String {.importcpp: "get_t",
    header: "cheerp/clientlib.h".}

proc set_t*(this: var RsaOtherPrimesInfo; a2: String) {.importcpp: "set_t",
    header: "cheerp/clientlib.h".}

proc get_saltLength*(this: var RsaPssParams): cdouble {.
    importcpp: "get_saltLength", header: "cheerp/clientlib.h".}

proc set_saltLength*(this: var RsaPssParams; a2: cdouble) {.
    importcpp: "set_saltLength", header: "cheerp/clientlib.h".}

proc get_id*(this: var ScopedCredentialDescriptor): ptr Int8Array {.
    importcpp: "get_id", header: "cheerp/clientlib.h".}

proc set_id*(this: var ScopedCredentialDescriptor; a2: ptr Int8Array) {.
    importcpp: "set_id", header: "cheerp/clientlib.h".}

proc get_transports*(this: var ScopedCredentialDescriptor): ptr Array {.
    importcpp: "get_transports", header: "cheerp/clientlib.h".}

proc set_transports*(this: var ScopedCredentialDescriptor; a2: ptr Array) {.
    importcpp: "set_transports", header: "cheerp/clientlib.h".}

proc get_type*(this: var ScopedCredentialDescriptor): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var ScopedCredentialDescriptor; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_excludeList*(this: var ScopedCredentialOptions): ptr Array {.
    importcpp: "get_excludeList", header: "cheerp/clientlib.h".}

proc set_excludeList*(this: var ScopedCredentialOptions; a2: ptr Array) {.
    importcpp: "set_excludeList", header: "cheerp/clientlib.h".}

proc get_extensions*(this: var ScopedCredentialOptions): ptr WebAuthnExtensions {.
    importcpp: "get_extensions", header: "cheerp/clientlib.h".}

proc set_extensions*(this: var ScopedCredentialOptions;
                     a2: ptr WebAuthnExtensions) {.importcpp: "set_extensions",
    header: "cheerp/clientlib.h".}

proc get_rpId*(this: var ScopedCredentialOptions): ptr String {.
    importcpp: "get_rpId", header: "cheerp/clientlib.h".}

proc set_rpId*(this: var ScopedCredentialOptions; a2: String) {.
    importcpp: "set_rpId", header: "cheerp/clientlib.h".}

proc get_timeoutSeconds*(this: var ScopedCredentialOptions): cdouble {.
    importcpp: "get_timeoutSeconds", header: "cheerp/clientlib.h".}

proc set_timeoutSeconds*(this: var ScopedCredentialOptions; a2: cdouble) {.
    importcpp: "set_timeoutSeconds", header: "cheerp/clientlib.h".}

proc get_algorithm*(this: var ScopedCredentialParameters): ptr String {.
    importcpp: "get_algorithm", header: "cheerp/clientlib.h".}

proc set_algorithm*(this: var ScopedCredentialParameters; a2: String) {.
    importcpp: "set_algorithm", header: "cheerp/clientlib.h".}

proc get_type*(this: var ScopedCredentialParameters): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var ScopedCredentialParameters; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_blockedURI*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_blockedURI", header: "cheerp/clientlib.h".}

proc set_blockedURI*(this: var SecurityPolicyViolationEventInit; a2: String) {.
    importcpp: "set_blockedURI", header: "cheerp/clientlib.h".}

proc get_columnNumber*(this: var SecurityPolicyViolationEventInit): cdouble {.
    importcpp: "get_columnNumber", header: "cheerp/clientlib.h".}

proc set_columnNumber*(this: var SecurityPolicyViolationEventInit; a2: cdouble) {.
    importcpp: "set_columnNumber", header: "cheerp/clientlib.h".}

proc get_documentURI*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_documentURI", header: "cheerp/clientlib.h".}

proc set_documentURI*(this: var SecurityPolicyViolationEventInit; a2: String) {.
    importcpp: "set_documentURI", header: "cheerp/clientlib.h".}

proc get_effectiveDirective*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_effectiveDirective", header: "cheerp/clientlib.h".}

proc set_effectiveDirective*(this: var SecurityPolicyViolationEventInit;
                             a2: String) {.importcpp: "set_effectiveDirective",
    header: "cheerp/clientlib.h".}

proc get_lineNumber*(this: var SecurityPolicyViolationEventInit): cdouble {.
    importcpp: "get_lineNumber", header: "cheerp/clientlib.h".}

proc set_lineNumber*(this: var SecurityPolicyViolationEventInit; a2: cdouble) {.
    importcpp: "set_lineNumber", header: "cheerp/clientlib.h".}

proc get_originalPolicy*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_originalPolicy", header: "cheerp/clientlib.h".}

proc set_originalPolicy*(this: var SecurityPolicyViolationEventInit; a2: String) {.
    importcpp: "set_originalPolicy", header: "cheerp/clientlib.h".}

proc get_referrer*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_referrer", header: "cheerp/clientlib.h".}

proc set_referrer*(this: var SecurityPolicyViolationEventInit; a2: String) {.
    importcpp: "set_referrer", header: "cheerp/clientlib.h".}

proc get_sourceFile*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_sourceFile", header: "cheerp/clientlib.h".}

proc set_sourceFile*(this: var SecurityPolicyViolationEventInit; a2: String) {.
    importcpp: "set_sourceFile", header: "cheerp/clientlib.h".}

proc get_statusCode*(this: var SecurityPolicyViolationEventInit): cdouble {.
    importcpp: "get_statusCode", header: "cheerp/clientlib.h".}

proc set_statusCode*(this: var SecurityPolicyViolationEventInit; a2: cdouble) {.
    importcpp: "set_statusCode", header: "cheerp/clientlib.h".}

proc get_violatedDirective*(this: var SecurityPolicyViolationEventInit): ptr String {.
    importcpp: "get_violatedDirective", header: "cheerp/clientlib.h".}

proc set_violatedDirective*(this: var SecurityPolicyViolationEventInit;
                            a2: String) {.importcpp: "set_violatedDirective",
    header: "cheerp/clientlib.h".}

proc set_data*(this: var ServiceWorkerMessageEventInit; a2: ptr Object) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_lastEventId*(this: var ServiceWorkerMessageEventInit): ptr String {.
    importcpp: "get_lastEventId", header: "cheerp/clientlib.h".}

proc set_lastEventId*(this: var ServiceWorkerMessageEventInit; a2: String) {.
    importcpp: "set_lastEventId", header: "cheerp/clientlib.h".}

proc get_origin*(this: var ServiceWorkerMessageEventInit): ptr String {.
    importcpp: "get_origin", header: "cheerp/clientlib.h".}

proc set_origin*(this: var ServiceWorkerMessageEventInit; a2: String) {.
    importcpp: "set_origin", header: "cheerp/clientlib.h".}

proc get_ports*(this: var ServiceWorkerMessageEventInit): ptr Array {.
    importcpp: "get_ports", header: "cheerp/clientlib.h".}

proc set_ports*(this: var ServiceWorkerMessageEventInit; a2: ptr Array) {.
    importcpp: "set_ports", header: "cheerp/clientlib.h".}

proc get_source*(this: var ServiceWorkerMessageEventInit): ptr ServiceWorker {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc set_source*(this: var ServiceWorkerMessageEventInit; a2: ptr ServiceWorker) {.
    importcpp: "set_source", header: "cheerp/clientlib.h".}

proc get_charIndex*(this: var SpeechSynthesisEventInit): cdouble {.
    importcpp: "get_charIndex", header: "cheerp/clientlib.h".}

proc set_charIndex*(this: var SpeechSynthesisEventInit; a2: cdouble) {.
    importcpp: "set_charIndex", header: "cheerp/clientlib.h".}

proc get_charLength*(this: var SpeechSynthesisEventInit): cdouble {.
    importcpp: "get_charLength", header: "cheerp/clientlib.h".}

proc set_charLength*(this: var SpeechSynthesisEventInit; a2: cdouble) {.
    importcpp: "set_charLength", header: "cheerp/clientlib.h".}

proc get_elapsedTime*(this: var SpeechSynthesisEventInit): cdouble {.
    importcpp: "get_elapsedTime", header: "cheerp/clientlib.h".}

proc set_elapsedTime*(this: var SpeechSynthesisEventInit; a2: cdouble) {.
    importcpp: "set_elapsedTime", header: "cheerp/clientlib.h".}

proc get_name*(this: var SpeechSynthesisEventInit): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var SpeechSynthesisEventInit; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_utterance*(this: var SpeechSynthesisEventInit): ptr SpeechSynthesisUtterance {.
    importcpp: "get_utterance", header: "cheerp/clientlib.h".}

proc set_utterance*(this: var SpeechSynthesisEventInit;
                    a2: ptr SpeechSynthesisUtterance) {.
    importcpp: "set_utterance", header: "cheerp/clientlib.h".}

proc get_pan*(this: var StereoPannerOptions): cdouble {.importcpp: "get_pan",
    header: "cheerp/clientlib.h".}

proc set_pan*(this: var StereoPannerOptions; a2: cdouble) {.
    importcpp: "set_pan", header: "cheerp/clientlib.h".}

proc get_detailURI*(this: var StoreExceptionsInformation): ptr String {.
    importcpp: "get_detailURI", header: "cheerp/clientlib.h".}

proc set_detailURI*(this: var StoreExceptionsInformation; a2: String) {.
    importcpp: "set_detailURI", header: "cheerp/clientlib.h".}

proc get_explanationString*(this: var StoreExceptionsInformation): ptr String {.
    importcpp: "get_explanationString", header: "cheerp/clientlib.h".}

proc set_explanationString*(this: var StoreExceptionsInformation; a2: String) {.
    importcpp: "set_explanationString", header: "cheerp/clientlib.h".}

proc get_siteName*(this: var StoreExceptionsInformation): ptr String {.
    importcpp: "get_siteName", header: "cheerp/clientlib.h".}

proc set_siteName*(this: var StoreExceptionsInformation; a2: String) {.
    importcpp: "set_siteName", header: "cheerp/clientlib.h".}

proc get_arrayOfDomainStrings*(this: var StoreSiteSpecificExceptionsInformation): ptr Array {.
    importcpp: "get_arrayOfDomainStrings", header: "cheerp/clientlib.h".}

proc set_arrayOfDomainStrings*(this: var StoreSiteSpecificExceptionsInformation;
                               a2: ptr Array) {.
    importcpp: "set_arrayOfDomainStrings", header: "cheerp/clientlib.h".}

proc get_lastChance*(this: var SyncEventInit): bool {.
    importcpp: "get_lastChance", header: "cheerp/clientlib.h".}

proc set_lastChance*(this: var SyncEventInit; a2: bool) {.
    importcpp: "set_lastChance", header: "cheerp/clientlib.h".}

proc get_tag*(this: var SyncEventInit): ptr String {.importcpp: "get_tag",
    header: "cheerp/clientlib.h".}

proc set_tag*(this: var SyncEventInit; a2: String) {.importcpp: "set_tag",
    header: "cheerp/clientlib.h".}

proc get_stream*(this: var TextDecodeOptions): bool {.importcpp: "get_stream",
    header: "cheerp/clientlib.h".}

proc set_stream*(this: var TextDecodeOptions; a2: bool) {.
    importcpp: "set_stream", header: "cheerp/clientlib.h".}

proc get_fatal*(this: var TextDecoderOptions): bool {.importcpp: "get_fatal",
    header: "cheerp/clientlib.h".}

proc set_fatal*(this: var TextDecoderOptions; a2: bool) {.
    importcpp: "set_fatal", header: "cheerp/clientlib.h".}

proc get_ignoreBOM*(this: var TextDecoderOptions): bool {.
    importcpp: "get_ignoreBOM", header: "cheerp/clientlib.h".}

proc set_ignoreBOM*(this: var TextDecoderOptions; a2: bool) {.
    importcpp: "set_ignoreBOM", header: "cheerp/clientlib.h".}

proc get_track*(this: var TrackEventInit): ptr VideoTrack {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc set_track*(this: var TrackEventInit; a2: ptr VideoTrack) {.
    importcpp: "set_track", header: "cheerp/clientlib.h".}

proc get_elapsedTime*(this: var TransitionEventInit): cdouble {.
    importcpp: "get_elapsedTime", header: "cheerp/clientlib.h".}

proc set_elapsedTime*(this: var TransitionEventInit; a2: cdouble) {.
    importcpp: "set_elapsedTime", header: "cheerp/clientlib.h".}

proc get_propertyName*(this: var TransitionEventInit): ptr String {.
    importcpp: "get_propertyName", header: "cheerp/clientlib.h".}

proc set_propertyName*(this: var TransitionEventInit; a2: String) {.
    importcpp: "set_propertyName", header: "cheerp/clientlib.h".}

proc get_abort*(this: var UnderlyingSink): ptr EventListener {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var UnderlyingSink; a2: ptr EventListener) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_close*(this: var UnderlyingSink): ptr EventListener {.
    importcpp: "get_close", header: "cheerp/clientlib.h".}

proc set_close*(this: var UnderlyingSink; a2: ptr EventListener) {.
    importcpp: "set_close", header: "cheerp/clientlib.h".}

proc get_start*(this: var UnderlyingSink): ptr EventListener {.
    importcpp: "get_start", header: "cheerp/clientlib.h".}

proc set_start*(this: var UnderlyingSink; a2: ptr EventListener) {.
    importcpp: "set_start", header: "cheerp/clientlib.h".}

proc get_write*(this: var UnderlyingSink): ptr EventListener {.
    importcpp: "get_write", header: "cheerp/clientlib.h".}

proc set_write*(this: var UnderlyingSink; a2: ptr EventListener) {.
    importcpp: "set_write", header: "cheerp/clientlib.h".}

proc get_display*(this: var VRDisplayEventInit): ptr VRDisplay {.
    importcpp: "get_display", header: "cheerp/clientlib.h".}

proc set_display*(this: var VRDisplayEventInit; a2: ptr VRDisplay) {.
    importcpp: "set_display", header: "cheerp/clientlib.h".}

proc get_reason*(this: var VRDisplayEventInit): ptr String {.
    importcpp: "get_reason", header: "cheerp/clientlib.h".}

proc set_reason*(this: var VRDisplayEventInit; a2: String) {.
    importcpp: "set_reason", header: "cheerp/clientlib.h".}

proc get_leftBounds*(this: var VRLayer): ptr Array {.
    importcpp: "get_leftBounds", header: "cheerp/clientlib.h".}

proc set_leftBounds*(this: var VRLayer; a2: ptr Array) {.
    importcpp: "set_leftBounds", header: "cheerp/clientlib.h".}

proc get_rightBounds*(this: var VRLayer): ptr Array {.
    importcpp: "get_rightBounds", header: "cheerp/clientlib.h".}

proc set_rightBounds*(this: var VRLayer; a2: ptr Array) {.
    importcpp: "set_rightBounds", header: "cheerp/clientlib.h".}

proc get_source*(this: var VRLayer): ptr HTMLCanvasElement {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc set_source*(this: var VRLayer; a2: ptr HTMLCanvasElement) {.
    importcpp: "set_source", header: "cheerp/clientlib.h".}

proc get_sittingToStandingTransform*(this: var VRStageParameters): ptr Float32Array {.
    importcpp: "get_sittingToStandingTransform", header: "cheerp/clientlib.h".}

proc set_sittingToStandingTransform*(this: var VRStageParameters;
                                     a2: ptr Float32Array) {.
    importcpp: "set_sittingToStandingTransform", header: "cheerp/clientlib.h".}

proc get_sizeX*(this: var VRStageParameters): cdouble {.importcpp: "get_sizeX",
    header: "cheerp/clientlib.h".}

proc set_sizeX*(this: var VRStageParameters; a2: cdouble) {.
    importcpp: "set_sizeX", header: "cheerp/clientlib.h".}

proc get_sizeY*(this: var VRStageParameters): cdouble {.importcpp: "get_sizeY",
    header: "cheerp/clientlib.h".}

proc set_sizeY*(this: var VRStageParameters; a2: cdouble) {.
    importcpp: "set_sizeY", header: "cheerp/clientlib.h".}

proc get_curve*(this: var WaveShaperOptions): ptr Array {.
    importcpp: "get_curve", header: "cheerp/clientlib.h".}

proc set_curve*(this: var WaveShaperOptions; a2: ptr Array) {.
    importcpp: "set_curve", header: "cheerp/clientlib.h".}

proc get_oversample*(this: var WaveShaperOptions): ptr String {.
    importcpp: "get_oversample", header: "cheerp/clientlib.h".}

proc set_oversample*(this: var WaveShaperOptions; a2: String) {.
    importcpp: "set_oversample", header: "cheerp/clientlib.h".}

proc get_deltaMode*(this: var WheelEventInit): cdouble {.
    importcpp: "get_deltaMode", header: "cheerp/clientlib.h".}

proc set_deltaMode*(this: var WheelEventInit; a2: cdouble) {.
    importcpp: "set_deltaMode", header: "cheerp/clientlib.h".}

proc get_deltaX*(this: var WheelEventInit): cdouble {.importcpp: "get_deltaX",
    header: "cheerp/clientlib.h".}

proc set_deltaX*(this: var WheelEventInit; a2: cdouble) {.
    importcpp: "set_deltaX", header: "cheerp/clientlib.h".}

proc get_deltaY*(this: var WheelEventInit): cdouble {.importcpp: "get_deltaY",
    header: "cheerp/clientlib.h".}

proc set_deltaY*(this: var WheelEventInit; a2: cdouble) {.
    importcpp: "set_deltaY", header: "cheerp/clientlib.h".}

proc get_deltaZ*(this: var WheelEventInit): cdouble {.importcpp: "get_deltaZ",
    header: "cheerp/clientlib.h".}

proc set_deltaZ*(this: var WheelEventInit; a2: cdouble) {.
    importcpp: "set_deltaZ", header: "cheerp/clientlib.h".}

proc drawArraysInstancedANGLE*(this: var ANGLE_instanced_arrays; mode: cdouble;
                               first: cdouble; count: cdouble;
                               primcount: cdouble) {.
    importcpp: "drawArraysInstancedANGLE", header: "cheerp/clientlib.h".}

proc drawElementsInstancedANGLE*(this: var ANGLE_instanced_arrays;
                                 mode: cdouble; count: cdouble; `type`: cdouble;
                                 offset: cdouble; primcount: cdouble) {.
    importcpp: "drawElementsInstancedANGLE", header: "cheerp/clientlib.h".}

proc vertexAttribDivisorANGLE*(this: var ANGLE_instanced_arrays; index: cdouble;
                               divisor: cdouble) {.
    importcpp: "vertexAttribDivisorANGLE", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ANGLE_instanced_arrays): ptr ANGLE_instanced_arrays {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ANGLE_instanced_arrays;
                    a2: ptr ANGLE_instanced_arrays) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructANGLE_instanced_arrays*(): ANGLE_instanced_arrays {.constructor,
    importcpp: "client::ANGLE_instanced_arrays(@)", header: "cheerp/clientlib.h".}

proc get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE*(this: var ANGLE_instanced_arrays): cdouble {.
    importcpp: "get_VERTEX_ATTRIB_ARRAY_DIVISOR_ANGLE",
    header: "cheerp/clientlib.h".}

proc get_signal*(this: var AbortController): ptr AbortSignal {.
    importcpp: "get_signal", header: "cheerp/clientlib.h".}

proc abort*(this: var AbortController) {.importcpp: "abort",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AbortController): ptr AbortController {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AbortController; a2: ptr AbortController) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAbortController*(): AbortController {.constructor,
    importcpp: "client::AbortController(@)", header: "cheerp/clientlib.h".}

proc get_abort*(this: var AbortSignalEventMap): ptr ProgressEvent {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var AbortSignalEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var EventTarget; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var EventTarget; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var EventTarget; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var EventTarget; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var EventTarget; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc dispatchEvent*(this: var EventTarget; evt: ptr Event): bool {.
    importcpp: "dispatchEvent", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var EventTarget; `type`: String) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var EventTarget; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var EventTarget; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var EventTarget; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var EventTarget; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var EventTarget; `type`: String;
                          listener: ptr EventListenerObject; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var EventTarget): ptr EventTarget {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var EventTarget; a2: ptr EventTarget) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructEventTarget*(): EventTarget {.constructor,
    importcpp: "client::EventTarget(@)", header: "cheerp/clientlib.h".}

proc get_aborted*(this: var AbortSignal): bool {.importcpp: "get_aborted",
    header: "cheerp/clientlib.h".}

proc get_onabort*(this: var AbortSignal): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var AbortSignal; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbortSignal; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbortSignal; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbortSignal; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbortSignal; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbortSignal; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbortSignal; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbortSignal; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbortSignal; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbortSignal; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbortSignal; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AbortSignal): ptr AbortSignal {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AbortSignal; a2: ptr AbortSignal) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAbortSignal*(): AbortSignal {.constructor,
    importcpp: "client::AbortSignal(@)", header: "cheerp/clientlib.h".}

proc get_error*(this: var AbstractWorkerEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var AbstractWorkerEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var AbstractWorker): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var AbstractWorker; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbstractWorker; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbstractWorker; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbstractWorker; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbstractWorker; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AbstractWorker; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbstractWorker; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbstractWorker; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbstractWorker; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbstractWorker; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AbstractWorker; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_iv*(this: var AesCfbParams): ptr Int8Array {.importcpp: "get_iv",
    header: "cheerp/clientlib.h".}

proc set_iv*(this: var AesCfbParams; a2: ptr Int8Array) {.importcpp: "set_iv",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var AesCmacParams): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc set_length*(this: var AesCmacParams; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_channelCount*(this: var AudioNode): cdouble {.
    importcpp: "get_channelCount", header: "cheerp/clientlib.h".}

proc set_channelCount*(this: var AudioNode; a2: cdouble) {.
    importcpp: "set_channelCount", header: "cheerp/clientlib.h".}

proc get_channelCountMode*(this: var AudioNode): ptr String {.
    importcpp: "get_channelCountMode", header: "cheerp/clientlib.h".}

proc set_channelCountMode*(this: var AudioNode; a2: String) {.
    importcpp: "set_channelCountMode", header: "cheerp/clientlib.h".}

proc get_channelInterpretation*(this: var AudioNode): ptr String {.
    importcpp: "get_channelInterpretation", header: "cheerp/clientlib.h".}

proc set_channelInterpretation*(this: var AudioNode; a2: String) {.
    importcpp: "set_channelInterpretation", header: "cheerp/clientlib.h".}

proc get_context*(this: var AudioNode): ptr AudioContext {.
    importcpp: "get_context", header: "cheerp/clientlib.h".}

proc get_numberOfInputs*(this: var AudioNode): cdouble {.
    importcpp: "get_numberOfInputs", header: "cheerp/clientlib.h".}

proc get_numberOfOutputs*(this: var AudioNode): cdouble {.
    importcpp: "get_numberOfOutputs", header: "cheerp/clientlib.h".}

proc connect*(this: var AudioNode; destination: ptr AudioNode): ptr AudioNode {.
    importcpp: "connect", header: "cheerp/clientlib.h".}

proc connect*(this: var AudioNode; destination: ptr AudioNode; output: cdouble): ptr AudioNode {.
    importcpp: "connect", header: "cheerp/clientlib.h".}

proc connect*(this: var AudioNode; destination: ptr AudioNode; output: cdouble;
              input: cdouble): ptr AudioNode {.importcpp: "connect",
    header: "cheerp/clientlib.h".}

proc connect*(this: var AudioNode; destination: ptr AudioParam) {.
    importcpp: "connect", header: "cheerp/clientlib.h".}

proc connect*(this: var AudioNode; destination: ptr AudioParam; output: cdouble) {.
    importcpp: "connect", header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode) {.importcpp: "disconnect",
                                        header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode; output: cdouble) {.
    importcpp: "disconnect", header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode; destination: ptr AudioNode) {.
    importcpp: "disconnect", header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode; destination: ptr AudioNode;
                 output: cdouble) {.importcpp: "disconnect",
                                    header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode; destination: ptr AudioNode;
                 output: cdouble; input: cdouble) {.importcpp: "disconnect",
    header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode; destination: ptr AudioParam) {.
    importcpp: "disconnect", header: "cheerp/clientlib.h".}

proc disconnect*(this: var AudioNode; destination: ptr AudioParam;
                 output: cdouble) {.importcpp: "disconnect",
                                    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioNode): ptr AudioNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioNode; a2: ptr AudioNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioNode*(): AudioNode {.constructor,
                                        importcpp: "client::AudioNode(@)",
                                        header: "cheerp/clientlib.h".}

proc get_fftSize*(this: var AnalyserNode): cdouble {.importcpp: "get_fftSize",
    header: "cheerp/clientlib.h".}

proc set_fftSize*(this: var AnalyserNode; a2: cdouble) {.
    importcpp: "set_fftSize", header: "cheerp/clientlib.h".}

proc get_frequencyBinCount*(this: var AnalyserNode): cdouble {.
    importcpp: "get_frequencyBinCount", header: "cheerp/clientlib.h".}

proc get_maxDecibels*(this: var AnalyserNode): cdouble {.
    importcpp: "get_maxDecibels", header: "cheerp/clientlib.h".}

proc set_maxDecibels*(this: var AnalyserNode; a2: cdouble) {.
    importcpp: "set_maxDecibels", header: "cheerp/clientlib.h".}

proc get_minDecibels*(this: var AnalyserNode): cdouble {.
    importcpp: "get_minDecibels", header: "cheerp/clientlib.h".}

proc set_minDecibels*(this: var AnalyserNode; a2: cdouble) {.
    importcpp: "set_minDecibels", header: "cheerp/clientlib.h".}

proc get_smoothingTimeConstant*(this: var AnalyserNode): cdouble {.
    importcpp: "get_smoothingTimeConstant", header: "cheerp/clientlib.h".}

proc set_smoothingTimeConstant*(this: var AnalyserNode; a2: cdouble) {.
    importcpp: "set_smoothingTimeConstant", header: "cheerp/clientlib.h".}

proc getByteFrequencyData*(this: var AnalyserNode; array: ptr Uint8Array) {.
    importcpp: "getByteFrequencyData", header: "cheerp/clientlib.h".}

proc getByteTimeDomainData*(this: var AnalyserNode; array: ptr Uint8Array) {.
    importcpp: "getByteTimeDomainData", header: "cheerp/clientlib.h".}

proc getFloatFrequencyData*(this: var AnalyserNode; array: ptr Float32Array) {.
    importcpp: "getFloatFrequencyData", header: "cheerp/clientlib.h".}

proc getFloatTimeDomainData*(this: var AnalyserNode; array: ptr Float32Array) {.
    importcpp: "getFloatTimeDomainData", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AnalyserNode): ptr AnalyserNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AnalyserNode; a2: ptr AnalyserNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAnalyserNode*(): AnalyserNode {.constructor,
    importcpp: "client::AnalyserNode(@)", header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var Animation): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc set_currentTime*(this: var Animation; a2: cdouble) {.
    importcpp: "set_currentTime", header: "cheerp/clientlib.h".}

proc get_effect*(this: var Animation): ptr AnimationEffectReadOnly {.
    importcpp: "get_effect", header: "cheerp/clientlib.h".}

proc set_effect*(this: var Animation; a2: ptr AnimationEffectReadOnly) {.
    importcpp: "set_effect", header: "cheerp/clientlib.h".}

proc get_finished*(this: var Animation): ptr Promise {.
    importcpp: "get_finished", header: "cheerp/clientlib.h".}

proc get_id*(this: var Animation): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var Animation; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_pending*(this: var Animation): bool {.importcpp: "get_pending",
    header: "cheerp/clientlib.h".}

proc get_playState*(this: var Animation): ptr String {.
    importcpp: "get_playState", header: "cheerp/clientlib.h".}

proc get_playbackRate*(this: var Animation): cdouble {.
    importcpp: "get_playbackRate", header: "cheerp/clientlib.h".}

proc set_playbackRate*(this: var Animation; a2: cdouble) {.
    importcpp: "set_playbackRate", header: "cheerp/clientlib.h".}

proc get_ready*(this: var Animation): ptr Promise {.importcpp: "get_ready",
    header: "cheerp/clientlib.h".}

proc get_startTime*(this: var Animation): cdouble {.importcpp: "get_startTime",
    header: "cheerp/clientlib.h".}

proc set_startTime*(this: var Animation; a2: cdouble) {.
    importcpp: "set_startTime", header: "cheerp/clientlib.h".}

proc get_timeline*(this: var Animation): ptr AnimationTimeline {.
    importcpp: "get_timeline", header: "cheerp/clientlib.h".}

proc set_timeline*(this: var Animation; a2: ptr AnimationTimeline) {.
    importcpp: "set_timeline", header: "cheerp/clientlib.h".}

proc cancel*(this: var Animation) {.importcpp: "cancel",
                                    header: "cheerp/clientlib.h".}

proc finish*(this: var Animation) {.importcpp: "finish",
                                    header: "cheerp/clientlib.h".}

proc get_oncancel*(this: var Animation): ptr EventListener {.
    importcpp: "get_oncancel", header: "cheerp/clientlib.h".}

proc set_oncancel*(this: var Animation; a2: ptr EventListener) {.
    importcpp: "set_oncancel", header: "cheerp/clientlib.h".}

proc get_onfinish*(this: var Animation): ptr EventListener {.
    importcpp: "get_onfinish", header: "cheerp/clientlib.h".}

proc set_onfinish*(this: var Animation; a2: ptr EventListener) {.
    importcpp: "set_onfinish", header: "cheerp/clientlib.h".}

proc pause*(this: var Animation) {.importcpp: "pause",
                                   header: "cheerp/clientlib.h".}

proc play*(this: var Animation) {.importcpp: "play",
                                  header: "cheerp/clientlib.h".}

proc reverse*(this: var Animation) {.importcpp: "reverse",
                                     header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Animation): ptr Animation {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Animation; a2: ptr Animation) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAnimation*(): Animation {.constructor,
                                        importcpp: "client::Animation(@)",
                                        header: "cheerp/clientlib.h".}

proc constructAnimation*(effect: ptr AnimationEffectReadOnly): Animation {.
    constructor, importcpp: "client::Animation(@)", header: "cheerp/clientlib.h".}

proc constructAnimation*(effect: ptr AnimationEffectReadOnly;
                         timeline: ptr AnimationTimeline): Animation {.
    constructor, importcpp: "client::Animation(@)", header: "cheerp/clientlib.h".}

proc get_timing*(this: var AnimationEffectReadOnly): cdouble {.
    importcpp: "get_timing", header: "cheerp/clientlib.h".}

proc getComputedTiming*(this: var AnimationEffectReadOnly): ptr ComputedTimingProperties {.
    importcpp: "getComputedTiming", header: "cheerp/clientlib.h".}

proc get_bubbles*(this: var Event): bool {.importcpp: "get_bubbles",
    header: "cheerp/clientlib.h".}

proc get_cancelBubble*(this: var Event): bool {.importcpp: "get_cancelBubble",
    header: "cheerp/clientlib.h".}

proc set_cancelBubble*(this: var Event; a2: bool) {.
    importcpp: "set_cancelBubble", header: "cheerp/clientlib.h".}

proc get_cancelable*(this: var Event): bool {.importcpp: "get_cancelable",
    header: "cheerp/clientlib.h".}

proc get_currentTarget*(this: var Event): ptr EventTarget {.
    importcpp: "get_currentTarget", header: "cheerp/clientlib.h".}

proc get_defaultPrevented*(this: var Event): bool {.
    importcpp: "get_defaultPrevented", header: "cheerp/clientlib.h".}

proc get_eventPhase*(this: var Event): cdouble {.importcpp: "get_eventPhase",
    header: "cheerp/clientlib.h".}

proc get_isTrusted*(this: var Event): bool {.importcpp: "get_isTrusted",
    header: "cheerp/clientlib.h".}

proc get_returnValue*(this: var Event): bool {.importcpp: "get_returnValue",
    header: "cheerp/clientlib.h".}

proc set_returnValue*(this: var Event; a2: bool) {.importcpp: "set_returnValue",
    header: "cheerp/clientlib.h".}

proc get_scoped*(this: var Event): bool {.importcpp: "get_scoped",
    header: "cheerp/clientlib.h".}

proc get_srcElement*(this: var Event): ptr Element {.
    importcpp: "get_srcElement", header: "cheerp/clientlib.h".}

proc get_target*(this: var Event): ptr EventTarget {.importcpp: "get_target",
    header: "cheerp/clientlib.h".}

proc get_timeStamp*(this: var Event): cdouble {.importcpp: "get_timeStamp",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var Event): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc deepPath*(this: var Event): ptr Array {.importcpp: "deepPath",
    header: "cheerp/clientlib.h".}

proc initEvent*(this: var Event; `type`: String) {.importcpp: "initEvent",
    header: "cheerp/clientlib.h".}

proc initEvent*(this: var Event; `type`: String; bubbles: bool) {.
    importcpp: "initEvent", header: "cheerp/clientlib.h".}

proc initEvent*(this: var Event; `type`: String; bubbles: bool; cancelable: bool) {.
    importcpp: "initEvent", header: "cheerp/clientlib.h".}

proc preventDefault*(this: var Event) {.importcpp: "preventDefault",
                                        header: "cheerp/clientlib.h".}

proc stopImmediatePropagation*(this: var Event) {.
    importcpp: "stopImmediatePropagation", header: "cheerp/clientlib.h".}

proc stopPropagation*(this: var Event) {.importcpp: "stopPropagation",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Event): ptr Event {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Event; a2: ptr Event) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructEvent*(typeArg: String): Event {.constructor,
    importcpp: "client::Event(@)", header: "cheerp/clientlib.h".}

proc constructEvent*(typeArg: String; eventInitDict: ptr EventInit): Event {.
    constructor, importcpp: "client::Event(@)", header: "cheerp/clientlib.h".}

proc get_AT_TARGET*(this: var Event): cdouble {.importcpp: "get_AT_TARGET",
    header: "cheerp/clientlib.h".}

proc get_BUBBLING_PHASE*(this: var Event): cdouble {.
    importcpp: "get_BUBBLING_PHASE", header: "cheerp/clientlib.h".}

proc get_CAPTURING_PHASE*(this: var Event): cdouble {.
    importcpp: "get_CAPTURING_PHASE", header: "cheerp/clientlib.h".}

proc get_NONE*(this: var Event): cdouble {.importcpp: "get_NONE",
    header: "cheerp/clientlib.h".}

proc get_animationName*(this: var AnimationEvent): ptr String {.
    importcpp: "get_animationName", header: "cheerp/clientlib.h".}

proc get_elapsedTime*(this: var AnimationEvent): cdouble {.
    importcpp: "get_elapsedTime", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AnimationEvent): ptr AnimationEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AnimationEvent; a2: ptr AnimationEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAnimationEvent*(typeArg: String): AnimationEvent {.constructor,
    importcpp: "client::AnimationEvent(@)", header: "cheerp/clientlib.h".}

proc constructAnimationEvent*(typeArg: String;
                              eventInitDict: ptr AnimationEventInit): AnimationEvent {.
    constructor, importcpp: "client::AnimationEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_easing*(this: var AnimationKeyFrame): ptr String {.
    importcpp: "get_easing", header: "cheerp/clientlib.h".}

proc set_easing*(this: var AnimationKeyFrame; a2: String) {.
    importcpp: "set_easing", header: "cheerp/clientlib.h".}

proc get_offset*(this: var AnimationKeyFrame): cdouble {.
    importcpp: "get_offset", header: "cheerp/clientlib.h".}

proc set_offset*(this: var AnimationKeyFrame; a2: cdouble) {.
    importcpp: "set_offset", header: "cheerp/clientlib.h".}

proc `[]`*(this: var AnimationKeyFrame; index: cint): ptr Object {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: AnimationKeyFrame; index: cint): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_delay*(this: var AnimationOptions): cdouble {.importcpp: "get_delay",
    header: "cheerp/clientlib.h".}

proc set_delay*(this: var AnimationOptions; a2: cdouble) {.
    importcpp: "set_delay", header: "cheerp/clientlib.h".}

proc get_direction*(this: var AnimationOptions): ptr String {.
    importcpp: "get_direction", header: "cheerp/clientlib.h".}

proc set_direction*(this: var AnimationOptions; a2: String) {.
    importcpp: "set_direction", header: "cheerp/clientlib.h".}

proc get_duration*(this: var AnimationOptions): cdouble {.
    importcpp: "get_duration", header: "cheerp/clientlib.h".}

proc set_duration*(this: var AnimationOptions; a2: cdouble) {.
    importcpp: "set_duration", header: "cheerp/clientlib.h".}

proc get_easing*(this: var AnimationOptions): ptr String {.
    importcpp: "get_easing", header: "cheerp/clientlib.h".}

proc set_easing*(this: var AnimationOptions; a2: String) {.
    importcpp: "set_easing", header: "cheerp/clientlib.h".}

proc get_endDelay*(this: var AnimationOptions): cdouble {.
    importcpp: "get_endDelay", header: "cheerp/clientlib.h".}

proc set_endDelay*(this: var AnimationOptions; a2: cdouble) {.
    importcpp: "set_endDelay", header: "cheerp/clientlib.h".}

proc get_fill*(this: var AnimationOptions): ptr String {.importcpp: "get_fill",
    header: "cheerp/clientlib.h".}

proc set_fill*(this: var AnimationOptions; a2: String) {.importcpp: "set_fill",
    header: "cheerp/clientlib.h".}

proc get_id*(this: var AnimationOptions): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var AnimationOptions; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_iterationStart*(this: var AnimationOptions): cdouble {.
    importcpp: "get_iterationStart", header: "cheerp/clientlib.h".}

proc set_iterationStart*(this: var AnimationOptions; a2: cdouble) {.
    importcpp: "set_iterationStart", header: "cheerp/clientlib.h".}

proc get_iterations*(this: var AnimationOptions): cdouble {.
    importcpp: "get_iterations", header: "cheerp/clientlib.h".}

proc set_iterations*(this: var AnimationOptions; a2: cdouble) {.
    importcpp: "set_iterations", header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var AnimationPlaybackEvent): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc get_timelineTime*(this: var AnimationPlaybackEvent): cdouble {.
    importcpp: "get_timelineTime", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AnimationPlaybackEvent): ptr AnimationPlaybackEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AnimationPlaybackEvent;
                    a2: ptr AnimationPlaybackEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAnimationPlaybackEvent*(`type`: String): AnimationPlaybackEvent {.
    constructor, importcpp: "client::AnimationPlaybackEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructAnimationPlaybackEvent*(`type`: String; eventInitDict: ptr AnimationPlaybackEventInit): AnimationPlaybackEvent {.
    constructor, importcpp: "client::AnimationPlaybackEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var AnimationPlaybackEventInit): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc set_currentTime*(this: var AnimationPlaybackEventInit; a2: cdouble) {.
    importcpp: "set_currentTime", header: "cheerp/clientlib.h".}

proc get_timelineTime*(this: var AnimationPlaybackEventInit): cdouble {.
    importcpp: "get_timelineTime", header: "cheerp/clientlib.h".}

proc set_timelineTime*(this: var AnimationPlaybackEventInit; a2: cdouble) {.
    importcpp: "set_timelineTime", header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var AnimationTimeline): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc get_cached*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_cached", header: "cheerp/clientlib.h".}

proc set_cached*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_cached", header: "cheerp/clientlib.h".}

proc get_checking*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_checking", header: "cheerp/clientlib.h".}

proc set_checking*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_checking", header: "cheerp/clientlib.h".}

proc get_downloading*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_downloading", header: "cheerp/clientlib.h".}

proc set_downloading*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_downloading", header: "cheerp/clientlib.h".}

proc get_error*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_noupdate*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_noupdate", header: "cheerp/clientlib.h".}

proc set_noupdate*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_noupdate", header: "cheerp/clientlib.h".}

proc get_obsolete*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_obsolete", header: "cheerp/clientlib.h".}

proc set_obsolete*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_obsolete", header: "cheerp/clientlib.h".}

proc get_progress*(this: var ApplicationCacheEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var ApplicationCacheEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_updateready*(this: var ApplicationCacheEventMap): ptr Event {.
    importcpp: "get_updateready", header: "cheerp/clientlib.h".}

proc set_updateready*(this: var ApplicationCacheEventMap; a2: ptr Event) {.
    importcpp: "set_updateready", header: "cheerp/clientlib.h".}

proc get_oncached*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_oncached", header: "cheerp/clientlib.h".}

proc set_oncached*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_oncached", header: "cheerp/clientlib.h".}

proc get_onchecking*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_onchecking", header: "cheerp/clientlib.h".}

proc set_onchecking*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_onchecking", header: "cheerp/clientlib.h".}

proc get_ondownloading*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_ondownloading", header: "cheerp/clientlib.h".}

proc set_ondownloading*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_ondownloading", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onnoupdate*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_onnoupdate", header: "cheerp/clientlib.h".}

proc set_onnoupdate*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_onnoupdate", header: "cheerp/clientlib.h".}

proc get_onobsolete*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_onobsolete", header: "cheerp/clientlib.h".}

proc set_onobsolete*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_onobsolete", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_onupdateready*(this: var ApplicationCache): ptr EventListener {.
    importcpp: "get_onupdateready", header: "cheerp/clientlib.h".}

proc set_onupdateready*(this: var ApplicationCache; a2: ptr EventListener) {.
    importcpp: "set_onupdateready", header: "cheerp/clientlib.h".}

proc get_status*(this: var ApplicationCache): cdouble {.importcpp: "get_status",
    header: "cheerp/clientlib.h".}

proc abort*(this: var ApplicationCache) {.importcpp: "abort",
    header: "cheerp/clientlib.h".}

proc swapCache*(this: var ApplicationCache) {.importcpp: "swapCache",
    header: "cheerp/clientlib.h".}

proc update*(this: var ApplicationCache) {.importcpp: "update",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ApplicationCache; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ApplicationCache; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ApplicationCache; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ApplicationCache; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ApplicationCache; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ApplicationCache; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ApplicationCache; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ApplicationCache; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ApplicationCache; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ApplicationCache; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ApplicationCache): ptr ApplicationCache {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ApplicationCache; a2: ptr ApplicationCache) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructApplicationCache*(): ApplicationCache {.constructor,
    importcpp: "client::ApplicationCache(@)", header: "cheerp/clientlib.h".}

proc get_CHECKING*(this: var ApplicationCache): cdouble {.
    importcpp: "get_CHECKING", header: "cheerp/clientlib.h".}

proc get_DOWNLOADING*(this: var ApplicationCache): cdouble {.
    importcpp: "get_DOWNLOADING", header: "cheerp/clientlib.h".}

proc get_IDLE*(this: var ApplicationCache): cdouble {.importcpp: "get_IDLE",
    header: "cheerp/clientlib.h".}

proc get_OBSOLETE*(this: var ApplicationCache): cdouble {.
    importcpp: "get_OBSOLETE", header: "cheerp/clientlib.h".}

proc get_UNCACHED*(this: var ApplicationCache): cdouble {.
    importcpp: "get_UNCACHED", header: "cheerp/clientlib.h".}

proc get_UPDATEREADY*(this: var ApplicationCache): cdouble {.
    importcpp: "get_UPDATEREADY", header: "cheerp/clientlib.h".}

proc get_flatten*(this: var AssignedNodesOptions): bool {.
    importcpp: "get_flatten", header: "cheerp/clientlib.h".}

proc set_flatten*(this: var AssignedNodesOptions; a2: bool) {.
    importcpp: "set_flatten", header: "cheerp/clientlib.h".}

proc get_baseURI*(this: var Node): ptr String {.importcpp: "get_baseURI",
    header: "cheerp/clientlib.h".}

proc get_childNodes*(this: var Node): ptr NodeListOf[Node] {.
    importcpp: "get_childNodes", header: "cheerp/clientlib.h".}

proc get_firstChild*(this: var Node): ptr Node {.importcpp: "get_firstChild",
    header: "cheerp/clientlib.h".}

proc get_isConnected*(this: var Node): bool {.importcpp: "get_isConnected",
    header: "cheerp/clientlib.h".}

proc get_lastChild*(this: var Node): ptr Node {.importcpp: "get_lastChild",
    header: "cheerp/clientlib.h".}

proc get_localName*(this: var Node): ptr String {.importcpp: "get_localName",
    header: "cheerp/clientlib.h".}

proc get_namespaceURI*(this: var Node): ptr String {.
    importcpp: "get_namespaceURI", header: "cheerp/clientlib.h".}

proc get_nextSibling*(this: var Node): ptr Node {.importcpp: "get_nextSibling",
    header: "cheerp/clientlib.h".}

proc get_nodeName*(this: var Node): ptr String {.importcpp: "get_nodeName",
    header: "cheerp/clientlib.h".}

proc get_nodeType*(this: var Node): cdouble {.importcpp: "get_nodeType",
    header: "cheerp/clientlib.h".}

proc get_nodeValue*(this: var Node): ptr String {.importcpp: "get_nodeValue",
    header: "cheerp/clientlib.h".}

proc set_nodeValue*(this: var Node; a2: String) {.importcpp: "set_nodeValue",
    header: "cheerp/clientlib.h".}

proc get_ownerDocument*(this: var Node): ptr Document {.
    importcpp: "get_ownerDocument", header: "cheerp/clientlib.h".}

proc get_parentElement*(this: var Node): ptr HTMLElement {.
    importcpp: "get_parentElement", header: "cheerp/clientlib.h".}

proc get_parentNode*(this: var Node): ptr Node {.importcpp: "get_parentNode",
    header: "cheerp/clientlib.h".}

proc get_previousSibling*(this: var Node): ptr Node {.
    importcpp: "get_previousSibling", header: "cheerp/clientlib.h".}

proc get_textContent*(this: var Node): ptr String {.
    importcpp: "get_textContent", header: "cheerp/clientlib.h".}

proc set_textContent*(this: var Node; a2: String) {.
    importcpp: "set_textContent", header: "cheerp/clientlib.h".}

proc appendChild*(this: var Node; newChild: ptr Node): ptr Node {.
    importcpp: "appendChild", header: "cheerp/clientlib.h".}

proc cloneNode*(this: var Node): ptr Node {.importcpp: "cloneNode",
    header: "cheerp/clientlib.h".}

proc cloneNode*(this: var Node; deep: bool): ptr Node {.importcpp: "cloneNode",
    header: "cheerp/clientlib.h".}

proc compareDocumentPosition*(this: var Node; other: ptr Node): cdouble {.
    importcpp: "compareDocumentPosition", header: "cheerp/clientlib.h".}

proc contains*(this: var Node; child: ptr Node): bool {.importcpp: "contains",
    header: "cheerp/clientlib.h".}

proc hasChildNodes*(this: var Node): bool {.importcpp: "hasChildNodes",
    header: "cheerp/clientlib.h".}

proc insertBefore*(this: var Node; newChild: ptr Node; refChild: ptr Node): ptr Node {.
    importcpp: "insertBefore", header: "cheerp/clientlib.h".}

proc isDefaultNamespace*(this: var Node; namespaceURI: String): bool {.
    importcpp: "isDefaultNamespace", header: "cheerp/clientlib.h".}

proc isEqualNode*(this: var Node; arg: ptr Node): bool {.
    importcpp: "isEqualNode", header: "cheerp/clientlib.h".}

proc isSameNode*(this: var Node; other: ptr Node): bool {.
    importcpp: "isSameNode", header: "cheerp/clientlib.h".}

proc lookupNamespaceURI*(this: var Node; prefix: String): ptr String {.
    importcpp: "lookupNamespaceURI", header: "cheerp/clientlib.h".}

proc lookupPrefix*(this: var Node; namespaceURI: String): ptr String {.
    importcpp: "lookupPrefix", header: "cheerp/clientlib.h".}

proc normalize*(this: var Node) {.importcpp: "normalize",
                                  header: "cheerp/clientlib.h".}

proc removeChild*(this: var Node; oldChild: ptr Node): ptr Node {.
    importcpp: "removeChild", header: "cheerp/clientlib.h".}

proc replaceChild*(this: var Node; newChild: ptr Node; oldChild: ptr Node): ptr Node {.
    importcpp: "replaceChild", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Node): ptr Node {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Node; a2: ptr Node) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructNode*(): Node {.constructor, importcpp: "client::Node(@)",
                              header: "cheerp/clientlib.h".}

proc get_ATTRIBUTE_NODE*(this: var Node): cdouble {.
    importcpp: "get_ATTRIBUTE_NODE", header: "cheerp/clientlib.h".}

proc get_CDATA_SECTION_NODE*(this: var Node): cdouble {.
    importcpp: "get_CDATA_SECTION_NODE", header: "cheerp/clientlib.h".}

proc get_COMMENT_NODE*(this: var Node): cdouble {.importcpp: "get_COMMENT_NODE",
    header: "cheerp/clientlib.h".}

proc get_DOCUMENT_FRAGMENT_NODE*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_FRAGMENT_NODE", header: "cheerp/clientlib.h".}

proc get_DOCUMENT_NODE*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_NODE", header: "cheerp/clientlib.h".}

proc get_DOCUMENT_POSITION_CONTAINED_BY*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_POSITION_CONTAINED_BY",
    header: "cheerp/clientlib.h".}

proc get_DOCUMENT_POSITION_CONTAINS*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_POSITION_CONTAINS", header: "cheerp/clientlib.h".}

proc get_DOCUMENT_POSITION_DISCONNECTED*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_POSITION_DISCONNECTED",
    header: "cheerp/clientlib.h".}

proc get_DOCUMENT_POSITION_FOLLOWING*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_POSITION_FOLLOWING", header: "cheerp/clientlib.h".}

proc get_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_POSITION_IMPLEMENTATION_SPECIFIC",
    header: "cheerp/clientlib.h".}

proc get_DOCUMENT_POSITION_PRECEDING*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_POSITION_PRECEDING", header: "cheerp/clientlib.h".}

proc get_DOCUMENT_TYPE_NODE*(this: var Node): cdouble {.
    importcpp: "get_DOCUMENT_TYPE_NODE", header: "cheerp/clientlib.h".}

proc get_ELEMENT_NODE*(this: var Node): cdouble {.importcpp: "get_ELEMENT_NODE",
    header: "cheerp/clientlib.h".}

proc get_ENTITY_NODE*(this: var Node): cdouble {.importcpp: "get_ENTITY_NODE",
    header: "cheerp/clientlib.h".}

proc get_ENTITY_REFERENCE_NODE*(this: var Node): cdouble {.
    importcpp: "get_ENTITY_REFERENCE_NODE", header: "cheerp/clientlib.h".}

proc get_NOTATION_NODE*(this: var Node): cdouble {.
    importcpp: "get_NOTATION_NODE", header: "cheerp/clientlib.h".}

proc get_PROCESSING_INSTRUCTION_NODE*(this: var Node): cdouble {.
    importcpp: "get_PROCESSING_INSTRUCTION_NODE", header: "cheerp/clientlib.h".}

proc get_TEXT_NODE*(this: var Node): cdouble {.importcpp: "get_TEXT_NODE",
    header: "cheerp/clientlib.h".}

proc get_name*(this: var Attr): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_ownerElement*(this: var Attr): ptr Element {.
    importcpp: "get_ownerElement", header: "cheerp/clientlib.h".}

proc get_prefix*(this: var Attr): ptr String {.importcpp: "get_prefix",
    header: "cheerp/clientlib.h".}

proc get_specified*(this: var Attr): bool {.importcpp: "get_specified",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var Attr): ptr String {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var Attr; a2: String) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Attr): ptr Attr {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Attr; a2: ptr Attr) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructAttr*(): Attr {.constructor, importcpp: "client::Attr(@)",
                              header: "cheerp/clientlib.h".}

proc get_duration*(this: var AudioBuffer): cdouble {.importcpp: "get_duration",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var AudioBuffer): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_numberOfChannels*(this: var AudioBuffer): cdouble {.
    importcpp: "get_numberOfChannels", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var AudioBuffer): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc copyFromChannel*(this: var AudioBuffer; destination: ptr Float32Array;
                      channelNumber: cdouble) {.importcpp: "copyFromChannel",
    header: "cheerp/clientlib.h".}

proc copyFromChannel*(this: var AudioBuffer; destination: ptr Float32Array;
                      channelNumber: cdouble; startInChannel: cdouble) {.
    importcpp: "copyFromChannel", header: "cheerp/clientlib.h".}

proc copyToChannel*(this: var AudioBuffer; source: ptr Float32Array;
                    channelNumber: cdouble) {.importcpp: "copyToChannel",
    header: "cheerp/clientlib.h".}

proc copyToChannel*(this: var AudioBuffer; source: ptr Float32Array;
                    channelNumber: cdouble; startInChannel: cdouble) {.
    importcpp: "copyToChannel", header: "cheerp/clientlib.h".}

proc getChannelData*(this: var AudioBuffer; channel: cdouble): ptr Float32Array {.
    importcpp: "getChannelData", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioBuffer): ptr AudioBuffer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioBuffer; a2: ptr AudioBuffer) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioBuffer*(): AudioBuffer {.constructor,
    importcpp: "client::AudioBuffer(@)", header: "cheerp/clientlib.h".}

proc get_ended*(this: var AudioBufferSourceNodeEventMap): ptr Event {.
    importcpp: "get_ended", header: "cheerp/clientlib.h".}

proc set_ended*(this: var AudioBufferSourceNodeEventMap; a2: ptr Event) {.
    importcpp: "set_ended", header: "cheerp/clientlib.h".}

proc get_buffer*(this: var AudioBufferSourceNode): ptr AudioBuffer {.
    importcpp: "get_buffer", header: "cheerp/clientlib.h".}

proc set_buffer*(this: var AudioBufferSourceNode; a2: ptr AudioBuffer) {.
    importcpp: "set_buffer", header: "cheerp/clientlib.h".}

proc get_detune*(this: var AudioBufferSourceNode): ptr AudioParam {.
    importcpp: "get_detune", header: "cheerp/clientlib.h".}

proc get_loop*(this: var AudioBufferSourceNode): bool {.importcpp: "get_loop",
    header: "cheerp/clientlib.h".}

proc set_loop*(this: var AudioBufferSourceNode; a2: bool) {.
    importcpp: "set_loop", header: "cheerp/clientlib.h".}

proc get_loopEnd*(this: var AudioBufferSourceNode): cdouble {.
    importcpp: "get_loopEnd", header: "cheerp/clientlib.h".}

proc set_loopEnd*(this: var AudioBufferSourceNode; a2: cdouble) {.
    importcpp: "set_loopEnd", header: "cheerp/clientlib.h".}

proc get_loopStart*(this: var AudioBufferSourceNode): cdouble {.
    importcpp: "get_loopStart", header: "cheerp/clientlib.h".}

proc set_loopStart*(this: var AudioBufferSourceNode; a2: cdouble) {.
    importcpp: "set_loopStart", header: "cheerp/clientlib.h".}

proc get_onended*(this: var AudioBufferSourceNode): ptr EventListener {.
    importcpp: "get_onended", header: "cheerp/clientlib.h".}

proc set_onended*(this: var AudioBufferSourceNode; a2: ptr EventListener) {.
    importcpp: "set_onended", header: "cheerp/clientlib.h".}

proc get_playbackRate*(this: var AudioBufferSourceNode): ptr AudioParam {.
    importcpp: "get_playbackRate", header: "cheerp/clientlib.h".}

proc start*(this: var AudioBufferSourceNode) {.importcpp: "start",
    header: "cheerp/clientlib.h".}

proc start*(this: var AudioBufferSourceNode; `when`: cdouble) {.
    importcpp: "start", header: "cheerp/clientlib.h".}

proc start*(this: var AudioBufferSourceNode; `when`: cdouble; offset: cdouble) {.
    importcpp: "start", header: "cheerp/clientlib.h".}

proc start*(this: var AudioBufferSourceNode; `when`: cdouble; offset: cdouble;
            duration: cdouble) {.importcpp: "start",
                                 header: "cheerp/clientlib.h".}

proc stop*(this: var AudioBufferSourceNode) {.importcpp: "stop",
    header: "cheerp/clientlib.h".}

proc stop*(this: var AudioBufferSourceNode; `when`: cdouble) {.
    importcpp: "stop", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioBufferSourceNode; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioBufferSourceNode; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioBufferSourceNode; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioBufferSourceNode; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioBufferSourceNode; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioBufferSourceNode; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioBufferSourceNode; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioBufferSourceNode; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioBufferSourceNode; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioBufferSourceNode; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioBufferSourceNode): ptr AudioBufferSourceNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioBufferSourceNode;
                    a2: ptr AudioBufferSourceNode) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructAudioBufferSourceNode*(): AudioBufferSourceNode {.constructor,
    importcpp: "client::AudioBufferSourceNode(@)", header: "cheerp/clientlib.h".}

proc get_statechange*(this: var AudioContextEventMap): ptr Event {.
    importcpp: "get_statechange", header: "cheerp/clientlib.h".}

proc set_statechange*(this: var AudioContextEventMap; a2: ptr Event) {.
    importcpp: "set_statechange", header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var AudioContextBase): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc get_destination*(this: var AudioContextBase): ptr AudioDestinationNode {.
    importcpp: "get_destination", header: "cheerp/clientlib.h".}

proc get_listener*(this: var AudioContextBase): ptr AudioListener {.
    importcpp: "get_listener", header: "cheerp/clientlib.h".}

proc get_onstatechange*(this: var AudioContextBase): ptr EventListener {.
    importcpp: "get_onstatechange", header: "cheerp/clientlib.h".}

proc set_onstatechange*(this: var AudioContextBase; a2: ptr EventListener) {.
    importcpp: "set_onstatechange", header: "cheerp/clientlib.h".}

proc get_sampleRate*(this: var AudioContextBase): cdouble {.
    importcpp: "get_sampleRate", header: "cheerp/clientlib.h".}

proc get_state*(this: var AudioContextBase): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc close*(this: var AudioContextBase): ptr Promise {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc createAnalyser*(this: var AudioContextBase): ptr AnalyserNode {.
    importcpp: "createAnalyser", header: "cheerp/clientlib.h".}

proc createBiquadFilter*(this: var AudioContextBase): ptr BiquadFilterNode {.
    importcpp: "createBiquadFilter", header: "cheerp/clientlib.h".}

proc createBuffer*(this: var AudioContextBase; numberOfChannels: cdouble;
                   length: cdouble; sampleRate: cdouble): ptr AudioBuffer {.
    importcpp: "createBuffer", header: "cheerp/clientlib.h".}

proc createBufferSource*(this: var AudioContextBase): ptr AudioBufferSourceNode {.
    importcpp: "createBufferSource", header: "cheerp/clientlib.h".}

proc createChannelMerger*(this: var AudioContextBase): ptr ChannelMergerNode {.
    importcpp: "createChannelMerger", header: "cheerp/clientlib.h".}

proc createChannelMerger*(this: var AudioContextBase; numberOfInputs: cdouble): ptr ChannelMergerNode {.
    importcpp: "createChannelMerger", header: "cheerp/clientlib.h".}

proc createChannelSplitter*(this: var AudioContextBase): ptr ChannelSplitterNode {.
    importcpp: "createChannelSplitter", header: "cheerp/clientlib.h".}

proc createChannelSplitter*(this: var AudioContextBase; numberOfOutputs: cdouble): ptr ChannelSplitterNode {.
    importcpp: "createChannelSplitter", header: "cheerp/clientlib.h".}

proc createConvolver*(this: var AudioContextBase): ptr ConvolverNode {.
    importcpp: "createConvolver", header: "cheerp/clientlib.h".}

proc createDelay*(this: var AudioContextBase): ptr DelayNode {.
    importcpp: "createDelay", header: "cheerp/clientlib.h".}

proc createDelay*(this: var AudioContextBase; maxDelayTime: cdouble): ptr DelayNode {.
    importcpp: "createDelay", header: "cheerp/clientlib.h".}

proc createDynamicsCompressor*(this: var AudioContextBase): ptr DynamicsCompressorNode {.
    importcpp: "createDynamicsCompressor", header: "cheerp/clientlib.h".}

proc createGain*(this: var AudioContextBase): ptr GainNode {.
    importcpp: "createGain", header: "cheerp/clientlib.h".}

proc createIIRFilter*(this: var AudioContextBase; feedforward: ptr Array;
                      feedback: ptr Array): ptr IIRFilterNode {.
    importcpp: "createIIRFilter", header: "cheerp/clientlib.h".}

proc createMediaElementSource*(this: var AudioContextBase;
                               mediaElement: ptr HTMLMediaElement): ptr MediaElementAudioSourceNode {.
    importcpp: "createMediaElementSource", header: "cheerp/clientlib.h".}

proc createMediaStreamSource*(this: var AudioContextBase;
                              mediaStream: ptr MediaStream): ptr MediaStreamAudioSourceNode {.
    importcpp: "createMediaStreamSource", header: "cheerp/clientlib.h".}

proc createOscillator*(this: var AudioContextBase): ptr OscillatorNode {.
    importcpp: "createOscillator", header: "cheerp/clientlib.h".}

proc createPanner*(this: var AudioContextBase): ptr PannerNode {.
    importcpp: "createPanner", header: "cheerp/clientlib.h".}

proc createPeriodicWave*(this: var AudioContextBase; real: ptr Float32Array;
                         imag: ptr Float32Array): ptr PeriodicWave {.
    importcpp: "createPeriodicWave", header: "cheerp/clientlib.h".}

proc createPeriodicWave*(this: var AudioContextBase; real: ptr Float32Array;
                         imag: ptr Float32Array;
                         constraints: ptr PeriodicWaveConstraints): ptr PeriodicWave {.
    importcpp: "createPeriodicWave", header: "cheerp/clientlib.h".}

proc createScriptProcessor*(this: var AudioContextBase): ptr ScriptProcessorNode {.
    importcpp: "createScriptProcessor", header: "cheerp/clientlib.h".}

proc createScriptProcessor*(this: var AudioContextBase; bufferSize: cdouble): ptr ScriptProcessorNode {.
    importcpp: "createScriptProcessor", header: "cheerp/clientlib.h".}

proc createScriptProcessor*(this: var AudioContextBase; bufferSize: cdouble;
                            numberOfInputChannels: cdouble): ptr ScriptProcessorNode {.
    importcpp: "createScriptProcessor", header: "cheerp/clientlib.h".}

proc createScriptProcessor*(this: var AudioContextBase; bufferSize: cdouble;
                            numberOfInputChannels: cdouble;
                            numberOfOutputChannels: cdouble): ptr ScriptProcessorNode {.
    importcpp: "createScriptProcessor", header: "cheerp/clientlib.h".}

proc createStereoPanner*(this: var AudioContextBase): ptr StereoPannerNode {.
    importcpp: "createStereoPanner", header: "cheerp/clientlib.h".}

proc createWaveShaper*(this: var AudioContextBase): ptr WaveShaperNode {.
    importcpp: "createWaveShaper", header: "cheerp/clientlib.h".}

proc decodeAudioData*(this: var AudioContextBase; audioData: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decodeAudioData", header: "cheerp/clientlib.h".}

proc decodeAudioData*(this: var AudioContextBase; audioData: ptr ArrayBuffer;
                      successCallback: ptr EventListener): ptr Promise {.
    importcpp: "decodeAudioData", header: "cheerp/clientlib.h".}

proc decodeAudioData*(this: var AudioContextBase; audioData: ptr ArrayBuffer;
                      successCallback: ptr EventListener;
                      errorCallback: ptr EventListener): ptr Promise {.
    importcpp: "decodeAudioData", header: "cheerp/clientlib.h".}

proc resume*(this: var AudioContextBase): ptr Promise {.importcpp: "resume",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioContextBase; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioContextBase; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioContextBase; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioContextBase; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioContextBase; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioContextBase; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioContextBase; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioContextBase; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioContextBase; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioContextBase; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc suspend*(this: var AudioContext): ptr Promise {.importcpp: "suspend",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioContext): ptr AudioContext {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioContext; a2: ptr AudioContext) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioContext*(): AudioContext {.constructor,
    importcpp: "client::AudioContext(@)", header: "cheerp/clientlib.h".}

proc get_maxChannelCount*(this: var AudioDestinationNode): cdouble {.
    importcpp: "get_maxChannelCount", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioDestinationNode): ptr AudioDestinationNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioDestinationNode; a2: ptr AudioDestinationNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioDestinationNode*(): AudioDestinationNode {.constructor,
    importcpp: "client::AudioDestinationNode(@)", header: "cheerp/clientlib.h".}

proc get_dopplerFactor*(this: var AudioListener): cdouble {.
    importcpp: "get_dopplerFactor", header: "cheerp/clientlib.h".}

proc set_dopplerFactor*(this: var AudioListener; a2: cdouble) {.
    importcpp: "set_dopplerFactor", header: "cheerp/clientlib.h".}

proc get_speedOfSound*(this: var AudioListener): cdouble {.
    importcpp: "get_speedOfSound", header: "cheerp/clientlib.h".}

proc set_speedOfSound*(this: var AudioListener; a2: cdouble) {.
    importcpp: "set_speedOfSound", header: "cheerp/clientlib.h".}

proc setOrientation*(this: var AudioListener; x: cdouble; y: cdouble;
                     z: cdouble; xUp: cdouble; yUp: cdouble; zUp: cdouble) {.
    importcpp: "setOrientation", header: "cheerp/clientlib.h".}

proc setPosition*(this: var AudioListener; x: cdouble; y: cdouble; z: cdouble) {.
    importcpp: "setPosition", header: "cheerp/clientlib.h".}

proc setVelocity*(this: var AudioListener; x: cdouble; y: cdouble; z: cdouble) {.
    importcpp: "setVelocity", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioListener): ptr AudioListener {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioListener; a2: ptr AudioListener) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioListener*(): AudioListener {.constructor,
    importcpp: "client::AudioListener(@)", header: "cheerp/clientlib.h".}

proc get_defaultValue*(this: var AudioParam): cdouble {.
    importcpp: "get_defaultValue", header: "cheerp/clientlib.h".}

proc get_value*(this: var AudioParam): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var AudioParam; a2: cdouble) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc cancelScheduledValues*(this: var AudioParam; cancelTime: cdouble): ptr AudioParam {.
    importcpp: "cancelScheduledValues", header: "cheerp/clientlib.h".}

proc exponentialRampToValueAtTime*(this: var AudioParam; value: cdouble;
                                   endTime: cdouble): ptr AudioParam {.
    importcpp: "exponentialRampToValueAtTime", header: "cheerp/clientlib.h".}

proc linearRampToValueAtTime*(this: var AudioParam; value: cdouble;
                              endTime: cdouble): ptr AudioParam {.
    importcpp: "linearRampToValueAtTime", header: "cheerp/clientlib.h".}

proc setTargetAtTime*(this: var AudioParam; target: cdouble; startTime: cdouble;
                      timeConstant: cdouble): ptr AudioParam {.
    importcpp: "setTargetAtTime", header: "cheerp/clientlib.h".}

proc setValueAtTime*(this: var AudioParam; value: cdouble; startTime: cdouble): ptr AudioParam {.
    importcpp: "setValueAtTime", header: "cheerp/clientlib.h".}

proc setValueCurveAtTime*(this: var AudioParam; values: ptr Array;
                          startTime: cdouble; duration: cdouble): ptr AudioParam {.
    importcpp: "setValueCurveAtTime", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioParam): ptr AudioParam {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioParam; a2: ptr AudioParam) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioParam*(): AudioParam {.constructor,
    importcpp: "client::AudioParam(@)", header: "cheerp/clientlib.h".}

proc get_inputBuffer*(this: var AudioProcessingEvent): ptr AudioBuffer {.
    importcpp: "get_inputBuffer", header: "cheerp/clientlib.h".}

proc get_outputBuffer*(this: var AudioProcessingEvent): ptr AudioBuffer {.
    importcpp: "get_outputBuffer", header: "cheerp/clientlib.h".}

proc get_playbackTime*(this: var AudioProcessingEvent): cdouble {.
    importcpp: "get_playbackTime", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioProcessingEvent): ptr AudioProcessingEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioProcessingEvent; a2: ptr AudioProcessingEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioProcessingEvent*(): AudioProcessingEvent {.constructor,
    importcpp: "client::AudioProcessingEvent(@)", header: "cheerp/clientlib.h".}

proc get_enabled*(this: var AudioTrack): bool {.importcpp: "get_enabled",
    header: "cheerp/clientlib.h".}

proc set_enabled*(this: var AudioTrack; a2: bool) {.importcpp: "set_enabled",
    header: "cheerp/clientlib.h".}

proc get_id*(this: var AudioTrack): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_kind*(this: var AudioTrack): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc set_kind*(this: var AudioTrack; a2: String) {.importcpp: "set_kind",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var AudioTrack): ptr String {.importcpp: "get_label",
    header: "cheerp/clientlib.h".}

proc get_language*(this: var AudioTrack): ptr String {.
    importcpp: "get_language", header: "cheerp/clientlib.h".}

proc set_language*(this: var AudioTrack; a2: String) {.
    importcpp: "set_language", header: "cheerp/clientlib.h".}

proc get_sourceBuffer*(this: var AudioTrack): ptr SourceBuffer {.
    importcpp: "get_sourceBuffer", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioTrack): ptr AudioTrack {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioTrack; a2: ptr AudioTrack) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioTrack*(): AudioTrack {.constructor,
    importcpp: "client::AudioTrack(@)", header: "cheerp/clientlib.h".}

proc get_addtrack*(this: var AudioTrackListEventMap): ptr TrackEvent {.
    importcpp: "get_addtrack", header: "cheerp/clientlib.h".}

proc set_addtrack*(this: var AudioTrackListEventMap; a2: ptr TrackEvent) {.
    importcpp: "set_addtrack", header: "cheerp/clientlib.h".}

proc get_change*(this: var AudioTrackListEventMap): ptr Event {.
    importcpp: "get_change", header: "cheerp/clientlib.h".}

proc set_change*(this: var AudioTrackListEventMap; a2: ptr Event) {.
    importcpp: "set_change", header: "cheerp/clientlib.h".}

proc get_removetrack*(this: var AudioTrackListEventMap): ptr TrackEvent {.
    importcpp: "get_removetrack", header: "cheerp/clientlib.h".}

proc set_removetrack*(this: var AudioTrackListEventMap; a2: ptr TrackEvent) {.
    importcpp: "set_removetrack", header: "cheerp/clientlib.h".}

proc get_length*(this: var AudioTrackList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_onaddtrack*(this: var AudioTrackList): ptr EventListener {.
    importcpp: "get_onaddtrack", header: "cheerp/clientlib.h".}

proc set_onaddtrack*(this: var AudioTrackList; a2: ptr EventListener) {.
    importcpp: "set_onaddtrack", header: "cheerp/clientlib.h".}

proc get_onchange*(this: var AudioTrackList): ptr EventListener {.
    importcpp: "get_onchange", header: "cheerp/clientlib.h".}

proc set_onchange*(this: var AudioTrackList; a2: ptr EventListener) {.
    importcpp: "set_onchange", header: "cheerp/clientlib.h".}

proc get_onremovetrack*(this: var AudioTrackList): ptr EventListener {.
    importcpp: "get_onremovetrack", header: "cheerp/clientlib.h".}

proc set_onremovetrack*(this: var AudioTrackList; a2: ptr EventListener) {.
    importcpp: "set_onremovetrack", header: "cheerp/clientlib.h".}

proc getTrackById*(this: var AudioTrackList; id: String): ptr AudioTrack {.
    importcpp: "getTrackById", header: "cheerp/clientlib.h".}

proc item*(this: var AudioTrackList; index: cdouble): ptr AudioTrack {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioTrackList; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioTrackList; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioTrackList; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioTrackList; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var AudioTrackList; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioTrackList; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioTrackList; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioTrackList; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioTrackList; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var AudioTrackList; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc `[]`*(this: var AudioTrackList; index: cint): ptr AudioTrack {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: AudioTrackList; index: cint): ptr AudioTrack {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var AudioTrackList): ptr AudioTrackList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var AudioTrackList; a2: ptr AudioTrackList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructAudioTrackList*(): AudioTrackList {.constructor,
    importcpp: "client::AudioTrackList(@)", header: "cheerp/clientlib.h".}

proc get_visible*(this: var BarProp): bool {.importcpp: "get_visible",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var BarProp): ptr BarProp {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var BarProp; a2: ptr BarProp) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructBarProp*(): BarProp {.constructor,
                                    importcpp: "client::BarProp(@)",
                                    header: "cheerp/clientlib.h".}

proc set_returnValue*(this: var BeforeUnloadEvent; a2: ptr Object) {.
    importcpp: "set_returnValue", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var BeforeUnloadEvent): ptr BeforeUnloadEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var BeforeUnloadEvent; a2: ptr BeforeUnloadEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructBeforeUnloadEvent*(): BeforeUnloadEvent {.constructor,
    importcpp: "client::BeforeUnloadEvent(@)", header: "cheerp/clientlib.h".}

proc get_lastError*(this: var BhxBrowser): ptr DOMException {.
    importcpp: "get_lastError", header: "cheerp/clientlib.h".}

proc checkMatchesGlobExpression*(this: var BhxBrowser; pattern: String;
                                 value: String): bool {.
    importcpp: "checkMatchesGlobExpression", header: "cheerp/clientlib.h".}

proc checkMatchesUriExpression*(this: var BhxBrowser; pattern: String;
                                value: String): bool {.
    importcpp: "checkMatchesUriExpression", header: "cheerp/clientlib.h".}

proc clearLastError*(this: var BhxBrowser) {.importcpp: "clearLastError",
    header: "cheerp/clientlib.h".}

proc currentWindowId*(this: var BhxBrowser): cdouble {.
    importcpp: "currentWindowId", header: "cheerp/clientlib.h".}

proc fireExtensionApiTelemetry*(this: var BhxBrowser; functionName: String;
                                isSucceeded: bool; isSupported: bool;
                                errorString: String) {.
    importcpp: "fireExtensionApiTelemetry", header: "cheerp/clientlib.h".}

proc genericFunction*(this: var BhxBrowser; functionId: cdouble;
                      destination: ptr Object) {.importcpp: "genericFunction",
    header: "cheerp/clientlib.h".}

proc genericFunction*(this: var BhxBrowser; functionId: cdouble;
                      destination: ptr Object; parameters: String) {.
    importcpp: "genericFunction", header: "cheerp/clientlib.h".}

proc genericFunction*(this: var BhxBrowser; functionId: cdouble;
                      destination: ptr Object; parameters: String;
                      callbackId: cdouble) {.importcpp: "genericFunction",
    header: "cheerp/clientlib.h".}

proc genericSynchronousFunction*(this: var BhxBrowser; functionId: cdouble): ptr String {.
    importcpp: "genericSynchronousFunction", header: "cheerp/clientlib.h".}

proc genericSynchronousFunction*(this: var BhxBrowser; functionId: cdouble;
                                 parameters: String): ptr String {.
    importcpp: "genericSynchronousFunction", header: "cheerp/clientlib.h".}

proc getExtensionId*(this: var BhxBrowser): ptr String {.
    importcpp: "getExtensionId", header: "cheerp/clientlib.h".}

proc registerGenericFunctionCallbackHandler*(this: var BhxBrowser;
    callbackHandler: ptr Function) {.importcpp: "registerGenericFunctionCallbackHandler",
                                     header: "cheerp/clientlib.h".}

proc registerGenericListenerHandler*(this: var BhxBrowser;
                                     eventHandler: ptr Function) {.
    importcpp: "registerGenericListenerHandler", header: "cheerp/clientlib.h".}

proc setLastError*(this: var BhxBrowser; parameters: String) {.
    importcpp: "setLastError", header: "cheerp/clientlib.h".}

proc webPlatformGenericFunction*(this: var BhxBrowser; destination: ptr Object) {.
    importcpp: "webPlatformGenericFunction", header: "cheerp/clientlib.h".}

proc webPlatformGenericFunction*(this: var BhxBrowser; destination: ptr Object;
                                 parameters: String) {.
    importcpp: "webPlatformGenericFunction", header: "cheerp/clientlib.h".}

proc webPlatformGenericFunction*(this: var BhxBrowser; destination: ptr Object;
                                 parameters: String; callbackId: cdouble) {.
    importcpp: "webPlatformGenericFunction", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var BhxBrowser): ptr BhxBrowser {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var BhxBrowser; a2: ptr BhxBrowser) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructBhxBrowser*(): BhxBrowser {.constructor,
    importcpp: "client::BhxBrowser(@)", header: "cheerp/clientlib.h".}

proc get_detune*(this: var BiquadFilterNode): ptr AudioParam {.
    importcpp: "get_detune", header: "cheerp/clientlib.h".}

proc get_frequency*(this: var BiquadFilterNode): ptr AudioParam {.
    importcpp: "get_frequency", header: "cheerp/clientlib.h".}

proc get_gain*(this: var BiquadFilterNode): ptr AudioParam {.
    importcpp: "get_gain", header: "cheerp/clientlib.h".}

proc get_type*(this: var BiquadFilterNode): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var BiquadFilterNode; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc getFrequencyResponse*(this: var BiquadFilterNode;
                           frequencyHz: ptr Float32Array;
                           magResponse: ptr Float32Array;
                           phaseResponse: ptr Float32Array) {.
    importcpp: "getFrequencyResponse", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var BiquadFilterNode): ptr BiquadFilterNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var BiquadFilterNode; a2: ptr BiquadFilterNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructBiquadFilterNode*(): BiquadFilterNode {.constructor,
    importcpp: "client::BiquadFilterNode(@)", header: "cheerp/clientlib.h".}

proc get_size*(this: var Blob): cdouble {.importcpp: "get_size",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var Blob): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc msClose*(this: var Blob) {.importcpp: "msClose",
                                header: "cheerp/clientlib.h".}

proc slice*(this: var Blob): ptr Blob {.importcpp: "slice",
                                        header: "cheerp/clientlib.h".}

proc slice*(this: var Blob; start: cdouble): ptr Blob {.importcpp: "slice",
    header: "cheerp/clientlib.h".}

proc slice*(this: var Blob; start: cdouble; `end`: cdouble): ptr Blob {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc slice*(this: var Blob; start: cdouble; `end`: cdouble; contentType: String): ptr Blob {.
    importcpp: "slice", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Blob): ptr Blob {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Blob; a2: ptr Blob) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructBlob*(): Blob {.constructor, importcpp: "client::Blob(@)",
                              header: "cheerp/clientlib.h".}

proc constructBlob*(blobParts: ptr Array): Blob {.constructor,
    importcpp: "client::Blob(@)", header: "cheerp/clientlib.h".}

proc constructBlob*(blobParts: ptr Array; options: ptr BlobPropertyBag): Blob {.
    constructor, importcpp: "client::Blob(@)", header: "cheerp/clientlib.h".}

proc get_endings*(this: var BlobPropertyBag): ptr String {.
    importcpp: "get_endings", header: "cheerp/clientlib.h".}

proc set_endings*(this: var BlobPropertyBag; a2: String) {.
    importcpp: "set_endings", header: "cheerp/clientlib.h".}

proc get_type*(this: var BlobPropertyBag): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var BlobPropertyBag; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_bodyUsed*(this: var Body): bool {.importcpp: "get_bodyUsed",
    header: "cheerp/clientlib.h".}

proc arrayBuffer*(this: var Body): ptr Promise {.importcpp: "arrayBuffer",
    header: "cheerp/clientlib.h".}

proc blob*(this: var Body): ptr Promise {.importcpp: "blob",
    header: "cheerp/clientlib.h".}

proc formData*(this: var Body): ptr Promise {.importcpp: "formData",
    header: "cheerp/clientlib.h".}

proc json*(this: var Body): ptr Promise {.importcpp: "json",
    header: "cheerp/clientlib.h".}

proc text*(this: var Body): ptr Promise {.importcpp: "text",
    header: "cheerp/clientlib.h".}

proc get_name*(this: var BroadcastChannel): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var BroadcastChannel): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var BroadcastChannel; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc get_onmessageerror*(this: var BroadcastChannel): ptr EventListener {.
    importcpp: "get_onmessageerror", header: "cheerp/clientlib.h".}

proc set_onmessageerror*(this: var BroadcastChannel; a2: ptr EventListener) {.
    importcpp: "set_onmessageerror", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var BroadcastChannel; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var BroadcastChannel; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var BroadcastChannel; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var BroadcastChannel; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var BroadcastChannel; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc close*(this: var BroadcastChannel) {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var BroadcastChannel; message: ptr Object) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var BroadcastChannel; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var BroadcastChannel; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var BroadcastChannel; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var BroadcastChannel; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var BroadcastChannel; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var BroadcastChannel): ptr BroadcastChannel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var BroadcastChannel; a2: ptr BroadcastChannel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructBroadcastChannel*(name: String): BroadcastChannel {.constructor,
    importcpp: "client::BroadcastChannel(@)", header: "cheerp/clientlib.h".}

proc get_message*(this: var BroadcastChannelEventMap): ptr MessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var BroadcastChannelEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_messageerror*(this: var BroadcastChannelEventMap): ptr MessageEvent {.
    importcpp: "get_messageerror", header: "cheerp/clientlib.h".}

proc set_messageerror*(this: var BroadcastChannelEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_messageerror", header: "cheerp/clientlib.h".}

proc get_highWaterMark*(this: var ByteLengthQueuingStrategy): cdouble {.
    importcpp: "get_highWaterMark", header: "cheerp/clientlib.h".}

proc set_highWaterMark*(this: var ByteLengthQueuingStrategy; a2: cdouble) {.
    importcpp: "set_highWaterMark", header: "cheerp/clientlib.h".}

proc size*(this: var ByteLengthQueuingStrategy): cdouble {.importcpp: "size",
    header: "cheerp/clientlib.h".}

proc size*(this: var ByteLengthQueuingStrategy; chunk: ptr Object): cdouble {.
    importcpp: "size", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ByteLengthQueuingStrategy): ptr ByteLengthQueuingStrategy {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ByteLengthQueuingStrategy;
                    a2: ptr ByteLengthQueuingStrategy) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructByteLengthQueuingStrategy*(strategy: ptr QueuingStrategy): ByteLengthQueuingStrategy {.
    constructor, importcpp: "client::ByteLengthQueuingStrategy(@)",
    header: "cheerp/clientlib.h".}

proc remove*(this: var ChildNode) {.importcpp: "remove",
                                    header: "cheerp/clientlib.h".}

proc get_data*(this: var CharacterData): ptr String {.importcpp: "get_data",
    header: "cheerp/clientlib.h".}

proc set_data*(this: var CharacterData; a2: String) {.importcpp: "set_data",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var CharacterData): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc appendData*(this: var CharacterData; arg: String) {.
    importcpp: "appendData", header: "cheerp/clientlib.h".}

proc deleteData*(this: var CharacterData; offset: cdouble; count: cdouble) {.
    importcpp: "deleteData", header: "cheerp/clientlib.h".}

proc insertData*(this: var CharacterData; offset: cdouble; arg: String) {.
    importcpp: "insertData", header: "cheerp/clientlib.h".}

proc replaceData*(this: var CharacterData; offset: cdouble; count: cdouble;
                  arg: String) {.importcpp: "replaceData",
                                 header: "cheerp/clientlib.h".}

proc substringData*(this: var CharacterData; offset: cdouble; count: cdouble): ptr String {.
    importcpp: "substringData", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CharacterData): ptr CharacterData {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CharacterData; a2: ptr CharacterData) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCharacterData*(): CharacterData {.constructor,
    importcpp: "client::CharacterData(@)", header: "cheerp/clientlib.h".}

proc get_assignedSlot*(this: var Text): ptr HTMLSlotElement {.
    importcpp: "get_assignedSlot", header: "cheerp/clientlib.h".}

proc get_wholeText*(this: var Text): ptr String {.importcpp: "get_wholeText",
    header: "cheerp/clientlib.h".}

proc splitText*(this: var Text; offset: cdouble): ptr Text {.
    importcpp: "splitText", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Text): ptr Text {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Text; a2: ptr Text) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructText*(): Text {.constructor, importcpp: "client::Text(@)",
                              header: "cheerp/clientlib.h".}

proc constructText*(data: String): Text {.constructor,
    importcpp: "client::Text(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CDATASection): ptr CDATASection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CDATASection; a2: ptr CDATASection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCDATASection*(): CDATASection {.constructor,
    importcpp: "client::CDATASection(@)", header: "cheerp/clientlib.h".}

proc escape*(this: var CSS; value: String): ptr String {.importcpp: "escape",
    header: "cheerp/clientlib.h".}

proc supports*(this: var CSS; property: String): bool {.importcpp: "supports",
    header: "cheerp/clientlib.h".}

proc supports*(this: var CSS; property: String; value: String): bool {.
    importcpp: "supports", header: "cheerp/clientlib.h".}

proc get_cssText*(this: var CSSRule): ptr String {.importcpp: "get_cssText",
    header: "cheerp/clientlib.h".}

proc set_cssText*(this: var CSSRule; a2: String) {.importcpp: "set_cssText",
    header: "cheerp/clientlib.h".}

proc get_parentRule*(this: var CSSRule): ptr CSSRule {.
    importcpp: "get_parentRule", header: "cheerp/clientlib.h".}

proc get_parentStyleSheet*(this: var CSSRule): ptr CSSStyleSheet {.
    importcpp: "get_parentStyleSheet", header: "cheerp/clientlib.h".}

proc get_type*(this: var CSSRule): cdouble {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSRule): ptr CSSRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSRule; a2: ptr CSSRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSRule*(): CSSRule {.constructor,
                                    importcpp: "client::CSSRule(@)",
                                    header: "cheerp/clientlib.h".}

proc get_CHARSET_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_CHARSET_RULE", header: "cheerp/clientlib.h".}

proc get_FONT_FACE_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_FONT_FACE_RULE", header: "cheerp/clientlib.h".}

proc get_IMPORT_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_IMPORT_RULE", header: "cheerp/clientlib.h".}

proc get_KEYFRAMES_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_KEYFRAMES_RULE", header: "cheerp/clientlib.h".}

proc get_KEYFRAME_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_KEYFRAME_RULE", header: "cheerp/clientlib.h".}

proc get_MEDIA_RULE*(this: var CSSRule): cdouble {.importcpp: "get_MEDIA_RULE",
    header: "cheerp/clientlib.h".}

proc get_NAMESPACE_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_NAMESPACE_RULE", header: "cheerp/clientlib.h".}

proc get_PAGE_RULE*(this: var CSSRule): cdouble {.importcpp: "get_PAGE_RULE",
    header: "cheerp/clientlib.h".}

proc get_STYLE_RULE*(this: var CSSRule): cdouble {.importcpp: "get_STYLE_RULE",
    header: "cheerp/clientlib.h".}

proc get_SUPPORTS_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_SUPPORTS_RULE", header: "cheerp/clientlib.h".}

proc get_UNKNOWN_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_UNKNOWN_RULE", header: "cheerp/clientlib.h".}

proc get_VIEWPORT_RULE*(this: var CSSRule): cdouble {.
    importcpp: "get_VIEWPORT_RULE", header: "cheerp/clientlib.h".}

proc get_cssRules*(this: var CSSGroupingRule): ptr CSSRuleList {.
    importcpp: "get_cssRules", header: "cheerp/clientlib.h".}

proc deleteRule*(this: var CSSGroupingRule; index: cdouble) {.
    importcpp: "deleteRule", header: "cheerp/clientlib.h".}

proc insertRule*(this: var CSSGroupingRule; rule: String; index: cdouble): cdouble {.
    importcpp: "insertRule", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSGroupingRule): ptr CSSGroupingRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSGroupingRule; a2: ptr CSSGroupingRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSGroupingRule*(): CSSGroupingRule {.constructor,
    importcpp: "client::CSSGroupingRule(@)", header: "cheerp/clientlib.h".}

proc get_conditionText*(this: var CSSConditionRule): ptr String {.
    importcpp: "get_conditionText", header: "cheerp/clientlib.h".}

proc set_conditionText*(this: var CSSConditionRule; a2: String) {.
    importcpp: "set_conditionText", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSConditionRule): ptr CSSConditionRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSConditionRule; a2: ptr CSSConditionRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSConditionRule*(): CSSConditionRule {.constructor,
    importcpp: "client::CSSConditionRule(@)", header: "cheerp/clientlib.h".}

proc get_style*(this: var CSSFontFaceRule): ptr CSSStyleDeclaration {.
    importcpp: "get_style", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSFontFaceRule): ptr CSSFontFaceRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSFontFaceRule; a2: ptr CSSFontFaceRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSFontFaceRule*(): CSSFontFaceRule {.constructor,
    importcpp: "client::CSSFontFaceRule(@)", header: "cheerp/clientlib.h".}

proc get_href*(this: var CSSImportRule): ptr String {.importcpp: "get_href",
    header: "cheerp/clientlib.h".}

proc get_media*(this: var CSSImportRule): ptr MediaList {.
    importcpp: "get_media", header: "cheerp/clientlib.h".}

proc get_styleSheet*(this: var CSSImportRule): ptr CSSStyleSheet {.
    importcpp: "get_styleSheet", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSImportRule): ptr CSSImportRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSImportRule; a2: ptr CSSImportRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSImportRule*(): CSSImportRule {.constructor,
    importcpp: "client::CSSImportRule(@)", header: "cheerp/clientlib.h".}

proc get_keyText*(this: var CSSKeyframeRule): ptr String {.
    importcpp: "get_keyText", header: "cheerp/clientlib.h".}

proc set_keyText*(this: var CSSKeyframeRule; a2: String) {.
    importcpp: "set_keyText", header: "cheerp/clientlib.h".}

proc get_style*(this: var CSSKeyframeRule): ptr CSSStyleDeclaration {.
    importcpp: "get_style", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSKeyframeRule): ptr CSSKeyframeRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSKeyframeRule; a2: ptr CSSKeyframeRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSKeyframeRule*(): CSSKeyframeRule {.constructor,
    importcpp: "client::CSSKeyframeRule(@)", header: "cheerp/clientlib.h".}

proc get_cssRules*(this: var CSSKeyframesRule): ptr CSSRuleList {.
    importcpp: "get_cssRules", header: "cheerp/clientlib.h".}

proc get_name*(this: var CSSKeyframesRule): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var CSSKeyframesRule; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc appendRule*(this: var CSSKeyframesRule; rule: String) {.
    importcpp: "appendRule", header: "cheerp/clientlib.h".}

proc deleteRule*(this: var CSSKeyframesRule; rule: String) {.
    importcpp: "deleteRule", header: "cheerp/clientlib.h".}

proc findRule*(this: var CSSKeyframesRule; rule: String): ptr CSSKeyframeRule {.
    importcpp: "findRule", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSKeyframesRule): ptr CSSKeyframesRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSKeyframesRule; a2: ptr CSSKeyframesRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSKeyframesRule*(): CSSKeyframesRule {.constructor,
    importcpp: "client::CSSKeyframesRule(@)", header: "cheerp/clientlib.h".}

proc get_media*(this: var CSSMediaRule): ptr MediaList {.importcpp: "get_media",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSMediaRule): ptr CSSMediaRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSMediaRule; a2: ptr CSSMediaRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSMediaRule*(): CSSMediaRule {.constructor,
    importcpp: "client::CSSMediaRule(@)", header: "cheerp/clientlib.h".}

proc get_namespaceURI*(this: var CSSNamespaceRule): ptr String {.
    importcpp: "get_namespaceURI", header: "cheerp/clientlib.h".}

proc get_prefix*(this: var CSSNamespaceRule): ptr String {.
    importcpp: "get_prefix", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSNamespaceRule): ptr CSSNamespaceRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSNamespaceRule; a2: ptr CSSNamespaceRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSNamespaceRule*(): CSSNamespaceRule {.constructor,
    importcpp: "client::CSSNamespaceRule(@)", header: "cheerp/clientlib.h".}

proc get_pseudoClass*(this: var CSSPageRule): ptr String {.
    importcpp: "get_pseudoClass", header: "cheerp/clientlib.h".}

proc get_selector*(this: var CSSPageRule): ptr String {.
    importcpp: "get_selector", header: "cheerp/clientlib.h".}

proc get_selectorText*(this: var CSSPageRule): ptr String {.
    importcpp: "get_selectorText", header: "cheerp/clientlib.h".}

proc set_selectorText*(this: var CSSPageRule; a2: String) {.
    importcpp: "set_selectorText", header: "cheerp/clientlib.h".}

proc get_style*(this: var CSSPageRule): ptr CSSStyleDeclaration {.
    importcpp: "get_style", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSPageRule): ptr CSSPageRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSPageRule; a2: ptr CSSPageRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSPageRule*(): CSSPageRule {.constructor,
    importcpp: "client::CSSPageRule(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var CSSRuleList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var CSSRuleList; index: cdouble): ptr CSSRule {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var CSSRuleList; index: cint): ptr CSSRule {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: CSSRuleList; index: cint): ptr CSSRule {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSRuleList): ptr CSSRuleList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSRuleList; a2: ptr CSSRuleList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSRuleList*(): CSSRuleList {.constructor,
    importcpp: "client::CSSRuleList(@)", header: "cheerp/clientlib.h".}

proc get_alignContent*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_alignContent", header: "cheerp/clientlib.h".}

proc set_alignContent*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_alignContent", header: "cheerp/clientlib.h".}

proc get_alignItems*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_alignItems", header: "cheerp/clientlib.h".}

proc set_alignItems*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_alignItems", header: "cheerp/clientlib.h".}

proc get_alignSelf*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_alignSelf", header: "cheerp/clientlib.h".}

proc set_alignSelf*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_alignSelf", header: "cheerp/clientlib.h".}

proc get_alignmentBaseline*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_alignmentBaseline", header: "cheerp/clientlib.h".}

proc set_alignmentBaseline*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_alignmentBaseline", header: "cheerp/clientlib.h".}

proc get_animation*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animation", header: "cheerp/clientlib.h".}

proc set_animation*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animation", header: "cheerp/clientlib.h".}

proc get_animationDelay*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationDelay", header: "cheerp/clientlib.h".}

proc set_animationDelay*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationDelay", header: "cheerp/clientlib.h".}

proc get_animationDirection*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationDirection", header: "cheerp/clientlib.h".}

proc set_animationDirection*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationDirection", header: "cheerp/clientlib.h".}

proc get_animationDuration*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationDuration", header: "cheerp/clientlib.h".}

proc set_animationDuration*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationDuration", header: "cheerp/clientlib.h".}

proc get_animationFillMode*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationFillMode", header: "cheerp/clientlib.h".}

proc set_animationFillMode*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationFillMode", header: "cheerp/clientlib.h".}

proc get_animationIterationCount*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationIterationCount", header: "cheerp/clientlib.h".}

proc set_animationIterationCount*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationIterationCount", header: "cheerp/clientlib.h".}

proc get_animationName*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationName", header: "cheerp/clientlib.h".}

proc set_animationName*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationName", header: "cheerp/clientlib.h".}

proc get_animationPlayState*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationPlayState", header: "cheerp/clientlib.h".}

proc set_animationPlayState*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationPlayState", header: "cheerp/clientlib.h".}

proc get_animationTimingFunction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_animationTimingFunction", header: "cheerp/clientlib.h".}

proc set_animationTimingFunction*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_animationTimingFunction", header: "cheerp/clientlib.h".}

proc get_backfaceVisibility*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backfaceVisibility", header: "cheerp/clientlib.h".}

proc set_backfaceVisibility*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backfaceVisibility", header: "cheerp/clientlib.h".}

proc get_background*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_background", header: "cheerp/clientlib.h".}

proc set_background*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_background", header: "cheerp/clientlib.h".}

proc get_backgroundAttachment*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundAttachment", header: "cheerp/clientlib.h".}

proc set_backgroundAttachment*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundAttachment", header: "cheerp/clientlib.h".}

proc get_backgroundClip*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundClip", header: "cheerp/clientlib.h".}

proc set_backgroundClip*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundClip", header: "cheerp/clientlib.h".}

proc get_backgroundColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundColor", header: "cheerp/clientlib.h".}

proc set_backgroundColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundColor", header: "cheerp/clientlib.h".}

proc get_backgroundImage*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundImage", header: "cheerp/clientlib.h".}

proc set_backgroundImage*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundImage", header: "cheerp/clientlib.h".}

proc get_backgroundOrigin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundOrigin", header: "cheerp/clientlib.h".}

proc set_backgroundOrigin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundOrigin", header: "cheerp/clientlib.h".}

proc get_backgroundPosition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundPosition", header: "cheerp/clientlib.h".}

proc set_backgroundPosition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundPosition", header: "cheerp/clientlib.h".}

proc get_backgroundPositionX*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundPositionX", header: "cheerp/clientlib.h".}

proc set_backgroundPositionX*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundPositionX", header: "cheerp/clientlib.h".}

proc get_backgroundPositionY*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundPositionY", header: "cheerp/clientlib.h".}

proc set_backgroundPositionY*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundPositionY", header: "cheerp/clientlib.h".}

proc get_backgroundRepeat*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundRepeat", header: "cheerp/clientlib.h".}

proc set_backgroundRepeat*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundRepeat", header: "cheerp/clientlib.h".}

proc get_backgroundSize*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_backgroundSize", header: "cheerp/clientlib.h".}

proc set_backgroundSize*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_backgroundSize", header: "cheerp/clientlib.h".}

proc get_baselineShift*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_baselineShift", header: "cheerp/clientlib.h".}

proc set_baselineShift*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_baselineShift", header: "cheerp/clientlib.h".}

proc get_border*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_border", header: "cheerp/clientlib.h".}

proc set_border*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_border", header: "cheerp/clientlib.h".}

proc get_borderBottom*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderBottom", header: "cheerp/clientlib.h".}

proc set_borderBottom*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderBottom", header: "cheerp/clientlib.h".}

proc get_borderBottomColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderBottomColor", header: "cheerp/clientlib.h".}

proc set_borderBottomColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderBottomColor", header: "cheerp/clientlib.h".}

proc get_borderBottomLeftRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderBottomLeftRadius", header: "cheerp/clientlib.h".}

proc set_borderBottomLeftRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderBottomLeftRadius", header: "cheerp/clientlib.h".}

proc get_borderBottomRightRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderBottomRightRadius", header: "cheerp/clientlib.h".}

proc set_borderBottomRightRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderBottomRightRadius", header: "cheerp/clientlib.h".}

proc get_borderBottomStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderBottomStyle", header: "cheerp/clientlib.h".}

proc set_borderBottomStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderBottomStyle", header: "cheerp/clientlib.h".}

proc get_borderBottomWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderBottomWidth", header: "cheerp/clientlib.h".}

proc set_borderBottomWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderBottomWidth", header: "cheerp/clientlib.h".}

proc get_borderCollapse*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderCollapse", header: "cheerp/clientlib.h".}

proc set_borderCollapse*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderCollapse", header: "cheerp/clientlib.h".}

proc get_borderColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderColor", header: "cheerp/clientlib.h".}

proc set_borderColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderColor", header: "cheerp/clientlib.h".}

proc get_borderImage*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderImage", header: "cheerp/clientlib.h".}

proc set_borderImage*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderImage", header: "cheerp/clientlib.h".}

proc get_borderImageOutset*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderImageOutset", header: "cheerp/clientlib.h".}

proc set_borderImageOutset*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderImageOutset", header: "cheerp/clientlib.h".}

proc get_borderImageRepeat*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderImageRepeat", header: "cheerp/clientlib.h".}

proc set_borderImageRepeat*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderImageRepeat", header: "cheerp/clientlib.h".}

proc get_borderImageSlice*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderImageSlice", header: "cheerp/clientlib.h".}

proc set_borderImageSlice*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderImageSlice", header: "cheerp/clientlib.h".}

proc get_borderImageSource*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderImageSource", header: "cheerp/clientlib.h".}

proc set_borderImageSource*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderImageSource", header: "cheerp/clientlib.h".}

proc get_borderImageWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderImageWidth", header: "cheerp/clientlib.h".}

proc set_borderImageWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderImageWidth", header: "cheerp/clientlib.h".}

proc get_borderLeft*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderLeft", header: "cheerp/clientlib.h".}

proc set_borderLeft*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderLeft", header: "cheerp/clientlib.h".}

proc get_borderLeftColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderLeftColor", header: "cheerp/clientlib.h".}

proc set_borderLeftColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderLeftColor", header: "cheerp/clientlib.h".}

proc get_borderLeftStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderLeftStyle", header: "cheerp/clientlib.h".}

proc set_borderLeftStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderLeftStyle", header: "cheerp/clientlib.h".}

proc get_borderLeftWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderLeftWidth", header: "cheerp/clientlib.h".}

proc set_borderLeftWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderLeftWidth", header: "cheerp/clientlib.h".}

proc get_borderRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderRadius", header: "cheerp/clientlib.h".}

proc set_borderRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderRadius", header: "cheerp/clientlib.h".}

proc get_borderRight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderRight", header: "cheerp/clientlib.h".}

proc set_borderRight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderRight", header: "cheerp/clientlib.h".}

proc get_borderRightColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderRightColor", header: "cheerp/clientlib.h".}

proc set_borderRightColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderRightColor", header: "cheerp/clientlib.h".}

proc get_borderRightStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderRightStyle", header: "cheerp/clientlib.h".}

proc set_borderRightStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderRightStyle", header: "cheerp/clientlib.h".}

proc get_borderRightWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderRightWidth", header: "cheerp/clientlib.h".}

proc set_borderRightWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderRightWidth", header: "cheerp/clientlib.h".}

proc get_borderSpacing*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderSpacing", header: "cheerp/clientlib.h".}

proc set_borderSpacing*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderSpacing", header: "cheerp/clientlib.h".}

proc get_borderStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderStyle", header: "cheerp/clientlib.h".}

proc set_borderStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderStyle", header: "cheerp/clientlib.h".}

proc get_borderTop*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderTop", header: "cheerp/clientlib.h".}

proc set_borderTop*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderTop", header: "cheerp/clientlib.h".}

proc get_borderTopColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderTopColor", header: "cheerp/clientlib.h".}

proc set_borderTopColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderTopColor", header: "cheerp/clientlib.h".}

proc get_borderTopLeftRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderTopLeftRadius", header: "cheerp/clientlib.h".}

proc set_borderTopLeftRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderTopLeftRadius", header: "cheerp/clientlib.h".}

proc get_borderTopRightRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderTopRightRadius", header: "cheerp/clientlib.h".}

proc set_borderTopRightRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderTopRightRadius", header: "cheerp/clientlib.h".}

proc get_borderTopStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderTopStyle", header: "cheerp/clientlib.h".}

proc set_borderTopStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderTopStyle", header: "cheerp/clientlib.h".}

proc get_borderTopWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderTopWidth", header: "cheerp/clientlib.h".}

proc set_borderTopWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderTopWidth", header: "cheerp/clientlib.h".}

proc get_borderWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_borderWidth", header: "cheerp/clientlib.h".}

proc set_borderWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_borderWidth", header: "cheerp/clientlib.h".}

proc get_bottom*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_bottom", header: "cheerp/clientlib.h".}

proc set_bottom*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_bottom", header: "cheerp/clientlib.h".}

proc get_boxShadow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_boxShadow", header: "cheerp/clientlib.h".}

proc set_boxShadow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_boxShadow", header: "cheerp/clientlib.h".}

proc get_boxSizing*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_boxSizing", header: "cheerp/clientlib.h".}

proc set_boxSizing*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_boxSizing", header: "cheerp/clientlib.h".}

proc get_breakAfter*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_breakAfter", header: "cheerp/clientlib.h".}

proc set_breakAfter*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_breakAfter", header: "cheerp/clientlib.h".}

proc get_breakBefore*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_breakBefore", header: "cheerp/clientlib.h".}

proc set_breakBefore*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_breakBefore", header: "cheerp/clientlib.h".}

proc get_breakInside*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_breakInside", header: "cheerp/clientlib.h".}

proc set_breakInside*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_breakInside", header: "cheerp/clientlib.h".}

proc get_captionSide*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_captionSide", header: "cheerp/clientlib.h".}

proc set_captionSide*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_captionSide", header: "cheerp/clientlib.h".}

proc get_clear*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_clear", header: "cheerp/clientlib.h".}

proc set_clear*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_clear", header: "cheerp/clientlib.h".}

proc get_clip*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_clip", header: "cheerp/clientlib.h".}

proc set_clip*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_clip", header: "cheerp/clientlib.h".}

proc get_clipPath*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_clipPath", header: "cheerp/clientlib.h".}

proc set_clipPath*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_clipPath", header: "cheerp/clientlib.h".}

proc get_clipRule*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_clipRule", header: "cheerp/clientlib.h".}

proc set_clipRule*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_clipRule", header: "cheerp/clientlib.h".}

proc get_color*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_color", header: "cheerp/clientlib.h".}

proc set_color*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_color", header: "cheerp/clientlib.h".}

proc get_colorInterpolationFilters*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_colorInterpolationFilters", header: "cheerp/clientlib.h".}

proc set_colorInterpolationFilters*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_colorInterpolationFilters", header: "cheerp/clientlib.h".}

proc set_columnCount*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_columnCount", header: "cheerp/clientlib.h".}

proc get_columnFill*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_columnFill", header: "cheerp/clientlib.h".}

proc set_columnFill*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_columnFill", header: "cheerp/clientlib.h".}

proc set_columnGap*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_columnGap", header: "cheerp/clientlib.h".}

proc get_columnRule*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_columnRule", header: "cheerp/clientlib.h".}

proc set_columnRule*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_columnRule", header: "cheerp/clientlib.h".}

proc set_columnRuleColor*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_columnRuleColor", header: "cheerp/clientlib.h".}

proc get_columnRuleStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_columnRuleStyle", header: "cheerp/clientlib.h".}

proc set_columnRuleStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_columnRuleStyle", header: "cheerp/clientlib.h".}

proc set_columnRuleWidth*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_columnRuleWidth", header: "cheerp/clientlib.h".}

proc get_columnSpan*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_columnSpan", header: "cheerp/clientlib.h".}

proc set_columnSpan*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_columnSpan", header: "cheerp/clientlib.h".}

proc set_columnWidth*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_columnWidth", header: "cheerp/clientlib.h".}

proc get_columns*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_columns", header: "cheerp/clientlib.h".}

proc set_columns*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_columns", header: "cheerp/clientlib.h".}

proc get_content*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_content", header: "cheerp/clientlib.h".}

proc set_content*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_content", header: "cheerp/clientlib.h".}

proc get_counterIncrement*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_counterIncrement", header: "cheerp/clientlib.h".}

proc set_counterIncrement*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_counterIncrement", header: "cheerp/clientlib.h".}

proc get_counterReset*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_counterReset", header: "cheerp/clientlib.h".}

proc set_counterReset*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_counterReset", header: "cheerp/clientlib.h".}

proc get_cssFloat*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_cssFloat", header: "cheerp/clientlib.h".}

proc set_cssFloat*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_cssFloat", header: "cheerp/clientlib.h".}

proc get_cssText*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_cssText", header: "cheerp/clientlib.h".}

proc set_cssText*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_cssText", header: "cheerp/clientlib.h".}

proc get_cursor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_cursor", header: "cheerp/clientlib.h".}

proc set_cursor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_cursor", header: "cheerp/clientlib.h".}

proc get_direction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_direction", header: "cheerp/clientlib.h".}

proc set_direction*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_direction", header: "cheerp/clientlib.h".}

proc get_display*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_display", header: "cheerp/clientlib.h".}

proc set_display*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_display", header: "cheerp/clientlib.h".}

proc get_dominantBaseline*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_dominantBaseline", header: "cheerp/clientlib.h".}

proc set_dominantBaseline*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_dominantBaseline", header: "cheerp/clientlib.h".}

proc get_emptyCells*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_emptyCells", header: "cheerp/clientlib.h".}

proc set_emptyCells*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_emptyCells", header: "cheerp/clientlib.h".}

proc get_enableBackground*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_enableBackground", header: "cheerp/clientlib.h".}

proc set_enableBackground*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_enableBackground", header: "cheerp/clientlib.h".}

proc get_fill*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fill", header: "cheerp/clientlib.h".}

proc set_fill*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fill", header: "cheerp/clientlib.h".}

proc get_fillOpacity*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fillOpacity", header: "cheerp/clientlib.h".}

proc set_fillOpacity*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fillOpacity", header: "cheerp/clientlib.h".}

proc get_fillRule*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fillRule", header: "cheerp/clientlib.h".}

proc set_fillRule*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fillRule", header: "cheerp/clientlib.h".}

proc get_filter*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_filter", header: "cheerp/clientlib.h".}

proc set_filter*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_filter", header: "cheerp/clientlib.h".}

proc get_flex*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flex", header: "cheerp/clientlib.h".}

proc set_flex*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flex", header: "cheerp/clientlib.h".}

proc get_flexBasis*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flexBasis", header: "cheerp/clientlib.h".}

proc set_flexBasis*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flexBasis", header: "cheerp/clientlib.h".}

proc get_flexDirection*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flexDirection", header: "cheerp/clientlib.h".}

proc set_flexDirection*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flexDirection", header: "cheerp/clientlib.h".}

proc get_flexFlow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flexFlow", header: "cheerp/clientlib.h".}

proc set_flexFlow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flexFlow", header: "cheerp/clientlib.h".}

proc get_flexGrow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flexGrow", header: "cheerp/clientlib.h".}

proc set_flexGrow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flexGrow", header: "cheerp/clientlib.h".}

proc get_flexShrink*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flexShrink", header: "cheerp/clientlib.h".}

proc set_flexShrink*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flexShrink", header: "cheerp/clientlib.h".}

proc get_flexWrap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_flexWrap", header: "cheerp/clientlib.h".}

proc set_flexWrap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_flexWrap", header: "cheerp/clientlib.h".}

proc get_floodColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_floodColor", header: "cheerp/clientlib.h".}

proc set_floodColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_floodColor", header: "cheerp/clientlib.h".}

proc get_floodOpacity*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_floodOpacity", header: "cheerp/clientlib.h".}

proc set_floodOpacity*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_floodOpacity", header: "cheerp/clientlib.h".}

proc get_font*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_font", header: "cheerp/clientlib.h".}

proc set_font*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_font", header: "cheerp/clientlib.h".}

proc get_fontFamily*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontFamily", header: "cheerp/clientlib.h".}

proc set_fontFamily*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontFamily", header: "cheerp/clientlib.h".}

proc get_fontFeatureSettings*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontFeatureSettings", header: "cheerp/clientlib.h".}

proc set_fontFeatureSettings*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontFeatureSettings", header: "cheerp/clientlib.h".}

proc get_fontSize*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontSize", header: "cheerp/clientlib.h".}

proc set_fontSize*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontSize", header: "cheerp/clientlib.h".}

proc get_fontSizeAdjust*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontSizeAdjust", header: "cheerp/clientlib.h".}

proc set_fontSizeAdjust*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontSizeAdjust", header: "cheerp/clientlib.h".}

proc get_fontStretch*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontStretch", header: "cheerp/clientlib.h".}

proc set_fontStretch*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontStretch", header: "cheerp/clientlib.h".}

proc get_fontStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontStyle", header: "cheerp/clientlib.h".}

proc set_fontStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontStyle", header: "cheerp/clientlib.h".}

proc get_fontVariant*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontVariant", header: "cheerp/clientlib.h".}

proc set_fontVariant*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontVariant", header: "cheerp/clientlib.h".}

proc get_fontWeight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_fontWeight", header: "cheerp/clientlib.h".}

proc set_fontWeight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_fontWeight", header: "cheerp/clientlib.h".}

proc get_gap*(this: var CSSStyleDeclaration): ptr String {.importcpp: "get_gap",
    header: "cheerp/clientlib.h".}

proc set_gap*(this: var CSSStyleDeclaration; a2: String) {.importcpp: "set_gap",
    header: "cheerp/clientlib.h".}

proc get_glyphOrientationHorizontal*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_glyphOrientationHorizontal", header: "cheerp/clientlib.h".}

proc set_glyphOrientationHorizontal*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_glyphOrientationHorizontal", header: "cheerp/clientlib.h".}

proc get_glyphOrientationVertical*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_glyphOrientationVertical", header: "cheerp/clientlib.h".}

proc set_glyphOrientationVertical*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_glyphOrientationVertical", header: "cheerp/clientlib.h".}

proc get_grid*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_grid", header: "cheerp/clientlib.h".}

proc set_grid*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_grid", header: "cheerp/clientlib.h".}

proc get_gridArea*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridArea", header: "cheerp/clientlib.h".}

proc set_gridArea*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridArea", header: "cheerp/clientlib.h".}

proc get_gridAutoColumns*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridAutoColumns", header: "cheerp/clientlib.h".}

proc set_gridAutoColumns*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridAutoColumns", header: "cheerp/clientlib.h".}

proc get_gridAutoFlow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridAutoFlow", header: "cheerp/clientlib.h".}

proc set_gridAutoFlow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridAutoFlow", header: "cheerp/clientlib.h".}

proc get_gridAutoRows*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridAutoRows", header: "cheerp/clientlib.h".}

proc set_gridAutoRows*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridAutoRows", header: "cheerp/clientlib.h".}

proc get_gridColumn*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridColumn", header: "cheerp/clientlib.h".}

proc set_gridColumn*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridColumn", header: "cheerp/clientlib.h".}

proc get_gridColumnEnd*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridColumnEnd", header: "cheerp/clientlib.h".}

proc set_gridColumnEnd*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridColumnEnd", header: "cheerp/clientlib.h".}

proc get_gridColumnGap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridColumnGap", header: "cheerp/clientlib.h".}

proc set_gridColumnGap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridColumnGap", header: "cheerp/clientlib.h".}

proc get_gridColumnStart*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridColumnStart", header: "cheerp/clientlib.h".}

proc set_gridColumnStart*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridColumnStart", header: "cheerp/clientlib.h".}

proc get_gridGap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridGap", header: "cheerp/clientlib.h".}

proc set_gridGap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridGap", header: "cheerp/clientlib.h".}

proc get_gridRow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridRow", header: "cheerp/clientlib.h".}

proc set_gridRow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridRow", header: "cheerp/clientlib.h".}

proc get_gridRowEnd*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridRowEnd", header: "cheerp/clientlib.h".}

proc set_gridRowEnd*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridRowEnd", header: "cheerp/clientlib.h".}

proc get_gridRowGap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridRowGap", header: "cheerp/clientlib.h".}

proc set_gridRowGap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridRowGap", header: "cheerp/clientlib.h".}

proc get_gridRowStart*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridRowStart", header: "cheerp/clientlib.h".}

proc set_gridRowStart*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridRowStart", header: "cheerp/clientlib.h".}

proc get_gridTemplate*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridTemplate", header: "cheerp/clientlib.h".}

proc set_gridTemplate*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridTemplate", header: "cheerp/clientlib.h".}

proc get_gridTemplateAreas*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridTemplateAreas", header: "cheerp/clientlib.h".}

proc set_gridTemplateAreas*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridTemplateAreas", header: "cheerp/clientlib.h".}

proc get_gridTemplateColumns*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridTemplateColumns", header: "cheerp/clientlib.h".}

proc set_gridTemplateColumns*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridTemplateColumns", header: "cheerp/clientlib.h".}

proc get_gridTemplateRows*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_gridTemplateRows", header: "cheerp/clientlib.h".}

proc set_gridTemplateRows*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_gridTemplateRows", header: "cheerp/clientlib.h".}

proc get_height*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_imeMode*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_imeMode", header: "cheerp/clientlib.h".}

proc set_imeMode*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_imeMode", header: "cheerp/clientlib.h".}

proc get_justifyContent*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_justifyContent", header: "cheerp/clientlib.h".}

proc set_justifyContent*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_justifyContent", header: "cheerp/clientlib.h".}

proc get_justifyItems*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_justifyItems", header: "cheerp/clientlib.h".}

proc set_justifyItems*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_justifyItems", header: "cheerp/clientlib.h".}

proc get_justifySelf*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_justifySelf", header: "cheerp/clientlib.h".}

proc set_justifySelf*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_justifySelf", header: "cheerp/clientlib.h".}

proc get_kerning*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_kerning", header: "cheerp/clientlib.h".}

proc set_kerning*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_kerning", header: "cheerp/clientlib.h".}

proc get_layoutGrid*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_layoutGrid", header: "cheerp/clientlib.h".}

proc set_layoutGrid*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_layoutGrid", header: "cheerp/clientlib.h".}

proc get_layoutGridChar*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_layoutGridChar", header: "cheerp/clientlib.h".}

proc set_layoutGridChar*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_layoutGridChar", header: "cheerp/clientlib.h".}

proc get_layoutGridLine*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_layoutGridLine", header: "cheerp/clientlib.h".}

proc set_layoutGridLine*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_layoutGridLine", header: "cheerp/clientlib.h".}

proc get_layoutGridMode*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_layoutGridMode", header: "cheerp/clientlib.h".}

proc set_layoutGridMode*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_layoutGridMode", header: "cheerp/clientlib.h".}

proc get_layoutGridType*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_layoutGridType", header: "cheerp/clientlib.h".}

proc set_layoutGridType*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_layoutGridType", header: "cheerp/clientlib.h".}

proc get_left*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_left", header: "cheerp/clientlib.h".}

proc set_left*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_left", header: "cheerp/clientlib.h".}

proc get_length*(this: var CSSStyleDeclaration): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc get_letterSpacing*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_letterSpacing", header: "cheerp/clientlib.h".}

proc set_letterSpacing*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_letterSpacing", header: "cheerp/clientlib.h".}

proc get_lightingColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_lightingColor", header: "cheerp/clientlib.h".}

proc set_lightingColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_lightingColor", header: "cheerp/clientlib.h".}

proc get_lineBreak*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_lineBreak", header: "cheerp/clientlib.h".}

proc set_lineBreak*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_lineBreak", header: "cheerp/clientlib.h".}

proc get_lineHeight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_lineHeight", header: "cheerp/clientlib.h".}

proc set_lineHeight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_lineHeight", header: "cheerp/clientlib.h".}

proc get_listStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_listStyle", header: "cheerp/clientlib.h".}

proc set_listStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_listStyle", header: "cheerp/clientlib.h".}

proc get_listStyleImage*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_listStyleImage", header: "cheerp/clientlib.h".}

proc set_listStyleImage*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_listStyleImage", header: "cheerp/clientlib.h".}

proc get_listStylePosition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_listStylePosition", header: "cheerp/clientlib.h".}

proc set_listStylePosition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_listStylePosition", header: "cheerp/clientlib.h".}

proc get_listStyleType*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_listStyleType", header: "cheerp/clientlib.h".}

proc set_listStyleType*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_listStyleType", header: "cheerp/clientlib.h".}

proc get_margin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_margin", header: "cheerp/clientlib.h".}

proc set_margin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_margin", header: "cheerp/clientlib.h".}

proc get_marginBottom*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_marginBottom", header: "cheerp/clientlib.h".}

proc set_marginBottom*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_marginBottom", header: "cheerp/clientlib.h".}

proc get_marginLeft*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_marginLeft", header: "cheerp/clientlib.h".}

proc set_marginLeft*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_marginLeft", header: "cheerp/clientlib.h".}

proc get_marginRight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_marginRight", header: "cheerp/clientlib.h".}

proc set_marginRight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_marginRight", header: "cheerp/clientlib.h".}

proc get_marginTop*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_marginTop", header: "cheerp/clientlib.h".}

proc set_marginTop*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_marginTop", header: "cheerp/clientlib.h".}

proc get_marker*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_marker", header: "cheerp/clientlib.h".}

proc set_marker*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_marker", header: "cheerp/clientlib.h".}

proc get_markerEnd*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_markerEnd", header: "cheerp/clientlib.h".}

proc set_markerEnd*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_markerEnd", header: "cheerp/clientlib.h".}

proc get_markerMid*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_markerMid", header: "cheerp/clientlib.h".}

proc set_markerMid*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_markerMid", header: "cheerp/clientlib.h".}

proc get_markerStart*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_markerStart", header: "cheerp/clientlib.h".}

proc set_markerStart*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_markerStart", header: "cheerp/clientlib.h".}

proc get_mask*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_mask", header: "cheerp/clientlib.h".}

proc set_mask*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_mask", header: "cheerp/clientlib.h".}

proc get_maskImage*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_maskImage", header: "cheerp/clientlib.h".}

proc set_maskImage*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_maskImage", header: "cheerp/clientlib.h".}

proc get_maxHeight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_maxHeight", header: "cheerp/clientlib.h".}

proc set_maxHeight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_maxHeight", header: "cheerp/clientlib.h".}

proc get_maxWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_maxWidth", header: "cheerp/clientlib.h".}

proc set_maxWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_maxWidth", header: "cheerp/clientlib.h".}

proc get_minHeight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_minHeight", header: "cheerp/clientlib.h".}

proc set_minHeight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_minHeight", header: "cheerp/clientlib.h".}

proc get_minWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_minWidth", header: "cheerp/clientlib.h".}

proc set_minWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_minWidth", header: "cheerp/clientlib.h".}

proc get_msContentZoomChaining*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msContentZoomChaining", header: "cheerp/clientlib.h".}

proc set_msContentZoomChaining*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msContentZoomChaining", header: "cheerp/clientlib.h".}

proc get_msContentZoomLimit*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msContentZoomLimit", header: "cheerp/clientlib.h".}

proc set_msContentZoomLimit*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msContentZoomLimit", header: "cheerp/clientlib.h".}

proc set_msContentZoomLimitMax*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msContentZoomLimitMax", header: "cheerp/clientlib.h".}

proc set_msContentZoomLimitMin*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msContentZoomLimitMin", header: "cheerp/clientlib.h".}

proc get_msContentZoomSnap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msContentZoomSnap", header: "cheerp/clientlib.h".}

proc set_msContentZoomSnap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msContentZoomSnap", header: "cheerp/clientlib.h".}

proc get_msContentZoomSnapPoints*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msContentZoomSnapPoints", header: "cheerp/clientlib.h".}

proc set_msContentZoomSnapPoints*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msContentZoomSnapPoints", header: "cheerp/clientlib.h".}

proc get_msContentZoomSnapType*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msContentZoomSnapType", header: "cheerp/clientlib.h".}

proc set_msContentZoomSnapType*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msContentZoomSnapType", header: "cheerp/clientlib.h".}

proc get_msContentZooming*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msContentZooming", header: "cheerp/clientlib.h".}

proc set_msContentZooming*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msContentZooming", header: "cheerp/clientlib.h".}

proc get_msFlowFrom*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msFlowFrom", header: "cheerp/clientlib.h".}

proc set_msFlowFrom*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msFlowFrom", header: "cheerp/clientlib.h".}

proc get_msFlowInto*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msFlowInto", header: "cheerp/clientlib.h".}

proc set_msFlowInto*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msFlowInto", header: "cheerp/clientlib.h".}

proc get_msFontFeatureSettings*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msFontFeatureSettings", header: "cheerp/clientlib.h".}

proc set_msFontFeatureSettings*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msFontFeatureSettings", header: "cheerp/clientlib.h".}

proc set_msGridColumn*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msGridColumn", header: "cheerp/clientlib.h".}

proc get_msGridColumnAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msGridColumnAlign", header: "cheerp/clientlib.h".}

proc set_msGridColumnAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msGridColumnAlign", header: "cheerp/clientlib.h".}

proc set_msGridColumnSpan*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msGridColumnSpan", header: "cheerp/clientlib.h".}

proc get_msGridColumns*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msGridColumns", header: "cheerp/clientlib.h".}

proc set_msGridColumns*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msGridColumns", header: "cheerp/clientlib.h".}

proc set_msGridRow*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msGridRow", header: "cheerp/clientlib.h".}

proc get_msGridRowAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msGridRowAlign", header: "cheerp/clientlib.h".}

proc set_msGridRowAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msGridRowAlign", header: "cheerp/clientlib.h".}

proc set_msGridRowSpan*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msGridRowSpan", header: "cheerp/clientlib.h".}

proc get_msGridRows*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msGridRows", header: "cheerp/clientlib.h".}

proc set_msGridRows*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msGridRows", header: "cheerp/clientlib.h".}

proc get_msHighContrastAdjust*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msHighContrastAdjust", header: "cheerp/clientlib.h".}

proc set_msHighContrastAdjust*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msHighContrastAdjust", header: "cheerp/clientlib.h".}

proc get_msHyphenateLimitChars*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msHyphenateLimitChars", header: "cheerp/clientlib.h".}

proc set_msHyphenateLimitChars*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msHyphenateLimitChars", header: "cheerp/clientlib.h".}

proc set_msHyphenateLimitLines*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msHyphenateLimitLines", header: "cheerp/clientlib.h".}

proc set_msHyphenateLimitZone*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msHyphenateLimitZone", header: "cheerp/clientlib.h".}

proc get_msHyphens*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msHyphens", header: "cheerp/clientlib.h".}

proc set_msHyphens*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msHyphens", header: "cheerp/clientlib.h".}

proc get_msImeAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msImeAlign", header: "cheerp/clientlib.h".}

proc set_msImeAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msImeAlign", header: "cheerp/clientlib.h".}

proc get_msOverflowStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msOverflowStyle", header: "cheerp/clientlib.h".}

proc set_msOverflowStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msOverflowStyle", header: "cheerp/clientlib.h".}

proc get_msScrollChaining*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollChaining", header: "cheerp/clientlib.h".}

proc set_msScrollChaining*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollChaining", header: "cheerp/clientlib.h".}

proc get_msScrollLimit*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollLimit", header: "cheerp/clientlib.h".}

proc set_msScrollLimit*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollLimit", header: "cheerp/clientlib.h".}

proc set_msScrollLimitXMax*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msScrollLimitXMax", header: "cheerp/clientlib.h".}

proc set_msScrollLimitXMin*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msScrollLimitXMin", header: "cheerp/clientlib.h".}

proc set_msScrollLimitYMax*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msScrollLimitYMax", header: "cheerp/clientlib.h".}

proc set_msScrollLimitYMin*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msScrollLimitYMin", header: "cheerp/clientlib.h".}

proc get_msScrollRails*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollRails", header: "cheerp/clientlib.h".}

proc set_msScrollRails*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollRails", header: "cheerp/clientlib.h".}

proc get_msScrollSnapPointsX*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollSnapPointsX", header: "cheerp/clientlib.h".}

proc set_msScrollSnapPointsX*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollSnapPointsX", header: "cheerp/clientlib.h".}

proc get_msScrollSnapPointsY*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollSnapPointsY", header: "cheerp/clientlib.h".}

proc set_msScrollSnapPointsY*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollSnapPointsY", header: "cheerp/clientlib.h".}

proc get_msScrollSnapType*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollSnapType", header: "cheerp/clientlib.h".}

proc set_msScrollSnapType*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollSnapType", header: "cheerp/clientlib.h".}

proc get_msScrollSnapX*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollSnapX", header: "cheerp/clientlib.h".}

proc set_msScrollSnapX*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollSnapX", header: "cheerp/clientlib.h".}

proc get_msScrollSnapY*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollSnapY", header: "cheerp/clientlib.h".}

proc set_msScrollSnapY*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollSnapY", header: "cheerp/clientlib.h".}

proc get_msScrollTranslation*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msScrollTranslation", header: "cheerp/clientlib.h".}

proc set_msScrollTranslation*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msScrollTranslation", header: "cheerp/clientlib.h".}

proc get_msTextCombineHorizontal*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msTextCombineHorizontal", header: "cheerp/clientlib.h".}

proc set_msTextCombineHorizontal*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msTextCombineHorizontal", header: "cheerp/clientlib.h".}

proc set_msTextSizeAdjust*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msTextSizeAdjust", header: "cheerp/clientlib.h".}

proc get_msTouchAction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msTouchAction", header: "cheerp/clientlib.h".}

proc set_msTouchAction*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msTouchAction", header: "cheerp/clientlib.h".}

proc get_msTouchSelect*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msTouchSelect", header: "cheerp/clientlib.h".}

proc set_msTouchSelect*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msTouchSelect", header: "cheerp/clientlib.h".}

proc get_msUserSelect*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msUserSelect", header: "cheerp/clientlib.h".}

proc set_msUserSelect*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msUserSelect", header: "cheerp/clientlib.h".}

proc get_msWrapFlow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msWrapFlow", header: "cheerp/clientlib.h".}

proc set_msWrapFlow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msWrapFlow", header: "cheerp/clientlib.h".}

proc set_msWrapMargin*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_msWrapMargin", header: "cheerp/clientlib.h".}

proc get_msWrapThrough*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_msWrapThrough", header: "cheerp/clientlib.h".}

proc set_msWrapThrough*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_msWrapThrough", header: "cheerp/clientlib.h".}

proc get_objectFit*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_objectFit", header: "cheerp/clientlib.h".}

proc set_objectFit*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_objectFit", header: "cheerp/clientlib.h".}

proc get_objectPosition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_objectPosition", header: "cheerp/clientlib.h".}

proc set_objectPosition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_objectPosition", header: "cheerp/clientlib.h".}

proc get_opacity*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_opacity", header: "cheerp/clientlib.h".}

proc set_opacity*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_opacity", header: "cheerp/clientlib.h".}

proc get_order*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_order", header: "cheerp/clientlib.h".}

proc set_order*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_order", header: "cheerp/clientlib.h".}

proc get_orphans*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_orphans", header: "cheerp/clientlib.h".}

proc set_orphans*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_orphans", header: "cheerp/clientlib.h".}

proc get_outline*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_outline", header: "cheerp/clientlib.h".}

proc set_outline*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_outline", header: "cheerp/clientlib.h".}

proc get_outlineColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_outlineColor", header: "cheerp/clientlib.h".}

proc set_outlineColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_outlineColor", header: "cheerp/clientlib.h".}

proc get_outlineOffset*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_outlineOffset", header: "cheerp/clientlib.h".}

proc set_outlineOffset*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_outlineOffset", header: "cheerp/clientlib.h".}

proc get_outlineStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_outlineStyle", header: "cheerp/clientlib.h".}

proc set_outlineStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_outlineStyle", header: "cheerp/clientlib.h".}

proc get_outlineWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_outlineWidth", header: "cheerp/clientlib.h".}

proc set_outlineWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_outlineWidth", header: "cheerp/clientlib.h".}

proc get_overflow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_overflow", header: "cheerp/clientlib.h".}

proc set_overflow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_overflow", header: "cheerp/clientlib.h".}

proc get_overflowX*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_overflowX", header: "cheerp/clientlib.h".}

proc set_overflowX*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_overflowX", header: "cheerp/clientlib.h".}

proc get_overflowY*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_overflowY", header: "cheerp/clientlib.h".}

proc set_overflowY*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_overflowY", header: "cheerp/clientlib.h".}

proc get_padding*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_padding", header: "cheerp/clientlib.h".}

proc set_padding*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_padding", header: "cheerp/clientlib.h".}

proc get_paddingBottom*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_paddingBottom", header: "cheerp/clientlib.h".}

proc set_paddingBottom*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_paddingBottom", header: "cheerp/clientlib.h".}

proc get_paddingLeft*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_paddingLeft", header: "cheerp/clientlib.h".}

proc set_paddingLeft*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_paddingLeft", header: "cheerp/clientlib.h".}

proc get_paddingRight*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_paddingRight", header: "cheerp/clientlib.h".}

proc set_paddingRight*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_paddingRight", header: "cheerp/clientlib.h".}

proc get_paddingTop*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_paddingTop", header: "cheerp/clientlib.h".}

proc set_paddingTop*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_paddingTop", header: "cheerp/clientlib.h".}

proc get_pageBreakAfter*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_pageBreakAfter", header: "cheerp/clientlib.h".}

proc set_pageBreakAfter*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_pageBreakAfter", header: "cheerp/clientlib.h".}

proc get_pageBreakBefore*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_pageBreakBefore", header: "cheerp/clientlib.h".}

proc set_pageBreakBefore*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_pageBreakBefore", header: "cheerp/clientlib.h".}

proc get_pageBreakInside*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_pageBreakInside", header: "cheerp/clientlib.h".}

proc set_pageBreakInside*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_pageBreakInside", header: "cheerp/clientlib.h".}

proc get_parentRule*(this: var CSSStyleDeclaration): ptr CSSRule {.
    importcpp: "get_parentRule", header: "cheerp/clientlib.h".}

proc get_penAction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_penAction", header: "cheerp/clientlib.h".}

proc set_penAction*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_penAction", header: "cheerp/clientlib.h".}

proc get_perspective*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_perspective", header: "cheerp/clientlib.h".}

proc set_perspective*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_perspective", header: "cheerp/clientlib.h".}

proc get_perspectiveOrigin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_perspectiveOrigin", header: "cheerp/clientlib.h".}

proc set_perspectiveOrigin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_perspectiveOrigin", header: "cheerp/clientlib.h".}

proc get_pointerEvents*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_pointerEvents", header: "cheerp/clientlib.h".}

proc set_pointerEvents*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_pointerEvents", header: "cheerp/clientlib.h".}

proc get_position*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_position", header: "cheerp/clientlib.h".}

proc set_position*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_position", header: "cheerp/clientlib.h".}

proc get_quotes*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_quotes", header: "cheerp/clientlib.h".}

proc set_quotes*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_quotes", header: "cheerp/clientlib.h".}

proc get_resize*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_resize", header: "cheerp/clientlib.h".}

proc set_resize*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_resize", header: "cheerp/clientlib.h".}

proc get_right*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_right", header: "cheerp/clientlib.h".}

proc set_right*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_right", header: "cheerp/clientlib.h".}

proc get_rotate*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_rotate", header: "cheerp/clientlib.h".}

proc set_rotate*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_rotate", header: "cheerp/clientlib.h".}

proc get_rowGap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_rowGap", header: "cheerp/clientlib.h".}

proc set_rowGap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_rowGap", header: "cheerp/clientlib.h".}

proc get_rubyAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_rubyAlign", header: "cheerp/clientlib.h".}

proc set_rubyAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_rubyAlign", header: "cheerp/clientlib.h".}

proc get_rubyOverhang*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_rubyOverhang", header: "cheerp/clientlib.h".}

proc set_rubyOverhang*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_rubyOverhang", header: "cheerp/clientlib.h".}

proc get_rubyPosition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_rubyPosition", header: "cheerp/clientlib.h".}

proc set_rubyPosition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_rubyPosition", header: "cheerp/clientlib.h".}

proc get_scale*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_scale", header: "cheerp/clientlib.h".}

proc set_scale*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_scale", header: "cheerp/clientlib.h".}

proc get_stopColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_stopColor", header: "cheerp/clientlib.h".}

proc set_stopColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_stopColor", header: "cheerp/clientlib.h".}

proc get_stopOpacity*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_stopOpacity", header: "cheerp/clientlib.h".}

proc set_stopOpacity*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_stopOpacity", header: "cheerp/clientlib.h".}

proc get_stroke*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_stroke", header: "cheerp/clientlib.h".}

proc set_stroke*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_stroke", header: "cheerp/clientlib.h".}

proc get_strokeDasharray*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeDasharray", header: "cheerp/clientlib.h".}

proc set_strokeDasharray*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeDasharray", header: "cheerp/clientlib.h".}

proc get_strokeDashoffset*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeDashoffset", header: "cheerp/clientlib.h".}

proc set_strokeDashoffset*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeDashoffset", header: "cheerp/clientlib.h".}

proc get_strokeLinecap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeLinecap", header: "cheerp/clientlib.h".}

proc set_strokeLinecap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeLinecap", header: "cheerp/clientlib.h".}

proc get_strokeLinejoin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeLinejoin", header: "cheerp/clientlib.h".}

proc set_strokeLinejoin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeLinejoin", header: "cheerp/clientlib.h".}

proc get_strokeMiterlimit*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeMiterlimit", header: "cheerp/clientlib.h".}

proc set_strokeMiterlimit*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeMiterlimit", header: "cheerp/clientlib.h".}

proc get_strokeOpacity*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeOpacity", header: "cheerp/clientlib.h".}

proc set_strokeOpacity*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeOpacity", header: "cheerp/clientlib.h".}

proc get_strokeWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_strokeWidth", header: "cheerp/clientlib.h".}

proc set_strokeWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_strokeWidth", header: "cheerp/clientlib.h".}

proc get_tableLayout*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_tableLayout", header: "cheerp/clientlib.h".}

proc set_tableLayout*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_tableLayout", header: "cheerp/clientlib.h".}

proc get_textAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textAlign", header: "cheerp/clientlib.h".}

proc set_textAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textAlign", header: "cheerp/clientlib.h".}

proc get_textAlignLast*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textAlignLast", header: "cheerp/clientlib.h".}

proc set_textAlignLast*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textAlignLast", header: "cheerp/clientlib.h".}

proc get_textAnchor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textAnchor", header: "cheerp/clientlib.h".}

proc set_textAnchor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textAnchor", header: "cheerp/clientlib.h".}

proc get_textCombineUpright*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textCombineUpright", header: "cheerp/clientlib.h".}

proc set_textCombineUpright*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textCombineUpright", header: "cheerp/clientlib.h".}

proc get_textDecoration*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textDecoration", header: "cheerp/clientlib.h".}

proc set_textDecoration*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textDecoration", header: "cheerp/clientlib.h".}

proc get_textIndent*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textIndent", header: "cheerp/clientlib.h".}

proc set_textIndent*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textIndent", header: "cheerp/clientlib.h".}

proc get_textJustify*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textJustify", header: "cheerp/clientlib.h".}

proc set_textJustify*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textJustify", header: "cheerp/clientlib.h".}

proc get_textKashida*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textKashida", header: "cheerp/clientlib.h".}

proc set_textKashida*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textKashida", header: "cheerp/clientlib.h".}

proc get_textKashidaSpace*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textKashidaSpace", header: "cheerp/clientlib.h".}

proc set_textKashidaSpace*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textKashidaSpace", header: "cheerp/clientlib.h".}

proc get_textOverflow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textOverflow", header: "cheerp/clientlib.h".}

proc set_textOverflow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textOverflow", header: "cheerp/clientlib.h".}

proc get_textShadow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textShadow", header: "cheerp/clientlib.h".}

proc set_textShadow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textShadow", header: "cheerp/clientlib.h".}

proc get_textTransform*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textTransform", header: "cheerp/clientlib.h".}

proc set_textTransform*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textTransform", header: "cheerp/clientlib.h".}

proc get_textUnderlinePosition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_textUnderlinePosition", header: "cheerp/clientlib.h".}

proc set_textUnderlinePosition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_textUnderlinePosition", header: "cheerp/clientlib.h".}

proc get_top*(this: var CSSStyleDeclaration): ptr String {.importcpp: "get_top",
    header: "cheerp/clientlib.h".}

proc set_top*(this: var CSSStyleDeclaration; a2: String) {.importcpp: "set_top",
    header: "cheerp/clientlib.h".}

proc get_touchAction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_touchAction", header: "cheerp/clientlib.h".}

proc set_touchAction*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_touchAction", header: "cheerp/clientlib.h".}

proc get_transform*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transform", header: "cheerp/clientlib.h".}

proc set_transform*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transform", header: "cheerp/clientlib.h".}

proc get_transformOrigin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transformOrigin", header: "cheerp/clientlib.h".}

proc set_transformOrigin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transformOrigin", header: "cheerp/clientlib.h".}

proc get_transformStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transformStyle", header: "cheerp/clientlib.h".}

proc set_transformStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transformStyle", header: "cheerp/clientlib.h".}

proc get_transition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transition", header: "cheerp/clientlib.h".}

proc set_transition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transition", header: "cheerp/clientlib.h".}

proc get_transitionDelay*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transitionDelay", header: "cheerp/clientlib.h".}

proc set_transitionDelay*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transitionDelay", header: "cheerp/clientlib.h".}

proc get_transitionDuration*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transitionDuration", header: "cheerp/clientlib.h".}

proc set_transitionDuration*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transitionDuration", header: "cheerp/clientlib.h".}

proc get_transitionProperty*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transitionProperty", header: "cheerp/clientlib.h".}

proc set_transitionProperty*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transitionProperty", header: "cheerp/clientlib.h".}

proc get_transitionTimingFunction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_transitionTimingFunction", header: "cheerp/clientlib.h".}

proc set_transitionTimingFunction*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_transitionTimingFunction", header: "cheerp/clientlib.h".}

proc get_translate*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_translate", header: "cheerp/clientlib.h".}

proc set_translate*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_translate", header: "cheerp/clientlib.h".}

proc get_unicodeBidi*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_unicodeBidi", header: "cheerp/clientlib.h".}

proc set_unicodeBidi*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_unicodeBidi", header: "cheerp/clientlib.h".}

proc get_userSelect*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_userSelect", header: "cheerp/clientlib.h".}

proc set_userSelect*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_userSelect", header: "cheerp/clientlib.h".}

proc get_verticalAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_verticalAlign", header: "cheerp/clientlib.h".}

proc set_verticalAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_verticalAlign", header: "cheerp/clientlib.h".}

proc get_visibility*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_visibility", header: "cheerp/clientlib.h".}

proc set_visibility*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_visibility", header: "cheerp/clientlib.h".}

proc get_webkitAlignContent*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAlignContent", header: "cheerp/clientlib.h".}

proc set_webkitAlignContent*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAlignContent", header: "cheerp/clientlib.h".}

proc get_webkitAlignItems*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAlignItems", header: "cheerp/clientlib.h".}

proc set_webkitAlignItems*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAlignItems", header: "cheerp/clientlib.h".}

proc get_webkitAlignSelf*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAlignSelf", header: "cheerp/clientlib.h".}

proc set_webkitAlignSelf*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAlignSelf", header: "cheerp/clientlib.h".}

proc get_webkitAnimation*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimation", header: "cheerp/clientlib.h".}

proc set_webkitAnimation*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimation", header: "cheerp/clientlib.h".}

proc get_webkitAnimationDelay*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationDelay", header: "cheerp/clientlib.h".}

proc set_webkitAnimationDelay*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimationDelay", header: "cheerp/clientlib.h".}

proc get_webkitAnimationDirection*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationDirection", header: "cheerp/clientlib.h".}

proc set_webkitAnimationDirection*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimationDirection", header: "cheerp/clientlib.h".}

proc get_webkitAnimationDuration*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationDuration", header: "cheerp/clientlib.h".}

proc set_webkitAnimationDuration*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimationDuration", header: "cheerp/clientlib.h".}

proc get_webkitAnimationFillMode*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationFillMode", header: "cheerp/clientlib.h".}

proc set_webkitAnimationFillMode*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimationFillMode", header: "cheerp/clientlib.h".}

proc get_webkitAnimationIterationCount*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationIterationCount", header: "cheerp/clientlib.h".}

proc set_webkitAnimationIterationCount*(this: var CSSStyleDeclaration;
                                        a2: String) {.
    importcpp: "set_webkitAnimationIterationCount", header: "cheerp/clientlib.h".}

proc get_webkitAnimationName*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationName", header: "cheerp/clientlib.h".}

proc set_webkitAnimationName*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimationName", header: "cheerp/clientlib.h".}

proc get_webkitAnimationPlayState*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationPlayState", header: "cheerp/clientlib.h".}

proc set_webkitAnimationPlayState*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAnimationPlayState", header: "cheerp/clientlib.h".}

proc get_webkitAnimationTimingFunction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAnimationTimingFunction", header: "cheerp/clientlib.h".}

proc set_webkitAnimationTimingFunction*(this: var CSSStyleDeclaration;
                                        a2: String) {.
    importcpp: "set_webkitAnimationTimingFunction", header: "cheerp/clientlib.h".}

proc get_webkitAppearance*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitAppearance", header: "cheerp/clientlib.h".}

proc set_webkitAppearance*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitAppearance", header: "cheerp/clientlib.h".}

proc get_webkitBackfaceVisibility*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBackfaceVisibility", header: "cheerp/clientlib.h".}

proc set_webkitBackfaceVisibility*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBackfaceVisibility", header: "cheerp/clientlib.h".}

proc get_webkitBackgroundClip*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBackgroundClip", header: "cheerp/clientlib.h".}

proc set_webkitBackgroundClip*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBackgroundClip", header: "cheerp/clientlib.h".}

proc get_webkitBackgroundOrigin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBackgroundOrigin", header: "cheerp/clientlib.h".}

proc set_webkitBackgroundOrigin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBackgroundOrigin", header: "cheerp/clientlib.h".}

proc get_webkitBackgroundSize*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBackgroundSize", header: "cheerp/clientlib.h".}

proc set_webkitBackgroundSize*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBackgroundSize", header: "cheerp/clientlib.h".}

proc get_webkitBorderBottomLeftRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBorderBottomLeftRadius", header: "cheerp/clientlib.h".}

proc set_webkitBorderBottomLeftRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBorderBottomLeftRadius", header: "cheerp/clientlib.h".}

proc get_webkitBorderBottomRightRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBorderBottomRightRadius", header: "cheerp/clientlib.h".}

proc set_webkitBorderBottomRightRadius*(this: var CSSStyleDeclaration;
                                        a2: String) {.
    importcpp: "set_webkitBorderBottomRightRadius", header: "cheerp/clientlib.h".}

proc get_webkitBorderImage*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBorderImage", header: "cheerp/clientlib.h".}

proc set_webkitBorderImage*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBorderImage", header: "cheerp/clientlib.h".}

proc get_webkitBorderRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBorderRadius", header: "cheerp/clientlib.h".}

proc set_webkitBorderRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBorderRadius", header: "cheerp/clientlib.h".}

proc get_webkitBorderTopLeftRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBorderTopLeftRadius", header: "cheerp/clientlib.h".}

proc set_webkitBorderTopLeftRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBorderTopLeftRadius", header: "cheerp/clientlib.h".}

proc get_webkitBorderTopRightRadius*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBorderTopRightRadius", header: "cheerp/clientlib.h".}

proc set_webkitBorderTopRightRadius*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBorderTopRightRadius", header: "cheerp/clientlib.h".}

proc get_webkitBoxAlign*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxAlign", header: "cheerp/clientlib.h".}

proc set_webkitBoxAlign*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxAlign", header: "cheerp/clientlib.h".}

proc get_webkitBoxDirection*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxDirection", header: "cheerp/clientlib.h".}

proc set_webkitBoxDirection*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxDirection", header: "cheerp/clientlib.h".}

proc get_webkitBoxFlex*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxFlex", header: "cheerp/clientlib.h".}

proc set_webkitBoxFlex*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxFlex", header: "cheerp/clientlib.h".}

proc get_webkitBoxOrdinalGroup*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxOrdinalGroup", header: "cheerp/clientlib.h".}

proc set_webkitBoxOrdinalGroup*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxOrdinalGroup", header: "cheerp/clientlib.h".}

proc get_webkitBoxOrient*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxOrient", header: "cheerp/clientlib.h".}

proc set_webkitBoxOrient*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxOrient", header: "cheerp/clientlib.h".}

proc get_webkitBoxPack*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxPack", header: "cheerp/clientlib.h".}

proc set_webkitBoxPack*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxPack", header: "cheerp/clientlib.h".}

proc get_webkitBoxSizing*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitBoxSizing", header: "cheerp/clientlib.h".}

proc set_webkitBoxSizing*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitBoxSizing", header: "cheerp/clientlib.h".}

proc get_webkitColumnBreakAfter*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumnBreakAfter", header: "cheerp/clientlib.h".}

proc set_webkitColumnBreakAfter*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumnBreakAfter", header: "cheerp/clientlib.h".}

proc get_webkitColumnBreakBefore*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumnBreakBefore", header: "cheerp/clientlib.h".}

proc set_webkitColumnBreakBefore*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumnBreakBefore", header: "cheerp/clientlib.h".}

proc get_webkitColumnBreakInside*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumnBreakInside", header: "cheerp/clientlib.h".}

proc set_webkitColumnBreakInside*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumnBreakInside", header: "cheerp/clientlib.h".}

proc set_webkitColumnCount*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_webkitColumnCount", header: "cheerp/clientlib.h".}

proc set_webkitColumnGap*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_webkitColumnGap", header: "cheerp/clientlib.h".}

proc get_webkitColumnRule*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumnRule", header: "cheerp/clientlib.h".}

proc set_webkitColumnRule*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumnRule", header: "cheerp/clientlib.h".}

proc set_webkitColumnRuleColor*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_webkitColumnRuleColor", header: "cheerp/clientlib.h".}

proc get_webkitColumnRuleStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumnRuleStyle", header: "cheerp/clientlib.h".}

proc set_webkitColumnRuleStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumnRuleStyle", header: "cheerp/clientlib.h".}

proc set_webkitColumnRuleWidth*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_webkitColumnRuleWidth", header: "cheerp/clientlib.h".}

proc get_webkitColumnSpan*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumnSpan", header: "cheerp/clientlib.h".}

proc set_webkitColumnSpan*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumnSpan", header: "cheerp/clientlib.h".}

proc set_webkitColumnWidth*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_webkitColumnWidth", header: "cheerp/clientlib.h".}

proc get_webkitColumns*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitColumns", header: "cheerp/clientlib.h".}

proc set_webkitColumns*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitColumns", header: "cheerp/clientlib.h".}

proc get_webkitFilter*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFilter", header: "cheerp/clientlib.h".}

proc set_webkitFilter*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFilter", header: "cheerp/clientlib.h".}

proc get_webkitFlex*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlex", header: "cheerp/clientlib.h".}

proc set_webkitFlex*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlex", header: "cheerp/clientlib.h".}

proc get_webkitFlexBasis*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlexBasis", header: "cheerp/clientlib.h".}

proc set_webkitFlexBasis*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlexBasis", header: "cheerp/clientlib.h".}

proc get_webkitFlexDirection*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlexDirection", header: "cheerp/clientlib.h".}

proc set_webkitFlexDirection*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlexDirection", header: "cheerp/clientlib.h".}

proc get_webkitFlexFlow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlexFlow", header: "cheerp/clientlib.h".}

proc set_webkitFlexFlow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlexFlow", header: "cheerp/clientlib.h".}

proc get_webkitFlexGrow*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlexGrow", header: "cheerp/clientlib.h".}

proc set_webkitFlexGrow*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlexGrow", header: "cheerp/clientlib.h".}

proc get_webkitFlexShrink*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlexShrink", header: "cheerp/clientlib.h".}

proc set_webkitFlexShrink*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlexShrink", header: "cheerp/clientlib.h".}

proc get_webkitFlexWrap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitFlexWrap", header: "cheerp/clientlib.h".}

proc set_webkitFlexWrap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitFlexWrap", header: "cheerp/clientlib.h".}

proc get_webkitJustifyContent*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitJustifyContent", header: "cheerp/clientlib.h".}

proc set_webkitJustifyContent*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitJustifyContent", header: "cheerp/clientlib.h".}

proc get_webkitOrder*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitOrder", header: "cheerp/clientlib.h".}

proc set_webkitOrder*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitOrder", header: "cheerp/clientlib.h".}

proc get_webkitPerspective*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitPerspective", header: "cheerp/clientlib.h".}

proc set_webkitPerspective*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitPerspective", header: "cheerp/clientlib.h".}

proc get_webkitPerspectiveOrigin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitPerspectiveOrigin", header: "cheerp/clientlib.h".}

proc set_webkitPerspectiveOrigin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitPerspectiveOrigin", header: "cheerp/clientlib.h".}

proc get_webkitTapHighlightColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTapHighlightColor", header: "cheerp/clientlib.h".}

proc set_webkitTapHighlightColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTapHighlightColor", header: "cheerp/clientlib.h".}

proc get_webkitTextFillColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTextFillColor", header: "cheerp/clientlib.h".}

proc set_webkitTextFillColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTextFillColor", header: "cheerp/clientlib.h".}

proc set_webkitTextSizeAdjust*(this: var CSSStyleDeclaration; a2: ptr Object) {.
    importcpp: "set_webkitTextSizeAdjust", header: "cheerp/clientlib.h".}

proc get_webkitTextStroke*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTextStroke", header: "cheerp/clientlib.h".}

proc set_webkitTextStroke*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTextStroke", header: "cheerp/clientlib.h".}

proc get_webkitTextStrokeColor*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTextStrokeColor", header: "cheerp/clientlib.h".}

proc set_webkitTextStrokeColor*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTextStrokeColor", header: "cheerp/clientlib.h".}

proc get_webkitTextStrokeWidth*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTextStrokeWidth", header: "cheerp/clientlib.h".}

proc set_webkitTextStrokeWidth*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTextStrokeWidth", header: "cheerp/clientlib.h".}

proc get_webkitTransform*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransform", header: "cheerp/clientlib.h".}

proc set_webkitTransform*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransform", header: "cheerp/clientlib.h".}

proc get_webkitTransformOrigin*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransformOrigin", header: "cheerp/clientlib.h".}

proc set_webkitTransformOrigin*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransformOrigin", header: "cheerp/clientlib.h".}

proc get_webkitTransformStyle*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransformStyle", header: "cheerp/clientlib.h".}

proc set_webkitTransformStyle*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransformStyle", header: "cheerp/clientlib.h".}

proc get_webkitTransition*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransition", header: "cheerp/clientlib.h".}

proc set_webkitTransition*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransition", header: "cheerp/clientlib.h".}

proc get_webkitTransitionDelay*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransitionDelay", header: "cheerp/clientlib.h".}

proc set_webkitTransitionDelay*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransitionDelay", header: "cheerp/clientlib.h".}

proc get_webkitTransitionDuration*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransitionDuration", header: "cheerp/clientlib.h".}

proc set_webkitTransitionDuration*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransitionDuration", header: "cheerp/clientlib.h".}

proc get_webkitTransitionProperty*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransitionProperty", header: "cheerp/clientlib.h".}

proc set_webkitTransitionProperty*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitTransitionProperty", header: "cheerp/clientlib.h".}

proc get_webkitTransitionTimingFunction*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitTransitionTimingFunction",
    header: "cheerp/clientlib.h".}

proc set_webkitTransitionTimingFunction*(this: var CSSStyleDeclaration;
    a2: String) {.importcpp: "set_webkitTransitionTimingFunction",
                  header: "cheerp/clientlib.h".}

proc get_webkitUserModify*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitUserModify", header: "cheerp/clientlib.h".}

proc set_webkitUserModify*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitUserModify", header: "cheerp/clientlib.h".}

proc get_webkitUserSelect*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitUserSelect", header: "cheerp/clientlib.h".}

proc set_webkitUserSelect*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitUserSelect", header: "cheerp/clientlib.h".}

proc get_webkitWritingMode*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_webkitWritingMode", header: "cheerp/clientlib.h".}

proc set_webkitWritingMode*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_webkitWritingMode", header: "cheerp/clientlib.h".}

proc get_whiteSpace*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_whiteSpace", header: "cheerp/clientlib.h".}

proc set_whiteSpace*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_whiteSpace", header: "cheerp/clientlib.h".}

proc get_widows*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_widows", header: "cheerp/clientlib.h".}

proc set_widows*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_widows", header: "cheerp/clientlib.h".}

proc get_width*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_wordBreak*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_wordBreak", header: "cheerp/clientlib.h".}

proc set_wordBreak*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_wordBreak", header: "cheerp/clientlib.h".}

proc get_wordSpacing*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_wordSpacing", header: "cheerp/clientlib.h".}

proc set_wordSpacing*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_wordSpacing", header: "cheerp/clientlib.h".}

proc get_wordWrap*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_wordWrap", header: "cheerp/clientlib.h".}

proc set_wordWrap*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_wordWrap", header: "cheerp/clientlib.h".}

proc get_writingMode*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_writingMode", header: "cheerp/clientlib.h".}

proc set_writingMode*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_writingMode", header: "cheerp/clientlib.h".}

proc get_zIndex*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_zIndex", header: "cheerp/clientlib.h".}

proc set_zIndex*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_zIndex", header: "cheerp/clientlib.h".}

proc get_zoom*(this: var CSSStyleDeclaration): ptr String {.
    importcpp: "get_zoom", header: "cheerp/clientlib.h".}

proc set_zoom*(this: var CSSStyleDeclaration; a2: String) {.
    importcpp: "set_zoom", header: "cheerp/clientlib.h".}

proc getPropertyPriority*(this: var CSSStyleDeclaration; propertyName: String): ptr String {.
    importcpp: "getPropertyPriority", header: "cheerp/clientlib.h".}

proc getPropertyValue*(this: var CSSStyleDeclaration; propertyName: String): ptr String {.
    importcpp: "getPropertyValue", header: "cheerp/clientlib.h".}

proc item*(this: var CSSStyleDeclaration; index: cdouble): ptr String {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc removeProperty*(this: var CSSStyleDeclaration; propertyName: String): ptr String {.
    importcpp: "removeProperty", header: "cheerp/clientlib.h".}

proc setProperty*(this: var CSSStyleDeclaration; propertyName: String;
                  value: String) {.importcpp: "setProperty",
                                   header: "cheerp/clientlib.h".}

proc setProperty*(this: var CSSStyleDeclaration; propertyName: String;
                  value: String; priority: String) {.importcpp: "setProperty",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var CSSStyleDeclaration; index: cint): ptr String {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: CSSStyleDeclaration; index: cint): ptr String {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSStyleDeclaration): ptr CSSStyleDeclaration {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSStyleDeclaration; a2: ptr CSSStyleDeclaration) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSStyleDeclaration*(): CSSStyleDeclaration {.constructor,
    importcpp: "client::CSSStyleDeclaration(@)", header: "cheerp/clientlib.h".}

proc get_selectorText*(this: var CSSStyleRule): ptr String {.
    importcpp: "get_selectorText", header: "cheerp/clientlib.h".}

proc set_selectorText*(this: var CSSStyleRule; a2: String) {.
    importcpp: "set_selectorText", header: "cheerp/clientlib.h".}

proc get_style*(this: var CSSStyleRule): ptr CSSStyleDeclaration {.
    importcpp: "get_style", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSStyleRule): ptr CSSStyleRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSStyleRule; a2: ptr CSSStyleRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSStyleRule*(): CSSStyleRule {.constructor,
    importcpp: "client::CSSStyleRule(@)", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var StyleSheet): bool {.importcpp: "get_disabled",
    header: "cheerp/clientlib.h".}

proc set_disabled*(this: var StyleSheet; a2: bool) {.importcpp: "set_disabled",
    header: "cheerp/clientlib.h".}

proc get_href*(this: var StyleSheet): ptr String {.importcpp: "get_href",
    header: "cheerp/clientlib.h".}

proc get_media*(this: var StyleSheet): ptr MediaList {.importcpp: "get_media",
    header: "cheerp/clientlib.h".}

proc get_ownerNode*(this: var StyleSheet): ptr Node {.
    importcpp: "get_ownerNode", header: "cheerp/clientlib.h".}

proc get_parentStyleSheet*(this: var StyleSheet): ptr StyleSheet {.
    importcpp: "get_parentStyleSheet", header: "cheerp/clientlib.h".}

proc get_title*(this: var StyleSheet): ptr String {.importcpp: "get_title",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var StyleSheet): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var StyleSheet): ptr StyleSheet {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var StyleSheet; a2: ptr StyleSheet) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructStyleSheet*(): StyleSheet {.constructor,
    importcpp: "client::StyleSheet(@)", header: "cheerp/clientlib.h".}

proc get_cssRules*(this: var CSSStyleSheet): ptr CSSRuleList {.
    importcpp: "get_cssRules", header: "cheerp/clientlib.h".}

proc get_cssText*(this: var CSSStyleSheet): ptr String {.
    importcpp: "get_cssText", header: "cheerp/clientlib.h".}

proc set_cssText*(this: var CSSStyleSheet; a2: String) {.
    importcpp: "set_cssText", header: "cheerp/clientlib.h".}

proc get_id*(this: var CSSStyleSheet): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_imports*(this: var CSSStyleSheet): ptr StyleSheetList {.
    importcpp: "get_imports", header: "cheerp/clientlib.h".}

proc get_isAlternate*(this: var CSSStyleSheet): bool {.
    importcpp: "get_isAlternate", header: "cheerp/clientlib.h".}

proc get_isPrefAlternate*(this: var CSSStyleSheet): bool {.
    importcpp: "get_isPrefAlternate", header: "cheerp/clientlib.h".}

proc get_ownerRule*(this: var CSSStyleSheet): ptr CSSRule {.
    importcpp: "get_ownerRule", header: "cheerp/clientlib.h".}

proc get_owningElement*(this: var CSSStyleSheet): ptr Element {.
    importcpp: "get_owningElement", header: "cheerp/clientlib.h".}

proc get_readOnly*(this: var CSSStyleSheet): bool {.importcpp: "get_readOnly",
    header: "cheerp/clientlib.h".}

proc get_rules*(this: var CSSStyleSheet): ptr CSSRuleList {.
    importcpp: "get_rules", header: "cheerp/clientlib.h".}

proc addImport*(this: var CSSStyleSheet; bstrURL: String): cdouble {.
    importcpp: "addImport", header: "cheerp/clientlib.h".}

proc addImport*(this: var CSSStyleSheet; bstrURL: String; lIndex: cdouble): cdouble {.
    importcpp: "addImport", header: "cheerp/clientlib.h".}

proc addPageRule*(this: var CSSStyleSheet; bstrSelector: String;
                  bstrStyle: String): cdouble {.importcpp: "addPageRule",
    header: "cheerp/clientlib.h".}

proc addPageRule*(this: var CSSStyleSheet; bstrSelector: String;
                  bstrStyle: String; lIndex: cdouble): cdouble {.
    importcpp: "addPageRule", header: "cheerp/clientlib.h".}

proc addRule*(this: var CSSStyleSheet; bstrSelector: String): cdouble {.
    importcpp: "addRule", header: "cheerp/clientlib.h".}

proc addRule*(this: var CSSStyleSheet; bstrSelector: String; bstrStyle: String): cdouble {.
    importcpp: "addRule", header: "cheerp/clientlib.h".}

proc addRule*(this: var CSSStyleSheet; bstrSelector: String; bstrStyle: String;
              lIndex: cdouble): cdouble {.importcpp: "addRule",
    header: "cheerp/clientlib.h".}

proc deleteRule*(this: var CSSStyleSheet) {.importcpp: "deleteRule",
    header: "cheerp/clientlib.h".}

proc deleteRule*(this: var CSSStyleSheet; index: cdouble) {.
    importcpp: "deleteRule", header: "cheerp/clientlib.h".}

proc insertRule*(this: var CSSStyleSheet; rule: String): cdouble {.
    importcpp: "insertRule", header: "cheerp/clientlib.h".}

proc insertRule*(this: var CSSStyleSheet; rule: String; index: cdouble): cdouble {.
    importcpp: "insertRule", header: "cheerp/clientlib.h".}

proc removeImport*(this: var CSSStyleSheet; lIndex: cdouble) {.
    importcpp: "removeImport", header: "cheerp/clientlib.h".}

proc removeRule*(this: var CSSStyleSheet; lIndex: cdouble) {.
    importcpp: "removeRule", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSStyleSheet): ptr CSSStyleSheet {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSStyleSheet; a2: ptr CSSStyleSheet) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSStyleSheet*(): CSSStyleSheet {.constructor,
    importcpp: "client::CSSStyleSheet(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CSSSupportsRule): ptr CSSSupportsRule {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CSSSupportsRule; a2: ptr CSSSupportsRule) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCSSSupportsRule*(): CSSSupportsRule {.constructor,
    importcpp: "client::CSSSupportsRule(@)", header: "cheerp/clientlib.h".}

proc add*(this: var Cache; request: ptr Request): ptr Promise {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var Cache; request: String): ptr Promise {.importcpp: "add",
    header: "cheerp/clientlib.h".}

proc addAll*(this: var Cache; requests: ptr Array): ptr Promise {.
    importcpp: "addAll", header: "cheerp/clientlib.h".}

proc p_delete*(this: var Cache; request: ptr Request): ptr Promise {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var Cache; request: ptr Request;
               options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var Cache; request: String): ptr Promise {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var Cache; request: String; options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc keys*(this: var Cache): ptr Promise {.importcpp: "keys",
    header: "cheerp/clientlib.h".}

proc keys*(this: var Cache; request: ptr Request): ptr Promise {.
    importcpp: "keys", header: "cheerp/clientlib.h".}

proc keys*(this: var Cache; request: ptr Request; options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "keys", header: "cheerp/clientlib.h".}

proc keys*(this: var Cache; request: String): ptr Promise {.importcpp: "keys",
    header: "cheerp/clientlib.h".}

proc keys*(this: var Cache; request: String; options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "keys", header: "cheerp/clientlib.h".}

proc match*(this: var Cache; request: ptr Request): ptr Promise {.
    importcpp: "match", header: "cheerp/clientlib.h".}

proc match*(this: var Cache; request: ptr Request;
            options: ptr CacheQueryOptions): ptr Promise {.importcpp: "match",
    header: "cheerp/clientlib.h".}

proc match*(this: var Cache; request: String): ptr Promise {.importcpp: "match",
    header: "cheerp/clientlib.h".}

proc match*(this: var Cache; request: String; options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "match", header: "cheerp/clientlib.h".}

proc matchAll*(this: var Cache): ptr Promise {.importcpp: "matchAll",
    header: "cheerp/clientlib.h".}

proc matchAll*(this: var Cache; request: ptr Request): ptr Promise {.
    importcpp: "matchAll", header: "cheerp/clientlib.h".}

proc matchAll*(this: var Cache; request: ptr Request;
               options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "matchAll", header: "cheerp/clientlib.h".}

proc matchAll*(this: var Cache; request: String): ptr Promise {.
    importcpp: "matchAll", header: "cheerp/clientlib.h".}

proc matchAll*(this: var Cache; request: String; options: ptr CacheQueryOptions): ptr Promise {.
    importcpp: "matchAll", header: "cheerp/clientlib.h".}

proc put*(this: var Cache; request: ptr Request; response: ptr Response): ptr Promise {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc put*(this: var Cache; request: String; response: ptr Response): ptr Promise {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Cache): ptr Cache {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Cache; a2: ptr Cache) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCache*(): Cache {.constructor, importcpp: "client::Cache(@)",
                                header: "cheerp/clientlib.h".}

proc p_delete*(this: var CacheStorage; cacheName: String): ptr Promise {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc has*(this: var CacheStorage; cacheName: String): ptr Promise {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc keys*(this: var CacheStorage): ptr Promise {.importcpp: "keys",
    header: "cheerp/clientlib.h".}

proc match*(this: var CacheStorage; request: ptr Request): ptr Promise {.
    importcpp: "match", header: "cheerp/clientlib.h".}

proc match*(this: var CacheStorage; request: ptr Request;
            options: ptr CacheQueryOptions): ptr Promise {.importcpp: "match",
    header: "cheerp/clientlib.h".}

proc match*(this: var CacheStorage; request: String): ptr Promise {.
    importcpp: "match", header: "cheerp/clientlib.h".}

proc match*(this: var CacheStorage; request: String;
            options: ptr CacheQueryOptions): ptr Promise {.importcpp: "match",
    header: "cheerp/clientlib.h".}

proc open*(this: var CacheStorage; cacheName: String): ptr Promise {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CacheStorage): ptr CacheStorage {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CacheStorage; a2: ptr CacheStorage) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCacheStorage*(): CacheStorage {.constructor,
    importcpp: "client::CacheStorage(@)", header: "cheerp/clientlib.h".}

proc get_alpha*(this: var Canvas2DContextAttributes): bool {.
    importcpp: "get_alpha", header: "cheerp/clientlib.h".}

proc set_alpha*(this: var Canvas2DContextAttributes; a2: bool) {.
    importcpp: "set_alpha", header: "cheerp/clientlib.h".}

proc get_storage*(this: var Canvas2DContextAttributes): bool {.
    importcpp: "get_storage", header: "cheerp/clientlib.h".}

proc set_storage*(this: var Canvas2DContextAttributes; a2: bool) {.
    importcpp: "set_storage", header: "cheerp/clientlib.h".}

proc get_willReadFrequently*(this: var Canvas2DContextAttributes): bool {.
    importcpp: "get_willReadFrequently", header: "cheerp/clientlib.h".}

proc set_willReadFrequently*(this: var Canvas2DContextAttributes; a2: bool) {.
    importcpp: "set_willReadFrequently", header: "cheerp/clientlib.h".}

proc `[]`*(this: var Canvas2DContextAttributes; index: cint): ptr Object {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: Canvas2DContextAttributes; index: cint): ptr Object {.
    noSideEffect, importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc addColorStop*(this: var CanvasGradient; offset: cdouble; color: String) {.
    importcpp: "addColorStop", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CanvasGradient): ptr CanvasGradient {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CanvasGradient; a2: ptr CanvasGradient) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCanvasGradient*(): CanvasGradient {.constructor,
    importcpp: "client::CanvasGradient(@)", header: "cheerp/clientlib.h".}

proc arc*(this: var CanvasPathMethods; x: cdouble; y: cdouble; radius: cdouble;
          startAngle: cdouble; endAngle: cdouble) {.importcpp: "arc",
    header: "cheerp/clientlib.h".}

proc arc*(this: var CanvasPathMethods; x: cdouble; y: cdouble; radius: cdouble;
          startAngle: cdouble; endAngle: cdouble; anticlockwise: bool) {.
    importcpp: "arc", header: "cheerp/clientlib.h".}

proc arcTo*(this: var CanvasPathMethods; x1: cdouble; y1: cdouble; x2: cdouble;
            y2: cdouble; radius: cdouble) {.importcpp: "arcTo",
    header: "cheerp/clientlib.h".}

proc arcTo*(this: var CanvasPathMethods; x1: cdouble; y1: cdouble; x2: cdouble;
            y2: cdouble; radiusX: cdouble; radiusY: cdouble; rotation: cdouble) {.
    importcpp: "arcTo", header: "cheerp/clientlib.h".}

proc bezierCurveTo*(this: var CanvasPathMethods; cp1x: cdouble; cp1y: cdouble;
                    cp2x: cdouble; cp2y: cdouble; x: cdouble; y: cdouble) {.
    importcpp: "bezierCurveTo", header: "cheerp/clientlib.h".}

proc closePath*(this: var CanvasPathMethods) {.importcpp: "closePath",
    header: "cheerp/clientlib.h".}

proc ellipse*(this: var CanvasPathMethods; x: cdouble; y: cdouble;
              radiusX: cdouble; radiusY: cdouble; rotation: cdouble;
              startAngle: cdouble; endAngle: cdouble) {.importcpp: "ellipse",
    header: "cheerp/clientlib.h".}

proc ellipse*(this: var CanvasPathMethods; x: cdouble; y: cdouble;
              radiusX: cdouble; radiusY: cdouble; rotation: cdouble;
              startAngle: cdouble; endAngle: cdouble; anticlockwise: bool) {.
    importcpp: "ellipse", header: "cheerp/clientlib.h".}

proc lineTo*(this: var CanvasPathMethods; x: cdouble; y: cdouble) {.
    importcpp: "lineTo", header: "cheerp/clientlib.h".}

proc moveTo*(this: var CanvasPathMethods; x: cdouble; y: cdouble) {.
    importcpp: "moveTo", header: "cheerp/clientlib.h".}

proc quadraticCurveTo*(this: var CanvasPathMethods; cpx: cdouble; cpy: cdouble;
                       x: cdouble; y: cdouble) {.importcpp: "quadraticCurveTo",
    header: "cheerp/clientlib.h".}

proc rect*(this: var CanvasPathMethods; x: cdouble; y: cdouble; w: cdouble;
           h: cdouble) {.importcpp: "rect", header: "cheerp/clientlib.h".}

proc setTransform*(this: var CanvasPattern; matrix: ptr SVGMatrix) {.
    importcpp: "setTransform", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CanvasPattern): ptr CanvasPattern {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CanvasPattern; a2: ptr CanvasPattern) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCanvasPattern*(): CanvasPattern {.constructor,
    importcpp: "client::CanvasPattern(@)", header: "cheerp/clientlib.h".}

proc get_canvas*(this: var CanvasRenderingContext2D): ptr HTMLCanvasElement {.
    importcpp: "get_canvas", header: "cheerp/clientlib.h".}

proc get_fillStyle*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_fillStyle", header: "cheerp/clientlib.h".}

proc set_fillStyle*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_fillStyle", header: "cheerp/clientlib.h".}

proc get_font*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_font", header: "cheerp/clientlib.h".}

proc set_font*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_font", header: "cheerp/clientlib.h".}

proc get_globalAlpha*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_globalAlpha", header: "cheerp/clientlib.h".}

proc set_globalAlpha*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_globalAlpha", header: "cheerp/clientlib.h".}

proc get_globalCompositeOperation*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_globalCompositeOperation", header: "cheerp/clientlib.h".}

proc set_globalCompositeOperation*(this: var CanvasRenderingContext2D;
                                   a2: String) {.
    importcpp: "set_globalCompositeOperation", header: "cheerp/clientlib.h".}

proc get_imageSmoothingEnabled*(this: var CanvasRenderingContext2D): bool {.
    importcpp: "get_imageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc set_imageSmoothingEnabled*(this: var CanvasRenderingContext2D; a2: bool) {.
    importcpp: "set_imageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc get_lineCap*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_lineCap", header: "cheerp/clientlib.h".}

proc set_lineCap*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_lineCap", header: "cheerp/clientlib.h".}

proc get_lineDashOffset*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_lineDashOffset", header: "cheerp/clientlib.h".}

proc set_lineDashOffset*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_lineDashOffset", header: "cheerp/clientlib.h".}

proc get_lineJoin*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_lineJoin", header: "cheerp/clientlib.h".}

proc set_lineJoin*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_lineJoin", header: "cheerp/clientlib.h".}

proc get_lineWidth*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_lineWidth", header: "cheerp/clientlib.h".}

proc set_lineWidth*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_lineWidth", header: "cheerp/clientlib.h".}

proc get_miterLimit*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_miterLimit", header: "cheerp/clientlib.h".}

proc set_miterLimit*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_miterLimit", header: "cheerp/clientlib.h".}

proc get_mozImageSmoothingEnabled*(this: var CanvasRenderingContext2D): bool {.
    importcpp: "get_mozImageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc set_mozImageSmoothingEnabled*(this: var CanvasRenderingContext2D; a2: bool) {.
    importcpp: "set_mozImageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc get_msFillRule*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_msFillRule", header: "cheerp/clientlib.h".}

proc set_msFillRule*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_msFillRule", header: "cheerp/clientlib.h".}

proc get_oImageSmoothingEnabled*(this: var CanvasRenderingContext2D): bool {.
    importcpp: "get_oImageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc set_oImageSmoothingEnabled*(this: var CanvasRenderingContext2D; a2: bool) {.
    importcpp: "set_oImageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc get_shadowBlur*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_shadowBlur", header: "cheerp/clientlib.h".}

proc set_shadowBlur*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_shadowBlur", header: "cheerp/clientlib.h".}

proc get_shadowColor*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_shadowColor", header: "cheerp/clientlib.h".}

proc set_shadowColor*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_shadowColor", header: "cheerp/clientlib.h".}

proc get_shadowOffsetX*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_shadowOffsetX", header: "cheerp/clientlib.h".}

proc set_shadowOffsetX*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_shadowOffsetX", header: "cheerp/clientlib.h".}

proc get_shadowOffsetY*(this: var CanvasRenderingContext2D): cdouble {.
    importcpp: "get_shadowOffsetY", header: "cheerp/clientlib.h".}

proc set_shadowOffsetY*(this: var CanvasRenderingContext2D; a2: cdouble) {.
    importcpp: "set_shadowOffsetY", header: "cheerp/clientlib.h".}

proc get_strokeStyle*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_strokeStyle", header: "cheerp/clientlib.h".}

proc set_strokeStyle*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_strokeStyle", header: "cheerp/clientlib.h".}

proc get_textAlign*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_textAlign", header: "cheerp/clientlib.h".}

proc set_textAlign*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_textAlign", header: "cheerp/clientlib.h".}

proc get_textBaseline*(this: var CanvasRenderingContext2D): ptr String {.
    importcpp: "get_textBaseline", header: "cheerp/clientlib.h".}

proc set_textBaseline*(this: var CanvasRenderingContext2D; a2: String) {.
    importcpp: "set_textBaseline", header: "cheerp/clientlib.h".}

proc get_webkitImageSmoothingEnabled*(this: var CanvasRenderingContext2D): bool {.
    importcpp: "get_webkitImageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc set_webkitImageSmoothingEnabled*(this: var CanvasRenderingContext2D;
                                      a2: bool) {.
    importcpp: "set_webkitImageSmoothingEnabled", header: "cheerp/clientlib.h".}

proc beginPath*(this: var CanvasRenderingContext2D) {.importcpp: "beginPath",
    header: "cheerp/clientlib.h".}

proc clearRect*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble;
                w: cdouble; h: cdouble) {.importcpp: "clearRect",
    header: "cheerp/clientlib.h".}

proc clip*(this: var CanvasRenderingContext2D) {.importcpp: "clip",
    header: "cheerp/clientlib.h".}

proc clip*(this: var CanvasRenderingContext2D; path: ptr Path2D) {.
    importcpp: "clip", header: "cheerp/clientlib.h".}

proc createImageData*(this: var CanvasRenderingContext2D; imageDataOrSw: cdouble): ptr ImageData {.
    importcpp: "createImageData", header: "cheerp/clientlib.h".}

proc createImageData*(this: var CanvasRenderingContext2D;
                      imageDataOrSw: cdouble; sh: cdouble): ptr ImageData {.
    importcpp: "createImageData", header: "cheerp/clientlib.h".}

proc createImageData*(this: var CanvasRenderingContext2D;
                      imageDataOrSw: ptr ImageData): ptr ImageData {.
    importcpp: "createImageData", header: "cheerp/clientlib.h".}

proc createImageData*(this: var CanvasRenderingContext2D;
                      imageDataOrSw: ptr ImageData; sh: cdouble): ptr ImageData {.
    importcpp: "createImageData", header: "cheerp/clientlib.h".}

proc createLinearGradient*(this: var CanvasRenderingContext2D; x0: cdouble;
                           y0: cdouble; x1: cdouble; y1: cdouble): ptr CanvasGradient {.
    importcpp: "createLinearGradient", header: "cheerp/clientlib.h".}

proc createPattern*(this: var CanvasRenderingContext2D;
                    image: ptr HTMLImageElement; repetition: String): ptr CanvasPattern {.
    importcpp: "createPattern", header: "cheerp/clientlib.h".}

proc createPattern*(this: var CanvasRenderingContext2D;
                    image: ptr HTMLCanvasElement; repetition: String): ptr CanvasPattern {.
    importcpp: "createPattern", header: "cheerp/clientlib.h".}

proc createPattern*(this: var CanvasRenderingContext2D;
                    image: ptr HTMLVideoElement; repetition: String): ptr CanvasPattern {.
    importcpp: "createPattern", header: "cheerp/clientlib.h".}

proc createRadialGradient*(this: var CanvasRenderingContext2D; x0: cdouble;
                           y0: cdouble; r0: cdouble; x1: cdouble; y1: cdouble;
                           r1: cdouble): ptr CanvasGradient {.
    importcpp: "createRadialGradient", header: "cheerp/clientlib.h".}

proc drawFocusIfNeeded*(this: var CanvasRenderingContext2D; element: ptr Element) {.
    importcpp: "drawFocusIfNeeded", header: "cheerp/clientlib.h".}

proc drawFocusIfNeeded*(this: var CanvasRenderingContext2D; path: ptr Path2D;
                        element: ptr Element) {.importcpp: "drawFocusIfNeeded",
    header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr HTMLImageElement;
                dstX: cdouble; dstY: cdouble) {.importcpp: "drawImage",
    header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D;
                image: ptr HTMLCanvasElement; dstX: cdouble; dstY: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr HTMLVideoElement;
                dstX: cdouble; dstY: cdouble) {.importcpp: "drawImage",
    header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr ImageBitmap;
                dstX: cdouble; dstY: cdouble) {.importcpp: "drawImage",
    header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr HTMLImageElement;
                dstX: cdouble; dstY: cdouble; dstW: cdouble; dstH: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D;
                image: ptr HTMLCanvasElement; dstX: cdouble; dstY: cdouble;
                dstW: cdouble; dstH: cdouble) {.importcpp: "drawImage",
    header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr HTMLVideoElement;
                dstX: cdouble; dstY: cdouble; dstW: cdouble; dstH: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr ImageBitmap;
                dstX: cdouble; dstY: cdouble; dstW: cdouble; dstH: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr HTMLImageElement;
                srcX: cdouble; srcY: cdouble; srcW: cdouble; srcH: cdouble;
                dstX: cdouble; dstY: cdouble; dstW: cdouble; dstH: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D;
                image: ptr HTMLCanvasElement; srcX: cdouble; srcY: cdouble;
                srcW: cdouble; srcH: cdouble; dstX: cdouble; dstY: cdouble;
                dstW: cdouble; dstH: cdouble) {.importcpp: "drawImage",
    header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr HTMLVideoElement;
                srcX: cdouble; srcY: cdouble; srcW: cdouble; srcH: cdouble;
                dstX: cdouble; dstY: cdouble; dstW: cdouble; dstH: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc drawImage*(this: var CanvasRenderingContext2D; image: ptr ImageBitmap;
                srcX: cdouble; srcY: cdouble; srcW: cdouble; srcH: cdouble;
                dstX: cdouble; dstY: cdouble; dstW: cdouble; dstH: cdouble) {.
    importcpp: "drawImage", header: "cheerp/clientlib.h".}

proc fill*(this: var CanvasRenderingContext2D) {.importcpp: "fill",
    header: "cheerp/clientlib.h".}

proc fill*(this: var CanvasRenderingContext2D; path: ptr Path2D) {.
    importcpp: "fill", header: "cheerp/clientlib.h".}

proc fillRect*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble;
               w: cdouble; h: cdouble) {.importcpp: "fillRect",
    header: "cheerp/clientlib.h".}

proc fillText*(this: var CanvasRenderingContext2D; text: String; x: cdouble;
               y: cdouble) {.importcpp: "fillText", header: "cheerp/clientlib.h".}

proc fillText*(this: var CanvasRenderingContext2D; text: String; x: cdouble;
               y: cdouble; maxWidth: cdouble) {.importcpp: "fillText",
    header: "cheerp/clientlib.h".}

proc getImageData*(this: var CanvasRenderingContext2D; sx: cdouble; sy: cdouble;
                   sw: cdouble; sh: cdouble): ptr ImageData {.
    importcpp: "getImageData", header: "cheerp/clientlib.h".}

proc getLineDash*(this: var CanvasRenderingContext2D): ptr Array {.
    importcpp: "getLineDash", header: "cheerp/clientlib.h".}

proc isPointInPath*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble): bool {.
    importcpp: "isPointInPath", header: "cheerp/clientlib.h".}

proc isPointInPath*(this: var CanvasRenderingContext2D; path: ptr Path2D;
                    x: cdouble; y: cdouble): bool {.importcpp: "isPointInPath",
    header: "cheerp/clientlib.h".}

proc isPointInStroke*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble): bool {.
    importcpp: "isPointInStroke", header: "cheerp/clientlib.h".}

proc isPointInStroke*(this: var CanvasRenderingContext2D; path: ptr Path2D;
                      x: cdouble; y: cdouble): bool {.
    importcpp: "isPointInStroke", header: "cheerp/clientlib.h".}

proc measureText*(this: var CanvasRenderingContext2D; text: String): ptr TextMetrics {.
    importcpp: "measureText", header: "cheerp/clientlib.h".}

proc putImageData*(this: var CanvasRenderingContext2D; imagedata: ptr ImageData;
                   dx: cdouble; dy: cdouble) {.importcpp: "putImageData",
    header: "cheerp/clientlib.h".}

proc putImageData*(this: var CanvasRenderingContext2D; imagedata: ptr ImageData;
                   dx: cdouble; dy: cdouble; dirtyX: cdouble) {.
    importcpp: "putImageData", header: "cheerp/clientlib.h".}

proc putImageData*(this: var CanvasRenderingContext2D; imagedata: ptr ImageData;
                   dx: cdouble; dy: cdouble; dirtyX: cdouble; dirtyY: cdouble) {.
    importcpp: "putImageData", header: "cheerp/clientlib.h".}

proc putImageData*(this: var CanvasRenderingContext2D; imagedata: ptr ImageData;
                   dx: cdouble; dy: cdouble; dirtyX: cdouble; dirtyY: cdouble;
                   dirtyWidth: cdouble) {.importcpp: "putImageData",
    header: "cheerp/clientlib.h".}

proc putImageData*(this: var CanvasRenderingContext2D; imagedata: ptr ImageData;
                   dx: cdouble; dy: cdouble; dirtyX: cdouble; dirtyY: cdouble;
                   dirtyWidth: cdouble; dirtyHeight: cdouble) {.
    importcpp: "putImageData", header: "cheerp/clientlib.h".}

proc restore*(this: var CanvasRenderingContext2D) {.importcpp: "restore",
    header: "cheerp/clientlib.h".}

proc rotate*(this: var CanvasRenderingContext2D; angle: cdouble) {.
    importcpp: "rotate", header: "cheerp/clientlib.h".}

proc save*(this: var CanvasRenderingContext2D) {.importcpp: "save",
    header: "cheerp/clientlib.h".}

proc scale*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble) {.
    importcpp: "scale", header: "cheerp/clientlib.h".}

proc setLineDash*(this: var CanvasRenderingContext2D; segments: ptr Array) {.
    importcpp: "setLineDash", header: "cheerp/clientlib.h".}

proc setTransform*(this: var CanvasRenderingContext2D; m11: cdouble;
                   m12: cdouble; m21: cdouble; m22: cdouble; dx: cdouble;
                   dy: cdouble) {.importcpp: "setTransform",
                                  header: "cheerp/clientlib.h".}

proc stroke*(this: var CanvasRenderingContext2D) {.importcpp: "stroke",
    header: "cheerp/clientlib.h".}

proc stroke*(this: var CanvasRenderingContext2D; path: ptr Path2D) {.
    importcpp: "stroke", header: "cheerp/clientlib.h".}

proc strokeRect*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble;
                 w: cdouble; h: cdouble) {.importcpp: "strokeRect",
    header: "cheerp/clientlib.h".}

proc strokeText*(this: var CanvasRenderingContext2D; text: String; x: cdouble;
                 y: cdouble) {.importcpp: "strokeText",
                               header: "cheerp/clientlib.h".}

proc strokeText*(this: var CanvasRenderingContext2D; text: String; x: cdouble;
                 y: cdouble; maxWidth: cdouble) {.importcpp: "strokeText",
    header: "cheerp/clientlib.h".}

proc transform*(this: var CanvasRenderingContext2D; m11: cdouble; m12: cdouble;
                m21: cdouble; m22: cdouble; dx: cdouble; dy: cdouble) {.
    importcpp: "transform", header: "cheerp/clientlib.h".}

proc translate*(this: var CanvasRenderingContext2D; x: cdouble; y: cdouble) {.
    importcpp: "translate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CanvasRenderingContext2D): ptr CanvasRenderingContext2D {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CanvasRenderingContext2D;
                    a2: ptr CanvasRenderingContext2D) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCanvasRenderingContext2D*(): CanvasRenderingContext2D {.
    constructor, importcpp: "client::CanvasRenderingContext2D(@)",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ChannelMergerNode): ptr ChannelMergerNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ChannelMergerNode; a2: ptr ChannelMergerNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructChannelMergerNode*(): ChannelMergerNode {.constructor,
    importcpp: "client::ChannelMergerNode(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ChannelSplitterNode): ptr ChannelSplitterNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ChannelSplitterNode; a2: ptr ChannelSplitterNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructChannelSplitterNode*(): ChannelSplitterNode {.constructor,
    importcpp: "client::ChannelSplitterNode(@)", header: "cheerp/clientlib.h".}

proc get_bottom*(this: var ClientRect): cdouble {.importcpp: "get_bottom",
    header: "cheerp/clientlib.h".}

proc set_bottom*(this: var ClientRect; a2: cdouble) {.importcpp: "set_bottom",
    header: "cheerp/clientlib.h".}

proc get_height*(this: var ClientRect): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_left*(this: var ClientRect): cdouble {.importcpp: "get_left",
    header: "cheerp/clientlib.h".}

proc set_left*(this: var ClientRect; a2: cdouble) {.importcpp: "set_left",
    header: "cheerp/clientlib.h".}

proc get_right*(this: var ClientRect): cdouble {.importcpp: "get_right",
    header: "cheerp/clientlib.h".}

proc set_right*(this: var ClientRect; a2: cdouble) {.importcpp: "set_right",
    header: "cheerp/clientlib.h".}

proc get_top*(this: var ClientRect): cdouble {.importcpp: "get_top",
    header: "cheerp/clientlib.h".}

proc set_top*(this: var ClientRect; a2: cdouble) {.importcpp: "set_top",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var ClientRect): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ClientRect): ptr ClientRect {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ClientRect; a2: ptr ClientRect) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructClientRect*(): ClientRect {.constructor,
    importcpp: "client::ClientRect(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var ClientRectList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var ClientRectList; index: cdouble): ptr ClientRect {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var ClientRectList; index: cint): ptr ClientRect {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: ClientRectList; index: cint): ptr ClientRect {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ClientRectList): ptr ClientRectList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ClientRectList; a2: ptr ClientRectList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructClientRectList*(): ClientRectList {.constructor,
    importcpp: "client::ClientRectList(@)", header: "cheerp/clientlib.h".}

proc get_clipboardData*(this: var ClipboardEvent): ptr DataTransfer {.
    importcpp: "get_clipboardData", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ClipboardEvent): ptr ClipboardEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ClipboardEvent; a2: ptr ClipboardEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructClipboardEvent*(`type`: String): ClipboardEvent {.constructor,
    importcpp: "client::ClipboardEvent(@)", header: "cheerp/clientlib.h".}

proc constructClipboardEvent*(`type`: String;
                              eventInitDict: ptr ClipboardEventInit): ClipboardEvent {.
    constructor, importcpp: "client::ClipboardEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_data*(this: var ClipboardEventInit): ptr String {.
    importcpp: "get_data", header: "cheerp/clientlib.h".}

proc set_data*(this: var ClipboardEventInit; a2: String) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_dataType*(this: var ClipboardEventInit): ptr String {.
    importcpp: "get_dataType", header: "cheerp/clientlib.h".}

proc set_dataType*(this: var ClipboardEventInit; a2: String) {.
    importcpp: "set_dataType", header: "cheerp/clientlib.h".}

proc get_code*(this: var CloseEvent): cdouble {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc get_reason*(this: var CloseEvent): ptr String {.importcpp: "get_reason",
    header: "cheerp/clientlib.h".}

proc get_wasClean*(this: var CloseEvent): bool {.importcpp: "get_wasClean",
    header: "cheerp/clientlib.h".}

proc initCloseEvent*(this: var CloseEvent; typeArg: String; canBubbleArg: bool;
                     cancelableArg: bool; wasCleanArg: bool; codeArg: cdouble;
                     reasonArg: String) {.importcpp: "initCloseEvent",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CloseEvent): ptr CloseEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CloseEvent; a2: ptr CloseEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCloseEvent*(`type`: String): CloseEvent {.constructor,
    importcpp: "client::CloseEvent(@)", header: "cheerp/clientlib.h".}

proc constructCloseEvent*(`type`: String; eventInitDict: ptr CloseEventInit): CloseEvent {.
    constructor, importcpp: "client::CloseEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_text*(this: var Comment): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var Comment; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Comment): ptr Comment {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Comment; a2: ptr Comment) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructComment*(): Comment {.constructor,
                                    importcpp: "client::Comment(@)",
                                    header: "cheerp/clientlib.h".}

proc constructComment*(data: String): Comment {.constructor,
    importcpp: "client::Comment(@)", header: "cheerp/clientlib.h".}

proc get_detail*(this: var UIEvent): cdouble {.importcpp: "get_detail",
    header: "cheerp/clientlib.h".}

proc get_view*(this: var UIEvent): ptr Window {.importcpp: "get_view",
    header: "cheerp/clientlib.h".}

proc initUIEvent*(this: var UIEvent; typeArg: String; canBubbleArg: bool;
                  cancelableArg: bool; viewArg: ptr Window; detailArg: cdouble) {.
    importcpp: "initUIEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var UIEvent): ptr UIEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var UIEvent; a2: ptr UIEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructUIEvent*(typeArg: String): UIEvent {.constructor,
    importcpp: "client::UIEvent(@)", header: "cheerp/clientlib.h".}

proc constructUIEvent*(typeArg: String; eventInitDict: ptr UIEventInit): UIEvent {.
    constructor, importcpp: "client::UIEvent(@)", header: "cheerp/clientlib.h".}

proc get_data*(this: var CompositionEvent): ptr String {.importcpp: "get_data",
    header: "cheerp/clientlib.h".}

proc get_locale*(this: var CompositionEvent): ptr String {.
    importcpp: "get_locale", header: "cheerp/clientlib.h".}

proc initCompositionEvent*(this: var CompositionEvent; typeArg: String;
                           canBubbleArg: bool; cancelableArg: bool;
                           viewArg: ptr Window; dataArg: String; locale: String) {.
    importcpp: "initCompositionEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CompositionEvent): ptr CompositionEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CompositionEvent; a2: ptr CompositionEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCompositionEvent*(typeArg: String): CompositionEvent {.
    constructor, importcpp: "client::CompositionEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructCompositionEvent*(typeArg: String;
                                eventInitDict: ptr CompositionEventInit): CompositionEvent {.
    constructor, importcpp: "client::CompositionEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_activeDuration*(this: var ComputedTimingProperties): cdouble {.
    importcpp: "get_activeDuration", header: "cheerp/clientlib.h".}

proc set_activeDuration*(this: var ComputedTimingProperties; a2: cdouble) {.
    importcpp: "set_activeDuration", header: "cheerp/clientlib.h".}

proc get_currentIteration*(this: var ComputedTimingProperties): cdouble {.
    importcpp: "get_currentIteration", header: "cheerp/clientlib.h".}

proc set_currentIteration*(this: var ComputedTimingProperties; a2: cdouble) {.
    importcpp: "set_currentIteration", header: "cheerp/clientlib.h".}

proc get_endTime*(this: var ComputedTimingProperties): cdouble {.
    importcpp: "get_endTime", header: "cheerp/clientlib.h".}

proc set_endTime*(this: var ComputedTimingProperties; a2: cdouble) {.
    importcpp: "set_endTime", header: "cheerp/clientlib.h".}

proc get_localTime*(this: var ComputedTimingProperties): cdouble {.
    importcpp: "get_localTime", header: "cheerp/clientlib.h".}

proc set_localTime*(this: var ComputedTimingProperties; a2: cdouble) {.
    importcpp: "set_localTime", header: "cheerp/clientlib.h".}

proc get_progress*(this: var ComputedTimingProperties): cdouble {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var ComputedTimingProperties; a2: cdouble) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_algorithmId*(this: var ConcatParams): ptr Uint8Array {.
    importcpp: "get_algorithmId", header: "cheerp/clientlib.h".}

proc set_algorithmId*(this: var ConcatParams; a2: ptr Uint8Array) {.
    importcpp: "set_algorithmId", header: "cheerp/clientlib.h".}

proc get_hash*(this: var ConcatParams): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var ConcatParams; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_partyUInfo*(this: var ConcatParams): ptr Uint8Array {.
    importcpp: "get_partyUInfo", header: "cheerp/clientlib.h".}

proc set_partyUInfo*(this: var ConcatParams; a2: ptr Uint8Array) {.
    importcpp: "set_partyUInfo", header: "cheerp/clientlib.h".}

proc get_partyVInfo*(this: var ConcatParams): ptr Uint8Array {.
    importcpp: "get_partyVInfo", header: "cheerp/clientlib.h".}

proc set_partyVInfo*(this: var ConcatParams; a2: ptr Uint8Array) {.
    importcpp: "set_partyVInfo", header: "cheerp/clientlib.h".}

proc get_privateInfo*(this: var ConcatParams): ptr Uint8Array {.
    importcpp: "get_privateInfo", header: "cheerp/clientlib.h".}

proc set_privateInfo*(this: var ConcatParams; a2: ptr Uint8Array) {.
    importcpp: "set_privateInfo", header: "cheerp/clientlib.h".}

proc get_publicInfo*(this: var ConcatParams): ptr Uint8Array {.
    importcpp: "get_publicInfo", header: "cheerp/clientlib.h".}

proc set_publicInfo*(this: var ConcatParams; a2: ptr Uint8Array) {.
    importcpp: "set_publicInfo", header: "cheerp/clientlib.h".}

proc clear*(this: var Console) {.importcpp: "clear",
                                 header: "cheerp/clientlib.h".}

proc count*(this: var Console) {.importcpp: "count",
                                 header: "cheerp/clientlib.h".}

proc count*(this: var Console; label: String) {.importcpp: "count",
    header: "cheerp/clientlib.h".}

proc debug*(this: var Console) {.importcpp: "debug",
                                 header: "cheerp/clientlib.h".}

proc debug*(this: var Console; message: String) {.importcpp: "debug",
    header: "cheerp/clientlib.h".}

proc dir*(this: var Console) {.importcpp: "dir", header: "cheerp/clientlib.h".}

proc dir*(this: var Console; value: ptr Object) {.importcpp: "dir",
    header: "cheerp/clientlib.h".}

proc dirxml*(this: var Console; value: ptr Object) {.importcpp: "dirxml",
    header: "cheerp/clientlib.h".}

proc error*(this: var Console) {.importcpp: "error",
                                 header: "cheerp/clientlib.h".}

proc error*(this: var Console; message: String) {.importcpp: "error",
    header: "cheerp/clientlib.h".}

proc exception*(this: var Console) {.importcpp: "exception",
                                     header: "cheerp/clientlib.h".}

proc exception*(this: var Console; message: String) {.importcpp: "exception",
    header: "cheerp/clientlib.h".}

proc group*(this: var Console) {.importcpp: "group",
                                 header: "cheerp/clientlib.h".}

proc group*(this: var Console; groupTitle: String) {.importcpp: "group",
    header: "cheerp/clientlib.h".}

proc groupCollapsed*(this: var Console) {.importcpp: "groupCollapsed",
    header: "cheerp/clientlib.h".}

proc groupCollapsed*(this: var Console; groupTitle: String) {.
    importcpp: "groupCollapsed", header: "cheerp/clientlib.h".}

proc groupEnd*(this: var Console) {.importcpp: "groupEnd",
                                    header: "cheerp/clientlib.h".}

proc info*(this: var Console) {.importcpp: "info", header: "cheerp/clientlib.h".}

proc info*(this: var Console; message: String) {.importcpp: "info",
    header: "cheerp/clientlib.h".}

proc log*(this: var Console) {.importcpp: "log", header: "cheerp/clientlib.h".}

proc log*(this: var Console; message: String) {.importcpp: "log",
    header: "cheerp/clientlib.h".}

proc markTimeline*(this: var Console) {.importcpp: "markTimeline",
                                        header: "cheerp/clientlib.h".}

proc markTimeline*(this: var Console; label: String) {.
    importcpp: "markTimeline", header: "cheerp/clientlib.h".}

proc msIsIndependentlyComposed*(this: var Console; element: ptr Element): bool {.
    importcpp: "msIsIndependentlyComposed", header: "cheerp/clientlib.h".}

proc profile*(this: var Console) {.importcpp: "profile",
                                   header: "cheerp/clientlib.h".}

proc profile*(this: var Console; reportName: String) {.importcpp: "profile",
    header: "cheerp/clientlib.h".}

proc profileEnd*(this: var Console) {.importcpp: "profileEnd",
                                      header: "cheerp/clientlib.h".}

proc select*(this: var Console; element: ptr Element) {.importcpp: "select",
    header: "cheerp/clientlib.h".}

proc table*(this: var Console) {.importcpp: "table",
                                 header: "cheerp/clientlib.h".}

proc time*(this: var Console) {.importcpp: "time", header: "cheerp/clientlib.h".}

proc time*(this: var Console; label: String) {.importcpp: "time",
    header: "cheerp/clientlib.h".}

proc timeEnd*(this: var Console) {.importcpp: "timeEnd",
                                   header: "cheerp/clientlib.h".}

proc timeEnd*(this: var Console; label: String) {.importcpp: "timeEnd",
    header: "cheerp/clientlib.h".}

proc timeStamp*(this: var Console) {.importcpp: "timeStamp",
                                     header: "cheerp/clientlib.h".}

proc timeStamp*(this: var Console; label: String) {.importcpp: "timeStamp",
    header: "cheerp/clientlib.h".}

proc timeline*(this: var Console) {.importcpp: "timeline",
                                    header: "cheerp/clientlib.h".}

proc timeline*(this: var Console; label: String) {.importcpp: "timeline",
    header: "cheerp/clientlib.h".}

proc timelineEnd*(this: var Console) {.importcpp: "timelineEnd",
                                       header: "cheerp/clientlib.h".}

proc timelineEnd*(this: var Console; label: String) {.importcpp: "timelineEnd",
    header: "cheerp/clientlib.h".}

proc warn*(this: var Console) {.importcpp: "warn", header: "cheerp/clientlib.h".}

proc warn*(this: var Console; message: String) {.importcpp: "warn",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Console): ptr Console {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Console; a2: ptr Console) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc get_msContentScript*(this: var ContentScriptGlobalScope): ptr ExtensionScriptApis {.
    importcpp: "get_msContentScript", header: "cheerp/clientlib.h".}

proc get_window*(this: var ContentScriptGlobalScope): ptr Window {.
    importcpp: "get_window", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ContentScriptGlobalScope): ptr ContentScriptGlobalScope {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ContentScriptGlobalScope;
                    a2: ptr ContentScriptGlobalScope) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructContentScriptGlobalScope*(): ContentScriptGlobalScope {.
    constructor, importcpp: "client::ContentScriptGlobalScope(@)",
    header: "cheerp/clientlib.h".}

proc get_buffer*(this: var ConvolverNode): ptr AudioBuffer {.
    importcpp: "get_buffer", header: "cheerp/clientlib.h".}

proc set_buffer*(this: var ConvolverNode; a2: ptr AudioBuffer) {.
    importcpp: "set_buffer", header: "cheerp/clientlib.h".}

proc get_normalize*(this: var ConvolverNode): bool {.importcpp: "get_normalize",
    header: "cheerp/clientlib.h".}

proc set_normalize*(this: var ConvolverNode; a2: bool) {.
    importcpp: "set_normalize", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ConvolverNode): ptr ConvolverNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ConvolverNode; a2: ptr ConvolverNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructConvolverNode*(): ConvolverNode {.constructor,
    importcpp: "client::ConvolverNode(@)", header: "cheerp/clientlib.h".}

proc get_accuracy*(this: var Coordinates): cdouble {.importcpp: "get_accuracy",
    header: "cheerp/clientlib.h".}

proc get_altitude*(this: var Coordinates): cdouble {.importcpp: "get_altitude",
    header: "cheerp/clientlib.h".}

proc get_altitudeAccuracy*(this: var Coordinates): cdouble {.
    importcpp: "get_altitudeAccuracy", header: "cheerp/clientlib.h".}

proc get_heading*(this: var Coordinates): cdouble {.importcpp: "get_heading",
    header: "cheerp/clientlib.h".}

proc get_latitude*(this: var Coordinates): cdouble {.importcpp: "get_latitude",
    header: "cheerp/clientlib.h".}

proc get_longitude*(this: var Coordinates): cdouble {.
    importcpp: "get_longitude", header: "cheerp/clientlib.h".}

proc get_speed*(this: var Coordinates): cdouble {.importcpp: "get_speed",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Coordinates): ptr Coordinates {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Coordinates; a2: ptr Coordinates) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCoordinates*(): Coordinates {.constructor,
    importcpp: "client::Coordinates(@)", header: "cheerp/clientlib.h".}

proc get_highWaterMark*(this: var CountQueuingStrategy): cdouble {.
    importcpp: "get_highWaterMark", header: "cheerp/clientlib.h".}

proc set_highWaterMark*(this: var CountQueuingStrategy; a2: cdouble) {.
    importcpp: "set_highWaterMark", header: "cheerp/clientlib.h".}

proc size*(this: var CountQueuingStrategy): cdouble {.importcpp: "size",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CountQueuingStrategy): ptr CountQueuingStrategy {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CountQueuingStrategy; a2: ptr CountQueuingStrategy) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCountQueuingStrategy*(strategy: ptr QueuingStrategy): CountQueuingStrategy {.
    constructor, importcpp: "client::CountQueuingStrategy(@)",
    header: "cheerp/clientlib.h".}

proc get_subtle*(this: var Crypto): ptr SubtleCrypto {.importcpp: "get_subtle",
    header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Int8Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Int16Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Int32Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Uint8Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Uint16Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Uint32Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Uint8ClampedArray): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Float32Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr Float64Array): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc getRandomValues*(this: var Crypto; array: ptr DataView): ptr Int8Array {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Crypto): ptr Crypto {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Crypto; a2: ptr Crypto) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCrypto*(): Crypto {.constructor, importcpp: "client::Crypto(@)",
                                  header: "cheerp/clientlib.h".}

proc get_algorithm*(this: var CryptoKey): ptr KeyAlgorithm {.
    importcpp: "get_algorithm", header: "cheerp/clientlib.h".}

proc get_extractable*(this: var CryptoKey): bool {.importcpp: "get_extractable",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var CryptoKey): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_usages*(this: var CryptoKey): ptr Array {.importcpp: "get_usages",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CryptoKey): ptr CryptoKey {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CryptoKey; a2: ptr CryptoKey) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCryptoKey*(): CryptoKey {.constructor,
                                        importcpp: "client::CryptoKey(@)",
                                        header: "cheerp/clientlib.h".}

proc get_privateKey*(this: var CryptoKeyPair): ptr CryptoKey {.
    importcpp: "get_privateKey", header: "cheerp/clientlib.h".}

proc set_privateKey*(this: var CryptoKeyPair; a2: ptr CryptoKey) {.
    importcpp: "set_privateKey", header: "cheerp/clientlib.h".}

proc get_publicKey*(this: var CryptoKeyPair): ptr CryptoKey {.
    importcpp: "get_publicKey", header: "cheerp/clientlib.h".}

proc set_publicKey*(this: var CryptoKeyPair; a2: ptr CryptoKey) {.
    importcpp: "set_publicKey", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var CryptoKeyPair): ptr CryptoKeyPair {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var CryptoKeyPair; a2: ptr CryptoKeyPair) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCryptoKeyPair*(): CryptoKeyPair {.constructor,
    importcpp: "client::CryptoKeyPair(@)", header: "cheerp/clientlib.h".}

proc define*(this: var CustomElementRegistry; name: String;
             constructor: ptr Function) {.importcpp: "define",
    header: "cheerp/clientlib.h".}

proc define*(this: var CustomElementRegistry; name: String;
             constructor: ptr Function; options: ptr ElementDefinitionOptions) {.
    importcpp: "define", header: "cheerp/clientlib.h".}

proc whenDefined*(this: var CustomElementRegistry; name: String): ptr Promise {.
    importcpp: "whenDefined", header: "cheerp/clientlib.h".}

proc get_detail*[T](this: var CustomEvent[T]): ptr T {.importcpp: "get_detail",
    header: "cheerp/clientlib.h".}

proc initCustomEvent*[T](this: var CustomEvent[T]; typeArg: String;
                         canBubbleArg: bool; cancelableArg: bool;
                         detailArg: ptr T) {.importcpp: "initCustomEvent",
    header: "cheerp/clientlib.h".}

proc get_prototype*[T](this: var CustomEvent[T]): ptr CustomEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*[T](this: var CustomEvent[T]; a2: ptr CustomEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructCustomEvent*[T](typeArg: String): CustomEvent[T] {.constructor,
    importcpp: "client::CustomEvent<\'*0>(@)", header: "cheerp/clientlib.h".}

proc constructCustomEvent*[T](typeArg: String;
                              eventInitDict: ptr CustomEventInit[T]): CustomEvent[
    T] {.constructor, importcpp: "client::CustomEvent<\'*0>(@)",
         header: "cheerp/clientlib.h".}

proc get_name*(this: var DOMError): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc toString*(this: var DOMError): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMError): ptr DOMError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMError; a2: ptr DOMError) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMError*(): DOMError {.constructor,
                                      importcpp: "client::DOMError(@)",
                                      header: "cheerp/clientlib.h".}

proc get_code*(this: var DOMException): cdouble {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var DOMException): ptr String {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc get_name*(this: var DOMException): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc toString*(this: var DOMException): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMException): ptr DOMException {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMException; a2: ptr DOMException) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMException*(): DOMException {.constructor,
    importcpp: "client::DOMException(@)", header: "cheerp/clientlib.h".}

proc constructDOMException*(message: String): DOMException {.constructor,
    importcpp: "client::DOMException(@)", header: "cheerp/clientlib.h".}

proc constructDOMException*(message: String; name: String): DOMException {.
    constructor, importcpp: "client::DOMException(@)",
    header: "cheerp/clientlib.h".}

proc get_ABORT_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_ABORT_ERR", header: "cheerp/clientlib.h".}

proc get_DATA_CLONE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_DATA_CLONE_ERR", header: "cheerp/clientlib.h".}

proc get_DOMSTRING_SIZE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_DOMSTRING_SIZE_ERR", header: "cheerp/clientlib.h".}

proc get_HIERARCHY_REQUEST_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_HIERARCHY_REQUEST_ERR", header: "cheerp/clientlib.h".}

proc get_INDEX_SIZE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INDEX_SIZE_ERR", header: "cheerp/clientlib.h".}

proc get_INUSE_ATTRIBUTE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INUSE_ATTRIBUTE_ERR", header: "cheerp/clientlib.h".}

proc get_INVALID_ACCESS_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INVALID_ACCESS_ERR", header: "cheerp/clientlib.h".}

proc get_INVALID_CHARACTER_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INVALID_CHARACTER_ERR", header: "cheerp/clientlib.h".}

proc get_INVALID_MODIFICATION_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INVALID_MODIFICATION_ERR", header: "cheerp/clientlib.h".}

proc get_INVALID_NODE_TYPE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INVALID_NODE_TYPE_ERR", header: "cheerp/clientlib.h".}

proc get_INVALID_STATE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_INVALID_STATE_ERR", header: "cheerp/clientlib.h".}

proc get_NAMESPACE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_NAMESPACE_ERR", header: "cheerp/clientlib.h".}

proc get_NETWORK_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_NETWORK_ERR", header: "cheerp/clientlib.h".}

proc get_NOT_FOUND_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_NOT_FOUND_ERR", header: "cheerp/clientlib.h".}

proc get_NOT_SUPPORTED_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_NOT_SUPPORTED_ERR", header: "cheerp/clientlib.h".}

proc get_NO_DATA_ALLOWED_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_NO_DATA_ALLOWED_ERR", header: "cheerp/clientlib.h".}

proc get_NO_MODIFICATION_ALLOWED_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_NO_MODIFICATION_ALLOWED_ERR", header: "cheerp/clientlib.h".}

proc get_PARSE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_PARSE_ERR", header: "cheerp/clientlib.h".}

proc get_QUOTA_EXCEEDED_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_QUOTA_EXCEEDED_ERR", header: "cheerp/clientlib.h".}

proc get_SECURITY_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_SECURITY_ERR", header: "cheerp/clientlib.h".}

proc get_SERIALIZE_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_SERIALIZE_ERR", header: "cheerp/clientlib.h".}

proc get_SYNTAX_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_SYNTAX_ERR", header: "cheerp/clientlib.h".}

proc get_TIMEOUT_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_TIMEOUT_ERR", header: "cheerp/clientlib.h".}

proc get_TYPE_MISMATCH_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_TYPE_MISMATCH_ERR", header: "cheerp/clientlib.h".}

proc get_URL_MISMATCH_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_URL_MISMATCH_ERR", header: "cheerp/clientlib.h".}

proc get_VALIDATION_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_VALIDATION_ERR", header: "cheerp/clientlib.h".}

proc get_WRONG_DOCUMENT_ERR*(this: var DOMException): cdouble {.
    importcpp: "get_WRONG_DOCUMENT_ERR", header: "cheerp/clientlib.h".}

proc createDocument*(this: var DOMImplementation; namespaceURI: String;
                     qualifiedName: String; doctype: ptr DocumentType): ptr Document {.
    importcpp: "createDocument", header: "cheerp/clientlib.h".}

proc createDocumentType*(this: var DOMImplementation; qualifiedName: String;
                         publicId: String; systemId: String): ptr DocumentType {.
    importcpp: "createDocumentType", header: "cheerp/clientlib.h".}

proc createHTMLDocument*(this: var DOMImplementation): ptr Document {.
    importcpp: "createHTMLDocument", header: "cheerp/clientlib.h".}

proc createHTMLDocument*(this: var DOMImplementation; title: String): ptr Document {.
    importcpp: "createHTMLDocument", header: "cheerp/clientlib.h".}

proc hasFeature*(this: var DOMImplementation; feature: String; version: String): bool {.
    importcpp: "hasFeature", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMImplementation): ptr DOMImplementation {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMImplementation; a2: ptr DOMImplementation) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMImplementation*(): DOMImplementation {.constructor,
    importcpp: "client::DOMImplementation(@)", header: "cheerp/clientlib.h".}

proc get_color*(this: var DOML2DeprecatedColorProperty): ptr String {.
    importcpp: "get_color", header: "cheerp/clientlib.h".}

proc set_color*(this: var DOML2DeprecatedColorProperty; a2: String) {.
    importcpp: "set_color", header: "cheerp/clientlib.h".}

proc get_size*(this: var DOML2DeprecatedSizeProperty): cdouble {.
    importcpp: "get_size", header: "cheerp/clientlib.h".}

proc set_size*(this: var DOML2DeprecatedSizeProperty; a2: cdouble) {.
    importcpp: "set_size", header: "cheerp/clientlib.h".}

proc parseFromString*(this: var DOMParser; source: String; mimeType: String): ptr Document {.
    importcpp: "parseFromString", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMParser): ptr DOMParser {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMParser; a2: ptr DOMParser) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMParser*(): DOMParser {.constructor,
                                        importcpp: "client::DOMParser(@)",
                                        header: "cheerp/clientlib.h".}

proc get_bottom*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_bottom",
    header: "cheerp/clientlib.h".}

proc get_height*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_left*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_left",
    header: "cheerp/clientlib.h".}

proc get_right*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_right",
    header: "cheerp/clientlib.h".}

proc get_top*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_top",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var DOMRectReadOnly): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMRectReadOnly): ptr DOMRectReadOnly {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMRectReadOnly; a2: ptr DOMRectReadOnly) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMRectReadOnly*(): DOMRectReadOnly {.constructor,
    importcpp: "client::DOMRectReadOnly(@)", header: "cheerp/clientlib.h".}

proc constructDOMRectReadOnly*(x: cdouble): DOMRectReadOnly {.constructor,
    importcpp: "client::DOMRectReadOnly(@)", header: "cheerp/clientlib.h".}

proc constructDOMRectReadOnly*(x: cdouble; y: cdouble): DOMRectReadOnly {.
    constructor, importcpp: "client::DOMRectReadOnly(@)",
    header: "cheerp/clientlib.h".}

proc constructDOMRectReadOnly*(x: cdouble; y: cdouble; width: cdouble): DOMRectReadOnly {.
    constructor, importcpp: "client::DOMRectReadOnly(@)",
    header: "cheerp/clientlib.h".}

proc constructDOMRectReadOnly*(x: cdouble; y: cdouble; width: cdouble;
                               height: cdouble): DOMRectReadOnly {.constructor,
    importcpp: "client::DOMRectReadOnly(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var DOMRect): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var DOMRect; a2: cdouble) {.importcpp: "set_height",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var DOMRect): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var DOMRect; a2: cdouble) {.importcpp: "set_width",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var DOMRect): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var DOMRect; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var DOMRect): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var DOMRect; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMRect): ptr DOMRect {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMRect; a2: ptr DOMRect) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMRect*(): DOMRect {.constructor,
                                    importcpp: "client::DOMRect(@)",
                                    header: "cheerp/clientlib.h".}

proc constructDOMRect*(x: cdouble): DOMRect {.constructor,
    importcpp: "client::DOMRect(@)", header: "cheerp/clientlib.h".}

proc constructDOMRect*(x: cdouble; y: cdouble): DOMRect {.constructor,
    importcpp: "client::DOMRect(@)", header: "cheerp/clientlib.h".}

proc constructDOMRect*(x: cdouble; y: cdouble; width: cdouble): DOMRect {.
    constructor, importcpp: "client::DOMRect(@)", header: "cheerp/clientlib.h".}

proc constructDOMRect*(x: cdouble; y: cdouble; width: cdouble; height: cdouble): DOMRect {.
    constructor, importcpp: "client::DOMRect(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var DOMRectList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var DOMRectList; index: cdouble): ptr DOMRect {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var DOMRectList; index: cint): ptr DOMRect {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: DOMRectList; index: cint): ptr DOMRect {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_length*(this: var DOMTokenList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc add*(this: var DOMTokenList) {.importcpp: "add",
                                    header: "cheerp/clientlib.h".}

proc contains*(this: var DOMTokenList; token: String): bool {.
    importcpp: "contains", header: "cheerp/clientlib.h".}

proc item*(this: var DOMTokenList; index: cdouble): ptr String {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc remove*(this: var DOMTokenList) {.importcpp: "remove",
                                       header: "cheerp/clientlib.h".}

proc replace*(this: var DOMTokenList; oldToken: String; newToken: String) {.
    importcpp: "replace", header: "cheerp/clientlib.h".}

proc toString*(this: var DOMTokenList): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc toggle*(this: var DOMTokenList; token: String): bool {.importcpp: "toggle",
    header: "cheerp/clientlib.h".}

proc toggle*(this: var DOMTokenList; token: String; force: bool): bool {.
    importcpp: "toggle", header: "cheerp/clientlib.h".}

proc `[]`*(this: var DOMTokenList; index: cint): ptr String {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: DOMTokenList; index: cint): ptr String {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMTokenList): ptr DOMTokenList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMTokenList; a2: ptr DOMTokenList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMTokenList*(): DOMTokenList {.constructor,
    importcpp: "client::DOMTokenList(@)", header: "cheerp/clientlib.h".}

proc get_value*(this: var DOMSettableTokenList): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var DOMSettableTokenList; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMSettableTokenList): ptr DOMSettableTokenList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMSettableTokenList; a2: ptr DOMSettableTokenList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMSettableTokenList*(): DOMSettableTokenList {.constructor,
    importcpp: "client::DOMSettableTokenList(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var DOMStringList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc contains*(this: var DOMStringList; str: String): bool {.
    importcpp: "contains", header: "cheerp/clientlib.h".}

proc item*(this: var DOMStringList; index: cdouble): ptr String {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var DOMStringList; index: cint): ptr String {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: DOMStringList; index: cint): ptr String {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMStringList): ptr DOMStringList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMStringList; a2: ptr DOMStringList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMStringList*(): DOMStringList {.constructor,
    importcpp: "client::DOMStringList(@)", header: "cheerp/clientlib.h".}

proc `[]`*(this: var DOMStringMap; index: cint): ptr Object {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: DOMStringMap; index: cint): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DOMStringMap): ptr DOMStringMap {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DOMStringMap; a2: ptr DOMStringMap) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDOMStringMap*(): DOMStringMap {.constructor,
    importcpp: "client::DOMStringMap(@)", header: "cheerp/clientlib.h".}

proc get_endTime*(this: var TextTrackCue): cdouble {.importcpp: "get_endTime",
    header: "cheerp/clientlib.h".}

proc set_endTime*(this: var TextTrackCue; a2: cdouble) {.
    importcpp: "set_endTime", header: "cheerp/clientlib.h".}

proc get_id*(this: var TextTrackCue): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var TextTrackCue; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_onenter*(this: var TextTrackCue): ptr EventListener {.
    importcpp: "get_onenter", header: "cheerp/clientlib.h".}

proc set_onenter*(this: var TextTrackCue; a2: ptr EventListener) {.
    importcpp: "set_onenter", header: "cheerp/clientlib.h".}

proc get_onexit*(this: var TextTrackCue): ptr EventListener {.
    importcpp: "get_onexit", header: "cheerp/clientlib.h".}

proc set_onexit*(this: var TextTrackCue; a2: ptr EventListener) {.
    importcpp: "set_onexit", header: "cheerp/clientlib.h".}

proc get_pauseOnExit*(this: var TextTrackCue): bool {.
    importcpp: "get_pauseOnExit", header: "cheerp/clientlib.h".}

proc set_pauseOnExit*(this: var TextTrackCue; a2: bool) {.
    importcpp: "set_pauseOnExit", header: "cheerp/clientlib.h".}

proc get_startTime*(this: var TextTrackCue): cdouble {.
    importcpp: "get_startTime", header: "cheerp/clientlib.h".}

proc set_startTime*(this: var TextTrackCue; a2: cdouble) {.
    importcpp: "set_startTime", header: "cheerp/clientlib.h".}

proc get_text*(this: var TextTrackCue): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var TextTrackCue; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc get_track*(this: var TextTrackCue): ptr TextTrack {.importcpp: "get_track",
    header: "cheerp/clientlib.h".}

proc getCueAsHTML*(this: var TextTrackCue): ptr DocumentFragment {.
    importcpp: "getCueAsHTML", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackCue; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackCue; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackCue; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackCue; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackCue; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackCue; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackCue; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackCue; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackCue; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackCue; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextTrackCue): ptr TextTrackCue {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextTrackCue; a2: ptr TextTrackCue) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextTrackCue*(startTime: cdouble; endTime: cdouble; text: String): TextTrackCue {.
    constructor, importcpp: "client::TextTrackCue(@)",
    header: "cheerp/clientlib.h".}

proc get_data*(this: var DataCue): ptr ArrayBuffer {.importcpp: "get_data",
    header: "cheerp/clientlib.h".}

proc set_data*(this: var DataCue; a2: ptr ArrayBuffer) {.importcpp: "set_data",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var DataCue; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var DataCue; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var DataCue; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var DataCue; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var DataCue; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var DataCue; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var DataCue; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var DataCue; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var DataCue; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var DataCue; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DataCue): ptr DataCue {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DataCue; a2: ptr DataCue) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDataCue*(): DataCue {.constructor,
                                    importcpp: "client::DataCue(@)",
                                    header: "cheerp/clientlib.h".}

proc get_dropEffect*(this: var DataTransfer): ptr String {.
    importcpp: "get_dropEffect", header: "cheerp/clientlib.h".}

proc set_dropEffect*(this: var DataTransfer; a2: String) {.
    importcpp: "set_dropEffect", header: "cheerp/clientlib.h".}

proc get_effectAllowed*(this: var DataTransfer): ptr String {.
    importcpp: "get_effectAllowed", header: "cheerp/clientlib.h".}

proc set_effectAllowed*(this: var DataTransfer; a2: String) {.
    importcpp: "set_effectAllowed", header: "cheerp/clientlib.h".}

proc get_files*(this: var DataTransfer): ptr FileList {.importcpp: "get_files",
    header: "cheerp/clientlib.h".}

proc get_items*(this: var DataTransfer): ptr DataTransferItemList {.
    importcpp: "get_items", header: "cheerp/clientlib.h".}

proc get_types*(this: var DataTransfer): ptr Array {.importcpp: "get_types",
    header: "cheerp/clientlib.h".}

proc clearData*(this: var DataTransfer): bool {.importcpp: "clearData",
    header: "cheerp/clientlib.h".}

proc clearData*(this: var DataTransfer; format: String): bool {.
    importcpp: "clearData", header: "cheerp/clientlib.h".}

proc getData*(this: var DataTransfer; format: String): ptr String {.
    importcpp: "getData", header: "cheerp/clientlib.h".}

proc setData*(this: var DataTransfer; format: String; data: String): bool {.
    importcpp: "setData", header: "cheerp/clientlib.h".}

proc setDragImage*(this: var DataTransfer; image: ptr Element; x: cdouble;
                   y: cdouble) {.importcpp: "setDragImage",
                                 header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DataTransfer): ptr DataTransfer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DataTransfer; a2: ptr DataTransfer) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDataTransfer*(): DataTransfer {.constructor,
    importcpp: "client::DataTransfer(@)", header: "cheerp/clientlib.h".}

proc get_kind*(this: var DataTransferItem): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var DataTransferItem): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc getAsFile*(this: var DataTransferItem): ptr File {.importcpp: "getAsFile",
    header: "cheerp/clientlib.h".}

proc getAsString*(this: var DataTransferItem; p_callback: ptr EventListener) {.
    importcpp: "getAsString", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DataTransferItem): ptr DataTransferItem {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DataTransferItem; a2: ptr DataTransferItem) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDataTransferItem*(): DataTransferItem {.constructor,
    importcpp: "client::DataTransferItem(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var DataTransferItemList): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc add*(this: var DataTransferItemList; data: ptr File): ptr DataTransferItem {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var DataTransferItemList; data: String; `type`: String): ptr DataTransferItem {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc clear*(this: var DataTransferItemList) {.importcpp: "clear",
    header: "cheerp/clientlib.h".}

proc item*(this: var DataTransferItemList; index: cdouble): ptr DataTransferItem {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc remove*(this: var DataTransferItemList; index: cdouble) {.
    importcpp: "remove", header: "cheerp/clientlib.h".}

proc `[]`*(this: var DataTransferItemList; index: cint): ptr DataTransferItem {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: DataTransferItemList; index: cint): ptr DataTransferItem {.
    noSideEffect, importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DataTransferItemList): ptr DataTransferItemList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DataTransferItemList; a2: ptr DataTransferItemList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDataTransferItemList*(): DataTransferItemList {.constructor,
    importcpp: "client::DataTransferItemList(@)", header: "cheerp/clientlib.h".}

proc get_id*(this: var DeferredPermissionRequest): cdouble {.
    importcpp: "get_id", header: "cheerp/clientlib.h".}

proc get_type*(this: var DeferredPermissionRequest): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc get_uri*(this: var DeferredPermissionRequest): ptr String {.
    importcpp: "get_uri", header: "cheerp/clientlib.h".}

proc allow*(this: var DeferredPermissionRequest) {.importcpp: "allow",
    header: "cheerp/clientlib.h".}

proc deny*(this: var DeferredPermissionRequest) {.importcpp: "deny",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DeferredPermissionRequest): ptr DeferredPermissionRequest {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DeferredPermissionRequest;
                    a2: ptr DeferredPermissionRequest) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDeferredPermissionRequest*(): DeferredPermissionRequest {.
    constructor, importcpp: "client::DeferredPermissionRequest(@)",
    header: "cheerp/clientlib.h".}

proc get_delayTime*(this: var DelayNode): ptr AudioParam {.
    importcpp: "get_delayTime", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DelayNode): ptr DelayNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DelayNode; a2: ptr DelayNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDelayNode*(): DelayNode {.constructor,
                                        importcpp: "client::DelayNode(@)",
                                        header: "cheerp/clientlib.h".}

proc get_x*(this: var DeviceAcceleration): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var DeviceAcceleration): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc get_z*(this: var DeviceAcceleration): cdouble {.importcpp: "get_z",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DeviceAcceleration): ptr DeviceAcceleration {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DeviceAcceleration; a2: ptr DeviceAcceleration) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDeviceAcceleration*(): DeviceAcceleration {.constructor,
    importcpp: "client::DeviceAcceleration(@)", header: "cheerp/clientlib.h".}

proc get_value*(this: var DeviceLightEvent): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DeviceLightEvent): ptr DeviceLightEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DeviceLightEvent; a2: ptr DeviceLightEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDeviceLightEvent*(typeArg: String): DeviceLightEvent {.
    constructor, importcpp: "client::DeviceLightEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructDeviceLightEvent*(typeArg: String;
                                eventInitDict: ptr DeviceLightEventInit): DeviceLightEvent {.
    constructor, importcpp: "client::DeviceLightEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_acceleration*(this: var DeviceMotionEvent): ptr DeviceAcceleration {.
    importcpp: "get_acceleration", header: "cheerp/clientlib.h".}

proc get_accelerationIncludingGravity*(this: var DeviceMotionEvent): ptr DeviceAcceleration {.
    importcpp: "get_accelerationIncludingGravity", header: "cheerp/clientlib.h".}

proc get_interval*(this: var DeviceMotionEvent): cdouble {.
    importcpp: "get_interval", header: "cheerp/clientlib.h".}

proc get_rotationRate*(this: var DeviceMotionEvent): ptr DeviceRotationRate {.
    importcpp: "get_rotationRate", header: "cheerp/clientlib.h".}

proc initDeviceMotionEvent*(this: var DeviceMotionEvent; `type`: String;
                            bubbles: bool; cancelable: bool;
                            acceleration: ptr DeviceAccelerationDict;
    accelerationIncludingGravity: ptr DeviceAccelerationDict;
                            rotationRate: ptr DeviceRotationRateDict;
                            interval: cdouble) {.
    importcpp: "initDeviceMotionEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DeviceMotionEvent): ptr DeviceMotionEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DeviceMotionEvent; a2: ptr DeviceMotionEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDeviceMotionEvent*(typeArg: String): DeviceMotionEvent {.
    constructor, importcpp: "client::DeviceMotionEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructDeviceMotionEvent*(typeArg: String;
                                 eventInitDict: ptr DeviceMotionEventInit): DeviceMotionEvent {.
    constructor, importcpp: "client::DeviceMotionEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_absolute*(this: var DeviceOrientationEvent): bool {.
    importcpp: "get_absolute", header: "cheerp/clientlib.h".}

proc get_alpha*(this: var DeviceOrientationEvent): cdouble {.
    importcpp: "get_alpha", header: "cheerp/clientlib.h".}

proc get_beta*(this: var DeviceOrientationEvent): cdouble {.
    importcpp: "get_beta", header: "cheerp/clientlib.h".}

proc get_gamma*(this: var DeviceOrientationEvent): cdouble {.
    importcpp: "get_gamma", header: "cheerp/clientlib.h".}

proc initDeviceOrientationEvent*(this: var DeviceOrientationEvent;
                                 `type`: String; bubbles: bool;
                                 cancelable: bool; alpha: cdouble;
                                 beta: cdouble; gamma: cdouble; absolute: bool) {.
    importcpp: "initDeviceOrientationEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DeviceOrientationEvent): ptr DeviceOrientationEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DeviceOrientationEvent;
                    a2: ptr DeviceOrientationEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDeviceOrientationEvent*(typeArg: String): DeviceOrientationEvent {.
    constructor, importcpp: "client::DeviceOrientationEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructDeviceOrientationEvent*(typeArg: String; eventInitDict: ptr DeviceOrientationEventInit): DeviceOrientationEvent {.
    constructor, importcpp: "client::DeviceOrientationEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_alpha*(this: var DeviceRotationRate): cdouble {.importcpp: "get_alpha",
    header: "cheerp/clientlib.h".}

proc get_beta*(this: var DeviceRotationRate): cdouble {.importcpp: "get_beta",
    header: "cheerp/clientlib.h".}

proc get_gamma*(this: var DeviceRotationRate): cdouble {.importcpp: "get_gamma",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DeviceRotationRate): ptr DeviceRotationRate {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DeviceRotationRate; a2: ptr DeviceRotationRate) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDeviceRotationRate*(): DeviceRotationRate {.constructor,
    importcpp: "client::DeviceRotationRate(@)", header: "cheerp/clientlib.h".}

proc get_generator*(this: var DhImportKeyParams): ptr Uint8Array {.
    importcpp: "get_generator", header: "cheerp/clientlib.h".}

proc set_generator*(this: var DhImportKeyParams; a2: ptr Uint8Array) {.
    importcpp: "set_generator", header: "cheerp/clientlib.h".}

proc get_prime*(this: var DhImportKeyParams): ptr Uint8Array {.
    importcpp: "get_prime", header: "cheerp/clientlib.h".}

proc set_prime*(this: var DhImportKeyParams; a2: ptr Uint8Array) {.
    importcpp: "set_prime", header: "cheerp/clientlib.h".}

proc get_generator*(this: var DhKeyAlgorithm): ptr Uint8Array {.
    importcpp: "get_generator", header: "cheerp/clientlib.h".}

proc set_generator*(this: var DhKeyAlgorithm; a2: ptr Uint8Array) {.
    importcpp: "set_generator", header: "cheerp/clientlib.h".}

proc get_prime*(this: var DhKeyAlgorithm): ptr Uint8Array {.
    importcpp: "get_prime", header: "cheerp/clientlib.h".}

proc set_prime*(this: var DhKeyAlgorithm; a2: ptr Uint8Array) {.
    importcpp: "set_prime", header: "cheerp/clientlib.h".}

proc get_public*(this: var DhKeyDeriveParams): ptr CryptoKey {.
    importcpp: "get_public", header: "cheerp/clientlib.h".}

proc set_public*(this: var DhKeyDeriveParams; a2: ptr CryptoKey) {.
    importcpp: "set_public", header: "cheerp/clientlib.h".}

proc get_generator*(this: var DhKeyGenParams): ptr Uint8Array {.
    importcpp: "get_generator", header: "cheerp/clientlib.h".}

proc set_generator*(this: var DhKeyGenParams; a2: ptr Uint8Array) {.
    importcpp: "set_generator", header: "cheerp/clientlib.h".}

proc get_prime*(this: var DhKeyGenParams): ptr Uint8Array {.
    importcpp: "get_prime", header: "cheerp/clientlib.h".}

proc set_prime*(this: var DhKeyGenParams; a2: ptr Uint8Array) {.
    importcpp: "set_prime", header: "cheerp/clientlib.h".}

proc get_pointercancel*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointercancel", header: "cheerp/clientlib.h".}

proc set_pointercancel*(this: var GlobalEventHandlersEventMap;
                        a2: ptr PointerEvent) {.importcpp: "set_pointercancel",
    header: "cheerp/clientlib.h".}

proc get_pointerdown*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointerdown", header: "cheerp/clientlib.h".}

proc set_pointerdown*(this: var GlobalEventHandlersEventMap;
                      a2: ptr PointerEvent) {.importcpp: "set_pointerdown",
    header: "cheerp/clientlib.h".}

proc get_pointerenter*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointerenter", header: "cheerp/clientlib.h".}

proc set_pointerenter*(this: var GlobalEventHandlersEventMap;
                       a2: ptr PointerEvent) {.importcpp: "set_pointerenter",
    header: "cheerp/clientlib.h".}

proc get_pointerleave*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointerleave", header: "cheerp/clientlib.h".}

proc set_pointerleave*(this: var GlobalEventHandlersEventMap;
                       a2: ptr PointerEvent) {.importcpp: "set_pointerleave",
    header: "cheerp/clientlib.h".}

proc get_pointermove*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointermove", header: "cheerp/clientlib.h".}

proc set_pointermove*(this: var GlobalEventHandlersEventMap;
                      a2: ptr PointerEvent) {.importcpp: "set_pointermove",
    header: "cheerp/clientlib.h".}

proc get_pointerout*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointerout", header: "cheerp/clientlib.h".}

proc set_pointerout*(this: var GlobalEventHandlersEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_pointerout", header: "cheerp/clientlib.h".}

proc get_pointerover*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointerover", header: "cheerp/clientlib.h".}

proc set_pointerover*(this: var GlobalEventHandlersEventMap;
                      a2: ptr PointerEvent) {.importcpp: "set_pointerover",
    header: "cheerp/clientlib.h".}

proc get_pointerup*(this: var GlobalEventHandlersEventMap): ptr PointerEvent {.
    importcpp: "get_pointerup", header: "cheerp/clientlib.h".}

proc set_pointerup*(this: var GlobalEventHandlersEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_pointerup", header: "cheerp/clientlib.h".}

proc get_wheel*(this: var GlobalEventHandlersEventMap): ptr WheelEvent {.
    importcpp: "get_wheel", header: "cheerp/clientlib.h".}

proc set_wheel*(this: var GlobalEventHandlersEventMap; a2: ptr WheelEvent) {.
    importcpp: "set_wheel", header: "cheerp/clientlib.h".}

proc get_abort*(this: var DocumentEventMap): ptr UIEvent {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var DocumentEventMap; a2: ptr UIEvent) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_activate*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_activate", header: "cheerp/clientlib.h".}

proc set_activate*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_activate", header: "cheerp/clientlib.h".}

proc get_beforeactivate*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_beforeactivate", header: "cheerp/clientlib.h".}

proc set_beforeactivate*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_beforeactivate", header: "cheerp/clientlib.h".}

proc get_beforedeactivate*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_beforedeactivate", header: "cheerp/clientlib.h".}

proc set_beforedeactivate*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_beforedeactivate", header: "cheerp/clientlib.h".}

proc get_blur*(this: var DocumentEventMap): ptr FocusEvent {.
    importcpp: "get_blur", header: "cheerp/clientlib.h".}

proc set_blur*(this: var DocumentEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_blur", header: "cheerp/clientlib.h".}

proc get_canplay*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_canplay", header: "cheerp/clientlib.h".}

proc set_canplay*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_canplay", header: "cheerp/clientlib.h".}

proc get_canplaythrough*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_canplaythrough", header: "cheerp/clientlib.h".}

proc set_canplaythrough*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_canplaythrough", header: "cheerp/clientlib.h".}

proc get_change*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_change", header: "cheerp/clientlib.h".}

proc set_change*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_change", header: "cheerp/clientlib.h".}

proc get_click*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_click", header: "cheerp/clientlib.h".}

proc set_click*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_click", header: "cheerp/clientlib.h".}

proc get_contextmenu*(this: var DocumentEventMap): ptr PointerEvent {.
    importcpp: "get_contextmenu", header: "cheerp/clientlib.h".}

proc set_contextmenu*(this: var DocumentEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_contextmenu", header: "cheerp/clientlib.h".}

proc get_dblclick*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_dblclick", header: "cheerp/clientlib.h".}

proc set_dblclick*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_dblclick", header: "cheerp/clientlib.h".}

proc get_deactivate*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_deactivate", header: "cheerp/clientlib.h".}

proc set_deactivate*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_deactivate", header: "cheerp/clientlib.h".}

proc get_drag*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_drag", header: "cheerp/clientlib.h".}

proc set_drag*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_drag", header: "cheerp/clientlib.h".}

proc get_dragend*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_dragend", header: "cheerp/clientlib.h".}

proc set_dragend*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragend", header: "cheerp/clientlib.h".}

proc get_dragenter*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_dragenter", header: "cheerp/clientlib.h".}

proc set_dragenter*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragenter", header: "cheerp/clientlib.h".}

proc get_dragleave*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_dragleave", header: "cheerp/clientlib.h".}

proc set_dragleave*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragleave", header: "cheerp/clientlib.h".}

proc get_dragover*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_dragover", header: "cheerp/clientlib.h".}

proc set_dragover*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragover", header: "cheerp/clientlib.h".}

proc get_dragstart*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_dragstart", header: "cheerp/clientlib.h".}

proc set_dragstart*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragstart", header: "cheerp/clientlib.h".}

proc get_drop*(this: var DocumentEventMap): ptr DragEvent {.
    importcpp: "get_drop", header: "cheerp/clientlib.h".}

proc set_drop*(this: var DocumentEventMap; a2: ptr DragEvent) {.
    importcpp: "set_drop", header: "cheerp/clientlib.h".}

proc get_durationchange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_durationchange", header: "cheerp/clientlib.h".}

proc set_durationchange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_durationchange", header: "cheerp/clientlib.h".}

proc get_emptied*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_emptied", header: "cheerp/clientlib.h".}

proc set_emptied*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_emptied", header: "cheerp/clientlib.h".}

proc get_ended*(this: var DocumentEventMap): ptr Event {.importcpp: "get_ended",
    header: "cheerp/clientlib.h".}

proc set_ended*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_ended", header: "cheerp/clientlib.h".}

proc get_error*(this: var DocumentEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var DocumentEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_focus*(this: var DocumentEventMap): ptr FocusEvent {.
    importcpp: "get_focus", header: "cheerp/clientlib.h".}

proc set_focus*(this: var DocumentEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focus", header: "cheerp/clientlib.h".}

proc get_fullscreenchange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_fullscreenchange", header: "cheerp/clientlib.h".}

proc set_fullscreenchange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_fullscreenchange", header: "cheerp/clientlib.h".}

proc get_fullscreenerror*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_fullscreenerror", header: "cheerp/clientlib.h".}

proc set_fullscreenerror*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_fullscreenerror", header: "cheerp/clientlib.h".}

proc get_input*(this: var DocumentEventMap): ptr Event {.importcpp: "get_input",
    header: "cheerp/clientlib.h".}

proc set_input*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_input", header: "cheerp/clientlib.h".}

proc get_invalid*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_invalid", header: "cheerp/clientlib.h".}

proc set_invalid*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_invalid", header: "cheerp/clientlib.h".}

proc get_keydown*(this: var DocumentEventMap): ptr KeyboardEvent {.
    importcpp: "get_keydown", header: "cheerp/clientlib.h".}

proc set_keydown*(this: var DocumentEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keydown", header: "cheerp/clientlib.h".}

proc get_keypress*(this: var DocumentEventMap): ptr KeyboardEvent {.
    importcpp: "get_keypress", header: "cheerp/clientlib.h".}

proc set_keypress*(this: var DocumentEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keypress", header: "cheerp/clientlib.h".}

proc get_keyup*(this: var DocumentEventMap): ptr KeyboardEvent {.
    importcpp: "get_keyup", header: "cheerp/clientlib.h".}

proc set_keyup*(this: var DocumentEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keyup", header: "cheerp/clientlib.h".}

proc get_load*(this: var DocumentEventMap): ptr Event {.importcpp: "get_load",
    header: "cheerp/clientlib.h".}

proc set_load*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_loadeddata*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_loadeddata", header: "cheerp/clientlib.h".}

proc set_loadeddata*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_loadeddata", header: "cheerp/clientlib.h".}

proc get_loadedmetadata*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_loadedmetadata", header: "cheerp/clientlib.h".}

proc set_loadedmetadata*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_loadedmetadata", header: "cheerp/clientlib.h".}

proc get_loadstart*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_loadstart", header: "cheerp/clientlib.h".}

proc set_loadstart*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_loadstart", header: "cheerp/clientlib.h".}

proc get_mousedown*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_mousedown", header: "cheerp/clientlib.h".}

proc set_mousedown*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousedown", header: "cheerp/clientlib.h".}

proc get_mousemove*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_mousemove", header: "cheerp/clientlib.h".}

proc set_mousemove*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousemove", header: "cheerp/clientlib.h".}

proc get_mouseout*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_mouseout", header: "cheerp/clientlib.h".}

proc set_mouseout*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseout", header: "cheerp/clientlib.h".}

proc get_mouseover*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_mouseover", header: "cheerp/clientlib.h".}

proc set_mouseover*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseover", header: "cheerp/clientlib.h".}

proc get_mouseup*(this: var DocumentEventMap): ptr MouseEvent {.
    importcpp: "get_mouseup", header: "cheerp/clientlib.h".}

proc set_mouseup*(this: var DocumentEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseup", header: "cheerp/clientlib.h".}

proc get_mousewheel*(this: var DocumentEventMap): ptr WheelEvent {.
    importcpp: "get_mousewheel", header: "cheerp/clientlib.h".}

proc set_mousewheel*(this: var DocumentEventMap; a2: ptr WheelEvent) {.
    importcpp: "set_mousewheel", header: "cheerp/clientlib.h".}

proc get_MSContentZoom*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSContentZoom", header: "cheerp/clientlib.h".}

proc set_MSContentZoom*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSContentZoom", header: "cheerp/clientlib.h".}

proc get_MSGestureChange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSGestureChange", header: "cheerp/clientlib.h".}

proc set_MSGestureChange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureChange", header: "cheerp/clientlib.h".}

proc get_MSGestureDoubleTap*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSGestureDoubleTap", header: "cheerp/clientlib.h".}

proc set_MSGestureDoubleTap*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureDoubleTap", header: "cheerp/clientlib.h".}

proc get_MSGestureEnd*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSGestureEnd", header: "cheerp/clientlib.h".}

proc set_MSGestureEnd*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureEnd", header: "cheerp/clientlib.h".}

proc get_MSGestureHold*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSGestureHold", header: "cheerp/clientlib.h".}

proc set_MSGestureHold*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureHold", header: "cheerp/clientlib.h".}

proc get_MSGestureStart*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSGestureStart", header: "cheerp/clientlib.h".}

proc set_MSGestureStart*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureStart", header: "cheerp/clientlib.h".}

proc get_MSGestureTap*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSGestureTap", header: "cheerp/clientlib.h".}

proc set_MSGestureTap*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureTap", header: "cheerp/clientlib.h".}

proc get_MSInertiaStart*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSInertiaStart", header: "cheerp/clientlib.h".}

proc set_MSInertiaStart*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSInertiaStart", header: "cheerp/clientlib.h".}

proc get_MSManipulationStateChanged*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSManipulationStateChanged", header: "cheerp/clientlib.h".}

proc set_MSManipulationStateChanged*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSManipulationStateChanged", header: "cheerp/clientlib.h".}

proc get_MSPointerCancel*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerCancel", header: "cheerp/clientlib.h".}

proc set_MSPointerCancel*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerCancel", header: "cheerp/clientlib.h".}

proc get_MSPointerDown*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerDown", header: "cheerp/clientlib.h".}

proc set_MSPointerDown*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerDown", header: "cheerp/clientlib.h".}

proc get_MSPointerEnter*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerEnter", header: "cheerp/clientlib.h".}

proc set_MSPointerEnter*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerEnter", header: "cheerp/clientlib.h".}

proc get_MSPointerLeave*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerLeave", header: "cheerp/clientlib.h".}

proc set_MSPointerLeave*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerLeave", header: "cheerp/clientlib.h".}

proc get_MSPointerMove*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerMove", header: "cheerp/clientlib.h".}

proc set_MSPointerMove*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerMove", header: "cheerp/clientlib.h".}

proc get_MSPointerOut*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerOut", header: "cheerp/clientlib.h".}

proc set_MSPointerOut*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerOut", header: "cheerp/clientlib.h".}

proc get_MSPointerOver*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerOver", header: "cheerp/clientlib.h".}

proc set_MSPointerOver*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerOver", header: "cheerp/clientlib.h".}

proc get_MSPointerUp*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_MSPointerUp", header: "cheerp/clientlib.h".}

proc set_MSPointerUp*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerUp", header: "cheerp/clientlib.h".}

proc get_mssitemodejumplistitemremoved*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_mssitemodejumplistitemremoved", header: "cheerp/clientlib.h".}

proc set_mssitemodejumplistitemremoved*(this: var DocumentEventMap;
                                        a2: ptr Event) {.
    importcpp: "set_mssitemodejumplistitemremoved", header: "cheerp/clientlib.h".}

proc get_msthumbnailclick*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_msthumbnailclick", header: "cheerp/clientlib.h".}

proc set_msthumbnailclick*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_msthumbnailclick", header: "cheerp/clientlib.h".}

proc get_pause*(this: var DocumentEventMap): ptr Event {.importcpp: "get_pause",
    header: "cheerp/clientlib.h".}

proc set_pause*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_pause", header: "cheerp/clientlib.h".}

proc get_play*(this: var DocumentEventMap): ptr Event {.importcpp: "get_play",
    header: "cheerp/clientlib.h".}

proc set_play*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_play", header: "cheerp/clientlib.h".}

proc get_playing*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_playing", header: "cheerp/clientlib.h".}

proc set_playing*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_playing", header: "cheerp/clientlib.h".}

proc get_pointerlockchange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_pointerlockchange", header: "cheerp/clientlib.h".}

proc set_pointerlockchange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_pointerlockchange", header: "cheerp/clientlib.h".}

proc get_pointerlockerror*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_pointerlockerror", header: "cheerp/clientlib.h".}

proc set_pointerlockerror*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_pointerlockerror", header: "cheerp/clientlib.h".}

proc get_progress*(this: var DocumentEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var DocumentEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_ratechange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_ratechange", header: "cheerp/clientlib.h".}

proc set_ratechange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_ratechange", header: "cheerp/clientlib.h".}

proc get_readystatechange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_readystatechange", header: "cheerp/clientlib.h".}

proc set_readystatechange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_readystatechange", header: "cheerp/clientlib.h".}

proc get_reset*(this: var DocumentEventMap): ptr Event {.importcpp: "get_reset",
    header: "cheerp/clientlib.h".}

proc set_reset*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_reset", header: "cheerp/clientlib.h".}

proc get_scroll*(this: var DocumentEventMap): ptr UIEvent {.
    importcpp: "get_scroll", header: "cheerp/clientlib.h".}

proc set_scroll*(this: var DocumentEventMap; a2: ptr UIEvent) {.
    importcpp: "set_scroll", header: "cheerp/clientlib.h".}

proc get_seeked*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_seeked", header: "cheerp/clientlib.h".}

proc set_seeked*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_seeked", header: "cheerp/clientlib.h".}

proc get_seeking*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_seeking", header: "cheerp/clientlib.h".}

proc set_seeking*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_seeking", header: "cheerp/clientlib.h".}

proc get_select*(this: var DocumentEventMap): ptr UIEvent {.
    importcpp: "get_select", header: "cheerp/clientlib.h".}

proc set_select*(this: var DocumentEventMap; a2: ptr UIEvent) {.
    importcpp: "set_select", header: "cheerp/clientlib.h".}

proc get_selectionchange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_selectionchange", header: "cheerp/clientlib.h".}

proc set_selectionchange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_selectionchange", header: "cheerp/clientlib.h".}

proc get_selectstart*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_selectstart", header: "cheerp/clientlib.h".}

proc set_selectstart*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_selectstart", header: "cheerp/clientlib.h".}

proc get_stalled*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_stalled", header: "cheerp/clientlib.h".}

proc set_stalled*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_stalled", header: "cheerp/clientlib.h".}

proc get_stop*(this: var DocumentEventMap): ptr Event {.importcpp: "get_stop",
    header: "cheerp/clientlib.h".}

proc set_stop*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_stop", header: "cheerp/clientlib.h".}

proc get_submit*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_submit", header: "cheerp/clientlib.h".}

proc set_submit*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_submit", header: "cheerp/clientlib.h".}

proc get_suspend*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_suspend", header: "cheerp/clientlib.h".}

proc set_suspend*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_suspend", header: "cheerp/clientlib.h".}

proc get_timeupdate*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_timeupdate", header: "cheerp/clientlib.h".}

proc set_timeupdate*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_timeupdate", header: "cheerp/clientlib.h".}

proc get_touchcancel*(this: var DocumentEventMap): ptr TouchEvent {.
    importcpp: "get_touchcancel", header: "cheerp/clientlib.h".}

proc set_touchcancel*(this: var DocumentEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchcancel", header: "cheerp/clientlib.h".}

proc get_touchend*(this: var DocumentEventMap): ptr TouchEvent {.
    importcpp: "get_touchend", header: "cheerp/clientlib.h".}

proc set_touchend*(this: var DocumentEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchend", header: "cheerp/clientlib.h".}

proc get_touchmove*(this: var DocumentEventMap): ptr TouchEvent {.
    importcpp: "get_touchmove", header: "cheerp/clientlib.h".}

proc set_touchmove*(this: var DocumentEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchmove", header: "cheerp/clientlib.h".}

proc get_touchstart*(this: var DocumentEventMap): ptr TouchEvent {.
    importcpp: "get_touchstart", header: "cheerp/clientlib.h".}

proc set_touchstart*(this: var DocumentEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchstart", header: "cheerp/clientlib.h".}

proc get_volumechange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_volumechange", header: "cheerp/clientlib.h".}

proc set_volumechange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_volumechange", header: "cheerp/clientlib.h".}

proc get_waiting*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_waiting", header: "cheerp/clientlib.h".}

proc set_waiting*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_waiting", header: "cheerp/clientlib.h".}

proc get_webkitfullscreenchange*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_webkitfullscreenchange", header: "cheerp/clientlib.h".}

proc set_webkitfullscreenchange*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_webkitfullscreenchange", header: "cheerp/clientlib.h".}

proc get_webkitfullscreenerror*(this: var DocumentEventMap): ptr Event {.
    importcpp: "get_webkitfullscreenerror", header: "cheerp/clientlib.h".}

proc set_webkitfullscreenerror*(this: var DocumentEventMap; a2: ptr Event) {.
    importcpp: "set_webkitfullscreenerror", header: "cheerp/clientlib.h".}

proc get_onpointercancel*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointercancel", header: "cheerp/clientlib.h".}

proc set_onpointercancel*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointercancel", header: "cheerp/clientlib.h".}

proc get_onpointerdown*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointerdown", header: "cheerp/clientlib.h".}

proc set_onpointerdown*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointerdown", header: "cheerp/clientlib.h".}

proc get_onpointerenter*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointerenter", header: "cheerp/clientlib.h".}

proc set_onpointerenter*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointerenter", header: "cheerp/clientlib.h".}

proc get_onpointerleave*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointerleave", header: "cheerp/clientlib.h".}

proc set_onpointerleave*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointerleave", header: "cheerp/clientlib.h".}

proc get_onpointermove*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointermove", header: "cheerp/clientlib.h".}

proc set_onpointermove*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointermove", header: "cheerp/clientlib.h".}

proc get_onpointerout*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointerout", header: "cheerp/clientlib.h".}

proc set_onpointerout*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointerout", header: "cheerp/clientlib.h".}

proc get_onpointerover*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointerover", header: "cheerp/clientlib.h".}

proc set_onpointerover*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointerover", header: "cheerp/clientlib.h".}

proc get_onpointerup*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onpointerup", header: "cheerp/clientlib.h".}

proc set_onpointerup*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpointerup", header: "cheerp/clientlib.h".}

proc get_onwheel*(this: var GlobalEventHandlers): ptr EventListener {.
    importcpp: "get_onwheel", header: "cheerp/clientlib.h".}

proc set_onwheel*(this: var GlobalEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onwheel", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var GlobalEventHandlers; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var GlobalEventHandlers; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var GlobalEventHandlers; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var GlobalEventHandlers; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var GlobalEventHandlers; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var GlobalEventHandlers; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var GlobalEventHandlers; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var GlobalEventHandlers; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var GlobalEventHandlers; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var GlobalEventHandlers; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_childElementCount*(this: var ParentNode): cdouble {.
    importcpp: "get_childElementCount", header: "cheerp/clientlib.h".}

proc get_firstElementChild*(this: var ParentNode): ptr Element {.
    importcpp: "get_firstElementChild", header: "cheerp/clientlib.h".}

proc get_lastElementChild*(this: var ParentNode): ptr Element {.
    importcpp: "get_lastElementChild", header: "cheerp/clientlib.h".}

proc get_children*(this: var ParentNode): ptr HTMLCollection {.
    importcpp: "get_children", header: "cheerp/clientlib.h".}

proc querySelector*(this: var ParentNode; selectors: String): ptr Element {.
    importcpp: "querySelector", header: "cheerp/clientlib.h".}

proc querySelectorAll*(this: var ParentNode; selectors: String): ptr NodeListOf[
    Element] {.importcpp: "querySelectorAll", header: "cheerp/clientlib.h".}

proc createEvent*(this: var DocumentEvent; eventInterface: String): ptr Event {.
    importcpp: "createEvent", header: "cheerp/clientlib.h".}

proc get_URLUnencoded*(this: var Document): ptr String {.
    importcpp: "get_URLUnencoded", header: "cheerp/clientlib.h".}

proc get_activeElement*(this: var Document): ptr Element {.
    importcpp: "get_activeElement", header: "cheerp/clientlib.h".}

proc get_alinkColor*(this: var Document): ptr String {.
    importcpp: "get_alinkColor", header: "cheerp/clientlib.h".}

proc set_alinkColor*(this: var Document; a2: String) {.
    importcpp: "set_alinkColor", header: "cheerp/clientlib.h".}

proc get_all*(this: var Document): ptr HTMLAllCollection {.importcpp: "get_all",
    header: "cheerp/clientlib.h".}

proc get_anchors*(this: var Document): ptr HTMLCollectionOf[HTMLAnchorElement] {.
    importcpp: "get_anchors", header: "cheerp/clientlib.h".}

proc get_applets*(this: var Document): ptr HTMLCollectionOf[HTMLAppletElement] {.
    importcpp: "get_applets", header: "cheerp/clientlib.h".}

proc get_bgColor*(this: var Document): ptr String {.importcpp: "get_bgColor",
    header: "cheerp/clientlib.h".}

proc set_bgColor*(this: var Document; a2: String) {.importcpp: "set_bgColor",
    header: "cheerp/clientlib.h".}

proc get_body*(this: var Document): ptr HTMLElement {.importcpp: "get_body",
    header: "cheerp/clientlib.h".}

proc set_body*(this: var Document; a2: ptr HTMLElement) {.importcpp: "set_body",
    header: "cheerp/clientlib.h".}

proc get_characterSet*(this: var Document): ptr String {.
    importcpp: "get_characterSet", header: "cheerp/clientlib.h".}

proc get_charset*(this: var Document): ptr String {.importcpp: "get_charset",
    header: "cheerp/clientlib.h".}

proc set_charset*(this: var Document; a2: String) {.importcpp: "set_charset",
    header: "cheerp/clientlib.h".}

proc get_compatMode*(this: var Document): ptr String {.
    importcpp: "get_compatMode", header: "cheerp/clientlib.h".}

proc get_cookie*(this: var Document): ptr String {.importcpp: "get_cookie",
    header: "cheerp/clientlib.h".}

proc set_cookie*(this: var Document; a2: String) {.importcpp: "set_cookie",
    header: "cheerp/clientlib.h".}

proc get_currentScript*(this: var Document): ptr HTMLScriptElement {.
    importcpp: "get_currentScript", header: "cheerp/clientlib.h".}

proc get_defaultView*(this: var Document): ptr Window {.
    importcpp: "get_defaultView", header: "cheerp/clientlib.h".}

proc get_designMode*(this: var Document): ptr String {.
    importcpp: "get_designMode", header: "cheerp/clientlib.h".}

proc set_designMode*(this: var Document; a2: String) {.
    importcpp: "set_designMode", header: "cheerp/clientlib.h".}

proc get_dir*(this: var Document): ptr String {.importcpp: "get_dir",
    header: "cheerp/clientlib.h".}

proc set_dir*(this: var Document; a2: String) {.importcpp: "set_dir",
    header: "cheerp/clientlib.h".}

proc get_doctype*(this: var Document): ptr DocumentType {.
    importcpp: "get_doctype", header: "cheerp/clientlib.h".}

proc get_documentElement*(this: var Document): ptr HTMLElement {.
    importcpp: "get_documentElement", header: "cheerp/clientlib.h".}

proc get_domain*(this: var Document): ptr String {.importcpp: "get_domain",
    header: "cheerp/clientlib.h".}

proc set_domain*(this: var Document; a2: String) {.importcpp: "set_domain",
    header: "cheerp/clientlib.h".}

proc get_embeds*(this: var Document): ptr HTMLCollectionOf[HTMLEmbedElement] {.
    importcpp: "get_embeds", header: "cheerp/clientlib.h".}

proc get_fgColor*(this: var Document): ptr String {.importcpp: "get_fgColor",
    header: "cheerp/clientlib.h".}

proc set_fgColor*(this: var Document; a2: String) {.importcpp: "set_fgColor",
    header: "cheerp/clientlib.h".}

proc get_forms*(this: var Document): ptr HTMLCollectionOf[HTMLFormElement] {.
    importcpp: "get_forms", header: "cheerp/clientlib.h".}

proc get_fullscreenElement*(this: var Document): ptr Element {.
    importcpp: "get_fullscreenElement", header: "cheerp/clientlib.h".}

proc get_fullscreenEnabled*(this: var Document): bool {.
    importcpp: "get_fullscreenEnabled", header: "cheerp/clientlib.h".}

proc get_head*(this: var Document): ptr HTMLHeadElement {.importcpp: "get_head",
    header: "cheerp/clientlib.h".}

proc get_hidden*(this: var Document): bool {.importcpp: "get_hidden",
    header: "cheerp/clientlib.h".}

proc get_images*(this: var Document): ptr HTMLCollectionOf[HTMLImageElement] {.
    importcpp: "get_images", header: "cheerp/clientlib.h".}

proc get_implementation*(this: var Document): ptr DOMImplementation {.
    importcpp: "get_implementation", header: "cheerp/clientlib.h".}

proc get_inputEncoding*(this: var Document): ptr String {.
    importcpp: "get_inputEncoding", header: "cheerp/clientlib.h".}

proc get_lastModified*(this: var Document): ptr String {.
    importcpp: "get_lastModified", header: "cheerp/clientlib.h".}

proc get_linkColor*(this: var Document): ptr String {.
    importcpp: "get_linkColor", header: "cheerp/clientlib.h".}

proc set_linkColor*(this: var Document; a2: String) {.
    importcpp: "set_linkColor", header: "cheerp/clientlib.h".}

proc get_links*(this: var Document): ptr HTMLCollectionOf[Object] {.
    importcpp: "get_links", header: "cheerp/clientlib.h".}

proc get_location*(this: var Document): ptr Location {.
    importcpp: "get_location", header: "cheerp/clientlib.h".}

proc set_location*(this: var Document; a2: ptr Location) {.
    importcpp: "set_location", header: "cheerp/clientlib.h".}

proc get_msCSSOMElementFloatMetrics*(this: var Document): bool {.
    importcpp: "get_msCSSOMElementFloatMetrics", header: "cheerp/clientlib.h".}

proc set_msCSSOMElementFloatMetrics*(this: var Document; a2: bool) {.
    importcpp: "set_msCSSOMElementFloatMetrics", header: "cheerp/clientlib.h".}

proc get_msCapsLockWarningOff*(this: var Document): bool {.
    importcpp: "get_msCapsLockWarningOff", header: "cheerp/clientlib.h".}

proc set_msCapsLockWarningOff*(this: var Document; a2: bool) {.
    importcpp: "set_msCapsLockWarningOff", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var Document): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onactivate*(this: var Document): ptr EventListener {.
    importcpp: "get_onactivate", header: "cheerp/clientlib.h".}

proc set_onactivate*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onactivate", header: "cheerp/clientlib.h".}

proc get_onbeforeactivate*(this: var Document): ptr EventListener {.
    importcpp: "get_onbeforeactivate", header: "cheerp/clientlib.h".}

proc set_onbeforeactivate*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onbeforeactivate", header: "cheerp/clientlib.h".}

proc get_onbeforedeactivate*(this: var Document): ptr EventListener {.
    importcpp: "get_onbeforedeactivate", header: "cheerp/clientlib.h".}

proc set_onbeforedeactivate*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onbeforedeactivate", header: "cheerp/clientlib.h".}

proc get_onblur*(this: var Document): ptr EventListener {.
    importcpp: "get_onblur", header: "cheerp/clientlib.h".}

proc set_onblur*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onblur", header: "cheerp/clientlib.h".}

proc get_oncanplay*(this: var Document): ptr EventListener {.
    importcpp: "get_oncanplay", header: "cheerp/clientlib.h".}

proc set_oncanplay*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_oncanplay", header: "cheerp/clientlib.h".}

proc get_oncanplaythrough*(this: var Document): ptr EventListener {.
    importcpp: "get_oncanplaythrough", header: "cheerp/clientlib.h".}

proc set_oncanplaythrough*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_oncanplaythrough", header: "cheerp/clientlib.h".}

proc get_onchange*(this: var Document): ptr EventListener {.
    importcpp: "get_onchange", header: "cheerp/clientlib.h".}

proc set_onchange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onchange", header: "cheerp/clientlib.h".}

proc get_onclick*(this: var Document): ptr EventListener {.
    importcpp: "get_onclick", header: "cheerp/clientlib.h".}

proc set_onclick*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onclick", header: "cheerp/clientlib.h".}

proc get_oncontextmenu*(this: var Document): ptr EventListener {.
    importcpp: "get_oncontextmenu", header: "cheerp/clientlib.h".}

proc set_oncontextmenu*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_oncontextmenu", header: "cheerp/clientlib.h".}

proc get_ondblclick*(this: var Document): ptr EventListener {.
    importcpp: "get_ondblclick", header: "cheerp/clientlib.h".}

proc set_ondblclick*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondblclick", header: "cheerp/clientlib.h".}

proc get_ondeactivate*(this: var Document): ptr EventListener {.
    importcpp: "get_ondeactivate", header: "cheerp/clientlib.h".}

proc set_ondeactivate*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondeactivate", header: "cheerp/clientlib.h".}

proc get_ondrag*(this: var Document): ptr EventListener {.
    importcpp: "get_ondrag", header: "cheerp/clientlib.h".}

proc set_ondrag*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondrag", header: "cheerp/clientlib.h".}

proc get_ondragend*(this: var Document): ptr EventListener {.
    importcpp: "get_ondragend", header: "cheerp/clientlib.h".}

proc set_ondragend*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondragend", header: "cheerp/clientlib.h".}

proc get_ondragenter*(this: var Document): ptr EventListener {.
    importcpp: "get_ondragenter", header: "cheerp/clientlib.h".}

proc set_ondragenter*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondragenter", header: "cheerp/clientlib.h".}

proc get_ondragleave*(this: var Document): ptr EventListener {.
    importcpp: "get_ondragleave", header: "cheerp/clientlib.h".}

proc set_ondragleave*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondragleave", header: "cheerp/clientlib.h".}

proc get_ondragover*(this: var Document): ptr EventListener {.
    importcpp: "get_ondragover", header: "cheerp/clientlib.h".}

proc set_ondragover*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondragover", header: "cheerp/clientlib.h".}

proc get_ondragstart*(this: var Document): ptr EventListener {.
    importcpp: "get_ondragstart", header: "cheerp/clientlib.h".}

proc set_ondragstart*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondragstart", header: "cheerp/clientlib.h".}

proc get_ondrop*(this: var Document): ptr EventListener {.
    importcpp: "get_ondrop", header: "cheerp/clientlib.h".}

proc set_ondrop*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondrop", header: "cheerp/clientlib.h".}

proc get_ondurationchange*(this: var Document): ptr EventListener {.
    importcpp: "get_ondurationchange", header: "cheerp/clientlib.h".}

proc set_ondurationchange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ondurationchange", header: "cheerp/clientlib.h".}

proc get_onemptied*(this: var Document): ptr EventListener {.
    importcpp: "get_onemptied", header: "cheerp/clientlib.h".}

proc set_onemptied*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onemptied", header: "cheerp/clientlib.h".}

proc get_onended*(this: var Document): ptr EventListener {.
    importcpp: "get_onended", header: "cheerp/clientlib.h".}

proc set_onended*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onended", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var Document): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onfocus*(this: var Document): ptr EventListener {.
    importcpp: "get_onfocus", header: "cheerp/clientlib.h".}

proc set_onfocus*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onfocus", header: "cheerp/clientlib.h".}

proc get_onfullscreenchange*(this: var Document): ptr EventListener {.
    importcpp: "get_onfullscreenchange", header: "cheerp/clientlib.h".}

proc set_onfullscreenchange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onfullscreenchange", header: "cheerp/clientlib.h".}

proc get_onfullscreenerror*(this: var Document): ptr EventListener {.
    importcpp: "get_onfullscreenerror", header: "cheerp/clientlib.h".}

proc set_onfullscreenerror*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onfullscreenerror", header: "cheerp/clientlib.h".}

proc get_oninput*(this: var Document): ptr EventListener {.
    importcpp: "get_oninput", header: "cheerp/clientlib.h".}

proc set_oninput*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_oninput", header: "cheerp/clientlib.h".}

proc get_oninvalid*(this: var Document): ptr EventListener {.
    importcpp: "get_oninvalid", header: "cheerp/clientlib.h".}

proc set_oninvalid*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_oninvalid", header: "cheerp/clientlib.h".}

proc get_onkeydown*(this: var Document): ptr EventListener {.
    importcpp: "get_onkeydown", header: "cheerp/clientlib.h".}

proc set_onkeydown*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onkeydown", header: "cheerp/clientlib.h".}

proc get_onkeypress*(this: var Document): ptr EventListener {.
    importcpp: "get_onkeypress", header: "cheerp/clientlib.h".}

proc set_onkeypress*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onkeypress", header: "cheerp/clientlib.h".}

proc get_onkeyup*(this: var Document): ptr EventListener {.
    importcpp: "get_onkeyup", header: "cheerp/clientlib.h".}

proc set_onkeyup*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onkeyup", header: "cheerp/clientlib.h".}

proc get_onload*(this: var Document): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onloadeddata*(this: var Document): ptr EventListener {.
    importcpp: "get_onloadeddata", header: "cheerp/clientlib.h".}

proc set_onloadeddata*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onloadeddata", header: "cheerp/clientlib.h".}

proc get_onloadedmetadata*(this: var Document): ptr EventListener {.
    importcpp: "get_onloadedmetadata", header: "cheerp/clientlib.h".}

proc set_onloadedmetadata*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onloadedmetadata", header: "cheerp/clientlib.h".}

proc get_onloadstart*(this: var Document): ptr EventListener {.
    importcpp: "get_onloadstart", header: "cheerp/clientlib.h".}

proc set_onloadstart*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onloadstart", header: "cheerp/clientlib.h".}

proc get_onmousedown*(this: var Document): ptr EventListener {.
    importcpp: "get_onmousedown", header: "cheerp/clientlib.h".}

proc set_onmousedown*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmousedown", header: "cheerp/clientlib.h".}

proc get_onmousemove*(this: var Document): ptr EventListener {.
    importcpp: "get_onmousemove", header: "cheerp/clientlib.h".}

proc set_onmousemove*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmousemove", header: "cheerp/clientlib.h".}

proc get_onmouseout*(this: var Document): ptr EventListener {.
    importcpp: "get_onmouseout", header: "cheerp/clientlib.h".}

proc set_onmouseout*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmouseout", header: "cheerp/clientlib.h".}

proc get_onmouseover*(this: var Document): ptr EventListener {.
    importcpp: "get_onmouseover", header: "cheerp/clientlib.h".}

proc set_onmouseover*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmouseover", header: "cheerp/clientlib.h".}

proc get_onmouseup*(this: var Document): ptr EventListener {.
    importcpp: "get_onmouseup", header: "cheerp/clientlib.h".}

proc set_onmouseup*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmouseup", header: "cheerp/clientlib.h".}

proc get_onmousewheel*(this: var Document): ptr EventListener {.
    importcpp: "get_onmousewheel", header: "cheerp/clientlib.h".}

proc set_onmousewheel*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmousewheel", header: "cheerp/clientlib.h".}

proc get_onmscontentzoom*(this: var Document): ptr EventListener {.
    importcpp: "get_onmscontentzoom", header: "cheerp/clientlib.h".}

proc set_onmscontentzoom*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmscontentzoom", header: "cheerp/clientlib.h".}

proc get_onmsgesturechange*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsgesturechange", header: "cheerp/clientlib.h".}

proc set_onmsgesturechange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturechange", header: "cheerp/clientlib.h".}

proc get_onmsgesturedoubletap*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsgesturedoubletap", header: "cheerp/clientlib.h".}

proc set_onmsgesturedoubletap*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturedoubletap", header: "cheerp/clientlib.h".}

proc get_onmsgestureend*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsgestureend", header: "cheerp/clientlib.h".}

proc set_onmsgestureend*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsgestureend", header: "cheerp/clientlib.h".}

proc get_onmsgesturehold*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsgesturehold", header: "cheerp/clientlib.h".}

proc set_onmsgesturehold*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturehold", header: "cheerp/clientlib.h".}

proc get_onmsgesturestart*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsgesturestart", header: "cheerp/clientlib.h".}

proc set_onmsgesturestart*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturestart", header: "cheerp/clientlib.h".}

proc get_onmsgesturetap*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsgesturetap", header: "cheerp/clientlib.h".}

proc set_onmsgesturetap*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturetap", header: "cheerp/clientlib.h".}

proc get_onmsinertiastart*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsinertiastart", header: "cheerp/clientlib.h".}

proc set_onmsinertiastart*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsinertiastart", header: "cheerp/clientlib.h".}

proc get_onmsmanipulationstatechanged*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsmanipulationstatechanged", header: "cheerp/clientlib.h".}

proc set_onmsmanipulationstatechanged*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsmanipulationstatechanged", header: "cheerp/clientlib.h".}

proc get_onmspointercancel*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointercancel", header: "cheerp/clientlib.h".}

proc set_onmspointercancel*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointercancel", header: "cheerp/clientlib.h".}

proc get_onmspointerdown*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointerdown", header: "cheerp/clientlib.h".}

proc set_onmspointerdown*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointerdown", header: "cheerp/clientlib.h".}

proc get_onmspointerenter*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointerenter", header: "cheerp/clientlib.h".}

proc set_onmspointerenter*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointerenter", header: "cheerp/clientlib.h".}

proc get_onmspointerleave*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointerleave", header: "cheerp/clientlib.h".}

proc set_onmspointerleave*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointerleave", header: "cheerp/clientlib.h".}

proc get_onmspointermove*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointermove", header: "cheerp/clientlib.h".}

proc set_onmspointermove*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointermove", header: "cheerp/clientlib.h".}

proc get_onmspointerout*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointerout", header: "cheerp/clientlib.h".}

proc set_onmspointerout*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointerout", header: "cheerp/clientlib.h".}

proc get_onmspointerover*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointerover", header: "cheerp/clientlib.h".}

proc set_onmspointerover*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointerover", header: "cheerp/clientlib.h".}

proc get_onmspointerup*(this: var Document): ptr EventListener {.
    importcpp: "get_onmspointerup", header: "cheerp/clientlib.h".}

proc set_onmspointerup*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmspointerup", header: "cheerp/clientlib.h".}

proc get_onmssitemodejumplistitemremoved*(this: var Document): ptr EventListener {.
    importcpp: "get_onmssitemodejumplistitemremoved",
    header: "cheerp/clientlib.h".}

proc set_onmssitemodejumplistitemremoved*(this: var Document;
    a2: ptr EventListener) {.importcpp: "set_onmssitemodejumplistitemremoved",
                             header: "cheerp/clientlib.h".}

proc get_onmsthumbnailclick*(this: var Document): ptr EventListener {.
    importcpp: "get_onmsthumbnailclick", header: "cheerp/clientlib.h".}

proc set_onmsthumbnailclick*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onmsthumbnailclick", header: "cheerp/clientlib.h".}

proc get_onpause*(this: var Document): ptr EventListener {.
    importcpp: "get_onpause", header: "cheerp/clientlib.h".}

proc set_onpause*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onpause", header: "cheerp/clientlib.h".}

proc get_onplay*(this: var Document): ptr EventListener {.
    importcpp: "get_onplay", header: "cheerp/clientlib.h".}

proc set_onplay*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onplay", header: "cheerp/clientlib.h".}

proc get_onplaying*(this: var Document): ptr EventListener {.
    importcpp: "get_onplaying", header: "cheerp/clientlib.h".}

proc set_onplaying*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onplaying", header: "cheerp/clientlib.h".}

proc get_onpointerlockchange*(this: var Document): ptr EventListener {.
    importcpp: "get_onpointerlockchange", header: "cheerp/clientlib.h".}

proc set_onpointerlockchange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onpointerlockchange", header: "cheerp/clientlib.h".}

proc get_onpointerlockerror*(this: var Document): ptr EventListener {.
    importcpp: "get_onpointerlockerror", header: "cheerp/clientlib.h".}

proc set_onpointerlockerror*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onpointerlockerror", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var Document): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_onratechange*(this: var Document): ptr EventListener {.
    importcpp: "get_onratechange", header: "cheerp/clientlib.h".}

proc set_onratechange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onratechange", header: "cheerp/clientlib.h".}

proc get_onreadystatechange*(this: var Document): ptr EventListener {.
    importcpp: "get_onreadystatechange", header: "cheerp/clientlib.h".}

proc set_onreadystatechange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onreadystatechange", header: "cheerp/clientlib.h".}

proc get_onreset*(this: var Document): ptr EventListener {.
    importcpp: "get_onreset", header: "cheerp/clientlib.h".}

proc set_onreset*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onreset", header: "cheerp/clientlib.h".}

proc get_onscroll*(this: var Document): ptr EventListener {.
    importcpp: "get_onscroll", header: "cheerp/clientlib.h".}

proc set_onscroll*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onscroll", header: "cheerp/clientlib.h".}

proc get_onseeked*(this: var Document): ptr EventListener {.
    importcpp: "get_onseeked", header: "cheerp/clientlib.h".}

proc set_onseeked*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onseeked", header: "cheerp/clientlib.h".}

proc get_onseeking*(this: var Document): ptr EventListener {.
    importcpp: "get_onseeking", header: "cheerp/clientlib.h".}

proc set_onseeking*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onseeking", header: "cheerp/clientlib.h".}

proc get_onselect*(this: var Document): ptr EventListener {.
    importcpp: "get_onselect", header: "cheerp/clientlib.h".}

proc set_onselect*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onselect", header: "cheerp/clientlib.h".}

proc get_onselectionchange*(this: var Document): ptr EventListener {.
    importcpp: "get_onselectionchange", header: "cheerp/clientlib.h".}

proc set_onselectionchange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onselectionchange", header: "cheerp/clientlib.h".}

proc get_onselectstart*(this: var Document): ptr EventListener {.
    importcpp: "get_onselectstart", header: "cheerp/clientlib.h".}

proc set_onselectstart*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onselectstart", header: "cheerp/clientlib.h".}

proc get_onstalled*(this: var Document): ptr EventListener {.
    importcpp: "get_onstalled", header: "cheerp/clientlib.h".}

proc set_onstalled*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onstalled", header: "cheerp/clientlib.h".}

proc get_onstop*(this: var Document): ptr EventListener {.
    importcpp: "get_onstop", header: "cheerp/clientlib.h".}

proc set_onstop*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onstop", header: "cheerp/clientlib.h".}

proc get_onsubmit*(this: var Document): ptr EventListener {.
    importcpp: "get_onsubmit", header: "cheerp/clientlib.h".}

proc set_onsubmit*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onsubmit", header: "cheerp/clientlib.h".}

proc get_onsuspend*(this: var Document): ptr EventListener {.
    importcpp: "get_onsuspend", header: "cheerp/clientlib.h".}

proc set_onsuspend*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onsuspend", header: "cheerp/clientlib.h".}

proc get_ontimeupdate*(this: var Document): ptr EventListener {.
    importcpp: "get_ontimeupdate", header: "cheerp/clientlib.h".}

proc set_ontimeupdate*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ontimeupdate", header: "cheerp/clientlib.h".}

proc get_ontouchcancel*(this: var Document): ptr EventListener {.
    importcpp: "get_ontouchcancel", header: "cheerp/clientlib.h".}

proc set_ontouchcancel*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ontouchcancel", header: "cheerp/clientlib.h".}

proc get_ontouchend*(this: var Document): ptr EventListener {.
    importcpp: "get_ontouchend", header: "cheerp/clientlib.h".}

proc set_ontouchend*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ontouchend", header: "cheerp/clientlib.h".}

proc get_ontouchmove*(this: var Document): ptr EventListener {.
    importcpp: "get_ontouchmove", header: "cheerp/clientlib.h".}

proc set_ontouchmove*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ontouchmove", header: "cheerp/clientlib.h".}

proc get_ontouchstart*(this: var Document): ptr EventListener {.
    importcpp: "get_ontouchstart", header: "cheerp/clientlib.h".}

proc set_ontouchstart*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_ontouchstart", header: "cheerp/clientlib.h".}

proc get_onvisibilitychange*(this: var Document): ptr EventListener {.
    importcpp: "get_onvisibilitychange", header: "cheerp/clientlib.h".}

proc set_onvisibilitychange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onvisibilitychange", header: "cheerp/clientlib.h".}

proc get_onvolumechange*(this: var Document): ptr EventListener {.
    importcpp: "get_onvolumechange", header: "cheerp/clientlib.h".}

proc set_onvolumechange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onvolumechange", header: "cheerp/clientlib.h".}

proc get_onwaiting*(this: var Document): ptr EventListener {.
    importcpp: "get_onwaiting", header: "cheerp/clientlib.h".}

proc set_onwaiting*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onwaiting", header: "cheerp/clientlib.h".}

proc get_onwebkitfullscreenchange*(this: var Document): ptr EventListener {.
    importcpp: "get_onwebkitfullscreenchange", header: "cheerp/clientlib.h".}

proc set_onwebkitfullscreenchange*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onwebkitfullscreenchange", header: "cheerp/clientlib.h".}

proc get_onwebkitfullscreenerror*(this: var Document): ptr EventListener {.
    importcpp: "get_onwebkitfullscreenerror", header: "cheerp/clientlib.h".}

proc set_onwebkitfullscreenerror*(this: var Document; a2: ptr EventListener) {.
    importcpp: "set_onwebkitfullscreenerror", header: "cheerp/clientlib.h".}

proc get_plugins*(this: var Document): ptr HTMLCollectionOf[HTMLEmbedElement] {.
    importcpp: "get_plugins", header: "cheerp/clientlib.h".}

proc get_pointerLockElement*(this: var Document): ptr Element {.
    importcpp: "get_pointerLockElement", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var Document): ptr String {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_referrer*(this: var Document): ptr String {.importcpp: "get_referrer",
    header: "cheerp/clientlib.h".}

proc get_rootElement*(this: var Document): ptr SVGSVGElement {.
    importcpp: "get_rootElement", header: "cheerp/clientlib.h".}

proc get_scripts*(this: var Document): ptr HTMLCollectionOf[HTMLScriptElement] {.
    importcpp: "get_scripts", header: "cheerp/clientlib.h".}

proc get_scrollingElement*(this: var Document): ptr Element {.
    importcpp: "get_scrollingElement", header: "cheerp/clientlib.h".}

proc get_styleSheets*(this: var Document): ptr StyleSheetList {.
    importcpp: "get_styleSheets", header: "cheerp/clientlib.h".}

proc get_title*(this: var Document): ptr String {.importcpp: "get_title",
    header: "cheerp/clientlib.h".}

proc set_title*(this: var Document; a2: String) {.importcpp: "set_title",
    header: "cheerp/clientlib.h".}

proc get_visibilityState*(this: var Document): ptr String {.
    importcpp: "get_visibilityState", header: "cheerp/clientlib.h".}

proc get_vlinkColor*(this: var Document): ptr String {.
    importcpp: "get_vlinkColor", header: "cheerp/clientlib.h".}

proc set_vlinkColor*(this: var Document; a2: String) {.
    importcpp: "set_vlinkColor", header: "cheerp/clientlib.h".}

proc get_webkitCurrentFullScreenElement*(this: var Document): ptr Element {.
    importcpp: "get_webkitCurrentFullScreenElement",
    header: "cheerp/clientlib.h".}

proc get_webkitFullscreenElement*(this: var Document): ptr Element {.
    importcpp: "get_webkitFullscreenElement", header: "cheerp/clientlib.h".}

proc get_webkitFullscreenEnabled*(this: var Document): bool {.
    importcpp: "get_webkitFullscreenEnabled", header: "cheerp/clientlib.h".}

proc get_webkitIsFullScreen*(this: var Document): bool {.
    importcpp: "get_webkitIsFullScreen", header: "cheerp/clientlib.h".}

proc get_xmlEncoding*(this: var Document): ptr String {.
    importcpp: "get_xmlEncoding", header: "cheerp/clientlib.h".}

proc get_xmlStandalone*(this: var Document): bool {.
    importcpp: "get_xmlStandalone", header: "cheerp/clientlib.h".}

proc set_xmlStandalone*(this: var Document; a2: bool) {.
    importcpp: "set_xmlStandalone", header: "cheerp/clientlib.h".}

proc get_xmlVersion*(this: var Document): ptr String {.
    importcpp: "get_xmlVersion", header: "cheerp/clientlib.h".}

proc set_xmlVersion*(this: var Document; a2: String) {.
    importcpp: "set_xmlVersion", header: "cheerp/clientlib.h".}

proc adoptNode*(this: var Document; source: ptr Node): ptr Node {.
    importcpp: "adoptNode", header: "cheerp/clientlib.h".}

proc captureEvents*(this: var Document) {.importcpp: "captureEvents",
    header: "cheerp/clientlib.h".}

proc caretRangeFromPoint*(this: var Document; x: cdouble; y: cdouble): ptr Range {.
    importcpp: "caretRangeFromPoint", header: "cheerp/clientlib.h".}

proc clear*(this: var Document) {.importcpp: "clear",
                                  header: "cheerp/clientlib.h".}

proc close*(this: var Document) {.importcpp: "close",
                                  header: "cheerp/clientlib.h".}

proc createAttribute*(this: var Document; name: String): ptr Attr {.
    importcpp: "createAttribute", header: "cheerp/clientlib.h".}

proc createAttributeNS*(this: var Document; namespaceURI: String;
                        qualifiedName: String): ptr Attr {.
    importcpp: "createAttributeNS", header: "cheerp/clientlib.h".}

proc createCDATASection*(this: var Document; data: String): ptr CDATASection {.
    importcpp: "createCDATASection", header: "cheerp/clientlib.h".}

proc createComment*(this: var Document; data: String): ptr Comment {.
    importcpp: "createComment", header: "cheerp/clientlib.h".}

proc createDocumentFragment*(this: var Document): ptr DocumentFragment {.
    importcpp: "createDocumentFragment", header: "cheerp/clientlib.h".}

proc createElement*(this: var Document; tagName: String): ptr HTMLElement {.
    importcpp: "createElement", header: "cheerp/clientlib.h".}

proc createElement*(this: var Document; tagName: String;
                    options: ptr ElementCreationOptions): ptr HTMLElement {.
    importcpp: "createElement", header: "cheerp/clientlib.h".}

proc createElementNS*(this: var Document; namespaceURI: String;
                      qualifiedName: String): ptr Element {.
    importcpp: "createElementNS", header: "cheerp/clientlib.h".}

proc createExpression*(this: var Document; expression: String;
                       resolver: ptr XPathNSResolver): ptr XPathExpression {.
    importcpp: "createExpression", header: "cheerp/clientlib.h".}

proc createNSResolver*(this: var Document; nodeResolver: ptr Node): ptr XPathNSResolver {.
    importcpp: "createNSResolver", header: "cheerp/clientlib.h".}

proc createNodeIterator*(this: var Document; root: ptr Node): ptr NodeIterator {.
    importcpp: "createNodeIterator", header: "cheerp/clientlib.h".}

proc createNodeIterator*(this: var Document; root: ptr Node; whatToShow: cdouble): ptr NodeIterator {.
    importcpp: "createNodeIterator", header: "cheerp/clientlib.h".}

proc createNodeIterator*(this: var Document; root: ptr Node;
                         whatToShow: cdouble; filter: ptr NodeFilter): ptr NodeIterator {.
    importcpp: "createNodeIterator", header: "cheerp/clientlib.h".}

proc createNodeIterator*(this: var Document; root: ptr Node;
                         whatToShow: cdouble; filter: ptr NodeFilter;
                         entityReferenceExpansion: bool): ptr NodeIterator {.
    importcpp: "createNodeIterator", header: "cheerp/clientlib.h".}

proc createProcessingInstruction*(this: var Document; target: String;
                                  data: String): ptr ProcessingInstruction {.
    importcpp: "createProcessingInstruction", header: "cheerp/clientlib.h".}

proc createRange*(this: var Document): ptr Range {.importcpp: "createRange",
    header: "cheerp/clientlib.h".}

proc createTextNode*(this: var Document; data: String): ptr Text {.
    importcpp: "createTextNode", header: "cheerp/clientlib.h".}

proc createTouch*(this: var Document; view: ptr Window; target: ptr EventTarget;
                  identifier: cdouble; pageX: cdouble; pageY: cdouble;
                  screenX: cdouble; screenY: cdouble): ptr Touch {.
    importcpp: "createTouch", header: "cheerp/clientlib.h".}

proc createTouchList*(this: var Document): ptr TouchList {.
    importcpp: "createTouchList", header: "cheerp/clientlib.h".}

proc createTreeWalker*(this: var Document; root: ptr Node): ptr TreeWalker {.
    importcpp: "createTreeWalker", header: "cheerp/clientlib.h".}

proc createTreeWalker*(this: var Document; root: ptr Node; whatToShow: cdouble): ptr TreeWalker {.
    importcpp: "createTreeWalker", header: "cheerp/clientlib.h".}

proc createTreeWalker*(this: var Document; root: ptr Node; whatToShow: cdouble;
                       filter: ptr NodeFilter): ptr TreeWalker {.
    importcpp: "createTreeWalker", header: "cheerp/clientlib.h".}

proc createTreeWalker*(this: var Document; root: ptr Node; whatToShow: cdouble;
                       filter: ptr NodeFilter; entityReferenceExpansion: bool): ptr TreeWalker {.
    importcpp: "createTreeWalker", header: "cheerp/clientlib.h".}

proc elementFromPoint*(this: var Document; x: cdouble; y: cdouble): ptr Element {.
    importcpp: "elementFromPoint", header: "cheerp/clientlib.h".}

proc elementsFromPoint*(this: var Document; x: cdouble; y: cdouble): ptr Array {.
    importcpp: "elementsFromPoint", header: "cheerp/clientlib.h".}

proc evaluate*(this: var Document; expression: String; contextNode: ptr Node;
               resolver: ptr XPathNSResolver; `type`: cdouble;
               result: ptr XPathResult): ptr XPathResult {.
    importcpp: "evaluate", header: "cheerp/clientlib.h".}

proc execCommand*(this: var Document; commandId: String): bool {.
    importcpp: "execCommand", header: "cheerp/clientlib.h".}

proc execCommand*(this: var Document; commandId: String; showUI: bool): bool {.
    importcpp: "execCommand", header: "cheerp/clientlib.h".}

proc execCommand*(this: var Document; commandId: String; showUI: bool;
                  value: ptr Object): bool {.importcpp: "execCommand",
    header: "cheerp/clientlib.h".}

proc execCommandShowHelp*(this: var Document; commandId: String): bool {.
    importcpp: "execCommandShowHelp", header: "cheerp/clientlib.h".}

proc exitFullscreen*(this: var Document) {.importcpp: "exitFullscreen",
    header: "cheerp/clientlib.h".}

proc exitPointerLock*(this: var Document) {.importcpp: "exitPointerLock",
    header: "cheerp/clientlib.h".}

proc focus*(this: var Document) {.importcpp: "focus",
                                  header: "cheerp/clientlib.h".}

proc getElementById*(this: var Document; elementId: String): ptr HTMLElement {.
    importcpp: "getElementById", header: "cheerp/clientlib.h".}

proc getElementsByClassName*(this: var Document; classNames: String): ptr HTMLCollectionOf[
    Element] {.importcpp: "getElementsByClassName", header: "cheerp/clientlib.h".}

proc getElementsByName*(this: var Document; elementName: String): ptr NodeListOf[
    HTMLElement] {.importcpp: "getElementsByName", header: "cheerp/clientlib.h".}

proc getElementsByTagName*(this: var Document; tagname: String): ptr NodeListOf[
    Element] {.importcpp: "getElementsByTagName", header: "cheerp/clientlib.h".}

proc getElementsByTagNameNS*(this: var Document; namespaceURI: String;
                             localName: String): ptr HTMLCollectionOf[Element] {.
    importcpp: "getElementsByTagNameNS", header: "cheerp/clientlib.h".}

proc getSelection*(this: var Document): ptr Selection {.
    importcpp: "getSelection", header: "cheerp/clientlib.h".}

proc hasFocus*(this: var Document): bool {.importcpp: "hasFocus",
    header: "cheerp/clientlib.h".}

proc importNode*(this: var Document; importedNode: ptr Node; deep: bool): ptr Node {.
    importcpp: "importNode", header: "cheerp/clientlib.h".}

proc msElementsFromPoint*(this: var Document; x: cdouble; y: cdouble): ptr NodeListOf[
    Element] {.importcpp: "msElementsFromPoint", header: "cheerp/clientlib.h".}

proc msElementsFromRect*(this: var Document; left: cdouble; top: cdouble;
                         width: cdouble; height: cdouble): ptr NodeListOf[
    Element] {.importcpp: "msElementsFromRect", header: "cheerp/clientlib.h".}

proc open*(this: var Document): ptr Document {.importcpp: "open",
    header: "cheerp/clientlib.h".}

proc open*(this: var Document; url: String): ptr Document {.importcpp: "open",
    header: "cheerp/clientlib.h".}

proc open*(this: var Document; url: String; name: String): ptr Document {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var Document; url: String; name: String; features: String): ptr Document {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var Document; url: String; name: String; features: String;
           replace: bool): ptr Document {.importcpp: "open",
    header: "cheerp/clientlib.h".}

proc queryCommandEnabled*(this: var Document; commandId: String): bool {.
    importcpp: "queryCommandEnabled", header: "cheerp/clientlib.h".}

proc queryCommandIndeterm*(this: var Document; commandId: String): bool {.
    importcpp: "queryCommandIndeterm", header: "cheerp/clientlib.h".}

proc queryCommandState*(this: var Document; commandId: String): bool {.
    importcpp: "queryCommandState", header: "cheerp/clientlib.h".}

proc queryCommandSupported*(this: var Document; commandId: String): bool {.
    importcpp: "queryCommandSupported", header: "cheerp/clientlib.h".}

proc queryCommandText*(this: var Document; commandId: String): ptr String {.
    importcpp: "queryCommandText", header: "cheerp/clientlib.h".}

proc queryCommandValue*(this: var Document; commandId: String): ptr String {.
    importcpp: "queryCommandValue", header: "cheerp/clientlib.h".}

proc releaseEvents*(this: var Document) {.importcpp: "releaseEvents",
    header: "cheerp/clientlib.h".}

proc updateSettings*(this: var Document) {.importcpp: "updateSettings",
    header: "cheerp/clientlib.h".}

proc webkitCancelFullScreen*(this: var Document) {.
    importcpp: "webkitCancelFullScreen", header: "cheerp/clientlib.h".}

proc webkitExitFullscreen*(this: var Document) {.
    importcpp: "webkitExitFullscreen", header: "cheerp/clientlib.h".}

proc write*(this: var Document) {.importcpp: "write",
                                  header: "cheerp/clientlib.h".}

proc writeln*(this: var Document) {.importcpp: "writeln",
                                    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Document; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Document; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Document; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Document; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Document; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Document; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Document; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Document; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Document; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Document; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Document): ptr Document {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Document; a2: ptr Document) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDocument*(): Document {.constructor,
                                      importcpp: "client::Document(@)",
                                      header: "cheerp/clientlib.h".}

proc getElementById*(this: var DocumentFragment; elementId: String): ptr HTMLElement {.
    importcpp: "getElementById", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DocumentFragment): ptr DocumentFragment {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DocumentFragment; a2: ptr DocumentFragment) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDocumentFragment*(): DocumentFragment {.constructor,
    importcpp: "client::DocumentFragment(@)", header: "cheerp/clientlib.h".}

proc get_activeElement*(this: var DocumentOrShadowRoot): ptr Element {.
    importcpp: "get_activeElement", header: "cheerp/clientlib.h".}

proc get_styleSheets*(this: var DocumentOrShadowRoot): ptr StyleSheetList {.
    importcpp: "get_styleSheets", header: "cheerp/clientlib.h".}

proc elementFromPoint*(this: var DocumentOrShadowRoot; x: cdouble; y: cdouble): ptr Element {.
    importcpp: "elementFromPoint", header: "cheerp/clientlib.h".}

proc elementsFromPoint*(this: var DocumentOrShadowRoot; x: cdouble; y: cdouble): ptr Array {.
    importcpp: "elementsFromPoint", header: "cheerp/clientlib.h".}

proc getSelection*(this: var DocumentOrShadowRoot): ptr Selection {.
    importcpp: "getSelection", header: "cheerp/clientlib.h".}

proc get_entities*(this: var DocumentType): ptr NamedNodeMap {.
    importcpp: "get_entities", header: "cheerp/clientlib.h".}

proc get_internalSubset*(this: var DocumentType): ptr String {.
    importcpp: "get_internalSubset", header: "cheerp/clientlib.h".}

proc get_name*(this: var DocumentType): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_notations*(this: var DocumentType): ptr NamedNodeMap {.
    importcpp: "get_notations", header: "cheerp/clientlib.h".}

proc get_publicId*(this: var DocumentType): ptr String {.
    importcpp: "get_publicId", header: "cheerp/clientlib.h".}

proc get_systemId*(this: var DocumentType): ptr String {.
    importcpp: "get_systemId", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DocumentType): ptr DocumentType {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DocumentType; a2: ptr DocumentType) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDocumentType*(): DocumentType {.constructor,
    importcpp: "client::DocumentType(@)", header: "cheerp/clientlib.h".}

proc get_altKey*(this: var MouseEvent): bool {.importcpp: "get_altKey",
    header: "cheerp/clientlib.h".}

proc get_button*(this: var MouseEvent): cdouble {.importcpp: "get_button",
    header: "cheerp/clientlib.h".}

proc get_buttons*(this: var MouseEvent): cdouble {.importcpp: "get_buttons",
    header: "cheerp/clientlib.h".}

proc get_clientX*(this: var MouseEvent): cdouble {.importcpp: "get_clientX",
    header: "cheerp/clientlib.h".}

proc get_clientY*(this: var MouseEvent): cdouble {.importcpp: "get_clientY",
    header: "cheerp/clientlib.h".}

proc get_ctrlKey*(this: var MouseEvent): bool {.importcpp: "get_ctrlKey",
    header: "cheerp/clientlib.h".}

proc get_fromElement*(this: var MouseEvent): ptr Element {.
    importcpp: "get_fromElement", header: "cheerp/clientlib.h".}

proc get_layerX*(this: var MouseEvent): cdouble {.importcpp: "get_layerX",
    header: "cheerp/clientlib.h".}

proc get_layerY*(this: var MouseEvent): cdouble {.importcpp: "get_layerY",
    header: "cheerp/clientlib.h".}

proc get_metaKey*(this: var MouseEvent): bool {.importcpp: "get_metaKey",
    header: "cheerp/clientlib.h".}

proc get_movementX*(this: var MouseEvent): cdouble {.importcpp: "get_movementX",
    header: "cheerp/clientlib.h".}

proc get_movementY*(this: var MouseEvent): cdouble {.importcpp: "get_movementY",
    header: "cheerp/clientlib.h".}

proc get_offsetX*(this: var MouseEvent): cdouble {.importcpp: "get_offsetX",
    header: "cheerp/clientlib.h".}

proc get_offsetY*(this: var MouseEvent): cdouble {.importcpp: "get_offsetY",
    header: "cheerp/clientlib.h".}

proc get_pageX*(this: var MouseEvent): cdouble {.importcpp: "get_pageX",
    header: "cheerp/clientlib.h".}

proc get_pageY*(this: var MouseEvent): cdouble {.importcpp: "get_pageY",
    header: "cheerp/clientlib.h".}

proc get_relatedTarget*(this: var MouseEvent): ptr EventTarget {.
    importcpp: "get_relatedTarget", header: "cheerp/clientlib.h".}

proc get_screenX*(this: var MouseEvent): cdouble {.importcpp: "get_screenX",
    header: "cheerp/clientlib.h".}

proc get_screenY*(this: var MouseEvent): cdouble {.importcpp: "get_screenY",
    header: "cheerp/clientlib.h".}

proc get_shiftKey*(this: var MouseEvent): bool {.importcpp: "get_shiftKey",
    header: "cheerp/clientlib.h".}

proc get_toElement*(this: var MouseEvent): ptr Element {.
    importcpp: "get_toElement", header: "cheerp/clientlib.h".}

proc get_which*(this: var MouseEvent): cdouble {.importcpp: "get_which",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var MouseEvent): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var MouseEvent): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc getModifierState*(this: var MouseEvent; keyArg: String): bool {.
    importcpp: "getModifierState", header: "cheerp/clientlib.h".}

proc initMouseEvent*(this: var MouseEvent; typeArg: String; canBubbleArg: bool;
                     cancelableArg: bool; viewArg: ptr Window;
                     detailArg: cdouble; screenXArg: cdouble;
                     screenYArg: cdouble; clientXArg: cdouble;
                     clientYArg: cdouble; ctrlKeyArg: bool; altKeyArg: bool;
                     shiftKeyArg: bool; metaKeyArg: bool; buttonArg: cdouble;
                     relatedTargetArg: ptr EventTarget) {.
    importcpp: "initMouseEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MouseEvent): ptr MouseEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MouseEvent; a2: ptr MouseEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMouseEvent*(typeArg: String): MouseEvent {.constructor,
    importcpp: "client::MouseEvent(@)", header: "cheerp/clientlib.h".}

proc constructMouseEvent*(typeArg: String; eventInitDict: ptr MouseEventInit): MouseEvent {.
    constructor, importcpp: "client::MouseEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_dataTransfer*(this: var DragEvent): ptr DataTransfer {.
    importcpp: "get_dataTransfer", header: "cheerp/clientlib.h".}

proc initDragEvent*(this: var DragEvent; typeArg: String; canBubbleArg: bool;
                    cancelableArg: bool; viewArg: ptr Window;
                    detailArg: cdouble; screenXArg: cdouble;
                    screenYArg: cdouble; clientXArg: cdouble;
                    clientYArg: cdouble; ctrlKeyArg: bool; altKeyArg: bool;
                    shiftKeyArg: bool; metaKeyArg: bool; buttonArg: cdouble;
                    relatedTargetArg: ptr EventTarget;
                    dataTransferArg: ptr DataTransfer) {.
    importcpp: "initDragEvent", header: "cheerp/clientlib.h".}

proc msConvertURL*(this: var DragEvent; file: ptr File; targetType: String) {.
    importcpp: "msConvertURL", header: "cheerp/clientlib.h".}

proc msConvertURL*(this: var DragEvent; file: ptr File; targetType: String;
                   targetURL: String) {.importcpp: "msConvertURL",
                                        header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DragEvent): ptr DragEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DragEvent; a2: ptr DragEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc get_attack*(this: var DynamicsCompressorNode): ptr AudioParam {.
    importcpp: "get_attack", header: "cheerp/clientlib.h".}

proc get_knee*(this: var DynamicsCompressorNode): ptr AudioParam {.
    importcpp: "get_knee", header: "cheerp/clientlib.h".}

proc get_ratio*(this: var DynamicsCompressorNode): ptr AudioParam {.
    importcpp: "get_ratio", header: "cheerp/clientlib.h".}

proc get_reduction*(this: var DynamicsCompressorNode): cdouble {.
    importcpp: "get_reduction", header: "cheerp/clientlib.h".}

proc get_release*(this: var DynamicsCompressorNode): ptr AudioParam {.
    importcpp: "get_release", header: "cheerp/clientlib.h".}

proc get_threshold*(this: var DynamicsCompressorNode): ptr AudioParam {.
    importcpp: "get_threshold", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var DynamicsCompressorNode): ptr DynamicsCompressorNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var DynamicsCompressorNode;
                    a2: ptr DynamicsCompressorNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructDynamicsCompressorNode*(): DynamicsCompressorNode {.constructor,
    importcpp: "client::DynamicsCompressorNode(@)", header: "cheerp/clientlib.h".}

proc get_MAX_EXT*(this: var EXT_blend_minmax): cdouble {.
    importcpp: "get_MAX_EXT", header: "cheerp/clientlib.h".}

proc get_MIN_EXT*(this: var EXT_blend_minmax): cdouble {.
    importcpp: "get_MIN_EXT", header: "cheerp/clientlib.h".}

proc get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT*(this: var EXT_sRGB): cdouble {.
    importcpp: "get_FRAMEBUFFER_ATTACHMENT_COLOR_ENCODING_EXT",
    header: "cheerp/clientlib.h".}

proc get_SRGB8_ALPHA8_EXT*(this: var EXT_sRGB): cdouble {.
    importcpp: "get_SRGB8_ALPHA8_EXT", header: "cheerp/clientlib.h".}

proc get_SRGB_ALPHA_EXT*(this: var EXT_sRGB): cdouble {.
    importcpp: "get_SRGB_ALPHA_EXT", header: "cheerp/clientlib.h".}

proc get_SRGB_EXT*(this: var EXT_sRGB): cdouble {.importcpp: "get_SRGB_EXT",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var EXT_texture_filter_anisotropic): ptr EXT_texture_filter_anisotropic {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var EXT_texture_filter_anisotropic;
                    a2: ptr EXT_texture_filter_anisotropic) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructEXT_texture_filter_anisotropic*(): EXT_texture_filter_anisotropic {.
    constructor, importcpp: "client::EXT_texture_filter_anisotropic(@)",
    header: "cheerp/clientlib.h".}

proc get_MAX_TEXTURE_MAX_ANISOTROPY_EXT*(
    this: var EXT_texture_filter_anisotropic): cdouble {.
    importcpp: "get_MAX_TEXTURE_MAX_ANISOTROPY_EXT",
    header: "cheerp/clientlib.h".}

proc get_TEXTURE_MAX_ANISOTROPY_EXT*(this: var EXT_texture_filter_anisotropic): cdouble {.
    importcpp: "get_TEXTURE_MAX_ANISOTROPY_EXT", header: "cheerp/clientlib.h".}

proc get_ariarequest*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_ariarequest", header: "cheerp/clientlib.h".}

proc set_ariarequest*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_ariarequest", header: "cheerp/clientlib.h".}

proc get_command*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_command", header: "cheerp/clientlib.h".}

proc set_command*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_command", header: "cheerp/clientlib.h".}

proc get_gotpointercapture*(this: var ElementEventMap): ptr PointerEvent {.
    importcpp: "get_gotpointercapture", header: "cheerp/clientlib.h".}

proc set_gotpointercapture*(this: var ElementEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_gotpointercapture", header: "cheerp/clientlib.h".}

proc get_lostpointercapture*(this: var ElementEventMap): ptr PointerEvent {.
    importcpp: "get_lostpointercapture", header: "cheerp/clientlib.h".}

proc set_lostpointercapture*(this: var ElementEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_lostpointercapture", header: "cheerp/clientlib.h".}

proc get_MSGestureChange*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGestureChange", header: "cheerp/clientlib.h".}

proc set_MSGestureChange*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureChange", header: "cheerp/clientlib.h".}

proc get_MSGestureDoubleTap*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGestureDoubleTap", header: "cheerp/clientlib.h".}

proc set_MSGestureDoubleTap*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureDoubleTap", header: "cheerp/clientlib.h".}

proc get_MSGestureEnd*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGestureEnd", header: "cheerp/clientlib.h".}

proc set_MSGestureEnd*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureEnd", header: "cheerp/clientlib.h".}

proc get_MSGestureHold*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGestureHold", header: "cheerp/clientlib.h".}

proc set_MSGestureHold*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureHold", header: "cheerp/clientlib.h".}

proc get_MSGestureStart*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGestureStart", header: "cheerp/clientlib.h".}

proc set_MSGestureStart*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureStart", header: "cheerp/clientlib.h".}

proc get_MSGestureTap*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGestureTap", header: "cheerp/clientlib.h".}

proc set_MSGestureTap*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureTap", header: "cheerp/clientlib.h".}

proc get_MSGotPointerCapture*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSGotPointerCapture", header: "cheerp/clientlib.h".}

proc set_MSGotPointerCapture*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSGotPointerCapture", header: "cheerp/clientlib.h".}

proc get_MSInertiaStart*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSInertiaStart", header: "cheerp/clientlib.h".}

proc set_MSInertiaStart*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSInertiaStart", header: "cheerp/clientlib.h".}

proc get_MSLostPointerCapture*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSLostPointerCapture", header: "cheerp/clientlib.h".}

proc set_MSLostPointerCapture*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSLostPointerCapture", header: "cheerp/clientlib.h".}

proc get_MSPointerCancel*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerCancel", header: "cheerp/clientlib.h".}

proc set_MSPointerCancel*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerCancel", header: "cheerp/clientlib.h".}

proc get_MSPointerDown*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerDown", header: "cheerp/clientlib.h".}

proc set_MSPointerDown*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerDown", header: "cheerp/clientlib.h".}

proc get_MSPointerEnter*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerEnter", header: "cheerp/clientlib.h".}

proc set_MSPointerEnter*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerEnter", header: "cheerp/clientlib.h".}

proc get_MSPointerLeave*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerLeave", header: "cheerp/clientlib.h".}

proc set_MSPointerLeave*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerLeave", header: "cheerp/clientlib.h".}

proc get_MSPointerMove*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerMove", header: "cheerp/clientlib.h".}

proc set_MSPointerMove*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerMove", header: "cheerp/clientlib.h".}

proc get_MSPointerOut*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerOut", header: "cheerp/clientlib.h".}

proc set_MSPointerOut*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerOut", header: "cheerp/clientlib.h".}

proc get_MSPointerOver*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerOver", header: "cheerp/clientlib.h".}

proc set_MSPointerOver*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerOver", header: "cheerp/clientlib.h".}

proc get_MSPointerUp*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_MSPointerUp", header: "cheerp/clientlib.h".}

proc set_MSPointerUp*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerUp", header: "cheerp/clientlib.h".}

proc get_touchcancel*(this: var ElementEventMap): ptr TouchEvent {.
    importcpp: "get_touchcancel", header: "cheerp/clientlib.h".}

proc set_touchcancel*(this: var ElementEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchcancel", header: "cheerp/clientlib.h".}

proc get_touchend*(this: var ElementEventMap): ptr TouchEvent {.
    importcpp: "get_touchend", header: "cheerp/clientlib.h".}

proc set_touchend*(this: var ElementEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchend", header: "cheerp/clientlib.h".}

proc get_touchmove*(this: var ElementEventMap): ptr TouchEvent {.
    importcpp: "get_touchmove", header: "cheerp/clientlib.h".}

proc set_touchmove*(this: var ElementEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchmove", header: "cheerp/clientlib.h".}

proc get_touchstart*(this: var ElementEventMap): ptr TouchEvent {.
    importcpp: "get_touchstart", header: "cheerp/clientlib.h".}

proc set_touchstart*(this: var ElementEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchstart", header: "cheerp/clientlib.h".}

proc get_webkitfullscreenchange*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_webkitfullscreenchange", header: "cheerp/clientlib.h".}

proc set_webkitfullscreenchange*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_webkitfullscreenchange", header: "cheerp/clientlib.h".}

proc get_webkitfullscreenerror*(this: var ElementEventMap): ptr Event {.
    importcpp: "get_webkitfullscreenerror", header: "cheerp/clientlib.h".}

proc set_webkitfullscreenerror*(this: var ElementEventMap; a2: ptr Event) {.
    importcpp: "set_webkitfullscreenerror", header: "cheerp/clientlib.h".}

proc get_childElementCount*(this: var ElementTraversal): cdouble {.
    importcpp: "get_childElementCount", header: "cheerp/clientlib.h".}

proc get_firstElementChild*(this: var ElementTraversal): ptr Element {.
    importcpp: "get_firstElementChild", header: "cheerp/clientlib.h".}

proc get_lastElementChild*(this: var ElementTraversal): ptr Element {.
    importcpp: "get_lastElementChild", header: "cheerp/clientlib.h".}

proc get_nextElementSibling*(this: var ElementTraversal): ptr Element {.
    importcpp: "get_nextElementSibling", header: "cheerp/clientlib.h".}

proc get_previousElementSibling*(this: var ElementTraversal): ptr Element {.
    importcpp: "get_previousElementSibling", header: "cheerp/clientlib.h".}

proc get_assignedSlot*(this: var Element): ptr HTMLSlotElement {.
    importcpp: "get_assignedSlot", header: "cheerp/clientlib.h".}

proc get_attributes*(this: var Element): ptr NamedNodeMap {.
    importcpp: "get_attributes", header: "cheerp/clientlib.h".}

proc get_classList*(this: var Element): ptr DOMTokenList {.
    importcpp: "get_classList", header: "cheerp/clientlib.h".}

proc get_className*(this: var Element): ptr String {.importcpp: "get_className",
    header: "cheerp/clientlib.h".}

proc set_className*(this: var Element; a2: String) {.importcpp: "set_className",
    header: "cheerp/clientlib.h".}

proc get_clientHeight*(this: var Element): cdouble {.
    importcpp: "get_clientHeight", header: "cheerp/clientlib.h".}

proc get_clientLeft*(this: var Element): cdouble {.importcpp: "get_clientLeft",
    header: "cheerp/clientlib.h".}

proc get_clientTop*(this: var Element): cdouble {.importcpp: "get_clientTop",
    header: "cheerp/clientlib.h".}

proc get_clientWidth*(this: var Element): cdouble {.
    importcpp: "get_clientWidth", header: "cheerp/clientlib.h".}

proc get_id*(this: var Element): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc set_id*(this: var Element; a2: String) {.importcpp: "set_id",
    header: "cheerp/clientlib.h".}

proc get_innerHTML*(this: var Element): ptr String {.importcpp: "get_innerHTML",
    header: "cheerp/clientlib.h".}

proc set_innerHTML*(this: var Element; a2: String) {.importcpp: "set_innerHTML",
    header: "cheerp/clientlib.h".}

proc get_msContentZoomFactor*(this: var Element): cdouble {.
    importcpp: "get_msContentZoomFactor", header: "cheerp/clientlib.h".}

proc set_msContentZoomFactor*(this: var Element; a2: cdouble) {.
    importcpp: "set_msContentZoomFactor", header: "cheerp/clientlib.h".}

proc get_msRegionOverflow*(this: var Element): ptr String {.
    importcpp: "get_msRegionOverflow", header: "cheerp/clientlib.h".}

proc get_onariarequest*(this: var Element): ptr EventListener {.
    importcpp: "get_onariarequest", header: "cheerp/clientlib.h".}

proc set_onariarequest*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onariarequest", header: "cheerp/clientlib.h".}

proc get_oncommand*(this: var Element): ptr EventListener {.
    importcpp: "get_oncommand", header: "cheerp/clientlib.h".}

proc set_oncommand*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_oncommand", header: "cheerp/clientlib.h".}

proc get_ongotpointercapture*(this: var Element): ptr EventListener {.
    importcpp: "get_ongotpointercapture", header: "cheerp/clientlib.h".}

proc set_ongotpointercapture*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_ongotpointercapture", header: "cheerp/clientlib.h".}

proc get_onlostpointercapture*(this: var Element): ptr EventListener {.
    importcpp: "get_onlostpointercapture", header: "cheerp/clientlib.h".}

proc set_onlostpointercapture*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onlostpointercapture", header: "cheerp/clientlib.h".}

proc get_onmsgesturechange*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgesturechange", header: "cheerp/clientlib.h".}

proc set_onmsgesturechange*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturechange", header: "cheerp/clientlib.h".}

proc get_onmsgesturedoubletap*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgesturedoubletap", header: "cheerp/clientlib.h".}

proc set_onmsgesturedoubletap*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturedoubletap", header: "cheerp/clientlib.h".}

proc get_onmsgestureend*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgestureend", header: "cheerp/clientlib.h".}

proc set_onmsgestureend*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgestureend", header: "cheerp/clientlib.h".}

proc get_onmsgesturehold*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgesturehold", header: "cheerp/clientlib.h".}

proc set_onmsgesturehold*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturehold", header: "cheerp/clientlib.h".}

proc get_onmsgesturestart*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgesturestart", header: "cheerp/clientlib.h".}

proc set_onmsgesturestart*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturestart", header: "cheerp/clientlib.h".}

proc get_onmsgesturetap*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgesturetap", header: "cheerp/clientlib.h".}

proc set_onmsgesturetap*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturetap", header: "cheerp/clientlib.h".}

proc get_onmsgotpointercapture*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsgotpointercapture", header: "cheerp/clientlib.h".}

proc set_onmsgotpointercapture*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsgotpointercapture", header: "cheerp/clientlib.h".}

proc get_onmsinertiastart*(this: var Element): ptr EventListener {.
    importcpp: "get_onmsinertiastart", header: "cheerp/clientlib.h".}

proc set_onmsinertiastart*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmsinertiastart", header: "cheerp/clientlib.h".}

proc get_onmslostpointercapture*(this: var Element): ptr EventListener {.
    importcpp: "get_onmslostpointercapture", header: "cheerp/clientlib.h".}

proc set_onmslostpointercapture*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmslostpointercapture", header: "cheerp/clientlib.h".}

proc get_onmspointercancel*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointercancel", header: "cheerp/clientlib.h".}

proc set_onmspointercancel*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointercancel", header: "cheerp/clientlib.h".}

proc get_onmspointerdown*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointerdown", header: "cheerp/clientlib.h".}

proc set_onmspointerdown*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointerdown", header: "cheerp/clientlib.h".}

proc get_onmspointerenter*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointerenter", header: "cheerp/clientlib.h".}

proc set_onmspointerenter*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointerenter", header: "cheerp/clientlib.h".}

proc get_onmspointerleave*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointerleave", header: "cheerp/clientlib.h".}

proc set_onmspointerleave*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointerleave", header: "cheerp/clientlib.h".}

proc get_onmspointermove*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointermove", header: "cheerp/clientlib.h".}

proc set_onmspointermove*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointermove", header: "cheerp/clientlib.h".}

proc get_onmspointerout*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointerout", header: "cheerp/clientlib.h".}

proc set_onmspointerout*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointerout", header: "cheerp/clientlib.h".}

proc get_onmspointerover*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointerover", header: "cheerp/clientlib.h".}

proc set_onmspointerover*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointerover", header: "cheerp/clientlib.h".}

proc get_onmspointerup*(this: var Element): ptr EventListener {.
    importcpp: "get_onmspointerup", header: "cheerp/clientlib.h".}

proc set_onmspointerup*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onmspointerup", header: "cheerp/clientlib.h".}

proc get_ontouchcancel*(this: var Element): ptr EventListener {.
    importcpp: "get_ontouchcancel", header: "cheerp/clientlib.h".}

proc set_ontouchcancel*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_ontouchcancel", header: "cheerp/clientlib.h".}

proc get_ontouchend*(this: var Element): ptr EventListener {.
    importcpp: "get_ontouchend", header: "cheerp/clientlib.h".}

proc set_ontouchend*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_ontouchend", header: "cheerp/clientlib.h".}

proc get_ontouchmove*(this: var Element): ptr EventListener {.
    importcpp: "get_ontouchmove", header: "cheerp/clientlib.h".}

proc set_ontouchmove*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_ontouchmove", header: "cheerp/clientlib.h".}

proc get_ontouchstart*(this: var Element): ptr EventListener {.
    importcpp: "get_ontouchstart", header: "cheerp/clientlib.h".}

proc set_ontouchstart*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_ontouchstart", header: "cheerp/clientlib.h".}

proc get_onwebkitfullscreenchange*(this: var Element): ptr EventListener {.
    importcpp: "get_onwebkitfullscreenchange", header: "cheerp/clientlib.h".}

proc set_onwebkitfullscreenchange*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onwebkitfullscreenchange", header: "cheerp/clientlib.h".}

proc get_onwebkitfullscreenerror*(this: var Element): ptr EventListener {.
    importcpp: "get_onwebkitfullscreenerror", header: "cheerp/clientlib.h".}

proc set_onwebkitfullscreenerror*(this: var Element; a2: ptr EventListener) {.
    importcpp: "set_onwebkitfullscreenerror", header: "cheerp/clientlib.h".}

proc get_outerHTML*(this: var Element): ptr String {.importcpp: "get_outerHTML",
    header: "cheerp/clientlib.h".}

proc set_outerHTML*(this: var Element; a2: String) {.importcpp: "set_outerHTML",
    header: "cheerp/clientlib.h".}

proc get_prefix*(this: var Element): ptr String {.importcpp: "get_prefix",
    header: "cheerp/clientlib.h".}

proc get_scrollHeight*(this: var Element): cdouble {.
    importcpp: "get_scrollHeight", header: "cheerp/clientlib.h".}

proc get_scrollLeft*(this: var Element): cdouble {.importcpp: "get_scrollLeft",
    header: "cheerp/clientlib.h".}

proc set_scrollLeft*(this: var Element; a2: cdouble) {.
    importcpp: "set_scrollLeft", header: "cheerp/clientlib.h".}

proc get_scrollTop*(this: var Element): cdouble {.importcpp: "get_scrollTop",
    header: "cheerp/clientlib.h".}

proc set_scrollTop*(this: var Element; a2: cdouble) {.
    importcpp: "set_scrollTop", header: "cheerp/clientlib.h".}

proc get_scrollWidth*(this: var Element): cdouble {.
    importcpp: "get_scrollWidth", header: "cheerp/clientlib.h".}

proc get_shadowRoot*(this: var Element): ptr ShadowRoot {.
    importcpp: "get_shadowRoot", header: "cheerp/clientlib.h".}

proc get_slot*(this: var Element): ptr String {.importcpp: "get_slot",
    header: "cheerp/clientlib.h".}

proc set_slot*(this: var Element; a2: String) {.importcpp: "set_slot",
    header: "cheerp/clientlib.h".}

proc get_tagName*(this: var Element): ptr String {.importcpp: "get_tagName",
    header: "cheerp/clientlib.h".}

proc attachShadow*(this: var Element; shadowRootInitDict: ptr ShadowRootInit): ptr ShadowRoot {.
    importcpp: "attachShadow", header: "cheerp/clientlib.h".}

proc closest*(this: var Element; selector: String): ptr Element {.
    importcpp: "closest", header: "cheerp/clientlib.h".}

proc getAttribute*(this: var Element; qualifiedName: String): ptr String {.
    importcpp: "getAttribute", header: "cheerp/clientlib.h".}

proc getAttributeNS*(this: var Element; namespaceURI: String; localName: String): ptr String {.
    importcpp: "getAttributeNS", header: "cheerp/clientlib.h".}

proc getAttributeNode*(this: var Element; name: String): ptr Attr {.
    importcpp: "getAttributeNode", header: "cheerp/clientlib.h".}

proc getAttributeNodeNS*(this: var Element; namespaceURI: String;
                         localName: String): ptr Attr {.
    importcpp: "getAttributeNodeNS", header: "cheerp/clientlib.h".}

proc getBoundingClientRect*(this: var Element): ptr ClientRect {.
    importcpp: "getBoundingClientRect", header: "cheerp/clientlib.h".}

proc getClientRects*(this: var Element): ptr ClientRectList {.
    importcpp: "getClientRects", header: "cheerp/clientlib.h".}

proc getElementsByClassName*(this: var Element; classNames: String): ptr NodeListOf[
    Element] {.importcpp: "getElementsByClassName", header: "cheerp/clientlib.h".}

proc getElementsByTagName*(this: var Element; name: String): ptr NodeListOf[
    Element] {.importcpp: "getElementsByTagName", header: "cheerp/clientlib.h".}

proc getElementsByTagNameNS*(this: var Element; namespaceURI: String;
                             localName: String): ptr HTMLCollectionOf[Element] {.
    importcpp: "getElementsByTagNameNS", header: "cheerp/clientlib.h".}

proc hasAttribute*(this: var Element; name: String): bool {.
    importcpp: "hasAttribute", header: "cheerp/clientlib.h".}

proc hasAttributeNS*(this: var Element; namespaceURI: String; localName: String): bool {.
    importcpp: "hasAttributeNS", header: "cheerp/clientlib.h".}

proc hasAttributes*(this: var Element): bool {.importcpp: "hasAttributes",
    header: "cheerp/clientlib.h".}

proc matches*(this: var Element; selectors: String): bool {.
    importcpp: "matches", header: "cheerp/clientlib.h".}

proc msGetUntransformedBounds*(this: var Element): ptr ClientRect {.
    importcpp: "msGetUntransformedBounds", header: "cheerp/clientlib.h".}

proc msMatchesSelector*(this: var Element; selectors: String): bool {.
    importcpp: "msMatchesSelector", header: "cheerp/clientlib.h".}

proc msReleasePointerCapture*(this: var Element; pointerId: cdouble) {.
    importcpp: "msReleasePointerCapture", header: "cheerp/clientlib.h".}

proc msSetPointerCapture*(this: var Element; pointerId: cdouble) {.
    importcpp: "msSetPointerCapture", header: "cheerp/clientlib.h".}

proc msZoomTo*(this: var Element; args: ptr MsZoomToOptions) {.
    importcpp: "msZoomTo", header: "cheerp/clientlib.h".}

proc releasePointerCapture*(this: var Element; pointerId: cdouble) {.
    importcpp: "releasePointerCapture", header: "cheerp/clientlib.h".}

proc removeAttribute*(this: var Element; qualifiedName: String) {.
    importcpp: "removeAttribute", header: "cheerp/clientlib.h".}

proc removeAttributeNS*(this: var Element; namespaceURI: String;
                        localName: String) {.importcpp: "removeAttributeNS",
    header: "cheerp/clientlib.h".}

proc removeAttributeNode*(this: var Element; oldAttr: ptr Attr): ptr Attr {.
    importcpp: "removeAttributeNode", header: "cheerp/clientlib.h".}

proc requestFullscreen*(this: var Element) {.importcpp: "requestFullscreen",
    header: "cheerp/clientlib.h".}

proc requestPointerLock*(this: var Element) {.importcpp: "requestPointerLock",
    header: "cheerp/clientlib.h".}

proc scroll*(this: var Element; options: ptr ScrollToOptions) {.
    importcpp: "scroll", header: "cheerp/clientlib.h".}

proc scroll*(this: var Element; x: cdouble; y: cdouble) {.importcpp: "scroll",
    header: "cheerp/clientlib.h".}

proc scrollBy*(this: var Element; options: ptr ScrollToOptions) {.
    importcpp: "scrollBy", header: "cheerp/clientlib.h".}

proc scrollBy*(this: var Element; x: cdouble; y: cdouble) {.
    importcpp: "scrollBy", header: "cheerp/clientlib.h".}

proc scrollIntoView*(this: var Element) {.importcpp: "scrollIntoView",
    header: "cheerp/clientlib.h".}

proc scrollIntoView*(this: var Element; arg: bool) {.
    importcpp: "scrollIntoView", header: "cheerp/clientlib.h".}

proc scrollIntoView*(this: var Element; arg: ptr ScrollIntoViewOptions) {.
    importcpp: "scrollIntoView", header: "cheerp/clientlib.h".}

proc scrollTo*(this: var Element; options: ptr ScrollToOptions) {.
    importcpp: "scrollTo", header: "cheerp/clientlib.h".}

proc scrollTo*(this: var Element; x: cdouble; y: cdouble) {.
    importcpp: "scrollTo", header: "cheerp/clientlib.h".}

proc setAttribute*(this: var Element; qualifiedName: String; value: String) {.
    importcpp: "setAttribute", header: "cheerp/clientlib.h".}

proc setAttributeNS*(this: var Element; namespaceURI: String;
                     qualifiedName: String; value: String) {.
    importcpp: "setAttributeNS", header: "cheerp/clientlib.h".}

proc setAttributeNode*(this: var Element; newAttr: ptr Attr): ptr Attr {.
    importcpp: "setAttributeNode", header: "cheerp/clientlib.h".}

proc setAttributeNodeNS*(this: var Element; newAttr: ptr Attr): ptr Attr {.
    importcpp: "setAttributeNodeNS", header: "cheerp/clientlib.h".}

proc setPointerCapture*(this: var Element; pointerId: cdouble) {.
    importcpp: "setPointerCapture", header: "cheerp/clientlib.h".}

proc webkitMatchesSelector*(this: var Element; selectors: String): bool {.
    importcpp: "webkitMatchesSelector", header: "cheerp/clientlib.h".}

proc webkitRequestFullScreen*(this: var Element) {.
    importcpp: "webkitRequestFullScreen", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Element; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Element; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Element; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Element; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Element; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Element; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Element; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Element; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Element; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Element; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Element): ptr Element {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Element; a2: ptr Element) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructElement*(): Element {.constructor,
                                    importcpp: "client::Element(@)",
                                    header: "cheerp/clientlib.h".}

proc get_style*(this: var ElementCSSInlineStyle): ptr CSSStyleDeclaration {.
    importcpp: "get_style", header: "cheerp/clientlib.h".}

proc get_is*(this: var ElementCreationOptions): ptr String {.
    importcpp: "get_is", header: "cheerp/clientlib.h".}

proc set_is*(this: var ElementCreationOptions; a2: String) {.
    importcpp: "set_is", header: "cheerp/clientlib.h".}

proc get_extends*(this: var ElementDefinitionOptions): ptr String {.
    importcpp: "get_extends", header: "cheerp/clientlib.h".}

proc set_extends*(this: var ElementDefinitionOptions; a2: String) {.
    importcpp: "set_extends", header: "cheerp/clientlib.h".}

proc get_colno*(this: var ErrorEvent): cdouble {.importcpp: "get_colno",
    header: "cheerp/clientlib.h".}

proc get_filename*(this: var ErrorEvent): ptr String {.
    importcpp: "get_filename", header: "cheerp/clientlib.h".}

proc get_lineno*(this: var ErrorEvent): cdouble {.importcpp: "get_lineno",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var ErrorEvent): ptr String {.importcpp: "get_message",
    header: "cheerp/clientlib.h".}

proc initErrorEvent*(this: var ErrorEvent; typeArg: String; canBubbleArg: bool;
                     cancelableArg: bool; messageArg: String;
                     filenameArg: String; linenoArg: cdouble) {.
    importcpp: "initErrorEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ErrorEvent): ptr ErrorEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ErrorEvent; a2: ptr ErrorEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructErrorEvent*(typeArg: String): ErrorEvent {.constructor,
    importcpp: "client::ErrorEvent(@)", header: "cheerp/clientlib.h".}

proc constructErrorEvent*(typeArg: String; eventInitDict: ptr ErrorEventInit): ErrorEvent {.
    constructor, importcpp: "client::ErrorEvent(@)",
    header: "cheerp/clientlib.h".}

proc handleEvent*(this: var EventListenerObject; evt: ptr Event) {.
    importcpp: "handleEvent", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var EventSource): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var EventSource; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var EventSource): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var EventSource; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc get_onopen*(this: var EventSource): ptr EventListener {.
    importcpp: "get_onopen", header: "cheerp/clientlib.h".}

proc set_onopen*(this: var EventSource; a2: ptr EventListener) {.
    importcpp: "set_onopen", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var EventSource): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_url*(this: var EventSource): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc get_withCredentials*(this: var EventSource): bool {.
    importcpp: "get_withCredentials", header: "cheerp/clientlib.h".}

proc close*(this: var EventSource) {.importcpp: "close",
                                     header: "cheerp/clientlib.h".}

proc get_prototype*(this: var EventSource): ptr EventSource {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var EventSource; a2: ptr EventSource) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructEventSource*(url: String): EventSource {.constructor,
    importcpp: "client::EventSource(@)", header: "cheerp/clientlib.h".}

proc constructEventSource*(url: String; eventSourceInitDict: ptr EventSourceInit): EventSource {.
    constructor, importcpp: "client::EventSource(@)",
    header: "cheerp/clientlib.h".}

proc get_withCredentials*(this: var EventSourceInit): bool {.
    importcpp: "get_withCredentials", header: "cheerp/clientlib.h".}

proc extensionIdToShortId*(this: var ExtensionScriptApis; extensionId: String): cdouble {.
    importcpp: "extensionIdToShortId", header: "cheerp/clientlib.h".}

proc fireExtensionApiTelemetry*(this: var ExtensionScriptApis;
                                functionName: String; isSucceeded: bool;
                                isSupported: bool; errorString: String) {.
    importcpp: "fireExtensionApiTelemetry", header: "cheerp/clientlib.h".}

proc genericFunction*(this: var ExtensionScriptApis; routerAddress: ptr Object) {.
    importcpp: "genericFunction", header: "cheerp/clientlib.h".}

proc genericFunction*(this: var ExtensionScriptApis; routerAddress: ptr Object;
                      parameters: String) {.importcpp: "genericFunction",
    header: "cheerp/clientlib.h".}

proc genericFunction*(this: var ExtensionScriptApis; routerAddress: ptr Object;
                      parameters: String; callbackId: cdouble) {.
    importcpp: "genericFunction", header: "cheerp/clientlib.h".}

proc genericSynchronousFunction*(this: var ExtensionScriptApis;
                                 functionId: cdouble): ptr String {.
    importcpp: "genericSynchronousFunction", header: "cheerp/clientlib.h".}

proc genericSynchronousFunction*(this: var ExtensionScriptApis;
                                 functionId: cdouble; parameters: String): ptr String {.
    importcpp: "genericSynchronousFunction", header: "cheerp/clientlib.h".}

proc genericWebRuntimeCallout*(this: var ExtensionScriptApis; to: ptr Object;
                               `from`: ptr Object; payload: String) {.
    importcpp: "genericWebRuntimeCallout", header: "cheerp/clientlib.h".}

proc getExtensionId*(this: var ExtensionScriptApis): ptr String {.
    importcpp: "getExtensionId", header: "cheerp/clientlib.h".}

proc registerGenericFunctionCallbackHandler*(this: var ExtensionScriptApis;
    callbackHandler: ptr Function) {.importcpp: "registerGenericFunctionCallbackHandler",
                                     header: "cheerp/clientlib.h".}

proc registerGenericPersistentCallbackHandler*(this: var ExtensionScriptApis;
    callbackHandler: ptr Function) {.importcpp: "registerGenericPersistentCallbackHandler",
                                     header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ExtensionScriptApis): ptr ExtensionScriptApis {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ExtensionScriptApis; a2: ptr ExtensionScriptApis) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructExtensionScriptApis*(): ExtensionScriptApis {.constructor,
    importcpp: "client::ExtensionScriptApis(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var External): ptr External {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var External; a2: ptr External) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructExternal*(): External {.constructor,
                                      importcpp: "client::External(@)",
                                      header: "cheerp/clientlib.h".}

proc get_lastModified*(this: var File): cdouble {.importcpp: "get_lastModified",
    header: "cheerp/clientlib.h".}

proc get_lastModifiedDate*(this: var File): ptr Date {.
    importcpp: "get_lastModifiedDate", header: "cheerp/clientlib.h".}

proc get_name*(this: var File): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_webkitRelativePath*(this: var File): ptr String {.
    importcpp: "get_webkitRelativePath", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var File): ptr File {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var File; a2: ptr File) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructFile*(parts: ptr Array; filename: String): File {.constructor,
    importcpp: "client::File(@)", header: "cheerp/clientlib.h".}

proc constructFile*(parts: ptr Array; filename: String;
                    properties: ptr FilePropertyBag): File {.constructor,
    importcpp: "client::File(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var FileList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var FileList; index: cdouble): ptr File {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var FileList; index: cint): ptr File {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: FileList; index: cint): ptr File {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var FileList): ptr FileList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var FileList; a2: ptr FileList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructFileList*(): FileList {.constructor,
                                      importcpp: "client::FileList(@)",
                                      header: "cheerp/clientlib.h".}

proc get_lastModified*(this: var FilePropertyBag): cdouble {.
    importcpp: "get_lastModified", header: "cheerp/clientlib.h".}

proc set_lastModified*(this: var FilePropertyBag; a2: cdouble) {.
    importcpp: "set_lastModified", header: "cheerp/clientlib.h".}

proc get_abort*(this: var FileReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var FileReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_error*(this: var FileReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var FileReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_load*(this: var FileReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var FileReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_loadend*(this: var FileReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_loadend", header: "cheerp/clientlib.h".}

proc set_loadend*(this: var FileReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_loadend", header: "cheerp/clientlib.h".}

proc get_loadstart*(this: var FileReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_loadstart", header: "cheerp/clientlib.h".}

proc set_loadstart*(this: var FileReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_loadstart", header: "cheerp/clientlib.h".}

proc get_progress*(this: var FileReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var FileReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_error*(this: var FileReader): ptr DOMException {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var FileReader): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var FileReader; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var FileReader): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var FileReader; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onload*(this: var FileReader): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var FileReader; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onloadend*(this: var FileReader): ptr EventListener {.
    importcpp: "get_onloadend", header: "cheerp/clientlib.h".}

proc set_onloadend*(this: var FileReader; a2: ptr EventListener) {.
    importcpp: "set_onloadend", header: "cheerp/clientlib.h".}

proc get_onloadstart*(this: var FileReader): ptr EventListener {.
    importcpp: "get_onloadstart", header: "cheerp/clientlib.h".}

proc set_onloadstart*(this: var FileReader; a2: ptr EventListener) {.
    importcpp: "set_onloadstart", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var FileReader): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var FileReader; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var FileReader): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc abort*(this: var FileReader) {.importcpp: "abort",
                                    header: "cheerp/clientlib.h".}

proc readAsArrayBuffer*(this: var FileReader; blob: ptr Blob) {.
    importcpp: "readAsArrayBuffer", header: "cheerp/clientlib.h".}

proc readAsBinaryString*(this: var FileReader; blob: ptr Blob) {.
    importcpp: "readAsBinaryString", header: "cheerp/clientlib.h".}

proc readAsDataURL*(this: var FileReader; blob: ptr Blob) {.
    importcpp: "readAsDataURL", header: "cheerp/clientlib.h".}

proc readAsText*(this: var FileReader; blob: ptr Blob) {.
    importcpp: "readAsText", header: "cheerp/clientlib.h".}

proc readAsText*(this: var FileReader; blob: ptr Blob; label: String) {.
    importcpp: "readAsText", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var FileReader; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var FileReader; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var FileReader; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var FileReader; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var FileReader; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var FileReader; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var FileReader; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var FileReader; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var FileReader; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var FileReader; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var FileReader): ptr FileReader {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var FileReader; a2: ptr FileReader) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructFileReader*(): FileReader {.constructor,
    importcpp: "client::FileReader(@)", header: "cheerp/clientlib.h".}

proc get_DONE*(this: var FileReader): cdouble {.importcpp: "get_DONE",
    header: "cheerp/clientlib.h".}

proc get_EMPTY*(this: var FileReader): cdouble {.importcpp: "get_EMPTY",
    header: "cheerp/clientlib.h".}

proc get_LOADING*(this: var FileReader): cdouble {.importcpp: "get_LOADING",
    header: "cheerp/clientlib.h".}

proc get_lengthComputable*(this: var ProgressEvent): bool {.
    importcpp: "get_lengthComputable", header: "cheerp/clientlib.h".}

proc get_loaded*(this: var ProgressEvent): cdouble {.importcpp: "get_loaded",
    header: "cheerp/clientlib.h".}

proc get_total*(this: var ProgressEvent): cdouble {.importcpp: "get_total",
    header: "cheerp/clientlib.h".}

proc initProgressEvent*(this: var ProgressEvent; typeArg: String;
                        canBubbleArg: bool; cancelableArg: bool;
                        lengthComputableArg: bool; loadedArg: cdouble;
                        totalArg: cdouble) {.importcpp: "initProgressEvent",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ProgressEvent): ptr ProgressEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ProgressEvent; a2: ptr ProgressEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructProgressEvent*(typeArg: String): ProgressEvent {.constructor,
    importcpp: "client::ProgressEvent(@)", header: "cheerp/clientlib.h".}

proc constructProgressEvent*(typeArg: String;
                             eventInitDict: ptr ProgressEventInit): ProgressEvent {.
    constructor, importcpp: "client::ProgressEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var FileReaderProgressEvent): ptr FileReader {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc get_relatedTarget*(this: var FocusEvent): ptr EventTarget {.
    importcpp: "get_relatedTarget", header: "cheerp/clientlib.h".}

proc initFocusEvent*(this: var FocusEvent; typeArg: String; canBubbleArg: bool;
                     cancelableArg: bool; viewArg: ptr Window;
                     detailArg: cdouble; relatedTargetArg: ptr EventTarget) {.
    importcpp: "initFocusEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var FocusEvent): ptr FocusEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var FocusEvent; a2: ptr FocusEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructFocusEvent*(typeArg: String): FocusEvent {.constructor,
    importcpp: "client::FocusEvent(@)", header: "cheerp/clientlib.h".}

proc constructFocusEvent*(typeArg: String; eventInitDict: ptr FocusEventInit): FocusEvent {.
    constructor, importcpp: "client::FocusEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_navigationReason*(this: var FocusNavigationEvent): ptr String {.
    importcpp: "get_navigationReason", header: "cheerp/clientlib.h".}

proc get_originHeight*(this: var FocusNavigationEvent): cdouble {.
    importcpp: "get_originHeight", header: "cheerp/clientlib.h".}

proc get_originLeft*(this: var FocusNavigationEvent): cdouble {.
    importcpp: "get_originLeft", header: "cheerp/clientlib.h".}

proc get_originTop*(this: var FocusNavigationEvent): cdouble {.
    importcpp: "get_originTop", header: "cheerp/clientlib.h".}

proc get_originWidth*(this: var FocusNavigationEvent): cdouble {.
    importcpp: "get_originWidth", header: "cheerp/clientlib.h".}

proc requestFocus*(this: var FocusNavigationEvent) {.importcpp: "requestFocus",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var FocusNavigationEvent): ptr FocusNavigationEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var FocusNavigationEvent; a2: ptr FocusNavigationEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructFocusNavigationEvent*(`type`: String): FocusNavigationEvent {.
    constructor, importcpp: "client::FocusNavigationEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructFocusNavigationEvent*(`type`: String;
                                    eventInitDict: ptr FocusNavigationEventInit): FocusNavigationEvent {.
    constructor, importcpp: "client::FocusNavigationEvent(@)",
    header: "cheerp/clientlib.h".}

proc append*(this: var FormData; name: String; value: String) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc append*(this: var FormData; name: String; value: String; fileName: String) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc append*(this: var FormData; name: String; value: ptr Blob) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc append*(this: var FormData; name: String; value: ptr Blob; fileName: String) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc p_delete*(this: var FormData; name: String) {.importcpp: "_delete",
    header: "cheerp/clientlib.h".}

proc get*(this: var FormData; name: String): ptr String {.importcpp: "get",
    header: "cheerp/clientlib.h".}

proc getAll*(this: var FormData; name: String): ptr Array {.importcpp: "getAll",
    header: "cheerp/clientlib.h".}

proc has*(this: var FormData; name: String): bool {.importcpp: "has",
    header: "cheerp/clientlib.h".}

proc set*(this: var FormData; name: String; value: String) {.importcpp: "set",
    header: "cheerp/clientlib.h".}

proc set*(this: var FormData; name: String; value: String; fileName: String) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc set*(this: var FormData; name: String; value: ptr Blob) {.importcpp: "set",
    header: "cheerp/clientlib.h".}

proc set*(this: var FormData; name: String; value: ptr Blob; fileName: String) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var FormData): ptr FormData {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var FormData; a2: ptr FormData) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructFormData*(): FormData {.constructor,
                                      importcpp: "client::FormData(@)",
                                      header: "cheerp/clientlib.h".}

proc constructFormData*(form: ptr HTMLFormElement): FormData {.constructor,
    importcpp: "client::FormData(@)", header: "cheerp/clientlib.h".}

proc get_gain*(this: var GainNode): ptr AudioParam {.importcpp: "get_gain",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var GainNode): ptr GainNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var GainNode; a2: ptr GainNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructGainNode*(): GainNode {.constructor,
                                      importcpp: "client::GainNode(@)",
                                      header: "cheerp/clientlib.h".}

proc get_axes*(this: var Gamepad): ptr Array {.importcpp: "get_axes",
    header: "cheerp/clientlib.h".}

proc get_buttons*(this: var Gamepad): ptr Array {.importcpp: "get_buttons",
    header: "cheerp/clientlib.h".}

proc get_connected*(this: var Gamepad): bool {.importcpp: "get_connected",
    header: "cheerp/clientlib.h".}

proc get_displayId*(this: var Gamepad): cdouble {.importcpp: "get_displayId",
    header: "cheerp/clientlib.h".}

proc get_hand*(this: var Gamepad): ptr String {.importcpp: "get_hand",
    header: "cheerp/clientlib.h".}

proc get_hapticActuators*(this: var Gamepad): ptr Array {.
    importcpp: "get_hapticActuators", header: "cheerp/clientlib.h".}

proc get_id*(this: var Gamepad): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_index*(this: var Gamepad): cdouble {.importcpp: "get_index",
    header: "cheerp/clientlib.h".}

proc get_mapping*(this: var Gamepad): ptr String {.importcpp: "get_mapping",
    header: "cheerp/clientlib.h".}

proc get_pose*(this: var Gamepad): ptr GamepadPose {.importcpp: "get_pose",
    header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var Gamepad): cdouble {.importcpp: "get_timestamp",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Gamepad): ptr Gamepad {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Gamepad; a2: ptr Gamepad) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructGamepad*(): Gamepad {.constructor,
                                    importcpp: "client::Gamepad(@)",
                                    header: "cheerp/clientlib.h".}

proc get_pressed*(this: var GamepadButton): bool {.importcpp: "get_pressed",
    header: "cheerp/clientlib.h".}

proc get_touched*(this: var GamepadButton): bool {.importcpp: "get_touched",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var GamepadButton): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var GamepadButton): ptr GamepadButton {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var GamepadButton; a2: ptr GamepadButton) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructGamepadButton*(): GamepadButton {.constructor,
    importcpp: "client::GamepadButton(@)", header: "cheerp/clientlib.h".}

proc get_gamepad*(this: var GamepadEvent): ptr Gamepad {.
    importcpp: "get_gamepad", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var GamepadEvent): ptr GamepadEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var GamepadEvent; a2: ptr GamepadEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructGamepadEvent*(typeArg: String): GamepadEvent {.constructor,
    importcpp: "client::GamepadEvent(@)", header: "cheerp/clientlib.h".}

proc constructGamepadEvent*(typeArg: String; eventInitDict: ptr GamepadEventInit): GamepadEvent {.
    constructor, importcpp: "client::GamepadEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var GamepadHapticActuator): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc pulse*(this: var GamepadHapticActuator; value: cdouble; duration: cdouble): ptr Promise {.
    importcpp: "pulse", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var GamepadHapticActuator): ptr GamepadHapticActuator {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var GamepadHapticActuator;
                    a2: ptr GamepadHapticActuator) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructGamepadHapticActuator*(): GamepadHapticActuator {.constructor,
    importcpp: "client::GamepadHapticActuator(@)", header: "cheerp/clientlib.h".}

proc get_angularAcceleration*(this: var GamepadPose): ptr Float32Array {.
    importcpp: "get_angularAcceleration", header: "cheerp/clientlib.h".}

proc get_angularVelocity*(this: var GamepadPose): ptr Float32Array {.
    importcpp: "get_angularVelocity", header: "cheerp/clientlib.h".}

proc get_hasOrientation*(this: var GamepadPose): bool {.
    importcpp: "get_hasOrientation", header: "cheerp/clientlib.h".}

proc get_hasPosition*(this: var GamepadPose): bool {.
    importcpp: "get_hasPosition", header: "cheerp/clientlib.h".}

proc get_linearAcceleration*(this: var GamepadPose): ptr Float32Array {.
    importcpp: "get_linearAcceleration", header: "cheerp/clientlib.h".}

proc get_linearVelocity*(this: var GamepadPose): ptr Float32Array {.
    importcpp: "get_linearVelocity", header: "cheerp/clientlib.h".}

proc get_orientation*(this: var GamepadPose): ptr Float32Array {.
    importcpp: "get_orientation", header: "cheerp/clientlib.h".}

proc get_position*(this: var GamepadPose): ptr Float32Array {.
    importcpp: "get_position", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var GamepadPose): ptr GamepadPose {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var GamepadPose; a2: ptr GamepadPose) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructGamepadPose*(): GamepadPose {.constructor,
    importcpp: "client::GamepadPose(@)", header: "cheerp/clientlib.h".}

proc clearWatch*(this: var Geolocation; watchId: cdouble) {.
    importcpp: "clearWatch", header: "cheerp/clientlib.h".}

proc getCurrentPosition*(this: var Geolocation;
                         successCallback: ptr EventListener) {.
    importcpp: "getCurrentPosition", header: "cheerp/clientlib.h".}

proc getCurrentPosition*(this: var Geolocation;
                         successCallback: ptr EventListener;
                         errorCallback: ptr EventListener) {.
    importcpp: "getCurrentPosition", header: "cheerp/clientlib.h".}

proc getCurrentPosition*(this: var Geolocation;
                         successCallback: ptr EventListener;
                         errorCallback: ptr EventListener;
                         options: ptr PositionOptions) {.
    importcpp: "getCurrentPosition", header: "cheerp/clientlib.h".}

proc watchPosition*(this: var Geolocation; successCallback: ptr EventListener): cdouble {.
    importcpp: "watchPosition", header: "cheerp/clientlib.h".}

proc watchPosition*(this: var Geolocation; successCallback: ptr EventListener;
                    errorCallback: ptr EventListener): cdouble {.
    importcpp: "watchPosition", header: "cheerp/clientlib.h".}

proc watchPosition*(this: var Geolocation; successCallback: ptr EventListener;
                    errorCallback: ptr EventListener;
                    options: ptr PositionOptions): cdouble {.
    importcpp: "watchPosition", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Geolocation): ptr Geolocation {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Geolocation; a2: ptr Geolocation) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructGeolocation*(): Geolocation {.constructor,
    importcpp: "client::Geolocation(@)", header: "cheerp/clientlib.h".}

proc getSVGDocument*(this: var GetSVGDocument): ptr Document {.
    importcpp: "getSVGDocument", header: "cheerp/clientlib.h".}

proc fetch*(this: var GlobalFetch): ptr Promise {.importcpp: "fetch",
    header: "cheerp/clientlib.h".}

proc fetch*(this: var GlobalFetch; input: ptr Request): ptr Promise {.
    importcpp: "fetch", header: "cheerp/clientlib.h".}

proc fetch*(this: var GlobalFetch; input: ptr Request; init: ptr RequestInit): ptr Promise {.
    importcpp: "fetch", header: "cheerp/clientlib.h".}

proc fetch*(this: var GlobalFetch; input: String): ptr Promise {.
    importcpp: "fetch", header: "cheerp/clientlib.h".}

proc fetch*(this: var GlobalFetch; input: String; init: ptr RequestInit): ptr Promise {.
    importcpp: "fetch", header: "cheerp/clientlib.h".}

proc get_length*(this: var HTMLAllCollection): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc item*(this: var HTMLAllCollection): ptr HTMLCollection {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc item*(this: var HTMLAllCollection; nameOrIndex: String): ptr HTMLCollection {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc namedItem*(this: var HTMLAllCollection; name: String): ptr HTMLCollection {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc `[]`*(this: var HTMLAllCollection; index: cint): ptr Element {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: HTMLAllCollection; index: cint): ptr Element {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLAllCollection): ptr HTMLAllCollection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLAllCollection; a2: ptr HTMLAllCollection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLAllCollection*(): HTMLAllCollection {.constructor,
    importcpp: "client::HTMLAllCollection(@)", header: "cheerp/clientlib.h".}

proc get_accessKey*(this: var HTMLElement): ptr String {.
    importcpp: "get_accessKey", header: "cheerp/clientlib.h".}

proc set_accessKey*(this: var HTMLElement; a2: String) {.
    importcpp: "set_accessKey", header: "cheerp/clientlib.h".}

proc get_contentEditable*(this: var HTMLElement): ptr String {.
    importcpp: "get_contentEditable", header: "cheerp/clientlib.h".}

proc set_contentEditable*(this: var HTMLElement; a2: String) {.
    importcpp: "set_contentEditable", header: "cheerp/clientlib.h".}

proc get_dataset*(this: var HTMLElement): ptr DOMStringMap {.
    importcpp: "get_dataset", header: "cheerp/clientlib.h".}

proc get_dir*(this: var HTMLElement): ptr String {.importcpp: "get_dir",
    header: "cheerp/clientlib.h".}

proc set_dir*(this: var HTMLElement; a2: String) {.importcpp: "set_dir",
    header: "cheerp/clientlib.h".}

proc get_draggable*(this: var HTMLElement): bool {.importcpp: "get_draggable",
    header: "cheerp/clientlib.h".}

proc set_draggable*(this: var HTMLElement; a2: bool) {.
    importcpp: "set_draggable", header: "cheerp/clientlib.h".}

proc get_hidden*(this: var HTMLElement): bool {.importcpp: "get_hidden",
    header: "cheerp/clientlib.h".}

proc set_hidden*(this: var HTMLElement; a2: bool) {.importcpp: "set_hidden",
    header: "cheerp/clientlib.h".}

proc get_hideFocus*(this: var HTMLElement): bool {.importcpp: "get_hideFocus",
    header: "cheerp/clientlib.h".}

proc set_hideFocus*(this: var HTMLElement; a2: bool) {.
    importcpp: "set_hideFocus", header: "cheerp/clientlib.h".}

proc get_innerText*(this: var HTMLElement): ptr String {.
    importcpp: "get_innerText", header: "cheerp/clientlib.h".}

proc set_innerText*(this: var HTMLElement; a2: String) {.
    importcpp: "set_innerText", header: "cheerp/clientlib.h".}

proc get_isContentEditable*(this: var HTMLElement): bool {.
    importcpp: "get_isContentEditable", header: "cheerp/clientlib.h".}

proc get_lang*(this: var HTMLElement): ptr String {.importcpp: "get_lang",
    header: "cheerp/clientlib.h".}

proc set_lang*(this: var HTMLElement; a2: String) {.importcpp: "set_lang",
    header: "cheerp/clientlib.h".}

proc get_offsetHeight*(this: var HTMLElement): cdouble {.
    importcpp: "get_offsetHeight", header: "cheerp/clientlib.h".}

proc get_offsetLeft*(this: var HTMLElement): cdouble {.
    importcpp: "get_offsetLeft", header: "cheerp/clientlib.h".}

proc get_offsetParent*(this: var HTMLElement): ptr Element {.
    importcpp: "get_offsetParent", header: "cheerp/clientlib.h".}

proc get_offsetTop*(this: var HTMLElement): cdouble {.
    importcpp: "get_offsetTop", header: "cheerp/clientlib.h".}

proc get_offsetWidth*(this: var HTMLElement): cdouble {.
    importcpp: "get_offsetWidth", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onactivate*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onactivate", header: "cheerp/clientlib.h".}

proc set_onactivate*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onactivate", header: "cheerp/clientlib.h".}

proc get_onbeforeactivate*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onbeforeactivate", header: "cheerp/clientlib.h".}

proc set_onbeforeactivate*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onbeforeactivate", header: "cheerp/clientlib.h".}

proc get_onbeforecopy*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onbeforecopy", header: "cheerp/clientlib.h".}

proc set_onbeforecopy*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onbeforecopy", header: "cheerp/clientlib.h".}

proc get_onbeforecut*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onbeforecut", header: "cheerp/clientlib.h".}

proc set_onbeforecut*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onbeforecut", header: "cheerp/clientlib.h".}

proc get_onbeforedeactivate*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onbeforedeactivate", header: "cheerp/clientlib.h".}

proc set_onbeforedeactivate*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onbeforedeactivate", header: "cheerp/clientlib.h".}

proc get_onbeforepaste*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onbeforepaste", header: "cheerp/clientlib.h".}

proc set_onbeforepaste*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onbeforepaste", header: "cheerp/clientlib.h".}

proc get_onblur*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onblur", header: "cheerp/clientlib.h".}

proc set_onblur*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onblur", header: "cheerp/clientlib.h".}

proc get_oncanplay*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oncanplay", header: "cheerp/clientlib.h".}

proc set_oncanplay*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oncanplay", header: "cheerp/clientlib.h".}

proc get_oncanplaythrough*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oncanplaythrough", header: "cheerp/clientlib.h".}

proc set_oncanplaythrough*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oncanplaythrough", header: "cheerp/clientlib.h".}

proc get_onchange*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onchange", header: "cheerp/clientlib.h".}

proc set_onchange*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onchange", header: "cheerp/clientlib.h".}

proc get_onclick*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onclick", header: "cheerp/clientlib.h".}

proc set_onclick*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onclick", header: "cheerp/clientlib.h".}

proc get_oncontextmenu*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oncontextmenu", header: "cheerp/clientlib.h".}

proc set_oncontextmenu*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oncontextmenu", header: "cheerp/clientlib.h".}

proc get_oncopy*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oncopy", header: "cheerp/clientlib.h".}

proc set_oncopy*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oncopy", header: "cheerp/clientlib.h".}

proc get_oncuechange*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oncuechange", header: "cheerp/clientlib.h".}

proc set_oncuechange*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oncuechange", header: "cheerp/clientlib.h".}

proc get_oncut*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oncut", header: "cheerp/clientlib.h".}

proc set_oncut*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oncut", header: "cheerp/clientlib.h".}

proc get_ondblclick*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondblclick", header: "cheerp/clientlib.h".}

proc set_ondblclick*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondblclick", header: "cheerp/clientlib.h".}

proc get_ondeactivate*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondeactivate", header: "cheerp/clientlib.h".}

proc set_ondeactivate*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondeactivate", header: "cheerp/clientlib.h".}

proc get_ondrag*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondrag", header: "cheerp/clientlib.h".}

proc set_ondrag*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondrag", header: "cheerp/clientlib.h".}

proc get_ondragend*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondragend", header: "cheerp/clientlib.h".}

proc set_ondragend*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondragend", header: "cheerp/clientlib.h".}

proc get_ondragenter*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondragenter", header: "cheerp/clientlib.h".}

proc set_ondragenter*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondragenter", header: "cheerp/clientlib.h".}

proc get_ondragleave*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondragleave", header: "cheerp/clientlib.h".}

proc set_ondragleave*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondragleave", header: "cheerp/clientlib.h".}

proc get_ondragover*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondragover", header: "cheerp/clientlib.h".}

proc set_ondragover*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondragover", header: "cheerp/clientlib.h".}

proc get_ondragstart*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondragstart", header: "cheerp/clientlib.h".}

proc set_ondragstart*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondragstart", header: "cheerp/clientlib.h".}

proc get_ondrop*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondrop", header: "cheerp/clientlib.h".}

proc set_ondrop*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondrop", header: "cheerp/clientlib.h".}

proc get_ondurationchange*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ondurationchange", header: "cheerp/clientlib.h".}

proc set_ondurationchange*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ondurationchange", header: "cheerp/clientlib.h".}

proc get_onemptied*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onemptied", header: "cheerp/clientlib.h".}

proc set_onemptied*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onemptied", header: "cheerp/clientlib.h".}

proc get_onended*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onended", header: "cheerp/clientlib.h".}

proc set_onended*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onended", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onfocus*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onfocus", header: "cheerp/clientlib.h".}

proc set_onfocus*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onfocus", header: "cheerp/clientlib.h".}

proc get_oninput*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oninput", header: "cheerp/clientlib.h".}

proc set_oninput*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oninput", header: "cheerp/clientlib.h".}

proc get_oninvalid*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_oninvalid", header: "cheerp/clientlib.h".}

proc set_oninvalid*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_oninvalid", header: "cheerp/clientlib.h".}

proc get_onkeydown*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onkeydown", header: "cheerp/clientlib.h".}

proc set_onkeydown*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onkeydown", header: "cheerp/clientlib.h".}

proc get_onkeypress*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onkeypress", header: "cheerp/clientlib.h".}

proc set_onkeypress*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onkeypress", header: "cheerp/clientlib.h".}

proc get_onkeyup*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onkeyup", header: "cheerp/clientlib.h".}

proc set_onkeyup*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onkeyup", header: "cheerp/clientlib.h".}

proc get_onload*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onloadeddata*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onloadeddata", header: "cheerp/clientlib.h".}

proc set_onloadeddata*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onloadeddata", header: "cheerp/clientlib.h".}

proc get_onloadedmetadata*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onloadedmetadata", header: "cheerp/clientlib.h".}

proc set_onloadedmetadata*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onloadedmetadata", header: "cheerp/clientlib.h".}

proc get_onloadstart*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onloadstart", header: "cheerp/clientlib.h".}

proc set_onloadstart*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onloadstart", header: "cheerp/clientlib.h".}

proc get_onmousedown*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmousedown", header: "cheerp/clientlib.h".}

proc set_onmousedown*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmousedown", header: "cheerp/clientlib.h".}

proc get_onmouseenter*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmouseenter", header: "cheerp/clientlib.h".}

proc set_onmouseenter*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseenter", header: "cheerp/clientlib.h".}

proc get_onmouseleave*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmouseleave", header: "cheerp/clientlib.h".}

proc set_onmouseleave*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseleave", header: "cheerp/clientlib.h".}

proc get_onmousemove*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmousemove", header: "cheerp/clientlib.h".}

proc set_onmousemove*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmousemove", header: "cheerp/clientlib.h".}

proc get_onmouseout*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmouseout", header: "cheerp/clientlib.h".}

proc set_onmouseout*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseout", header: "cheerp/clientlib.h".}

proc get_onmouseover*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmouseover", header: "cheerp/clientlib.h".}

proc set_onmouseover*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseover", header: "cheerp/clientlib.h".}

proc get_onmouseup*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmouseup", header: "cheerp/clientlib.h".}

proc set_onmouseup*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseup", header: "cheerp/clientlib.h".}

proc get_onmousewheel*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmousewheel", header: "cheerp/clientlib.h".}

proc set_onmousewheel*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmousewheel", header: "cheerp/clientlib.h".}

proc get_onmscontentzoom*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmscontentzoom", header: "cheerp/clientlib.h".}

proc set_onmscontentzoom*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onmscontentzoom", header: "cheerp/clientlib.h".}

proc get_onmsmanipulationstatechanged*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onmsmanipulationstatechanged", header: "cheerp/clientlib.h".}

proc set_onmsmanipulationstatechanged*(this: var HTMLElement;
                                       a2: ptr EventListener) {.
    importcpp: "set_onmsmanipulationstatechanged", header: "cheerp/clientlib.h".}

proc get_onpaste*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onpaste", header: "cheerp/clientlib.h".}

proc set_onpaste*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onpaste", header: "cheerp/clientlib.h".}

proc get_onpause*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onpause", header: "cheerp/clientlib.h".}

proc set_onpause*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onpause", header: "cheerp/clientlib.h".}

proc get_onplay*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onplay", header: "cheerp/clientlib.h".}

proc set_onplay*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onplay", header: "cheerp/clientlib.h".}

proc get_onplaying*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onplaying", header: "cheerp/clientlib.h".}

proc set_onplaying*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onplaying", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_onratechange*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onratechange", header: "cheerp/clientlib.h".}

proc set_onratechange*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onratechange", header: "cheerp/clientlib.h".}

proc get_onreset*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onreset", header: "cheerp/clientlib.h".}

proc set_onreset*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onreset", header: "cheerp/clientlib.h".}

proc get_onscroll*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onscroll", header: "cheerp/clientlib.h".}

proc set_onscroll*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onscroll", header: "cheerp/clientlib.h".}

proc get_onseeked*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onseeked", header: "cheerp/clientlib.h".}

proc set_onseeked*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onseeked", header: "cheerp/clientlib.h".}

proc get_onseeking*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onseeking", header: "cheerp/clientlib.h".}

proc set_onseeking*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onseeking", header: "cheerp/clientlib.h".}

proc get_onselect*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onselect", header: "cheerp/clientlib.h".}

proc set_onselect*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onselect", header: "cheerp/clientlib.h".}

proc get_onselectstart*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onselectstart", header: "cheerp/clientlib.h".}

proc set_onselectstart*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onselectstart", header: "cheerp/clientlib.h".}

proc get_onstalled*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onstalled", header: "cheerp/clientlib.h".}

proc set_onstalled*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onstalled", header: "cheerp/clientlib.h".}

proc get_onsubmit*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onsubmit", header: "cheerp/clientlib.h".}

proc set_onsubmit*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onsubmit", header: "cheerp/clientlib.h".}

proc get_onsuspend*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onsuspend", header: "cheerp/clientlib.h".}

proc set_onsuspend*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onsuspend", header: "cheerp/clientlib.h".}

proc get_ontimeupdate*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_ontimeupdate", header: "cheerp/clientlib.h".}

proc set_ontimeupdate*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_ontimeupdate", header: "cheerp/clientlib.h".}

proc get_onvolumechange*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onvolumechange", header: "cheerp/clientlib.h".}

proc set_onvolumechange*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onvolumechange", header: "cheerp/clientlib.h".}

proc get_onwaiting*(this: var HTMLElement): ptr EventListener {.
    importcpp: "get_onwaiting", header: "cheerp/clientlib.h".}

proc set_onwaiting*(this: var HTMLElement; a2: ptr EventListener) {.
    importcpp: "set_onwaiting", header: "cheerp/clientlib.h".}

proc get_outerText*(this: var HTMLElement): ptr String {.
    importcpp: "get_outerText", header: "cheerp/clientlib.h".}

proc set_outerText*(this: var HTMLElement; a2: String) {.
    importcpp: "set_outerText", header: "cheerp/clientlib.h".}

proc get_spellcheck*(this: var HTMLElement): bool {.importcpp: "get_spellcheck",
    header: "cheerp/clientlib.h".}

proc set_spellcheck*(this: var HTMLElement; a2: bool) {.
    importcpp: "set_spellcheck", header: "cheerp/clientlib.h".}

proc get_tabIndex*(this: var HTMLElement): cdouble {.importcpp: "get_tabIndex",
    header: "cheerp/clientlib.h".}

proc set_tabIndex*(this: var HTMLElement; a2: cdouble) {.
    importcpp: "set_tabIndex", header: "cheerp/clientlib.h".}

proc get_title*(this: var HTMLElement): ptr String {.importcpp: "get_title",
    header: "cheerp/clientlib.h".}

proc set_title*(this: var HTMLElement; a2: String) {.importcpp: "set_title",
    header: "cheerp/clientlib.h".}

proc animate*(this: var HTMLElement; keyframes: ptr AnimationKeyFrame;
              options: cdouble): ptr Animation {.importcpp: "animate",
    header: "cheerp/clientlib.h".}

proc animate*(this: var HTMLElement; keyframes: ptr AnimationKeyFrame;
              options: ptr AnimationOptions): ptr Animation {.
    importcpp: "animate", header: "cheerp/clientlib.h".}

proc animate*(this: var HTMLElement; keyframes: ptr Array;
              options: ptr AnimationOptions): ptr Animation {.
    importcpp: "animate", header: "cheerp/clientlib.h".}

proc blur*(this: var HTMLElement) {.importcpp: "blur",
                                    header: "cheerp/clientlib.h".}

proc click*(this: var HTMLElement) {.importcpp: "click",
                                     header: "cheerp/clientlib.h".}

proc dragDrop*(this: var HTMLElement): bool {.importcpp: "dragDrop",
    header: "cheerp/clientlib.h".}

proc focus*(this: var HTMLElement) {.importcpp: "focus",
                                     header: "cheerp/clientlib.h".}

proc msGetInputContext*(this: var HTMLElement): ptr MSInputMethodContext {.
    importcpp: "msGetInputContext", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLElement): ptr HTMLElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLElement; a2: ptr HTMLElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLElement*(): HTMLElement {.constructor,
    importcpp: "client::HTMLElement(@)", header: "cheerp/clientlib.h".}

proc get_hash*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_hash", header: "cheerp/clientlib.h".}

proc set_hash*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_hash", header: "cheerp/clientlib.h".}

proc get_host*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_host", header: "cheerp/clientlib.h".}

proc set_host*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_host", header: "cheerp/clientlib.h".}

proc get_hostname*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_hostname", header: "cheerp/clientlib.h".}

proc set_hostname*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_hostname", header: "cheerp/clientlib.h".}

proc get_href*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_href", header: "cheerp/clientlib.h".}

proc set_href*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_href", header: "cheerp/clientlib.h".}

proc get_origin*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_origin", header: "cheerp/clientlib.h".}

proc set_origin*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_origin", header: "cheerp/clientlib.h".}

proc get_pathname*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_pathname", header: "cheerp/clientlib.h".}

proc set_pathname*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_pathname", header: "cheerp/clientlib.h".}

proc get_port*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_port", header: "cheerp/clientlib.h".}

proc set_port*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_port", header: "cheerp/clientlib.h".}

proc get_protocol*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_protocol", header: "cheerp/clientlib.h".}

proc set_protocol*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_protocol", header: "cheerp/clientlib.h".}

proc get_search*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "get_search", header: "cheerp/clientlib.h".}

proc set_search*(this: var HTMLHyperlinkElementUtils; a2: String) {.
    importcpp: "set_search", header: "cheerp/clientlib.h".}

proc toString*(this: var HTMLHyperlinkElementUtils): ptr String {.
    importcpp: "toString", header: "cheerp/clientlib.h".}

proc get_Methods*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_Methods", header: "cheerp/clientlib.h".}

proc set_Methods*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_Methods", header: "cheerp/clientlib.h".}

proc get_charset*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_charset", header: "cheerp/clientlib.h".}

proc set_charset*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_charset", header: "cheerp/clientlib.h".}

proc get_coords*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_coords", header: "cheerp/clientlib.h".}

proc set_coords*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_coords", header: "cheerp/clientlib.h".}

proc get_download*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_download", header: "cheerp/clientlib.h".}

proc set_download*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_download", header: "cheerp/clientlib.h".}

proc get_hreflang*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_hreflang", header: "cheerp/clientlib.h".}

proc set_hreflang*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_hreflang", header: "cheerp/clientlib.h".}

proc get_mimeType*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_mimeType", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLAnchorElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLAnchorElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_nameProp*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_nameProp", header: "cheerp/clientlib.h".}

proc get_protocolLong*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_protocolLong", header: "cheerp/clientlib.h".}

proc get_rel*(this: var HTMLAnchorElement): ptr String {.importcpp: "get_rel",
    header: "cheerp/clientlib.h".}

proc set_rel*(this: var HTMLAnchorElement; a2: String) {.importcpp: "set_rel",
    header: "cheerp/clientlib.h".}

proc get_rev*(this: var HTMLAnchorElement): ptr String {.importcpp: "get_rev",
    header: "cheerp/clientlib.h".}

proc set_rev*(this: var HTMLAnchorElement; a2: String) {.importcpp: "set_rev",
    header: "cheerp/clientlib.h".}

proc get_shape*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_shape", header: "cheerp/clientlib.h".}

proc set_shape*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_shape", header: "cheerp/clientlib.h".}

proc get_target*(this: var HTMLAnchorElement): ptr String {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc set_target*(this: var HTMLAnchorElement; a2: String) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc get_text*(this: var HTMLAnchorElement): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var HTMLAnchorElement; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLAnchorElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLAnchorElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_urn*(this: var HTMLAnchorElement): ptr String {.importcpp: "get_urn",
    header: "cheerp/clientlib.h".}

proc set_urn*(this: var HTMLAnchorElement; a2: String) {.importcpp: "set_urn",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAnchorElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAnchorElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAnchorElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAnchorElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAnchorElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAnchorElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAnchorElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAnchorElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAnchorElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAnchorElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLAnchorElement): ptr HTMLAnchorElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLAnchorElement; a2: ptr HTMLAnchorElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLAnchorElement*(): HTMLAnchorElement {.constructor,
    importcpp: "client::HTMLAnchorElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLAppletElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLAppletElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_alt*(this: var HTMLAppletElement): ptr String {.importcpp: "get_alt",
    header: "cheerp/clientlib.h".}

proc set_alt*(this: var HTMLAppletElement; a2: String) {.importcpp: "set_alt",
    header: "cheerp/clientlib.h".}

proc get_archive*(this: var HTMLAppletElement): ptr String {.
    importcpp: "get_archive", header: "cheerp/clientlib.h".}

proc set_archive*(this: var HTMLAppletElement; a2: String) {.
    importcpp: "set_archive", header: "cheerp/clientlib.h".}

proc get_code*(this: var HTMLAppletElement): ptr String {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc set_code*(this: var HTMLAppletElement; a2: String) {.importcpp: "set_code",
    header: "cheerp/clientlib.h".}

proc get_codeBase*(this: var HTMLAppletElement): ptr String {.
    importcpp: "get_codeBase", header: "cheerp/clientlib.h".}

proc set_codeBase*(this: var HTMLAppletElement; a2: String) {.
    importcpp: "set_codeBase", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLAppletElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLAppletElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLAppletElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_hspace*(this: var HTMLAppletElement): cdouble {.
    importcpp: "get_hspace", header: "cheerp/clientlib.h".}

proc set_hspace*(this: var HTMLAppletElement; a2: cdouble) {.
    importcpp: "set_hspace", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLAppletElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLAppletElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_object*(this: var HTMLAppletElement): ptr String {.
    importcpp: "get_object", header: "cheerp/clientlib.h".}

proc set_object*(this: var HTMLAppletElement; a2: String) {.
    importcpp: "set_object", header: "cheerp/clientlib.h".}

proc get_vspace*(this: var HTMLAppletElement): cdouble {.
    importcpp: "get_vspace", header: "cheerp/clientlib.h".}

proc set_vspace*(this: var HTMLAppletElement; a2: cdouble) {.
    importcpp: "set_vspace", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLAppletElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLAppletElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAppletElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAppletElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAppletElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAppletElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAppletElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAppletElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAppletElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAppletElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAppletElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAppletElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLAppletElement): ptr HTMLAppletElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLAppletElement; a2: ptr HTMLAppletElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLAppletElement*(): HTMLAppletElement {.constructor,
    importcpp: "client::HTMLAppletElement(@)", header: "cheerp/clientlib.h".}

proc get_alt*(this: var HTMLAreaElement): ptr String {.importcpp: "get_alt",
    header: "cheerp/clientlib.h".}

proc set_alt*(this: var HTMLAreaElement; a2: String) {.importcpp: "set_alt",
    header: "cheerp/clientlib.h".}

proc get_coords*(this: var HTMLAreaElement): ptr String {.
    importcpp: "get_coords", header: "cheerp/clientlib.h".}

proc set_coords*(this: var HTMLAreaElement; a2: String) {.
    importcpp: "set_coords", header: "cheerp/clientlib.h".}

proc get_download*(this: var HTMLAreaElement): ptr String {.
    importcpp: "get_download", header: "cheerp/clientlib.h".}

proc set_download*(this: var HTMLAreaElement; a2: String) {.
    importcpp: "set_download", header: "cheerp/clientlib.h".}

proc get_noHref*(this: var HTMLAreaElement): bool {.importcpp: "get_noHref",
    header: "cheerp/clientlib.h".}

proc set_noHref*(this: var HTMLAreaElement; a2: bool) {.importcpp: "set_noHref",
    header: "cheerp/clientlib.h".}

proc get_rel*(this: var HTMLAreaElement): ptr String {.importcpp: "get_rel",
    header: "cheerp/clientlib.h".}

proc set_rel*(this: var HTMLAreaElement; a2: String) {.importcpp: "set_rel",
    header: "cheerp/clientlib.h".}

proc get_shape*(this: var HTMLAreaElement): ptr String {.importcpp: "get_shape",
    header: "cheerp/clientlib.h".}

proc set_shape*(this: var HTMLAreaElement; a2: String) {.importcpp: "set_shape",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var HTMLAreaElement): ptr String {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc set_target*(this: var HTMLAreaElement; a2: String) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAreaElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAreaElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAreaElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAreaElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAreaElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAreaElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAreaElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAreaElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAreaElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAreaElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLAreaElement): ptr HTMLAreaElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLAreaElement; a2: ptr HTMLAreaElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLAreaElement*(): HTMLAreaElement {.constructor,
    importcpp: "client::HTMLAreaElement(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var HTMLCollectionBase): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc item*(this: var HTMLCollectionBase; index: cdouble): ptr Element {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var HTMLCollectionBase; index: cint): ptr Element {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: HTMLCollectionBase; index: cint): ptr Element {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLAreasCollection): ptr HTMLAreasCollection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLAreasCollection; a2: ptr HTMLAreasCollection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLAreasCollection*(): HTMLAreasCollection {.constructor,
    importcpp: "client::HTMLAreasCollection(@)", header: "cheerp/clientlib.h".}

proc get_audioTracks*(this: var HTMLMediaElement): ptr AudioTrackList {.
    importcpp: "get_audioTracks", header: "cheerp/clientlib.h".}

proc get_autoplay*(this: var HTMLMediaElement): bool {.
    importcpp: "get_autoplay", header: "cheerp/clientlib.h".}

proc set_autoplay*(this: var HTMLMediaElement; a2: bool) {.
    importcpp: "set_autoplay", header: "cheerp/clientlib.h".}

proc get_buffered*(this: var HTMLMediaElement): ptr TimeRanges {.
    importcpp: "get_buffered", header: "cheerp/clientlib.h".}

proc get_controls*(this: var HTMLMediaElement): bool {.
    importcpp: "get_controls", header: "cheerp/clientlib.h".}

proc set_controls*(this: var HTMLMediaElement; a2: bool) {.
    importcpp: "set_controls", header: "cheerp/clientlib.h".}

proc get_crossOrigin*(this: var HTMLMediaElement): ptr String {.
    importcpp: "get_crossOrigin", header: "cheerp/clientlib.h".}

proc set_crossOrigin*(this: var HTMLMediaElement; a2: String) {.
    importcpp: "set_crossOrigin", header: "cheerp/clientlib.h".}

proc get_currentSrc*(this: var HTMLMediaElement): ptr String {.
    importcpp: "get_currentSrc", header: "cheerp/clientlib.h".}

proc get_currentTime*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_currentTime", header: "cheerp/clientlib.h".}

proc set_currentTime*(this: var HTMLMediaElement; a2: cdouble) {.
    importcpp: "set_currentTime", header: "cheerp/clientlib.h".}

proc get_defaultMuted*(this: var HTMLMediaElement): bool {.
    importcpp: "get_defaultMuted", header: "cheerp/clientlib.h".}

proc set_defaultMuted*(this: var HTMLMediaElement; a2: bool) {.
    importcpp: "set_defaultMuted", header: "cheerp/clientlib.h".}

proc get_defaultPlaybackRate*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_defaultPlaybackRate", header: "cheerp/clientlib.h".}

proc set_defaultPlaybackRate*(this: var HTMLMediaElement; a2: cdouble) {.
    importcpp: "set_defaultPlaybackRate", header: "cheerp/clientlib.h".}

proc get_duration*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_duration", header: "cheerp/clientlib.h".}

proc get_ended*(this: var HTMLMediaElement): bool {.importcpp: "get_ended",
    header: "cheerp/clientlib.h".}

proc get_error*(this: var HTMLMediaElement): ptr MediaError {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_loop*(this: var HTMLMediaElement): bool {.importcpp: "get_loop",
    header: "cheerp/clientlib.h".}

proc set_loop*(this: var HTMLMediaElement; a2: bool) {.importcpp: "set_loop",
    header: "cheerp/clientlib.h".}

proc get_mediaKeys*(this: var HTMLMediaElement): ptr MediaKeys {.
    importcpp: "get_mediaKeys", header: "cheerp/clientlib.h".}

proc get_msAudioCategory*(this: var HTMLMediaElement): ptr String {.
    importcpp: "get_msAudioCategory", header: "cheerp/clientlib.h".}

proc set_msAudioCategory*(this: var HTMLMediaElement; a2: String) {.
    importcpp: "set_msAudioCategory", header: "cheerp/clientlib.h".}

proc get_msAudioDeviceType*(this: var HTMLMediaElement): ptr String {.
    importcpp: "get_msAudioDeviceType", header: "cheerp/clientlib.h".}

proc set_msAudioDeviceType*(this: var HTMLMediaElement; a2: String) {.
    importcpp: "set_msAudioDeviceType", header: "cheerp/clientlib.h".}

proc get_msGraphicsTrustStatus*(this: var HTMLMediaElement): ptr MSGraphicsTrust {.
    importcpp: "get_msGraphicsTrustStatus", header: "cheerp/clientlib.h".}

proc get_msKeys*(this: var HTMLMediaElement): ptr MSMediaKeys {.
    importcpp: "get_msKeys", header: "cheerp/clientlib.h".}

proc get_msPlayToDisabled*(this: var HTMLMediaElement): bool {.
    importcpp: "get_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc set_msPlayToDisabled*(this: var HTMLMediaElement; a2: bool) {.
    importcpp: "set_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc get_msPlayToPreferredSourceUri*(this: var HTMLMediaElement): ptr String {.
    importcpp: "get_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc set_msPlayToPreferredSourceUri*(this: var HTMLMediaElement; a2: String) {.
    importcpp: "set_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc get_msPlayToPrimary*(this: var HTMLMediaElement): bool {.
    importcpp: "get_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc set_msPlayToPrimary*(this: var HTMLMediaElement; a2: bool) {.
    importcpp: "set_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc get_msRealTime*(this: var HTMLMediaElement): bool {.
    importcpp: "get_msRealTime", header: "cheerp/clientlib.h".}

proc set_msRealTime*(this: var HTMLMediaElement; a2: bool) {.
    importcpp: "set_msRealTime", header: "cheerp/clientlib.h".}

proc get_muted*(this: var HTMLMediaElement): bool {.importcpp: "get_muted",
    header: "cheerp/clientlib.h".}

proc set_muted*(this: var HTMLMediaElement; a2: bool) {.importcpp: "set_muted",
    header: "cheerp/clientlib.h".}

proc get_networkState*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_networkState", header: "cheerp/clientlib.h".}

proc get_onencrypted*(this: var HTMLMediaElement): ptr EventListener {.
    importcpp: "get_onencrypted", header: "cheerp/clientlib.h".}

proc set_onencrypted*(this: var HTMLMediaElement; a2: ptr EventListener) {.
    importcpp: "set_onencrypted", header: "cheerp/clientlib.h".}

proc get_onmsneedkey*(this: var HTMLMediaElement): ptr EventListener {.
    importcpp: "get_onmsneedkey", header: "cheerp/clientlib.h".}

proc set_onmsneedkey*(this: var HTMLMediaElement; a2: ptr EventListener) {.
    importcpp: "set_onmsneedkey", header: "cheerp/clientlib.h".}

proc get_paused*(this: var HTMLMediaElement): bool {.importcpp: "get_paused",
    header: "cheerp/clientlib.h".}

proc get_playbackRate*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_playbackRate", header: "cheerp/clientlib.h".}

proc set_playbackRate*(this: var HTMLMediaElement; a2: cdouble) {.
    importcpp: "set_playbackRate", header: "cheerp/clientlib.h".}

proc get_played*(this: var HTMLMediaElement): ptr TimeRanges {.
    importcpp: "get_played", header: "cheerp/clientlib.h".}

proc get_preload*(this: var HTMLMediaElement): ptr String {.
    importcpp: "get_preload", header: "cheerp/clientlib.h".}

proc set_preload*(this: var HTMLMediaElement; a2: String) {.
    importcpp: "set_preload", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_seekable*(this: var HTMLMediaElement): ptr TimeRanges {.
    importcpp: "get_seekable", header: "cheerp/clientlib.h".}

proc get_seeking*(this: var HTMLMediaElement): bool {.importcpp: "get_seeking",
    header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLMediaElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLMediaElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_srcObject*(this: var HTMLMediaElement): ptr MediaStream {.
    importcpp: "get_srcObject", header: "cheerp/clientlib.h".}

proc set_srcObject*(this: var HTMLMediaElement; a2: ptr MediaStream) {.
    importcpp: "set_srcObject", header: "cheerp/clientlib.h".}

proc get_textTracks*(this: var HTMLMediaElement): ptr TextTrackList {.
    importcpp: "get_textTracks", header: "cheerp/clientlib.h".}

proc get_videoTracks*(this: var HTMLMediaElement): ptr VideoTrackList {.
    importcpp: "get_videoTracks", header: "cheerp/clientlib.h".}

proc get_volume*(this: var HTMLMediaElement): cdouble {.importcpp: "get_volume",
    header: "cheerp/clientlib.h".}

proc set_volume*(this: var HTMLMediaElement; a2: cdouble) {.
    importcpp: "set_volume", header: "cheerp/clientlib.h".}

proc canPlayType*(this: var HTMLMediaElement; `type`: String): ptr String {.
    importcpp: "canPlayType", header: "cheerp/clientlib.h".}

proc load*(this: var HTMLMediaElement) {.importcpp: "load",
    header: "cheerp/clientlib.h".}

proc msClearEffects*(this: var HTMLMediaElement) {.importcpp: "msClearEffects",
    header: "cheerp/clientlib.h".}

proc msInsertAudioEffect*(this: var HTMLMediaElement;
                          activatableClassId: String; effectRequired: bool) {.
    importcpp: "msInsertAudioEffect", header: "cheerp/clientlib.h".}

proc msInsertAudioEffect*(this: var HTMLMediaElement;
                          activatableClassId: String; effectRequired: bool;
                          config: ptr Object) {.
    importcpp: "msInsertAudioEffect", header: "cheerp/clientlib.h".}

proc msSetMediaKeys*(this: var HTMLMediaElement; mediaKeys: ptr MSMediaKeys) {.
    importcpp: "msSetMediaKeys", header: "cheerp/clientlib.h".}

proc msSetMediaProtectionManager*(this: var HTMLMediaElement) {.
    importcpp: "msSetMediaProtectionManager", header: "cheerp/clientlib.h".}

proc msSetMediaProtectionManager*(this: var HTMLMediaElement;
                                  mediaProtectionManager: ptr Object) {.
    importcpp: "msSetMediaProtectionManager", header: "cheerp/clientlib.h".}

proc pause*(this: var HTMLMediaElement) {.importcpp: "pause",
    header: "cheerp/clientlib.h".}

proc play*(this: var HTMLMediaElement): ptr Promise {.importcpp: "play",
    header: "cheerp/clientlib.h".}

proc setMediaKeys*(this: var HTMLMediaElement; mediaKeys: ptr MediaKeys): ptr Promise {.
    importcpp: "setMediaKeys", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMediaElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMediaElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMediaElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMediaElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMediaElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMediaElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMediaElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMediaElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMediaElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMediaElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMediaElement): ptr HTMLMediaElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMediaElement; a2: ptr HTMLMediaElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMediaElement*(): HTMLMediaElement {.constructor,
    importcpp: "client::HTMLMediaElement(@)", header: "cheerp/clientlib.h".}

proc get_HAVE_CURRENT_DATA*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_HAVE_CURRENT_DATA", header: "cheerp/clientlib.h".}

proc get_HAVE_ENOUGH_DATA*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_HAVE_ENOUGH_DATA", header: "cheerp/clientlib.h".}

proc get_HAVE_FUTURE_DATA*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_HAVE_FUTURE_DATA", header: "cheerp/clientlib.h".}

proc get_HAVE_METADATA*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_HAVE_METADATA", header: "cheerp/clientlib.h".}

proc get_HAVE_NOTHING*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_HAVE_NOTHING", header: "cheerp/clientlib.h".}

proc get_NETWORK_EMPTY*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_NETWORK_EMPTY", header: "cheerp/clientlib.h".}

proc get_NETWORK_IDLE*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_NETWORK_IDLE", header: "cheerp/clientlib.h".}

proc get_NETWORK_LOADING*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_NETWORK_LOADING", header: "cheerp/clientlib.h".}

proc get_NETWORK_NO_SOURCE*(this: var HTMLMediaElement): cdouble {.
    importcpp: "get_NETWORK_NO_SOURCE", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAudioElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAudioElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAudioElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAudioElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLAudioElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAudioElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAudioElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAudioElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAudioElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLAudioElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLAudioElement): ptr HTMLAudioElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLAudioElement; a2: ptr HTMLAudioElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLAudioElement*(): HTMLAudioElement {.constructor,
    importcpp: "client::HTMLAudioElement(@)", header: "cheerp/clientlib.h".}

proc get_clear*(this: var HTMLBRElement): ptr String {.importcpp: "get_clear",
    header: "cheerp/clientlib.h".}

proc set_clear*(this: var HTMLBRElement; a2: String) {.importcpp: "set_clear",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBRElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBRElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBRElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBRElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBRElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBRElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBRElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBRElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBRElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBRElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLBRElement): ptr HTMLBRElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLBRElement; a2: ptr HTMLBRElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLBRElement*(): HTMLBRElement {.constructor,
    importcpp: "client::HTMLBRElement(@)", header: "cheerp/clientlib.h".}

proc get_href*(this: var HTMLBaseElement): ptr String {.importcpp: "get_href",
    header: "cheerp/clientlib.h".}

proc set_href*(this: var HTMLBaseElement; a2: String) {.importcpp: "set_href",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var HTMLBaseElement): ptr String {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc set_target*(this: var HTMLBaseElement; a2: String) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLBaseElement): ptr HTMLBaseElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLBaseElement; a2: ptr HTMLBaseElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLBaseElement*(): HTMLBaseElement {.constructor,
    importcpp: "client::HTMLBaseElement(@)", header: "cheerp/clientlib.h".}

proc get_face*(this: var HTMLBaseFontElement): ptr String {.
    importcpp: "get_face", header: "cheerp/clientlib.h".}

proc set_face*(this: var HTMLBaseFontElement; a2: String) {.
    importcpp: "set_face", header: "cheerp/clientlib.h".}

proc get_size*(this: var HTMLBaseFontElement): cdouble {.importcpp: "get_size",
    header: "cheerp/clientlib.h".}

proc set_size*(this: var HTMLBaseFontElement; a2: cdouble) {.
    importcpp: "set_size", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseFontElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseFontElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseFontElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseFontElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBaseFontElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseFontElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseFontElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseFontElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseFontElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBaseFontElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLBaseFontElement): ptr HTMLBaseFontElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLBaseFontElement; a2: ptr HTMLBaseFontElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLBaseFontElement*(): HTMLBaseFontElement {.constructor,
    importcpp: "client::HTMLBaseFontElement(@)", header: "cheerp/clientlib.h".}

proc get_abort*(this: var HTMLElementEventMap): ptr UIEvent {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var HTMLElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_activate*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_activate", header: "cheerp/clientlib.h".}

proc set_activate*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_activate", header: "cheerp/clientlib.h".}

proc get_beforeactivate*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_beforeactivate", header: "cheerp/clientlib.h".}

proc set_beforeactivate*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_beforeactivate", header: "cheerp/clientlib.h".}

proc get_beforecopy*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_beforecopy", header: "cheerp/clientlib.h".}

proc set_beforecopy*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_beforecopy", header: "cheerp/clientlib.h".}

proc get_beforecut*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_beforecut", header: "cheerp/clientlib.h".}

proc set_beforecut*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_beforecut", header: "cheerp/clientlib.h".}

proc get_beforedeactivate*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_beforedeactivate", header: "cheerp/clientlib.h".}

proc set_beforedeactivate*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_beforedeactivate", header: "cheerp/clientlib.h".}

proc get_beforepaste*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_beforepaste", header: "cheerp/clientlib.h".}

proc set_beforepaste*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_beforepaste", header: "cheerp/clientlib.h".}

proc get_blur*(this: var HTMLElementEventMap): ptr FocusEvent {.
    importcpp: "get_blur", header: "cheerp/clientlib.h".}

proc set_blur*(this: var HTMLElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_blur", header: "cheerp/clientlib.h".}

proc get_canplay*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_canplay", header: "cheerp/clientlib.h".}

proc set_canplay*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_canplay", header: "cheerp/clientlib.h".}

proc get_canplaythrough*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_canplaythrough", header: "cheerp/clientlib.h".}

proc set_canplaythrough*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_canplaythrough", header: "cheerp/clientlib.h".}

proc get_change*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_change", header: "cheerp/clientlib.h".}

proc set_change*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_change", header: "cheerp/clientlib.h".}

proc get_click*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_click", header: "cheerp/clientlib.h".}

proc set_click*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_click", header: "cheerp/clientlib.h".}

proc get_contextmenu*(this: var HTMLElementEventMap): ptr PointerEvent {.
    importcpp: "get_contextmenu", header: "cheerp/clientlib.h".}

proc set_contextmenu*(this: var HTMLElementEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_contextmenu", header: "cheerp/clientlib.h".}

proc get_copy*(this: var HTMLElementEventMap): ptr ClipboardEvent {.
    importcpp: "get_copy", header: "cheerp/clientlib.h".}

proc set_copy*(this: var HTMLElementEventMap; a2: ptr ClipboardEvent) {.
    importcpp: "set_copy", header: "cheerp/clientlib.h".}

proc get_cuechange*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_cuechange", header: "cheerp/clientlib.h".}

proc set_cuechange*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_cuechange", header: "cheerp/clientlib.h".}

proc get_cut*(this: var HTMLElementEventMap): ptr ClipboardEvent {.
    importcpp: "get_cut", header: "cheerp/clientlib.h".}

proc set_cut*(this: var HTMLElementEventMap; a2: ptr ClipboardEvent) {.
    importcpp: "set_cut", header: "cheerp/clientlib.h".}

proc get_dblclick*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_dblclick", header: "cheerp/clientlib.h".}

proc set_dblclick*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_dblclick", header: "cheerp/clientlib.h".}

proc get_deactivate*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_deactivate", header: "cheerp/clientlib.h".}

proc set_deactivate*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_deactivate", header: "cheerp/clientlib.h".}

proc get_drag*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_drag", header: "cheerp/clientlib.h".}

proc set_drag*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_drag", header: "cheerp/clientlib.h".}

proc get_dragend*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_dragend", header: "cheerp/clientlib.h".}

proc set_dragend*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragend", header: "cheerp/clientlib.h".}

proc get_dragenter*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_dragenter", header: "cheerp/clientlib.h".}

proc set_dragenter*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragenter", header: "cheerp/clientlib.h".}

proc get_dragleave*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_dragleave", header: "cheerp/clientlib.h".}

proc set_dragleave*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragleave", header: "cheerp/clientlib.h".}

proc get_dragover*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_dragover", header: "cheerp/clientlib.h".}

proc set_dragover*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragover", header: "cheerp/clientlib.h".}

proc get_dragstart*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_dragstart", header: "cheerp/clientlib.h".}

proc set_dragstart*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragstart", header: "cheerp/clientlib.h".}

proc get_drop*(this: var HTMLElementEventMap): ptr DragEvent {.
    importcpp: "get_drop", header: "cheerp/clientlib.h".}

proc set_drop*(this: var HTMLElementEventMap; a2: ptr DragEvent) {.
    importcpp: "set_drop", header: "cheerp/clientlib.h".}

proc get_durationchange*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_durationchange", header: "cheerp/clientlib.h".}

proc set_durationchange*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_durationchange", header: "cheerp/clientlib.h".}

proc get_emptied*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_emptied", header: "cheerp/clientlib.h".}

proc set_emptied*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_emptied", header: "cheerp/clientlib.h".}

proc get_ended*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_ended", header: "cheerp/clientlib.h".}

proc set_ended*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_ended", header: "cheerp/clientlib.h".}

proc get_error*(this: var HTMLElementEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var HTMLElementEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_focus*(this: var HTMLElementEventMap): ptr FocusEvent {.
    importcpp: "get_focus", header: "cheerp/clientlib.h".}

proc set_focus*(this: var HTMLElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focus", header: "cheerp/clientlib.h".}

proc get_input*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_input", header: "cheerp/clientlib.h".}

proc set_input*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_input", header: "cheerp/clientlib.h".}

proc get_invalid*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_invalid", header: "cheerp/clientlib.h".}

proc set_invalid*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_invalid", header: "cheerp/clientlib.h".}

proc get_keydown*(this: var HTMLElementEventMap): ptr KeyboardEvent {.
    importcpp: "get_keydown", header: "cheerp/clientlib.h".}

proc set_keydown*(this: var HTMLElementEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keydown", header: "cheerp/clientlib.h".}

proc get_keypress*(this: var HTMLElementEventMap): ptr KeyboardEvent {.
    importcpp: "get_keypress", header: "cheerp/clientlib.h".}

proc set_keypress*(this: var HTMLElementEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keypress", header: "cheerp/clientlib.h".}

proc get_keyup*(this: var HTMLElementEventMap): ptr KeyboardEvent {.
    importcpp: "get_keyup", header: "cheerp/clientlib.h".}

proc set_keyup*(this: var HTMLElementEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keyup", header: "cheerp/clientlib.h".}

proc get_load*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_loadeddata*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_loadeddata", header: "cheerp/clientlib.h".}

proc set_loadeddata*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_loadeddata", header: "cheerp/clientlib.h".}

proc get_loadedmetadata*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_loadedmetadata", header: "cheerp/clientlib.h".}

proc set_loadedmetadata*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_loadedmetadata", header: "cheerp/clientlib.h".}

proc get_loadstart*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_loadstart", header: "cheerp/clientlib.h".}

proc set_loadstart*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_loadstart", header: "cheerp/clientlib.h".}

proc get_mousedown*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mousedown", header: "cheerp/clientlib.h".}

proc set_mousedown*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousedown", header: "cheerp/clientlib.h".}

proc get_mouseenter*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseenter", header: "cheerp/clientlib.h".}

proc set_mouseenter*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseenter", header: "cheerp/clientlib.h".}

proc get_mouseleave*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseleave", header: "cheerp/clientlib.h".}

proc set_mouseleave*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseleave", header: "cheerp/clientlib.h".}

proc get_mousemove*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mousemove", header: "cheerp/clientlib.h".}

proc set_mousemove*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousemove", header: "cheerp/clientlib.h".}

proc get_mouseout*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseout", header: "cheerp/clientlib.h".}

proc set_mouseout*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseout", header: "cheerp/clientlib.h".}

proc get_mouseover*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseover", header: "cheerp/clientlib.h".}

proc set_mouseover*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseover", header: "cheerp/clientlib.h".}

proc get_mouseup*(this: var HTMLElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseup", header: "cheerp/clientlib.h".}

proc set_mouseup*(this: var HTMLElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseup", header: "cheerp/clientlib.h".}

proc get_mousewheel*(this: var HTMLElementEventMap): ptr WheelEvent {.
    importcpp: "get_mousewheel", header: "cheerp/clientlib.h".}

proc set_mousewheel*(this: var HTMLElementEventMap; a2: ptr WheelEvent) {.
    importcpp: "set_mousewheel", header: "cheerp/clientlib.h".}

proc get_MSContentZoom*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_MSContentZoom", header: "cheerp/clientlib.h".}

proc set_MSContentZoom*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSContentZoom", header: "cheerp/clientlib.h".}

proc get_MSManipulationStateChanged*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_MSManipulationStateChanged", header: "cheerp/clientlib.h".}

proc set_MSManipulationStateChanged*(this: var HTMLElementEventMap;
                                     a2: ptr Event) {.
    importcpp: "set_MSManipulationStateChanged", header: "cheerp/clientlib.h".}

proc get_paste*(this: var HTMLElementEventMap): ptr ClipboardEvent {.
    importcpp: "get_paste", header: "cheerp/clientlib.h".}

proc set_paste*(this: var HTMLElementEventMap; a2: ptr ClipboardEvent) {.
    importcpp: "set_paste", header: "cheerp/clientlib.h".}

proc get_pause*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_pause", header: "cheerp/clientlib.h".}

proc set_pause*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_pause", header: "cheerp/clientlib.h".}

proc get_play*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_play", header: "cheerp/clientlib.h".}

proc set_play*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_play", header: "cheerp/clientlib.h".}

proc get_playing*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_playing", header: "cheerp/clientlib.h".}

proc set_playing*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_playing", header: "cheerp/clientlib.h".}

proc get_progress*(this: var HTMLElementEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var HTMLElementEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_ratechange*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_ratechange", header: "cheerp/clientlib.h".}

proc set_ratechange*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_ratechange", header: "cheerp/clientlib.h".}

proc get_reset*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_reset", header: "cheerp/clientlib.h".}

proc set_reset*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_reset", header: "cheerp/clientlib.h".}

proc get_scroll*(this: var HTMLElementEventMap): ptr UIEvent {.
    importcpp: "get_scroll", header: "cheerp/clientlib.h".}

proc set_scroll*(this: var HTMLElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_scroll", header: "cheerp/clientlib.h".}

proc get_seeked*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_seeked", header: "cheerp/clientlib.h".}

proc set_seeked*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_seeked", header: "cheerp/clientlib.h".}

proc get_seeking*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_seeking", header: "cheerp/clientlib.h".}

proc set_seeking*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_seeking", header: "cheerp/clientlib.h".}

proc get_select*(this: var HTMLElementEventMap): ptr UIEvent {.
    importcpp: "get_select", header: "cheerp/clientlib.h".}

proc set_select*(this: var HTMLElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_select", header: "cheerp/clientlib.h".}

proc get_selectstart*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_selectstart", header: "cheerp/clientlib.h".}

proc set_selectstart*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_selectstart", header: "cheerp/clientlib.h".}

proc get_stalled*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_stalled", header: "cheerp/clientlib.h".}

proc set_stalled*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_stalled", header: "cheerp/clientlib.h".}

proc get_submit*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_submit", header: "cheerp/clientlib.h".}

proc set_submit*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_submit", header: "cheerp/clientlib.h".}

proc get_suspend*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_suspend", header: "cheerp/clientlib.h".}

proc set_suspend*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_suspend", header: "cheerp/clientlib.h".}

proc get_timeupdate*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_timeupdate", header: "cheerp/clientlib.h".}

proc set_timeupdate*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_timeupdate", header: "cheerp/clientlib.h".}

proc get_volumechange*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_volumechange", header: "cheerp/clientlib.h".}

proc set_volumechange*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_volumechange", header: "cheerp/clientlib.h".}

proc get_waiting*(this: var HTMLElementEventMap): ptr Event {.
    importcpp: "get_waiting", header: "cheerp/clientlib.h".}

proc set_waiting*(this: var HTMLElementEventMap; a2: ptr Event) {.
    importcpp: "set_waiting", header: "cheerp/clientlib.h".}

proc get_afterprint*(this: var WindowEventHandlersEventMap): ptr Event {.
    importcpp: "get_afterprint", header: "cheerp/clientlib.h".}

proc set_afterprint*(this: var WindowEventHandlersEventMap; a2: ptr Event) {.
    importcpp: "set_afterprint", header: "cheerp/clientlib.h".}

proc get_beforeprint*(this: var WindowEventHandlersEventMap): ptr Event {.
    importcpp: "get_beforeprint", header: "cheerp/clientlib.h".}

proc set_beforeprint*(this: var WindowEventHandlersEventMap; a2: ptr Event) {.
    importcpp: "set_beforeprint", header: "cheerp/clientlib.h".}

proc get_beforeunload*(this: var WindowEventHandlersEventMap): ptr BeforeUnloadEvent {.
    importcpp: "get_beforeunload", header: "cheerp/clientlib.h".}

proc set_beforeunload*(this: var WindowEventHandlersEventMap;
                       a2: ptr BeforeUnloadEvent) {.
    importcpp: "set_beforeunload", header: "cheerp/clientlib.h".}

proc get_hashchange*(this: var WindowEventHandlersEventMap): ptr HashChangeEvent {.
    importcpp: "get_hashchange", header: "cheerp/clientlib.h".}

proc set_hashchange*(this: var WindowEventHandlersEventMap;
                     a2: ptr HashChangeEvent) {.importcpp: "set_hashchange",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var WindowEventHandlersEventMap): ptr MessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var WindowEventHandlersEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_offline*(this: var WindowEventHandlersEventMap): ptr Event {.
    importcpp: "get_offline", header: "cheerp/clientlib.h".}

proc set_offline*(this: var WindowEventHandlersEventMap; a2: ptr Event) {.
    importcpp: "set_offline", header: "cheerp/clientlib.h".}

proc get_online*(this: var WindowEventHandlersEventMap): ptr Event {.
    importcpp: "get_online", header: "cheerp/clientlib.h".}

proc set_online*(this: var WindowEventHandlersEventMap; a2: ptr Event) {.
    importcpp: "set_online", header: "cheerp/clientlib.h".}

proc get_pagehide*(this: var WindowEventHandlersEventMap): ptr PageTransitionEvent {.
    importcpp: "get_pagehide", header: "cheerp/clientlib.h".}

proc set_pagehide*(this: var WindowEventHandlersEventMap;
                   a2: ptr PageTransitionEvent) {.importcpp: "set_pagehide",
    header: "cheerp/clientlib.h".}

proc get_pageshow*(this: var WindowEventHandlersEventMap): ptr PageTransitionEvent {.
    importcpp: "get_pageshow", header: "cheerp/clientlib.h".}

proc set_pageshow*(this: var WindowEventHandlersEventMap;
                   a2: ptr PageTransitionEvent) {.importcpp: "set_pageshow",
    header: "cheerp/clientlib.h".}

proc get_popstate*(this: var WindowEventHandlersEventMap): ptr PopStateEvent {.
    importcpp: "get_popstate", header: "cheerp/clientlib.h".}

proc set_popstate*(this: var WindowEventHandlersEventMap; a2: ptr PopStateEvent) {.
    importcpp: "set_popstate", header: "cheerp/clientlib.h".}

proc get_storage*(this: var WindowEventHandlersEventMap): ptr StorageEvent {.
    importcpp: "get_storage", header: "cheerp/clientlib.h".}

proc set_storage*(this: var WindowEventHandlersEventMap; a2: ptr StorageEvent) {.
    importcpp: "set_storage", header: "cheerp/clientlib.h".}

proc get_unload*(this: var WindowEventHandlersEventMap): ptr Event {.
    importcpp: "get_unload", header: "cheerp/clientlib.h".}

proc set_unload*(this: var WindowEventHandlersEventMap; a2: ptr Event) {.
    importcpp: "set_unload", header: "cheerp/clientlib.h".}

proc get_blur*(this: var HTMLBodyElementEventMap): ptr FocusEvent {.
    importcpp: "get_blur", header: "cheerp/clientlib.h".}

proc set_blur*(this: var HTMLBodyElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_blur", header: "cheerp/clientlib.h".}

proc get_error*(this: var HTMLBodyElementEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var HTMLBodyElementEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_focus*(this: var HTMLBodyElementEventMap): ptr FocusEvent {.
    importcpp: "get_focus", header: "cheerp/clientlib.h".}

proc set_focus*(this: var HTMLBodyElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focus", header: "cheerp/clientlib.h".}

proc get_load*(this: var HTMLBodyElementEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var HTMLBodyElementEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_orientationchange*(this: var HTMLBodyElementEventMap): ptr Event {.
    importcpp: "get_orientationchange", header: "cheerp/clientlib.h".}

proc set_orientationchange*(this: var HTMLBodyElementEventMap; a2: ptr Event) {.
    importcpp: "set_orientationchange", header: "cheerp/clientlib.h".}

proc get_resize*(this: var HTMLBodyElementEventMap): ptr UIEvent {.
    importcpp: "get_resize", header: "cheerp/clientlib.h".}

proc set_resize*(this: var HTMLBodyElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_resize", header: "cheerp/clientlib.h".}

proc get_scroll*(this: var HTMLBodyElementEventMap): ptr UIEvent {.
    importcpp: "get_scroll", header: "cheerp/clientlib.h".}

proc set_scroll*(this: var HTMLBodyElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_scroll", header: "cheerp/clientlib.h".}

proc get_onafterprint*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onafterprint", header: "cheerp/clientlib.h".}

proc set_onafterprint*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onafterprint", header: "cheerp/clientlib.h".}

proc get_onbeforeprint*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onbeforeprint", header: "cheerp/clientlib.h".}

proc set_onbeforeprint*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onbeforeprint", header: "cheerp/clientlib.h".}

proc get_onbeforeunload*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onbeforeunload", header: "cheerp/clientlib.h".}

proc set_onbeforeunload*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onbeforeunload", header: "cheerp/clientlib.h".}

proc get_onhashchange*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onhashchange", header: "cheerp/clientlib.h".}

proc set_onhashchange*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onhashchange", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc get_onoffline*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onoffline", header: "cheerp/clientlib.h".}

proc set_onoffline*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onoffline", header: "cheerp/clientlib.h".}

proc get_ononline*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_ononline", header: "cheerp/clientlib.h".}

proc set_ononline*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_ononline", header: "cheerp/clientlib.h".}

proc get_onpagehide*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onpagehide", header: "cheerp/clientlib.h".}

proc set_onpagehide*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpagehide", header: "cheerp/clientlib.h".}

proc get_onpageshow*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onpageshow", header: "cheerp/clientlib.h".}

proc set_onpageshow*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpageshow", header: "cheerp/clientlib.h".}

proc get_onpopstate*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onpopstate", header: "cheerp/clientlib.h".}

proc set_onpopstate*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onpopstate", header: "cheerp/clientlib.h".}

proc get_onstorage*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onstorage", header: "cheerp/clientlib.h".}

proc set_onstorage*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onstorage", header: "cheerp/clientlib.h".}

proc get_onunload*(this: var WindowEventHandlers): ptr EventListener {.
    importcpp: "get_onunload", header: "cheerp/clientlib.h".}

proc set_onunload*(this: var WindowEventHandlers; a2: ptr EventListener) {.
    importcpp: "set_onunload", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WindowEventHandlers; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WindowEventHandlers; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WindowEventHandlers; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WindowEventHandlers; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WindowEventHandlers; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WindowEventHandlers; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WindowEventHandlers; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WindowEventHandlers; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WindowEventHandlers; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WindowEventHandlers; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_aLink*(this: var HTMLBodyElement): ptr String {.importcpp: "get_aLink",
    header: "cheerp/clientlib.h".}

proc set_aLink*(this: var HTMLBodyElement; a2: String) {.importcpp: "set_aLink",
    header: "cheerp/clientlib.h".}

proc get_background*(this: var HTMLBodyElement): ptr String {.
    importcpp: "get_background", header: "cheerp/clientlib.h".}

proc set_background*(this: var HTMLBodyElement; a2: String) {.
    importcpp: "set_background", header: "cheerp/clientlib.h".}

proc get_bgColor*(this: var HTMLBodyElement): ptr String {.
    importcpp: "get_bgColor", header: "cheerp/clientlib.h".}

proc set_bgColor*(this: var HTMLBodyElement; a2: String) {.
    importcpp: "set_bgColor", header: "cheerp/clientlib.h".}

proc get_bgProperties*(this: var HTMLBodyElement): ptr String {.
    importcpp: "get_bgProperties", header: "cheerp/clientlib.h".}

proc set_bgProperties*(this: var HTMLBodyElement; a2: String) {.
    importcpp: "set_bgProperties", header: "cheerp/clientlib.h".}

proc get_link*(this: var HTMLBodyElement): ptr String {.importcpp: "get_link",
    header: "cheerp/clientlib.h".}

proc set_link*(this: var HTMLBodyElement; a2: String) {.importcpp: "set_link",
    header: "cheerp/clientlib.h".}

proc get_noWrap*(this: var HTMLBodyElement): bool {.importcpp: "get_noWrap",
    header: "cheerp/clientlib.h".}

proc set_noWrap*(this: var HTMLBodyElement; a2: bool) {.importcpp: "set_noWrap",
    header: "cheerp/clientlib.h".}

proc get_onorientationchange*(this: var HTMLBodyElement): ptr EventListener {.
    importcpp: "get_onorientationchange", header: "cheerp/clientlib.h".}

proc set_onorientationchange*(this: var HTMLBodyElement; a2: ptr EventListener) {.
    importcpp: "set_onorientationchange", header: "cheerp/clientlib.h".}

proc get_onresize*(this: var HTMLBodyElement): ptr EventListener {.
    importcpp: "get_onresize", header: "cheerp/clientlib.h".}

proc set_onresize*(this: var HTMLBodyElement; a2: ptr EventListener) {.
    importcpp: "set_onresize", header: "cheerp/clientlib.h".}

proc get_text*(this: var HTMLBodyElement): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var HTMLBodyElement; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc get_vLink*(this: var HTMLBodyElement): ptr String {.importcpp: "get_vLink",
    header: "cheerp/clientlib.h".}

proc set_vLink*(this: var HTMLBodyElement; a2: String) {.importcpp: "set_vLink",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBodyElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBodyElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBodyElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBodyElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLBodyElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBodyElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBodyElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBodyElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBodyElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLBodyElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLBodyElement): ptr HTMLBodyElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLBodyElement; a2: ptr HTMLBodyElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLBodyElement*(): HTMLBodyElement {.constructor,
    importcpp: "client::HTMLBodyElement(@)", header: "cheerp/clientlib.h".}

proc get_autofocus*(this: var HTMLButtonElement): bool {.
    importcpp: "get_autofocus", header: "cheerp/clientlib.h".}

proc set_autofocus*(this: var HTMLButtonElement; a2: bool) {.
    importcpp: "set_autofocus", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLButtonElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLButtonElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLButtonElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_formAction*(this: var HTMLButtonElement): ptr String {.
    importcpp: "get_formAction", header: "cheerp/clientlib.h".}

proc set_formAction*(this: var HTMLButtonElement; a2: String) {.
    importcpp: "set_formAction", header: "cheerp/clientlib.h".}

proc get_formEnctype*(this: var HTMLButtonElement): ptr String {.
    importcpp: "get_formEnctype", header: "cheerp/clientlib.h".}

proc set_formEnctype*(this: var HTMLButtonElement; a2: String) {.
    importcpp: "set_formEnctype", header: "cheerp/clientlib.h".}

proc get_formMethod*(this: var HTMLButtonElement): ptr String {.
    importcpp: "get_formMethod", header: "cheerp/clientlib.h".}

proc set_formMethod*(this: var HTMLButtonElement; a2: String) {.
    importcpp: "set_formMethod", header: "cheerp/clientlib.h".}

proc get_formNoValidate*(this: var HTMLButtonElement): bool {.
    importcpp: "get_formNoValidate", header: "cheerp/clientlib.h".}

proc set_formNoValidate*(this: var HTMLButtonElement; a2: bool) {.
    importcpp: "set_formNoValidate", header: "cheerp/clientlib.h".}

proc get_formTarget*(this: var HTMLButtonElement): ptr String {.
    importcpp: "get_formTarget", header: "cheerp/clientlib.h".}

proc set_formTarget*(this: var HTMLButtonElement; a2: String) {.
    importcpp: "set_formTarget", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLButtonElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLButtonElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc set_status*(this: var HTMLButtonElement; a2: ptr Object) {.
    importcpp: "set_status", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLButtonElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLButtonElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLButtonElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLButtonElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLButtonElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLButtonElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLButtonElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLButtonElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLButtonElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLButtonElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLButtonElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLButtonElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLButtonElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLButtonElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLButtonElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLButtonElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLButtonElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLButtonElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLButtonElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLButtonElement): ptr HTMLButtonElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLButtonElement; a2: ptr HTMLButtonElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLButtonElement*(): HTMLButtonElement {.constructor,
    importcpp: "client::HTMLButtonElement(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLCanvasElement): cdouble {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLCanvasElement; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLCanvasElement): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLCanvasElement; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc msToBlob*(this: var HTMLCanvasElement): ptr Blob {.importcpp: "msToBlob",
    header: "cheerp/clientlib.h".}

proc toBlob*(this: var HTMLCanvasElement; callback: ptr EventListener) {.
    importcpp: "toBlob", header: "cheerp/clientlib.h".}

proc toBlob*(this: var HTMLCanvasElement; callback: ptr EventListener;
             `type`: String) {.importcpp: "toBlob", header: "cheerp/clientlib.h".}

proc toDataURL*(this: var HTMLCanvasElement): ptr String {.
    importcpp: "toDataURL", header: "cheerp/clientlib.h".}

proc toDataURL*(this: var HTMLCanvasElement; `type`: String): ptr String {.
    importcpp: "toDataURL", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLCanvasElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLCanvasElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLCanvasElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLCanvasElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLCanvasElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLCanvasElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLCanvasElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLCanvasElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLCanvasElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLCanvasElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLCanvasElement): ptr HTMLCanvasElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLCanvasElement; a2: ptr HTMLCanvasElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLCanvasElement*(): HTMLCanvasElement {.constructor,
    importcpp: "client::HTMLCanvasElement(@)", header: "cheerp/clientlib.h".}

proc namedItem*(this: var HTMLCollection; name: String): ptr Element {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLCollection): ptr HTMLCollection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLCollection; a2: ptr HTMLCollection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLCollection*(): HTMLCollection {.constructor,
    importcpp: "client::HTMLCollection(@)", header: "cheerp/clientlib.h".}

proc item*[T](this: var HTMLCollectionOf[T]; index: cdouble): ptr T {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc namedItem*[T](this: var HTMLCollectionOf[T]; name: String): ptr T {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc `[]`*[T](this: var HTMLCollectionOf[T]; index: cint): ptr T {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*[T](this: HTMLCollectionOf[T]; index: cint): ptr T {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_compact*(this: var HTMLDListElement): bool {.importcpp: "get_compact",
    header: "cheerp/clientlib.h".}

proc set_compact*(this: var HTMLDListElement; a2: bool) {.
    importcpp: "set_compact", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDListElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDListElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDListElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDListElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDListElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDListElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDListElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDListElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDListElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDListElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDListElement): ptr HTMLDListElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDListElement; a2: ptr HTMLDListElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDListElement*(): HTMLDListElement {.constructor,
    importcpp: "client::HTMLDListElement(@)", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLDataElement): ptr String {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLDataElement; a2: String) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDataElement): ptr HTMLDataElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDataElement; a2: ptr HTMLDataElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDataElement*(): HTMLDataElement {.constructor,
    importcpp: "client::HTMLDataElement(@)", header: "cheerp/clientlib.h".}

proc get_options*(this: var HTMLDataListElement): ptr HTMLCollectionOf[
    HTMLOptionElement] {.importcpp: "get_options", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataListElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataListElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataListElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataListElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDataListElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataListElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataListElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataListElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataListElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDataListElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDataListElement): ptr HTMLDataListElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDataListElement; a2: ptr HTMLDataListElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDataListElement*(): HTMLDataListElement {.constructor,
    importcpp: "client::HTMLDataListElement(@)", header: "cheerp/clientlib.h".}

proc get_open*(this: var HTMLDetailsElement): bool {.importcpp: "get_open",
    header: "cheerp/clientlib.h".}

proc set_open*(this: var HTMLDetailsElement; a2: bool) {.importcpp: "set_open",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDetailsElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDetailsElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDetailsElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDetailsElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDetailsElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDetailsElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDetailsElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDetailsElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDetailsElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDetailsElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDetailsElement): ptr HTMLDetailsElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDetailsElement; a2: ptr HTMLDetailsElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDetailsElement*(): HTMLDetailsElement {.constructor,
    importcpp: "client::HTMLDetailsElement(@)", header: "cheerp/clientlib.h".}

proc get_open*(this: var HTMLDialogElement): bool {.importcpp: "get_open",
    header: "cheerp/clientlib.h".}

proc set_open*(this: var HTMLDialogElement; a2: bool) {.importcpp: "set_open",
    header: "cheerp/clientlib.h".}

proc get_returnValue*(this: var HTMLDialogElement): ptr String {.
    importcpp: "get_returnValue", header: "cheerp/clientlib.h".}

proc set_returnValue*(this: var HTMLDialogElement; a2: String) {.
    importcpp: "set_returnValue", header: "cheerp/clientlib.h".}

proc close*(this: var HTMLDialogElement) {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc close*(this: var HTMLDialogElement; returnValue: String) {.
    importcpp: "close", header: "cheerp/clientlib.h".}

proc show*(this: var HTMLDialogElement) {.importcpp: "show",
    header: "cheerp/clientlib.h".}

proc showModal*(this: var HTMLDialogElement) {.importcpp: "showModal",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDialogElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDialogElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDialogElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDialogElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDialogElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDialogElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDialogElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDialogElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDialogElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDialogElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDialogElement): ptr HTMLDialogElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDialogElement; a2: ptr HTMLDialogElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDialogElement*(): HTMLDialogElement {.constructor,
    importcpp: "client::HTMLDialogElement(@)", header: "cheerp/clientlib.h".}

proc get_compact*(this: var HTMLDirectoryElement): bool {.
    importcpp: "get_compact", header: "cheerp/clientlib.h".}

proc set_compact*(this: var HTMLDirectoryElement; a2: bool) {.
    importcpp: "set_compact", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDirectoryElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDirectoryElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDirectoryElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDirectoryElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDirectoryElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDirectoryElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDirectoryElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDirectoryElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDirectoryElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDirectoryElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDirectoryElement): ptr HTMLDirectoryElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDirectoryElement; a2: ptr HTMLDirectoryElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDirectoryElement*(): HTMLDirectoryElement {.constructor,
    importcpp: "client::HTMLDirectoryElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLDivElement): ptr String {.importcpp: "get_align",
    header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLDivElement; a2: String) {.importcpp: "set_align",
    header: "cheerp/clientlib.h".}

proc get_noWrap*(this: var HTMLDivElement): bool {.importcpp: "get_noWrap",
    header: "cheerp/clientlib.h".}

proc set_noWrap*(this: var HTMLDivElement; a2: bool) {.importcpp: "set_noWrap",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDivElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDivElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDivElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDivElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDivElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDivElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDivElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDivElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDivElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDivElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDivElement): ptr HTMLDivElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDivElement; a2: ptr HTMLDivElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDivElement*(): HTMLDivElement {.constructor,
    importcpp: "client::HTMLDivElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDocument; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDocument; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDocument; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDocument; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLDocument; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDocument; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDocument; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDocument; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDocument; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLDocument; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLDocument): ptr HTMLDocument {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLDocument; a2: ptr HTMLDocument) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLDocument*(): HTMLDocument {.constructor,
    importcpp: "client::HTMLDocument(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLEmbedElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc set_hidden*(this: var HTMLEmbedElement; a2: ptr Object) {.
    importcpp: "set_hidden", header: "cheerp/clientlib.h".}

proc get_msPlayToDisabled*(this: var HTMLEmbedElement): bool {.
    importcpp: "get_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc set_msPlayToDisabled*(this: var HTMLEmbedElement; a2: bool) {.
    importcpp: "set_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc get_msPlayToPreferredSourceUri*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc set_msPlayToPreferredSourceUri*(this: var HTMLEmbedElement; a2: String) {.
    importcpp: "set_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc get_msPlayToPrimary*(this: var HTMLEmbedElement): bool {.
    importcpp: "get_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc set_msPlayToPrimary*(this: var HTMLEmbedElement; a2: bool) {.
    importcpp: "set_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLEmbedElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLEmbedElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_palette*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_palette", header: "cheerp/clientlib.h".}

proc get_pluginspage*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_pluginspage", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLEmbedElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLEmbedElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_units*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_units", header: "cheerp/clientlib.h".}

proc set_units*(this: var HTMLEmbedElement; a2: String) {.
    importcpp: "set_units", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLEmbedElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLEmbedElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLEmbedElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLEmbedElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLEmbedElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLEmbedElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLEmbedElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLEmbedElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLEmbedElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLEmbedElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLEmbedElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLEmbedElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLEmbedElement): ptr HTMLEmbedElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLEmbedElement; a2: ptr HTMLEmbedElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLEmbedElement*(): HTMLEmbedElement {.constructor,
    importcpp: "client::HTMLEmbedElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLFieldSetElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLFieldSetElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLFieldSetElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLFieldSetElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLFieldSetElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLFieldSetElement): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLFieldSetElement; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLFieldSetElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLFieldSetElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLFieldSetElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLFieldSetElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLFieldSetElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFieldSetElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFieldSetElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFieldSetElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFieldSetElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFieldSetElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFieldSetElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFieldSetElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFieldSetElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFieldSetElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFieldSetElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLFieldSetElement): ptr HTMLFieldSetElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLFieldSetElement; a2: ptr HTMLFieldSetElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLFieldSetElement*(): HTMLFieldSetElement {.constructor,
    importcpp: "client::HTMLFieldSetElement(@)", header: "cheerp/clientlib.h".}

proc get_face*(this: var HTMLFontElement): ptr String {.importcpp: "get_face",
    header: "cheerp/clientlib.h".}

proc set_face*(this: var HTMLFontElement; a2: String) {.importcpp: "set_face",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFontElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFontElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFontElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFontElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFontElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFontElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFontElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFontElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFontElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFontElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLFontElement): ptr HTMLFontElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLFontElement; a2: ptr HTMLFontElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLFontElement*(): HTMLFontElement {.constructor,
    importcpp: "client::HTMLFontElement(@)", header: "cheerp/clientlib.h".}

proc namedItem*(this: var HTMLFormControlsCollection; name: String): ptr HTMLCollection {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLFormControlsCollection): ptr HTMLFormControlsCollection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLFormControlsCollection;
                    a2: ptr HTMLFormControlsCollection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLFormControlsCollection*(): HTMLFormControlsCollection {.
    constructor, importcpp: "client::HTMLFormControlsCollection(@)",
    header: "cheerp/clientlib.h".}

proc get_acceptCharset*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_acceptCharset", header: "cheerp/clientlib.h".}

proc set_acceptCharset*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_acceptCharset", header: "cheerp/clientlib.h".}

proc get_action*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_action", header: "cheerp/clientlib.h".}

proc set_action*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_action", header: "cheerp/clientlib.h".}

proc get_autocomplete*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_autocomplete", header: "cheerp/clientlib.h".}

proc set_autocomplete*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_autocomplete", header: "cheerp/clientlib.h".}

proc get_elements*(this: var HTMLFormElement): ptr HTMLFormControlsCollection {.
    importcpp: "get_elements", header: "cheerp/clientlib.h".}

proc get_encoding*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_encoding", header: "cheerp/clientlib.h".}

proc set_encoding*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_encoding", header: "cheerp/clientlib.h".}

proc get_enctype*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_enctype", header: "cheerp/clientlib.h".}

proc set_enctype*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_enctype", header: "cheerp/clientlib.h".}

proc get_length*(this: var HTMLFormElement): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_method*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_method", header: "cheerp/clientlib.h".}

proc set_method*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_method", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLFormElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLFormElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_noValidate*(this: var HTMLFormElement): bool {.
    importcpp: "get_noValidate", header: "cheerp/clientlib.h".}

proc set_noValidate*(this: var HTMLFormElement; a2: bool) {.
    importcpp: "set_noValidate", header: "cheerp/clientlib.h".}

proc get_target*(this: var HTMLFormElement): ptr String {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc set_target*(this: var HTMLFormElement; a2: String) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLFormElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc reportValidity*(this: var HTMLFormElement): bool {.
    importcpp: "reportValidity", header: "cheerp/clientlib.h".}

proc reset*(this: var HTMLFormElement) {.importcpp: "reset",
    header: "cheerp/clientlib.h".}

proc submit*(this: var HTMLFormElement) {.importcpp: "submit",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFormElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFormElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFormElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFormElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFormElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFormElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFormElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFormElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFormElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFormElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc `[]`*(this: var HTMLFormElement; index: cint): ptr Object {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: HTMLFormElement; index: cint): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLFormElement): ptr HTMLFormElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLFormElement; a2: ptr HTMLFormElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLFormElement*(): HTMLFormElement {.constructor,
    importcpp: "client::HTMLFormElement(@)", header: "cheerp/clientlib.h".}

proc get_load*(this: var HTMLFrameElementEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var HTMLFrameElementEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_border*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_border", header: "cheerp/clientlib.h".}

proc set_border*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_border", header: "cheerp/clientlib.h".}

proc set_borderColor*(this: var HTMLFrameElement; a2: ptr Object) {.
    importcpp: "set_borderColor", header: "cheerp/clientlib.h".}

proc get_contentDocument*(this: var HTMLFrameElement): ptr Document {.
    importcpp: "get_contentDocument", header: "cheerp/clientlib.h".}

proc get_contentWindow*(this: var HTMLFrameElement): ptr Window {.
    importcpp: "get_contentWindow", header: "cheerp/clientlib.h".}

proc get_frameBorder*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_frameBorder", header: "cheerp/clientlib.h".}

proc set_frameBorder*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_frameBorder", header: "cheerp/clientlib.h".}

proc set_frameSpacing*(this: var HTMLFrameElement; a2: ptr Object) {.
    importcpp: "set_frameSpacing", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_longDesc*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_longDesc", header: "cheerp/clientlib.h".}

proc set_longDesc*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_longDesc", header: "cheerp/clientlib.h".}

proc get_marginHeight*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_marginHeight", header: "cheerp/clientlib.h".}

proc set_marginHeight*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_marginHeight", header: "cheerp/clientlib.h".}

proc get_marginWidth*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_marginWidth", header: "cheerp/clientlib.h".}

proc set_marginWidth*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_marginWidth", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLFrameElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLFrameElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_noResize*(this: var HTMLFrameElement): bool {.
    importcpp: "get_noResize", header: "cheerp/clientlib.h".}

proc set_noResize*(this: var HTMLFrameElement; a2: bool) {.
    importcpp: "set_noResize", header: "cheerp/clientlib.h".}

proc get_scrolling*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_scrolling", header: "cheerp/clientlib.h".}

proc set_scrolling*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_scrolling", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLFrameElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLFrameElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLFrameElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLFrameElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLFrameElement): ptr HTMLFrameElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLFrameElement; a2: ptr HTMLFrameElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLFrameElement*(): HTMLFrameElement {.constructor,
    importcpp: "client::HTMLFrameElement(@)", header: "cheerp/clientlib.h".}

proc get_blur*(this: var HTMLFrameSetElementEventMap): ptr FocusEvent {.
    importcpp: "get_blur", header: "cheerp/clientlib.h".}

proc set_blur*(this: var HTMLFrameSetElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_blur", header: "cheerp/clientlib.h".}

proc get_error*(this: var HTMLFrameSetElementEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var HTMLFrameSetElementEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_focus*(this: var HTMLFrameSetElementEventMap): ptr FocusEvent {.
    importcpp: "get_focus", header: "cheerp/clientlib.h".}

proc set_focus*(this: var HTMLFrameSetElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focus", header: "cheerp/clientlib.h".}

proc get_load*(this: var HTMLFrameSetElementEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var HTMLFrameSetElementEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_orientationchange*(this: var HTMLFrameSetElementEventMap): ptr Event {.
    importcpp: "get_orientationchange", header: "cheerp/clientlib.h".}

proc set_orientationchange*(this: var HTMLFrameSetElementEventMap; a2: ptr Event) {.
    importcpp: "set_orientationchange", header: "cheerp/clientlib.h".}

proc get_resize*(this: var HTMLFrameSetElementEventMap): ptr UIEvent {.
    importcpp: "get_resize", header: "cheerp/clientlib.h".}

proc set_resize*(this: var HTMLFrameSetElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_resize", header: "cheerp/clientlib.h".}

proc get_scroll*(this: var HTMLFrameSetElementEventMap): ptr UIEvent {.
    importcpp: "get_scroll", header: "cheerp/clientlib.h".}

proc set_scroll*(this: var HTMLFrameSetElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_scroll", header: "cheerp/clientlib.h".}

proc get_cols*(this: var HTMLFrameSetElement): ptr String {.
    importcpp: "get_cols", header: "cheerp/clientlib.h".}

proc set_cols*(this: var HTMLFrameSetElement; a2: String) {.
    importcpp: "set_cols", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLFrameSetElement): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLFrameSetElement; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_onorientationchange*(this: var HTMLFrameSetElement): ptr EventListener {.
    importcpp: "get_onorientationchange", header: "cheerp/clientlib.h".}

proc set_onorientationchange*(this: var HTMLFrameSetElement;
                              a2: ptr EventListener) {.
    importcpp: "set_onorientationchange", header: "cheerp/clientlib.h".}

proc get_onresize*(this: var HTMLFrameSetElement): ptr EventListener {.
    importcpp: "get_onresize", header: "cheerp/clientlib.h".}

proc set_onresize*(this: var HTMLFrameSetElement; a2: ptr EventListener) {.
    importcpp: "set_onresize", header: "cheerp/clientlib.h".}

proc get_rows*(this: var HTMLFrameSetElement): ptr String {.
    importcpp: "get_rows", header: "cheerp/clientlib.h".}

proc set_rows*(this: var HTMLFrameSetElement; a2: String) {.
    importcpp: "set_rows", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameSetElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameSetElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameSetElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameSetElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLFrameSetElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameSetElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameSetElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameSetElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameSetElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLFrameSetElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLFrameSetElement): ptr HTMLFrameSetElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLFrameSetElement; a2: ptr HTMLFrameSetElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLFrameSetElement*(): HTMLFrameSetElement {.constructor,
    importcpp: "client::HTMLFrameSetElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLHRElement): ptr String {.importcpp: "get_align",
    header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLHRElement; a2: String) {.importcpp: "set_align",
    header: "cheerp/clientlib.h".}

proc get_noShade*(this: var HTMLHRElement): bool {.importcpp: "get_noShade",
    header: "cheerp/clientlib.h".}

proc set_noShade*(this: var HTMLHRElement; a2: bool) {.importcpp: "set_noShade",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLHRElement): ptr String {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLHRElement; a2: String) {.importcpp: "set_width",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHRElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHRElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHRElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHRElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHRElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHRElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHRElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHRElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHRElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHRElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLHRElement): ptr HTMLHRElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLHRElement; a2: ptr HTMLHRElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLHRElement*(): HTMLHRElement {.constructor,
    importcpp: "client::HTMLHRElement(@)", header: "cheerp/clientlib.h".}

proc get_profile*(this: var HTMLHeadElement): ptr String {.
    importcpp: "get_profile", header: "cheerp/clientlib.h".}

proc set_profile*(this: var HTMLHeadElement; a2: String) {.
    importcpp: "set_profile", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLHeadElement): ptr HTMLHeadElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLHeadElement; a2: ptr HTMLHeadElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLHeadElement*(): HTMLHeadElement {.constructor,
    importcpp: "client::HTMLHeadElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLHeadingElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLHeadingElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadingElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadingElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadingElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadingElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHeadingElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadingElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadingElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadingElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadingElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHeadingElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLHeadingElement): ptr HTMLHeadingElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLHeadingElement; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLHeadingElement*(): HTMLHeadingElement {.constructor,
    importcpp: "client::HTMLHeadingElement(@)", header: "cheerp/clientlib.h".}

proc get_version*(this: var HTMLHtmlElement): ptr String {.
    importcpp: "get_version", header: "cheerp/clientlib.h".}

proc set_version*(this: var HTMLHtmlElement; a2: String) {.
    importcpp: "set_version", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHtmlElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHtmlElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHtmlElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHtmlElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLHtmlElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHtmlElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHtmlElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHtmlElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHtmlElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLHtmlElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLHtmlElement): ptr HTMLHtmlElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLHtmlElement; a2: ptr HTMLHtmlElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLHtmlElement*(): HTMLHtmlElement {.constructor,
    importcpp: "client::HTMLHtmlElement(@)", header: "cheerp/clientlib.h".}

proc get_load*(this: var HTMLIFrameElementEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var HTMLIFrameElementEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_allowFullscreen*(this: var HTMLIFrameElement): bool {.
    importcpp: "get_allowFullscreen", header: "cheerp/clientlib.h".}

proc set_allowFullscreen*(this: var HTMLIFrameElement; a2: bool) {.
    importcpp: "set_allowFullscreen", header: "cheerp/clientlib.h".}

proc get_allowPaymentRequest*(this: var HTMLIFrameElement): bool {.
    importcpp: "get_allowPaymentRequest", header: "cheerp/clientlib.h".}

proc set_allowPaymentRequest*(this: var HTMLIFrameElement; a2: bool) {.
    importcpp: "set_allowPaymentRequest", header: "cheerp/clientlib.h".}

proc get_contentDocument*(this: var HTMLIFrameElement): ptr Document {.
    importcpp: "get_contentDocument", header: "cheerp/clientlib.h".}

proc get_contentWindow*(this: var HTMLIFrameElement): ptr Window {.
    importcpp: "get_contentWindow", header: "cheerp/clientlib.h".}

proc get_frameBorder*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_frameBorder", header: "cheerp/clientlib.h".}

proc set_frameBorder*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_frameBorder", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_longDesc*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_longDesc", header: "cheerp/clientlib.h".}

proc set_longDesc*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_longDesc", header: "cheerp/clientlib.h".}

proc get_marginHeight*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_marginHeight", header: "cheerp/clientlib.h".}

proc set_marginHeight*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_marginHeight", header: "cheerp/clientlib.h".}

proc get_marginWidth*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_marginWidth", header: "cheerp/clientlib.h".}

proc set_marginWidth*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_marginWidth", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLIFrameElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLIFrameElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_sandbox*(this: var HTMLIFrameElement): ptr DOMTokenList {.
    importcpp: "get_sandbox", header: "cheerp/clientlib.h".}

proc get_scrolling*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_scrolling", header: "cheerp/clientlib.h".}

proc set_scrolling*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_scrolling", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLIFrameElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLIFrameElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_srcdoc*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_srcdoc", header: "cheerp/clientlib.h".}

proc set_srcdoc*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_srcdoc", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLIFrameElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLIFrameElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLIFrameElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLIFrameElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLIFrameElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLIFrameElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLIFrameElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLIFrameElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLIFrameElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLIFrameElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLIFrameElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLIFrameElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLIFrameElement): ptr HTMLIFrameElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLIFrameElement; a2: ptr HTMLIFrameElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLIFrameElement*(): HTMLIFrameElement {.constructor,
    importcpp: "client::HTMLIFrameElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_alt*(this: var HTMLImageElement): ptr String {.importcpp: "get_alt",
    header: "cheerp/clientlib.h".}

proc set_alt*(this: var HTMLImageElement; a2: String) {.importcpp: "set_alt",
    header: "cheerp/clientlib.h".}

proc get_border*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_border", header: "cheerp/clientlib.h".}

proc set_border*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_border", header: "cheerp/clientlib.h".}

proc get_complete*(this: var HTMLImageElement): bool {.
    importcpp: "get_complete", header: "cheerp/clientlib.h".}

proc get_crossOrigin*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_crossOrigin", header: "cheerp/clientlib.h".}

proc set_crossOrigin*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_crossOrigin", header: "cheerp/clientlib.h".}

proc get_currentSrc*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_currentSrc", header: "cheerp/clientlib.h".}

proc get_decoding*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_decoding", header: "cheerp/clientlib.h".}

proc set_decoding*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_decoding", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLImageElement): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLImageElement; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_hspace*(this: var HTMLImageElement): cdouble {.importcpp: "get_hspace",
    header: "cheerp/clientlib.h".}

proc set_hspace*(this: var HTMLImageElement; a2: cdouble) {.
    importcpp: "set_hspace", header: "cheerp/clientlib.h".}

proc get_isMap*(this: var HTMLImageElement): bool {.importcpp: "get_isMap",
    header: "cheerp/clientlib.h".}

proc set_isMap*(this: var HTMLImageElement; a2: bool) {.importcpp: "set_isMap",
    header: "cheerp/clientlib.h".}

proc get_longDesc*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_longDesc", header: "cheerp/clientlib.h".}

proc set_longDesc*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_longDesc", header: "cheerp/clientlib.h".}

proc get_lowsrc*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_lowsrc", header: "cheerp/clientlib.h".}

proc set_lowsrc*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_lowsrc", header: "cheerp/clientlib.h".}

proc get_msPlayToDisabled*(this: var HTMLImageElement): bool {.
    importcpp: "get_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc set_msPlayToDisabled*(this: var HTMLImageElement; a2: bool) {.
    importcpp: "set_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc get_msPlayToPreferredSourceUri*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc set_msPlayToPreferredSourceUri*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc get_msPlayToPrimary*(this: var HTMLImageElement): bool {.
    importcpp: "get_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc set_msPlayToPrimary*(this: var HTMLImageElement; a2: bool) {.
    importcpp: "set_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLImageElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLImageElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_naturalHeight*(this: var HTMLImageElement): cdouble {.
    importcpp: "get_naturalHeight", header: "cheerp/clientlib.h".}

proc get_naturalWidth*(this: var HTMLImageElement): cdouble {.
    importcpp: "get_naturalWidth", header: "cheerp/clientlib.h".}

proc get_sizes*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_sizes", header: "cheerp/clientlib.h".}

proc set_sizes*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_sizes", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLImageElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLImageElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_srcset*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_srcset", header: "cheerp/clientlib.h".}

proc set_srcset*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_srcset", header: "cheerp/clientlib.h".}

proc get_useMap*(this: var HTMLImageElement): ptr String {.
    importcpp: "get_useMap", header: "cheerp/clientlib.h".}

proc set_useMap*(this: var HTMLImageElement; a2: String) {.
    importcpp: "set_useMap", header: "cheerp/clientlib.h".}

proc get_vspace*(this: var HTMLImageElement): cdouble {.importcpp: "get_vspace",
    header: "cheerp/clientlib.h".}

proc set_vspace*(this: var HTMLImageElement; a2: cdouble) {.
    importcpp: "set_vspace", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLImageElement): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLImageElement; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var HTMLImageElement): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var HTMLImageElement): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLImageElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLImageElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLImageElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLImageElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLImageElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLImageElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLImageElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLImageElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLImageElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLImageElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLImageElement): ptr HTMLImageElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLImageElement; a2: ptr HTMLImageElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLImageElement*(): HTMLImageElement {.constructor,
    importcpp: "client::HTMLImageElement(@)", header: "cheerp/clientlib.h".}

proc get_accept*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_accept", header: "cheerp/clientlib.h".}

proc set_accept*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_accept", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_alt*(this: var HTMLInputElement): ptr String {.importcpp: "get_alt",
    header: "cheerp/clientlib.h".}

proc set_alt*(this: var HTMLInputElement; a2: String) {.importcpp: "set_alt",
    header: "cheerp/clientlib.h".}

proc get_autocomplete*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_autocomplete", header: "cheerp/clientlib.h".}

proc set_autocomplete*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_autocomplete", header: "cheerp/clientlib.h".}

proc get_autofocus*(this: var HTMLInputElement): bool {.
    importcpp: "get_autofocus", header: "cheerp/clientlib.h".}

proc set_autofocus*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_autofocus", header: "cheerp/clientlib.h".}

proc get_checked*(this: var HTMLInputElement): bool {.importcpp: "get_checked",
    header: "cheerp/clientlib.h".}

proc set_checked*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_checked", header: "cheerp/clientlib.h".}

proc get_defaultChecked*(this: var HTMLInputElement): bool {.
    importcpp: "get_defaultChecked", header: "cheerp/clientlib.h".}

proc set_defaultChecked*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_defaultChecked", header: "cheerp/clientlib.h".}

proc get_defaultValue*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_defaultValue", header: "cheerp/clientlib.h".}

proc set_defaultValue*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_defaultValue", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLInputElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_files*(this: var HTMLInputElement): ptr FileList {.
    importcpp: "get_files", header: "cheerp/clientlib.h".}

proc set_files*(this: var HTMLInputElement; a2: ptr FileList) {.
    importcpp: "set_files", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLInputElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_formAction*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_formAction", header: "cheerp/clientlib.h".}

proc set_formAction*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_formAction", header: "cheerp/clientlib.h".}

proc get_formEnctype*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_formEnctype", header: "cheerp/clientlib.h".}

proc set_formEnctype*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_formEnctype", header: "cheerp/clientlib.h".}

proc get_formMethod*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_formMethod", header: "cheerp/clientlib.h".}

proc set_formMethod*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_formMethod", header: "cheerp/clientlib.h".}

proc get_formNoValidate*(this: var HTMLInputElement): bool {.
    importcpp: "get_formNoValidate", header: "cheerp/clientlib.h".}

proc set_formNoValidate*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_formNoValidate", header: "cheerp/clientlib.h".}

proc get_formTarget*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_formTarget", header: "cheerp/clientlib.h".}

proc set_formTarget*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_formTarget", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLInputElement): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_indeterminate*(this: var HTMLInputElement): bool {.
    importcpp: "get_indeterminate", header: "cheerp/clientlib.h".}

proc set_indeterminate*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_indeterminate", header: "cheerp/clientlib.h".}

proc get_list*(this: var HTMLInputElement): ptr HTMLElement {.
    importcpp: "get_list", header: "cheerp/clientlib.h".}

proc get_max*(this: var HTMLInputElement): ptr String {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var HTMLInputElement; a2: String) {.importcpp: "set_max",
    header: "cheerp/clientlib.h".}

proc get_maxLength*(this: var HTMLInputElement): cdouble {.
    importcpp: "get_maxLength", header: "cheerp/clientlib.h".}

proc set_maxLength*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_maxLength", header: "cheerp/clientlib.h".}

proc get_min*(this: var HTMLInputElement): ptr String {.importcpp: "get_min",
    header: "cheerp/clientlib.h".}

proc set_min*(this: var HTMLInputElement; a2: String) {.importcpp: "set_min",
    header: "cheerp/clientlib.h".}

proc get_minLength*(this: var HTMLInputElement): cdouble {.
    importcpp: "get_minLength", header: "cheerp/clientlib.h".}

proc set_minLength*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_minLength", header: "cheerp/clientlib.h".}

proc get_multiple*(this: var HTMLInputElement): bool {.
    importcpp: "get_multiple", header: "cheerp/clientlib.h".}

proc set_multiple*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_multiple", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLInputElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLInputElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_pattern*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_pattern", header: "cheerp/clientlib.h".}

proc set_pattern*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_pattern", header: "cheerp/clientlib.h".}

proc get_placeholder*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_placeholder", header: "cheerp/clientlib.h".}

proc set_placeholder*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_placeholder", header: "cheerp/clientlib.h".}

proc get_readOnly*(this: var HTMLInputElement): bool {.
    importcpp: "get_readOnly", header: "cheerp/clientlib.h".}

proc set_readOnly*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_readOnly", header: "cheerp/clientlib.h".}

proc get_required*(this: var HTMLInputElement): bool {.
    importcpp: "get_required", header: "cheerp/clientlib.h".}

proc set_required*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_required", header: "cheerp/clientlib.h".}

proc get_selectionDirection*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_selectionDirection", header: "cheerp/clientlib.h".}

proc set_selectionDirection*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_selectionDirection", header: "cheerp/clientlib.h".}

proc get_selectionEnd*(this: var HTMLInputElement): cdouble {.
    importcpp: "get_selectionEnd", header: "cheerp/clientlib.h".}

proc set_selectionEnd*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_selectionEnd", header: "cheerp/clientlib.h".}

proc get_selectionStart*(this: var HTMLInputElement): cdouble {.
    importcpp: "get_selectionStart", header: "cheerp/clientlib.h".}

proc set_selectionStart*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_selectionStart", header: "cheerp/clientlib.h".}

proc get_size*(this: var HTMLInputElement): cdouble {.importcpp: "get_size",
    header: "cheerp/clientlib.h".}

proc set_size*(this: var HTMLInputElement; a2: cdouble) {.importcpp: "set_size",
    header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLInputElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLInputElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_step*(this: var HTMLInputElement): ptr String {.importcpp: "get_step",
    header: "cheerp/clientlib.h".}

proc set_step*(this: var HTMLInputElement; a2: String) {.importcpp: "set_step",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLInputElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLInputElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_useMap*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_useMap", header: "cheerp/clientlib.h".}

proc set_useMap*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_useMap", header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLInputElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLInputElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLInputElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc set_valueAsDate*(this: var HTMLInputElement; a2: ptr Object) {.
    importcpp: "set_valueAsDate", header: "cheerp/clientlib.h".}

proc get_valueAsNumber*(this: var HTMLInputElement): cdouble {.
    importcpp: "get_valueAsNumber", header: "cheerp/clientlib.h".}

proc set_valueAsNumber*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_valueAsNumber", header: "cheerp/clientlib.h".}

proc get_webkitdirectory*(this: var HTMLInputElement): bool {.
    importcpp: "get_webkitdirectory", header: "cheerp/clientlib.h".}

proc set_webkitdirectory*(this: var HTMLInputElement; a2: bool) {.
    importcpp: "set_webkitdirectory", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLInputElement): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLInputElement; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLInputElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLInputElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc select*(this: var HTMLInputElement) {.importcpp: "select",
    header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLInputElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc setSelectionRange*(this: var HTMLInputElement; start: cdouble;
                        `end`: cdouble) {.importcpp: "setSelectionRange",
    header: "cheerp/clientlib.h".}

proc stepDown*(this: var HTMLInputElement) {.importcpp: "stepDown",
    header: "cheerp/clientlib.h".}

proc stepDown*(this: var HTMLInputElement; n: cdouble) {.importcpp: "stepDown",
    header: "cheerp/clientlib.h".}

proc stepUp*(this: var HTMLInputElement) {.importcpp: "stepUp",
    header: "cheerp/clientlib.h".}

proc stepUp*(this: var HTMLInputElement; n: cdouble) {.importcpp: "stepUp",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLInputElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLInputElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLInputElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLInputElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLInputElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLInputElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLInputElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLInputElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLInputElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLInputElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLInputElement): ptr HTMLInputElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLInputElement; a2: ptr HTMLInputElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLInputElement*(): HTMLInputElement {.constructor,
    importcpp: "client::HTMLInputElement(@)", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLLIElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLLIElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLLIElement): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLLIElement; a2: cdouble) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLIElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLIElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLIElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLIElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLIElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLIElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLIElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLIElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLIElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLIElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLLIElement): ptr HTMLLIElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLLIElement; a2: ptr HTMLLIElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLLIElement*(): HTMLLIElement {.constructor,
    importcpp: "client::HTMLLIElement(@)", header: "cheerp/clientlib.h".}

proc get_control*(this: var HTMLLabelElement): ptr HTMLInputElement {.
    importcpp: "get_control", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLLabelElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_htmlFor*(this: var HTMLLabelElement): ptr String {.
    importcpp: "get_htmlFor", header: "cheerp/clientlib.h".}

proc set_htmlFor*(this: var HTMLLabelElement; a2: String) {.
    importcpp: "set_htmlFor", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLabelElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLabelElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLabelElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLabelElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLabelElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLabelElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLabelElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLabelElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLabelElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLabelElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLLabelElement): ptr HTMLLabelElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLLabelElement; a2: ptr HTMLLabelElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLLabelElement*(): HTMLLabelElement {.constructor,
    importcpp: "client::HTMLLabelElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLLegendElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLLegendElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLLegendElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLegendElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLegendElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLegendElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLegendElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLegendElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLegendElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLegendElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLegendElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLegendElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLegendElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLLegendElement): ptr HTMLLegendElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLLegendElement; a2: ptr HTMLLegendElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLLegendElement*(): HTMLLegendElement {.constructor,
    importcpp: "client::HTMLLegendElement(@)", header: "cheerp/clientlib.h".}

proc get_sheet*(this: var LinkStyle): ptr StyleSheet {.importcpp: "get_sheet",
    header: "cheerp/clientlib.h".}

proc get_charset*(this: var HTMLLinkElement): ptr String {.
    importcpp: "get_charset", header: "cheerp/clientlib.h".}

proc set_charset*(this: var HTMLLinkElement; a2: String) {.
    importcpp: "set_charset", header: "cheerp/clientlib.h".}

proc get_crossOrigin*(this: var HTMLLinkElement): ptr String {.
    importcpp: "get_crossOrigin", header: "cheerp/clientlib.h".}

proc set_crossOrigin*(this: var HTMLLinkElement; a2: String) {.
    importcpp: "set_crossOrigin", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLLinkElement): bool {.importcpp: "get_disabled",
    header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLLinkElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_href*(this: var HTMLLinkElement): ptr String {.importcpp: "get_href",
    header: "cheerp/clientlib.h".}

proc set_href*(this: var HTMLLinkElement; a2: String) {.importcpp: "set_href",
    header: "cheerp/clientlib.h".}

proc get_hreflang*(this: var HTMLLinkElement): ptr String {.
    importcpp: "get_hreflang", header: "cheerp/clientlib.h".}

proc set_hreflang*(this: var HTMLLinkElement; a2: String) {.
    importcpp: "set_hreflang", header: "cheerp/clientlib.h".}

proc get_import*(this: var HTMLLinkElement): ptr Document {.
    importcpp: "get_import", header: "cheerp/clientlib.h".}

proc set_import*(this: var HTMLLinkElement; a2: ptr Document) {.
    importcpp: "set_import", header: "cheerp/clientlib.h".}

proc get_integrity*(this: var HTMLLinkElement): ptr String {.
    importcpp: "get_integrity", header: "cheerp/clientlib.h".}

proc set_integrity*(this: var HTMLLinkElement; a2: String) {.
    importcpp: "set_integrity", header: "cheerp/clientlib.h".}

proc get_media*(this: var HTMLLinkElement): ptr String {.importcpp: "get_media",
    header: "cheerp/clientlib.h".}

proc set_media*(this: var HTMLLinkElement; a2: String) {.importcpp: "set_media",
    header: "cheerp/clientlib.h".}

proc get_rel*(this: var HTMLLinkElement): ptr String {.importcpp: "get_rel",
    header: "cheerp/clientlib.h".}

proc set_rel*(this: var HTMLLinkElement; a2: String) {.importcpp: "set_rel",
    header: "cheerp/clientlib.h".}

proc get_rev*(this: var HTMLLinkElement): ptr String {.importcpp: "get_rev",
    header: "cheerp/clientlib.h".}

proc set_rev*(this: var HTMLLinkElement; a2: String) {.importcpp: "set_rev",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var HTMLLinkElement): ptr String {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc set_target*(this: var HTMLLinkElement; a2: String) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLLinkElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLLinkElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLinkElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLinkElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLinkElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLinkElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLLinkElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLinkElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLinkElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLinkElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLinkElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLLinkElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLLinkElement): ptr HTMLLinkElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLLinkElement; a2: ptr HTMLLinkElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLLinkElement*(): HTMLLinkElement {.constructor,
    importcpp: "client::HTMLLinkElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMainElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMainElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMainElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMainElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMainElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMainElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMainElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMainElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMainElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMainElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMainElement): ptr HTMLMainElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMainElement; a2: ptr HTMLMainElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMainElement*(): HTMLMainElement {.constructor,
    importcpp: "client::HTMLMainElement(@)", header: "cheerp/clientlib.h".}

proc get_areas*(this: var HTMLMapElement): ptr HTMLAreasCollection {.
    importcpp: "get_areas", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLMapElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLMapElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMapElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMapElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMapElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMapElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMapElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMapElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMapElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMapElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMapElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMapElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMapElement): ptr HTMLMapElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMapElement; a2: ptr HTMLMapElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMapElement*(): HTMLMapElement {.constructor,
    importcpp: "client::HTMLMapElement(@)", header: "cheerp/clientlib.h".}

proc get_bounce*(this: var HTMLMarqueeElementEventMap): ptr Event {.
    importcpp: "get_bounce", header: "cheerp/clientlib.h".}

proc set_bounce*(this: var HTMLMarqueeElementEventMap; a2: ptr Event) {.
    importcpp: "set_bounce", header: "cheerp/clientlib.h".}

proc get_finish*(this: var HTMLMarqueeElementEventMap): ptr Event {.
    importcpp: "get_finish", header: "cheerp/clientlib.h".}

proc set_finish*(this: var HTMLMarqueeElementEventMap; a2: ptr Event) {.
    importcpp: "set_finish", header: "cheerp/clientlib.h".}

proc get_start*(this: var HTMLMarqueeElementEventMap): ptr Event {.
    importcpp: "get_start", header: "cheerp/clientlib.h".}

proc set_start*(this: var HTMLMarqueeElementEventMap; a2: ptr Event) {.
    importcpp: "set_start", header: "cheerp/clientlib.h".}

proc get_behavior*(this: var HTMLMarqueeElement): ptr String {.
    importcpp: "get_behavior", header: "cheerp/clientlib.h".}

proc set_behavior*(this: var HTMLMarqueeElement; a2: String) {.
    importcpp: "set_behavior", header: "cheerp/clientlib.h".}

proc get_bgColor*(this: var HTMLMarqueeElement): ptr String {.
    importcpp: "get_bgColor", header: "cheerp/clientlib.h".}

proc set_bgColor*(this: var HTMLMarqueeElement; a2: String) {.
    importcpp: "set_bgColor", header: "cheerp/clientlib.h".}

proc get_direction*(this: var HTMLMarqueeElement): ptr String {.
    importcpp: "get_direction", header: "cheerp/clientlib.h".}

proc set_direction*(this: var HTMLMarqueeElement; a2: String) {.
    importcpp: "set_direction", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLMarqueeElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLMarqueeElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_hspace*(this: var HTMLMarqueeElement): cdouble {.
    importcpp: "get_hspace", header: "cheerp/clientlib.h".}

proc set_hspace*(this: var HTMLMarqueeElement; a2: cdouble) {.
    importcpp: "set_hspace", header: "cheerp/clientlib.h".}

proc get_loop*(this: var HTMLMarqueeElement): cdouble {.importcpp: "get_loop",
    header: "cheerp/clientlib.h".}

proc set_loop*(this: var HTMLMarqueeElement; a2: cdouble) {.
    importcpp: "set_loop", header: "cheerp/clientlib.h".}

proc get_onbounce*(this: var HTMLMarqueeElement): ptr EventListener {.
    importcpp: "get_onbounce", header: "cheerp/clientlib.h".}

proc set_onbounce*(this: var HTMLMarqueeElement; a2: ptr EventListener) {.
    importcpp: "set_onbounce", header: "cheerp/clientlib.h".}

proc get_onfinish*(this: var HTMLMarqueeElement): ptr EventListener {.
    importcpp: "get_onfinish", header: "cheerp/clientlib.h".}

proc set_onfinish*(this: var HTMLMarqueeElement; a2: ptr EventListener) {.
    importcpp: "set_onfinish", header: "cheerp/clientlib.h".}

proc get_onstart*(this: var HTMLMarqueeElement): ptr EventListener {.
    importcpp: "get_onstart", header: "cheerp/clientlib.h".}

proc set_onstart*(this: var HTMLMarqueeElement; a2: ptr EventListener) {.
    importcpp: "set_onstart", header: "cheerp/clientlib.h".}

proc get_scrollAmount*(this: var HTMLMarqueeElement): cdouble {.
    importcpp: "get_scrollAmount", header: "cheerp/clientlib.h".}

proc set_scrollAmount*(this: var HTMLMarqueeElement; a2: cdouble) {.
    importcpp: "set_scrollAmount", header: "cheerp/clientlib.h".}

proc get_scrollDelay*(this: var HTMLMarqueeElement): cdouble {.
    importcpp: "get_scrollDelay", header: "cheerp/clientlib.h".}

proc set_scrollDelay*(this: var HTMLMarqueeElement; a2: cdouble) {.
    importcpp: "set_scrollDelay", header: "cheerp/clientlib.h".}

proc get_trueSpeed*(this: var HTMLMarqueeElement): bool {.
    importcpp: "get_trueSpeed", header: "cheerp/clientlib.h".}

proc set_trueSpeed*(this: var HTMLMarqueeElement; a2: bool) {.
    importcpp: "set_trueSpeed", header: "cheerp/clientlib.h".}

proc get_vspace*(this: var HTMLMarqueeElement): cdouble {.
    importcpp: "get_vspace", header: "cheerp/clientlib.h".}

proc set_vspace*(this: var HTMLMarqueeElement; a2: cdouble) {.
    importcpp: "set_vspace", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLMarqueeElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLMarqueeElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc start*(this: var HTMLMarqueeElement) {.importcpp: "start",
    header: "cheerp/clientlib.h".}

proc stop*(this: var HTMLMarqueeElement) {.importcpp: "stop",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMarqueeElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMarqueeElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMarqueeElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMarqueeElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMarqueeElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMarqueeElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMarqueeElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMarqueeElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMarqueeElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMarqueeElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMarqueeElement): ptr HTMLMarqueeElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMarqueeElement; a2: ptr HTMLMarqueeElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMarqueeElement*(): HTMLMarqueeElement {.constructor,
    importcpp: "client::HTMLMarqueeElement(@)", header: "cheerp/clientlib.h".}

proc get_encrypted*(this: var HTMLMediaElementEventMap): ptr MediaEncryptedEvent {.
    importcpp: "get_encrypted", header: "cheerp/clientlib.h".}

proc set_encrypted*(this: var HTMLMediaElementEventMap;
                    a2: ptr MediaEncryptedEvent) {.importcpp: "set_encrypted",
    header: "cheerp/clientlib.h".}

proc get_msneedkey*(this: var HTMLMediaElementEventMap): ptr Event {.
    importcpp: "get_msneedkey", header: "cheerp/clientlib.h".}

proc set_msneedkey*(this: var HTMLMediaElementEventMap; a2: ptr Event) {.
    importcpp: "set_msneedkey", header: "cheerp/clientlib.h".}

proc get_compact*(this: var HTMLMenuElement): bool {.importcpp: "get_compact",
    header: "cheerp/clientlib.h".}

proc set_compact*(this: var HTMLMenuElement; a2: bool) {.
    importcpp: "set_compact", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLMenuElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLMenuElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMenuElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMenuElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMenuElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMenuElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMenuElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMenuElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMenuElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMenuElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMenuElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMenuElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMenuElement): ptr HTMLMenuElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMenuElement; a2: ptr HTMLMenuElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMenuElement*(): HTMLMenuElement {.constructor,
    importcpp: "client::HTMLMenuElement(@)", header: "cheerp/clientlib.h".}

proc get_charset*(this: var HTMLMetaElement): ptr String {.
    importcpp: "get_charset", header: "cheerp/clientlib.h".}

proc set_charset*(this: var HTMLMetaElement; a2: String) {.
    importcpp: "set_charset", header: "cheerp/clientlib.h".}

proc get_content*(this: var HTMLMetaElement): ptr String {.
    importcpp: "get_content", header: "cheerp/clientlib.h".}

proc set_content*(this: var HTMLMetaElement; a2: String) {.
    importcpp: "set_content", header: "cheerp/clientlib.h".}

proc get_httpEquiv*(this: var HTMLMetaElement): ptr String {.
    importcpp: "get_httpEquiv", header: "cheerp/clientlib.h".}

proc set_httpEquiv*(this: var HTMLMetaElement; a2: String) {.
    importcpp: "set_httpEquiv", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLMetaElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLMetaElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_scheme*(this: var HTMLMetaElement): ptr String {.
    importcpp: "get_scheme", header: "cheerp/clientlib.h".}

proc set_scheme*(this: var HTMLMetaElement; a2: String) {.
    importcpp: "set_scheme", header: "cheerp/clientlib.h".}

proc get_url*(this: var HTMLMetaElement): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc set_url*(this: var HTMLMetaElement; a2: String) {.importcpp: "set_url",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMetaElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMetaElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMetaElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMetaElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMetaElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMetaElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMetaElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMetaElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMetaElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMetaElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMetaElement): ptr HTMLMetaElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMetaElement; a2: ptr HTMLMetaElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMetaElement*(): HTMLMetaElement {.constructor,
    importcpp: "client::HTMLMetaElement(@)", header: "cheerp/clientlib.h".}

proc get_high*(this: var HTMLMeterElement): cdouble {.importcpp: "get_high",
    header: "cheerp/clientlib.h".}

proc set_high*(this: var HTMLMeterElement; a2: cdouble) {.importcpp: "set_high",
    header: "cheerp/clientlib.h".}

proc get_low*(this: var HTMLMeterElement): cdouble {.importcpp: "get_low",
    header: "cheerp/clientlib.h".}

proc set_low*(this: var HTMLMeterElement; a2: cdouble) {.importcpp: "set_low",
    header: "cheerp/clientlib.h".}

proc get_max*(this: var HTMLMeterElement): cdouble {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var HTMLMeterElement; a2: cdouble) {.importcpp: "set_max",
    header: "cheerp/clientlib.h".}

proc get_min*(this: var HTMLMeterElement): cdouble {.importcpp: "get_min",
    header: "cheerp/clientlib.h".}

proc set_min*(this: var HTMLMeterElement; a2: cdouble) {.importcpp: "set_min",
    header: "cheerp/clientlib.h".}

proc get_optimum*(this: var HTMLMeterElement): cdouble {.
    importcpp: "get_optimum", header: "cheerp/clientlib.h".}

proc set_optimum*(this: var HTMLMeterElement; a2: cdouble) {.
    importcpp: "set_optimum", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLMeterElement): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLMeterElement; a2: cdouble) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMeterElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMeterElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMeterElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMeterElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLMeterElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMeterElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMeterElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMeterElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMeterElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLMeterElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLMeterElement): ptr HTMLMeterElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLMeterElement; a2: ptr HTMLMeterElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLMeterElement*(): HTMLMeterElement {.constructor,
    importcpp: "client::HTMLMeterElement(@)", header: "cheerp/clientlib.h".}

proc get_cite*(this: var HTMLModElement): ptr String {.importcpp: "get_cite",
    header: "cheerp/clientlib.h".}

proc set_cite*(this: var HTMLModElement; a2: String) {.importcpp: "set_cite",
    header: "cheerp/clientlib.h".}

proc get_dateTime*(this: var HTMLModElement): ptr String {.
    importcpp: "get_dateTime", header: "cheerp/clientlib.h".}

proc set_dateTime*(this: var HTMLModElement; a2: String) {.
    importcpp: "set_dateTime", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLModElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLModElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLModElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLModElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLModElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLModElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLModElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLModElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLModElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLModElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLModElement): ptr HTMLModElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLModElement; a2: ptr HTMLModElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLModElement*(): HTMLModElement {.constructor,
    importcpp: "client::HTMLModElement(@)", header: "cheerp/clientlib.h".}

proc get_compact*(this: var HTMLOListElement): bool {.importcpp: "get_compact",
    header: "cheerp/clientlib.h".}

proc set_compact*(this: var HTMLOListElement; a2: bool) {.
    importcpp: "set_compact", header: "cheerp/clientlib.h".}

proc get_start*(this: var HTMLOListElement): cdouble {.importcpp: "get_start",
    header: "cheerp/clientlib.h".}

proc set_start*(this: var HTMLOListElement; a2: cdouble) {.
    importcpp: "set_start", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLOListElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLOListElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOListElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOListElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOListElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOListElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOListElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOListElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOListElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOListElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOListElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOListElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLOListElement): ptr HTMLOListElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLOListElement; a2: ptr HTMLOListElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLOListElement*(): HTMLOListElement {.constructor,
    importcpp: "client::HTMLOListElement(@)", header: "cheerp/clientlib.h".}

proc get_BaseHref*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_BaseHref", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_archive*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_archive", header: "cheerp/clientlib.h".}

proc set_archive*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_archive", header: "cheerp/clientlib.h".}

proc get_border*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_border", header: "cheerp/clientlib.h".}

proc set_border*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_border", header: "cheerp/clientlib.h".}

proc get_code*(this: var HTMLObjectElement): ptr String {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc set_code*(this: var HTMLObjectElement; a2: String) {.importcpp: "set_code",
    header: "cheerp/clientlib.h".}

proc get_codeBase*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_codeBase", header: "cheerp/clientlib.h".}

proc set_codeBase*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_codeBase", header: "cheerp/clientlib.h".}

proc get_codeType*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_codeType", header: "cheerp/clientlib.h".}

proc set_codeType*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_codeType", header: "cheerp/clientlib.h".}

proc get_contentDocument*(this: var HTMLObjectElement): ptr Document {.
    importcpp: "get_contentDocument", header: "cheerp/clientlib.h".}

proc get_data*(this: var HTMLObjectElement): ptr String {.importcpp: "get_data",
    header: "cheerp/clientlib.h".}

proc set_data*(this: var HTMLObjectElement; a2: String) {.importcpp: "set_data",
    header: "cheerp/clientlib.h".}

proc get_declare*(this: var HTMLObjectElement): bool {.importcpp: "get_declare",
    header: "cheerp/clientlib.h".}

proc set_declare*(this: var HTMLObjectElement; a2: bool) {.
    importcpp: "set_declare", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLObjectElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_hspace*(this: var HTMLObjectElement): cdouble {.
    importcpp: "get_hspace", header: "cheerp/clientlib.h".}

proc set_hspace*(this: var HTMLObjectElement; a2: cdouble) {.
    importcpp: "set_hspace", header: "cheerp/clientlib.h".}

proc get_msPlayToDisabled*(this: var HTMLObjectElement): bool {.
    importcpp: "get_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc set_msPlayToDisabled*(this: var HTMLObjectElement; a2: bool) {.
    importcpp: "set_msPlayToDisabled", header: "cheerp/clientlib.h".}

proc get_msPlayToPreferredSourceUri*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc set_msPlayToPreferredSourceUri*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_msPlayToPreferredSourceUri", header: "cheerp/clientlib.h".}

proc get_msPlayToPrimary*(this: var HTMLObjectElement): bool {.
    importcpp: "get_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc set_msPlayToPrimary*(this: var HTMLObjectElement; a2: bool) {.
    importcpp: "set_msPlayToPrimary", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLObjectElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLObjectElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_readyState*(this: var HTMLObjectElement): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_standby*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_standby", header: "cheerp/clientlib.h".}

proc set_standby*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_standby", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLObjectElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLObjectElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_typemustmatch*(this: var HTMLObjectElement): bool {.
    importcpp: "get_typemustmatch", header: "cheerp/clientlib.h".}

proc set_typemustmatch*(this: var HTMLObjectElement; a2: bool) {.
    importcpp: "set_typemustmatch", header: "cheerp/clientlib.h".}

proc get_useMap*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_useMap", header: "cheerp/clientlib.h".}

proc set_useMap*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_useMap", header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLObjectElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_vspace*(this: var HTMLObjectElement): cdouble {.
    importcpp: "get_vspace", header: "cheerp/clientlib.h".}

proc set_vspace*(this: var HTMLObjectElement; a2: cdouble) {.
    importcpp: "set_vspace", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLObjectElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLObjectElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLObjectElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLObjectElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLObjectElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLObjectElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLObjectElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLObjectElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLObjectElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLObjectElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLObjectElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLObjectElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLObjectElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLObjectElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLObjectElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLObjectElement): ptr HTMLObjectElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLObjectElement; a2: ptr HTMLObjectElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLObjectElement*(): HTMLObjectElement {.constructor,
    importcpp: "client::HTMLObjectElement(@)", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLOptGroupElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLOptGroupElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLOptGroupElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_label*(this: var HTMLOptGroupElement): ptr String {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var HTMLOptGroupElement; a2: String) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptGroupElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptGroupElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptGroupElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptGroupElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptGroupElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptGroupElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptGroupElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptGroupElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptGroupElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptGroupElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLOptGroupElement): ptr HTMLOptGroupElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLOptGroupElement; a2: ptr HTMLOptGroupElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLOptGroupElement*(): HTMLOptGroupElement {.constructor,
    importcpp: "client::HTMLOptGroupElement(@)", header: "cheerp/clientlib.h".}

proc get_defaultSelected*(this: var HTMLOptionElement): bool {.
    importcpp: "get_defaultSelected", header: "cheerp/clientlib.h".}

proc set_defaultSelected*(this: var HTMLOptionElement; a2: bool) {.
    importcpp: "set_defaultSelected", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLOptionElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLOptionElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLOptionElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_index*(this: var HTMLOptionElement): cdouble {.importcpp: "get_index",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var HTMLOptionElement): ptr String {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var HTMLOptionElement; a2: String) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc get_selected*(this: var HTMLOptionElement): bool {.
    importcpp: "get_selected", header: "cheerp/clientlib.h".}

proc set_selected*(this: var HTMLOptionElement; a2: bool) {.
    importcpp: "set_selected", header: "cheerp/clientlib.h".}

proc get_text*(this: var HTMLOptionElement): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var HTMLOptionElement; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLOptionElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLOptionElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptionElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptionElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptionElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptionElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOptionElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptionElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptionElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptionElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptionElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOptionElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLOptionElement): ptr HTMLOptionElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLOptionElement; a2: ptr HTMLOptionElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLOptionElement*(): HTMLOptionElement {.constructor,
    importcpp: "client::HTMLOptionElement(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var HTMLOptionsCollection): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc set_length*(this: var HTMLOptionsCollection; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_selectedIndex*(this: var HTMLOptionsCollection): cdouble {.
    importcpp: "get_selectedIndex", header: "cheerp/clientlib.h".}

proc set_selectedIndex*(this: var HTMLOptionsCollection; a2: cdouble) {.
    importcpp: "set_selectedIndex", header: "cheerp/clientlib.h".}

proc add*(this: var HTMLOptionsCollection; element: ptr HTMLOptionElement) {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var HTMLOptionsCollection; element: ptr HTMLOptionElement;
          before: ptr HTMLElement) {.importcpp: "add",
                                     header: "cheerp/clientlib.h".}

proc add*(this: var HTMLOptionsCollection; element: ptr HTMLOptionElement;
          before: cdouble) {.importcpp: "add", header: "cheerp/clientlib.h".}

proc remove*(this: var HTMLOptionsCollection; index: cdouble) {.
    importcpp: "remove", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLOptionsCollection): ptr HTMLOptionsCollection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLOptionsCollection;
                    a2: ptr HTMLOptionsCollection) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructHTMLOptionsCollection*(): HTMLOptionsCollection {.constructor,
    importcpp: "client::HTMLOptionsCollection(@)", header: "cheerp/clientlib.h".}

proc get_defaultValue*(this: var HTMLOutputElement): ptr String {.
    importcpp: "get_defaultValue", header: "cheerp/clientlib.h".}

proc set_defaultValue*(this: var HTMLOutputElement; a2: String) {.
    importcpp: "set_defaultValue", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLOutputElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_htmlFor*(this: var HTMLOutputElement): ptr DOMTokenList {.
    importcpp: "get_htmlFor", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLOutputElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLOutputElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLOutputElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLOutputElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLOutputElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLOutputElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLOutputElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLOutputElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLOutputElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc reportValidity*(this: var HTMLOutputElement): bool {.
    importcpp: "reportValidity", header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLOutputElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOutputElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOutputElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOutputElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOutputElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLOutputElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOutputElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOutputElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOutputElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOutputElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLOutputElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLOutputElement): ptr HTMLOutputElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLOutputElement; a2: ptr HTMLOutputElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLOutputElement*(): HTMLOutputElement {.constructor,
    importcpp: "client::HTMLOutputElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLParagraphElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLParagraphElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_clear*(this: var HTMLParagraphElement): ptr String {.
    importcpp: "get_clear", header: "cheerp/clientlib.h".}

proc set_clear*(this: var HTMLParagraphElement; a2: String) {.
    importcpp: "set_clear", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParagraphElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParagraphElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParagraphElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParagraphElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParagraphElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParagraphElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParagraphElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParagraphElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParagraphElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParagraphElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLParagraphElement): ptr HTMLParagraphElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLParagraphElement; a2: ptr HTMLParagraphElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLParagraphElement*(): HTMLParagraphElement {.constructor,
    importcpp: "client::HTMLParagraphElement(@)", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLParamElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLParamElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLParamElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLParamElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLParamElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLParamElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_valueType*(this: var HTMLParamElement): ptr String {.
    importcpp: "get_valueType", header: "cheerp/clientlib.h".}

proc set_valueType*(this: var HTMLParamElement; a2: String) {.
    importcpp: "set_valueType", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParamElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParamElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParamElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParamElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLParamElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParamElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParamElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParamElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParamElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLParamElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLParamElement): ptr HTMLParamElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLParamElement; a2: ptr HTMLParamElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLParamElement*(): HTMLParamElement {.constructor,
    importcpp: "client::HTMLParamElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPictureElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPictureElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPictureElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPictureElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPictureElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPictureElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPictureElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPictureElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPictureElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPictureElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLPictureElement): ptr HTMLPictureElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLPictureElement; a2: ptr HTMLPictureElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLPictureElement*(): HTMLPictureElement {.constructor,
    importcpp: "client::HTMLPictureElement(@)", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLPreElement): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLPreElement; a2: cdouble) {.importcpp: "set_width",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPreElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPreElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPreElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPreElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLPreElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPreElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPreElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPreElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPreElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLPreElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLPreElement): ptr HTMLPreElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLPreElement; a2: ptr HTMLPreElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLPreElement*(): HTMLPreElement {.constructor,
    importcpp: "client::HTMLPreElement(@)", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLProgressElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_max*(this: var HTMLProgressElement): cdouble {.importcpp: "get_max",
    header: "cheerp/clientlib.h".}

proc set_max*(this: var HTMLProgressElement; a2: cdouble) {.
    importcpp: "set_max", header: "cheerp/clientlib.h".}

proc get_position*(this: var HTMLProgressElement): cdouble {.
    importcpp: "get_position", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLProgressElement): cdouble {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLProgressElement; a2: cdouble) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLProgressElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLProgressElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLProgressElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLProgressElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLProgressElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLProgressElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLProgressElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLProgressElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLProgressElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLProgressElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLProgressElement): ptr HTMLProgressElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLProgressElement; a2: ptr HTMLProgressElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLProgressElement*(): HTMLProgressElement {.constructor,
    importcpp: "client::HTMLProgressElement(@)", header: "cheerp/clientlib.h".}

proc get_cite*(this: var HTMLQuoteElement): ptr String {.importcpp: "get_cite",
    header: "cheerp/clientlib.h".}

proc set_cite*(this: var HTMLQuoteElement; a2: String) {.importcpp: "set_cite",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLQuoteElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLQuoteElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLQuoteElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLQuoteElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLQuoteElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLQuoteElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLQuoteElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLQuoteElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLQuoteElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLQuoteElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLQuoteElement): ptr HTMLQuoteElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLQuoteElement; a2: ptr HTMLQuoteElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLQuoteElement*(): HTMLQuoteElement {.constructor,
    importcpp: "client::HTMLQuoteElement(@)", header: "cheerp/clientlib.h".}

proc get_async*(this: var HTMLScriptElement): bool {.importcpp: "get_async",
    header: "cheerp/clientlib.h".}

proc set_async*(this: var HTMLScriptElement; a2: bool) {.importcpp: "set_async",
    header: "cheerp/clientlib.h".}

proc get_charset*(this: var HTMLScriptElement): ptr String {.
    importcpp: "get_charset", header: "cheerp/clientlib.h".}

proc set_charset*(this: var HTMLScriptElement; a2: String) {.
    importcpp: "set_charset", header: "cheerp/clientlib.h".}

proc get_crossOrigin*(this: var HTMLScriptElement): ptr String {.
    importcpp: "get_crossOrigin", header: "cheerp/clientlib.h".}

proc set_crossOrigin*(this: var HTMLScriptElement; a2: String) {.
    importcpp: "set_crossOrigin", header: "cheerp/clientlib.h".}

proc get_defer*(this: var HTMLScriptElement): bool {.importcpp: "get_defer",
    header: "cheerp/clientlib.h".}

proc set_defer*(this: var HTMLScriptElement; a2: bool) {.importcpp: "set_defer",
    header: "cheerp/clientlib.h".}

proc get_event*(this: var HTMLScriptElement): ptr String {.
    importcpp: "get_event", header: "cheerp/clientlib.h".}

proc set_event*(this: var HTMLScriptElement; a2: String) {.
    importcpp: "set_event", header: "cheerp/clientlib.h".}

proc get_htmlFor*(this: var HTMLScriptElement): ptr String {.
    importcpp: "get_htmlFor", header: "cheerp/clientlib.h".}

proc set_htmlFor*(this: var HTMLScriptElement; a2: String) {.
    importcpp: "set_htmlFor", header: "cheerp/clientlib.h".}

proc get_integrity*(this: var HTMLScriptElement): ptr String {.
    importcpp: "get_integrity", header: "cheerp/clientlib.h".}

proc set_integrity*(this: var HTMLScriptElement; a2: String) {.
    importcpp: "set_integrity", header: "cheerp/clientlib.h".}

proc get_noModule*(this: var HTMLScriptElement): bool {.
    importcpp: "get_noModule", header: "cheerp/clientlib.h".}

proc set_noModule*(this: var HTMLScriptElement; a2: bool) {.
    importcpp: "set_noModule", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLScriptElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLScriptElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_text*(this: var HTMLScriptElement): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var HTMLScriptElement; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLScriptElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLScriptElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLScriptElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLScriptElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLScriptElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLScriptElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLScriptElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLScriptElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLScriptElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLScriptElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLScriptElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLScriptElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLScriptElement): ptr HTMLScriptElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLScriptElement; a2: ptr HTMLScriptElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLScriptElement*(): HTMLScriptElement {.constructor,
    importcpp: "client::HTMLScriptElement(@)", header: "cheerp/clientlib.h".}

proc get_autofocus*(this: var HTMLSelectElement): bool {.
    importcpp: "get_autofocus", header: "cheerp/clientlib.h".}

proc set_autofocus*(this: var HTMLSelectElement; a2: bool) {.
    importcpp: "set_autofocus", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLSelectElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLSelectElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLSelectElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_length*(this: var HTMLSelectElement): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc set_length*(this: var HTMLSelectElement; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc get_multiple*(this: var HTMLSelectElement): bool {.
    importcpp: "get_multiple", header: "cheerp/clientlib.h".}

proc set_multiple*(this: var HTMLSelectElement; a2: bool) {.
    importcpp: "set_multiple", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLSelectElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLSelectElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_options*(this: var HTMLSelectElement): ptr HTMLOptionsCollection {.
    importcpp: "get_options", header: "cheerp/clientlib.h".}

proc get_required*(this: var HTMLSelectElement): bool {.
    importcpp: "get_required", header: "cheerp/clientlib.h".}

proc set_required*(this: var HTMLSelectElement; a2: bool) {.
    importcpp: "set_required", header: "cheerp/clientlib.h".}

proc get_selectedIndex*(this: var HTMLSelectElement): cdouble {.
    importcpp: "get_selectedIndex", header: "cheerp/clientlib.h".}

proc set_selectedIndex*(this: var HTMLSelectElement; a2: cdouble) {.
    importcpp: "set_selectedIndex", header: "cheerp/clientlib.h".}

proc get_selectedOptions*(this: var HTMLSelectElement): ptr HTMLCollectionOf[
    HTMLOptionElement] {.importcpp: "get_selectedOptions",
                         header: "cheerp/clientlib.h".}

proc get_size*(this: var HTMLSelectElement): cdouble {.importcpp: "get_size",
    header: "cheerp/clientlib.h".}

proc set_size*(this: var HTMLSelectElement; a2: cdouble) {.
    importcpp: "set_size", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLSelectElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLSelectElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLSelectElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLSelectElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLSelectElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLSelectElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc add*(this: var HTMLSelectElement; element: ptr HTMLOptionElement) {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var HTMLSelectElement; element: ptr HTMLOptionElement;
          before: ptr HTMLElement) {.importcpp: "add",
                                     header: "cheerp/clientlib.h".}

proc add*(this: var HTMLSelectElement; element: ptr HTMLOptionElement;
          before: cdouble) {.importcpp: "add", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLSelectElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc item*(this: var HTMLSelectElement): ptr Element {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc item*(this: var HTMLSelectElement; name: ptr Object): ptr Element {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc item*(this: var HTMLSelectElement; name: ptr Object; index: ptr Object): ptr Element {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc remove*(this: var HTMLSelectElement) {.importcpp: "remove",
    header: "cheerp/clientlib.h".}

proc remove*(this: var HTMLSelectElement; index: cdouble) {.importcpp: "remove",
    header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLSelectElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSelectElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSelectElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSelectElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSelectElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSelectElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSelectElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSelectElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSelectElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSelectElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSelectElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc `[]`*(this: var HTMLSelectElement; index: cint): ptr Object {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: HTMLSelectElement; index: cint): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLSelectElement): ptr HTMLSelectElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLSelectElement; a2: ptr HTMLSelectElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLSelectElement*(): HTMLSelectElement {.constructor,
    importcpp: "client::HTMLSelectElement(@)", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLSlotElement): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLSlotElement; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc assignedNodes*(this: var HTMLSlotElement): ptr Array {.
    importcpp: "assignedNodes", header: "cheerp/clientlib.h".}

proc assignedNodes*(this: var HTMLSlotElement; options: ptr AssignedNodesOptions): ptr Array {.
    importcpp: "assignedNodes", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSlotElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSlotElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSlotElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSlotElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSlotElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSlotElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSlotElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSlotElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSlotElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSlotElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_media*(this: var HTMLSourceElement): ptr String {.
    importcpp: "get_media", header: "cheerp/clientlib.h".}

proc set_media*(this: var HTMLSourceElement; a2: String) {.
    importcpp: "set_media", header: "cheerp/clientlib.h".}

proc get_msKeySystem*(this: var HTMLSourceElement): ptr String {.
    importcpp: "get_msKeySystem", header: "cheerp/clientlib.h".}

proc set_msKeySystem*(this: var HTMLSourceElement; a2: String) {.
    importcpp: "set_msKeySystem", header: "cheerp/clientlib.h".}

proc get_sizes*(this: var HTMLSourceElement): ptr String {.
    importcpp: "get_sizes", header: "cheerp/clientlib.h".}

proc set_sizes*(this: var HTMLSourceElement; a2: String) {.
    importcpp: "set_sizes", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLSourceElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLSourceElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_srcset*(this: var HTMLSourceElement): ptr String {.
    importcpp: "get_srcset", header: "cheerp/clientlib.h".}

proc set_srcset*(this: var HTMLSourceElement; a2: String) {.
    importcpp: "set_srcset", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLSourceElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLSourceElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSourceElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSourceElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSourceElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSourceElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSourceElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSourceElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSourceElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSourceElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSourceElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSourceElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLSourceElement): ptr HTMLSourceElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLSourceElement; a2: ptr HTMLSourceElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLSourceElement*(): HTMLSourceElement {.constructor,
    importcpp: "client::HTMLSourceElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSpanElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSpanElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSpanElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSpanElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSpanElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSpanElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSpanElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSpanElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSpanElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSpanElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLSpanElement): ptr HTMLSpanElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLSpanElement; a2: ptr HTMLSpanElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLSpanElement*(): HTMLSpanElement {.constructor,
    importcpp: "client::HTMLSpanElement(@)", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLStyleElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLStyleElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_media*(this: var HTMLStyleElement): ptr String {.
    importcpp: "get_media", header: "cheerp/clientlib.h".}

proc set_media*(this: var HTMLStyleElement; a2: String) {.
    importcpp: "set_media", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLStyleElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLStyleElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLStyleElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLStyleElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLStyleElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLStyleElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLStyleElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLStyleElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLStyleElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLStyleElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLStyleElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLStyleElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLStyleElement): ptr HTMLStyleElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLStyleElement; a2: ptr HTMLStyleElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLStyleElement*(): HTMLStyleElement {.constructor,
    importcpp: "client::HTMLStyleElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSummaryElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSummaryElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSummaryElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSummaryElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLSummaryElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSummaryElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSummaryElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSummaryElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSummaryElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLSummaryElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLSummaryElement): ptr HTMLSummaryElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLSummaryElement; a2: ptr HTMLSummaryElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLSummaryElement*(): HTMLSummaryElement {.constructor,
    importcpp: "client::HTMLSummaryElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLTableCaptionElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLTableCaptionElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCaptionElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableCaptionElement): ptr HTMLTableCaptionElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableCaptionElement;
                    a2: ptr HTMLTableCaptionElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableCaptionElement*(): HTMLTableCaptionElement {.constructor,
    importcpp: "client::HTMLTableCaptionElement(@)",
    header: "cheerp/clientlib.h".}

proc get_abbr*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_abbr", header: "cheerp/clientlib.h".}

proc set_abbr*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_abbr", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_axis*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_axis", header: "cheerp/clientlib.h".}

proc set_axis*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_axis", header: "cheerp/clientlib.h".}

proc get_bgColor*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_bgColor", header: "cheerp/clientlib.h".}

proc set_bgColor*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_bgColor", header: "cheerp/clientlib.h".}

proc get_cellIndex*(this: var HTMLTableCellElement): cdouble {.
    importcpp: "get_cellIndex", header: "cheerp/clientlib.h".}

proc get_ch*(this: var HTMLTableCellElement): ptr String {.importcpp: "get_ch",
    header: "cheerp/clientlib.h".}

proc set_ch*(this: var HTMLTableCellElement; a2: String) {.importcpp: "set_ch",
    header: "cheerp/clientlib.h".}

proc get_chOff*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_chOff", header: "cheerp/clientlib.h".}

proc set_chOff*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_chOff", header: "cheerp/clientlib.h".}

proc get_colSpan*(this: var HTMLTableCellElement): cdouble {.
    importcpp: "get_colSpan", header: "cheerp/clientlib.h".}

proc set_colSpan*(this: var HTMLTableCellElement; a2: cdouble) {.
    importcpp: "set_colSpan", header: "cheerp/clientlib.h".}

proc get_headers*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_headers", header: "cheerp/clientlib.h".}

proc set_headers*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_headers", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_noWrap*(this: var HTMLTableCellElement): bool {.
    importcpp: "get_noWrap", header: "cheerp/clientlib.h".}

proc set_noWrap*(this: var HTMLTableCellElement; a2: bool) {.
    importcpp: "set_noWrap", header: "cheerp/clientlib.h".}

proc get_rowSpan*(this: var HTMLTableCellElement): cdouble {.
    importcpp: "get_rowSpan", header: "cheerp/clientlib.h".}

proc set_rowSpan*(this: var HTMLTableCellElement; a2: cdouble) {.
    importcpp: "set_rowSpan", header: "cheerp/clientlib.h".}

proc get_scope*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_scope", header: "cheerp/clientlib.h".}

proc set_scope*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_scope", header: "cheerp/clientlib.h".}

proc get_vAlign*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_vAlign", header: "cheerp/clientlib.h".}

proc set_vAlign*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_vAlign", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLTableCellElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLTableCellElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCellElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCellElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCellElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCellElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableCellElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCellElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCellElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCellElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCellElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableCellElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableCellElement): ptr HTMLTableCellElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableCellElement; a2: ptr HTMLTableCellElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableCellElement*(): HTMLTableCellElement {.constructor,
    importcpp: "client::HTMLTableCellElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLTableColElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLTableColElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_ch*(this: var HTMLTableColElement): ptr String {.importcpp: "get_ch",
    header: "cheerp/clientlib.h".}

proc set_ch*(this: var HTMLTableColElement; a2: String) {.importcpp: "set_ch",
    header: "cheerp/clientlib.h".}

proc get_chOff*(this: var HTMLTableColElement): ptr String {.
    importcpp: "get_chOff", header: "cheerp/clientlib.h".}

proc set_chOff*(this: var HTMLTableColElement; a2: String) {.
    importcpp: "set_chOff", header: "cheerp/clientlib.h".}

proc get_span*(this: var HTMLTableColElement): cdouble {.importcpp: "get_span",
    header: "cheerp/clientlib.h".}

proc set_span*(this: var HTMLTableColElement; a2: cdouble) {.
    importcpp: "set_span", header: "cheerp/clientlib.h".}

proc get_vAlign*(this: var HTMLTableColElement): ptr String {.
    importcpp: "get_vAlign", header: "cheerp/clientlib.h".}

proc set_vAlign*(this: var HTMLTableColElement; a2: String) {.
    importcpp: "set_vAlign", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLTableColElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLTableColElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableColElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableColElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableColElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableColElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableColElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableColElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableColElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableColElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableColElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableColElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableColElement): ptr HTMLTableColElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableColElement; a2: ptr HTMLTableColElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableColElement*(): HTMLTableColElement {.constructor,
    importcpp: "client::HTMLTableColElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableDataCellElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableDataCellElement): ptr HTMLTableDataCellElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableDataCellElement;
                    a2: ptr HTMLTableDataCellElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableDataCellElement*(): HTMLTableDataCellElement {.
    constructor, importcpp: "client::HTMLTableDataCellElement(@)",
    header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_bgColor*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_bgColor", header: "cheerp/clientlib.h".}

proc set_bgColor*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_bgColor", header: "cheerp/clientlib.h".}

proc get_border*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_border", header: "cheerp/clientlib.h".}

proc set_border*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_border", header: "cheerp/clientlib.h".}

proc get_caption*(this: var HTMLTableElement): ptr HTMLTableCaptionElement {.
    importcpp: "get_caption", header: "cheerp/clientlib.h".}

proc set_caption*(this: var HTMLTableElement; a2: ptr HTMLTableCaptionElement) {.
    importcpp: "set_caption", header: "cheerp/clientlib.h".}

proc get_cellPadding*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_cellPadding", header: "cheerp/clientlib.h".}

proc set_cellPadding*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_cellPadding", header: "cheerp/clientlib.h".}

proc get_cellSpacing*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_cellSpacing", header: "cheerp/clientlib.h".}

proc set_cellSpacing*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_cellSpacing", header: "cheerp/clientlib.h".}

proc get_frame*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_frame", header: "cheerp/clientlib.h".}

proc set_frame*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_frame", header: "cheerp/clientlib.h".}

proc get_rows*(this: var HTMLTableElement): ptr HTMLCollectionOf[
    HTMLTableRowElement] {.importcpp: "get_rows", header: "cheerp/clientlib.h".}

proc get_rules*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_rules", header: "cheerp/clientlib.h".}

proc set_rules*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_rules", header: "cheerp/clientlib.h".}

proc get_summary*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_summary", header: "cheerp/clientlib.h".}

proc set_summary*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_summary", header: "cheerp/clientlib.h".}

proc get_tBodies*(this: var HTMLTableElement): ptr HTMLCollectionOf[
    HTMLTableSectionElement] {.importcpp: "get_tBodies",
                               header: "cheerp/clientlib.h".}

proc get_tFoot*(this: var HTMLTableElement): ptr HTMLTableSectionElement {.
    importcpp: "get_tFoot", header: "cheerp/clientlib.h".}

proc set_tFoot*(this: var HTMLTableElement; a2: ptr HTMLTableSectionElement) {.
    importcpp: "set_tFoot", header: "cheerp/clientlib.h".}

proc get_tHead*(this: var HTMLTableElement): ptr HTMLTableSectionElement {.
    importcpp: "get_tHead", header: "cheerp/clientlib.h".}

proc set_tHead*(this: var HTMLTableElement; a2: ptr HTMLTableSectionElement) {.
    importcpp: "set_tHead", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLTableElement): ptr String {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLTableElement; a2: String) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc createCaption*(this: var HTMLTableElement): ptr HTMLTableCaptionElement {.
    importcpp: "createCaption", header: "cheerp/clientlib.h".}

proc createTBody*(this: var HTMLTableElement): ptr HTMLTableSectionElement {.
    importcpp: "createTBody", header: "cheerp/clientlib.h".}

proc createTFoot*(this: var HTMLTableElement): ptr HTMLTableSectionElement {.
    importcpp: "createTFoot", header: "cheerp/clientlib.h".}

proc createTHead*(this: var HTMLTableElement): ptr HTMLTableSectionElement {.
    importcpp: "createTHead", header: "cheerp/clientlib.h".}

proc deleteCaption*(this: var HTMLTableElement) {.importcpp: "deleteCaption",
    header: "cheerp/clientlib.h".}

proc deleteRow*(this: var HTMLTableElement) {.importcpp: "deleteRow",
    header: "cheerp/clientlib.h".}

proc deleteRow*(this: var HTMLTableElement; index: cdouble) {.
    importcpp: "deleteRow", header: "cheerp/clientlib.h".}

proc deleteTFoot*(this: var HTMLTableElement) {.importcpp: "deleteTFoot",
    header: "cheerp/clientlib.h".}

proc deleteTHead*(this: var HTMLTableElement) {.importcpp: "deleteTHead",
    header: "cheerp/clientlib.h".}

proc insertRow*(this: var HTMLTableElement): ptr HTMLTableRowElement {.
    importcpp: "insertRow", header: "cheerp/clientlib.h".}

proc insertRow*(this: var HTMLTableElement; index: cdouble): ptr HTMLTableRowElement {.
    importcpp: "insertRow", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableElement): ptr HTMLTableElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableElement; a2: ptr HTMLTableElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableElement*(): HTMLTableElement {.constructor,
    importcpp: "client::HTMLTableElement(@)", header: "cheerp/clientlib.h".}

proc get_scope*(this: var HTMLTableHeaderCellElement): ptr String {.
    importcpp: "get_scope", header: "cheerp/clientlib.h".}

proc set_scope*(this: var HTMLTableHeaderCellElement; a2: String) {.
    importcpp: "set_scope", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableHeaderCellElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableHeaderCellElement): ptr HTMLTableHeaderCellElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableHeaderCellElement;
                    a2: ptr HTMLTableHeaderCellElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableHeaderCellElement*(): HTMLTableHeaderCellElement {.
    constructor, importcpp: "client::HTMLTableHeaderCellElement(@)",
    header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLTableRowElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLTableRowElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_bgColor*(this: var HTMLTableRowElement): ptr String {.
    importcpp: "get_bgColor", header: "cheerp/clientlib.h".}

proc set_bgColor*(this: var HTMLTableRowElement; a2: String) {.
    importcpp: "set_bgColor", header: "cheerp/clientlib.h".}

proc get_cells*(this: var HTMLTableRowElement): ptr HTMLCollectionOf[Object] {.
    importcpp: "get_cells", header: "cheerp/clientlib.h".}

proc get_ch*(this: var HTMLTableRowElement): ptr String {.importcpp: "get_ch",
    header: "cheerp/clientlib.h".}

proc set_ch*(this: var HTMLTableRowElement; a2: String) {.importcpp: "set_ch",
    header: "cheerp/clientlib.h".}

proc get_chOff*(this: var HTMLTableRowElement): ptr String {.
    importcpp: "get_chOff", header: "cheerp/clientlib.h".}

proc set_chOff*(this: var HTMLTableRowElement; a2: String) {.
    importcpp: "set_chOff", header: "cheerp/clientlib.h".}

proc get_rowIndex*(this: var HTMLTableRowElement): cdouble {.
    importcpp: "get_rowIndex", header: "cheerp/clientlib.h".}

proc get_sectionRowIndex*(this: var HTMLTableRowElement): cdouble {.
    importcpp: "get_sectionRowIndex", header: "cheerp/clientlib.h".}

proc get_vAlign*(this: var HTMLTableRowElement): ptr String {.
    importcpp: "get_vAlign", header: "cheerp/clientlib.h".}

proc set_vAlign*(this: var HTMLTableRowElement; a2: String) {.
    importcpp: "set_vAlign", header: "cheerp/clientlib.h".}

proc deleteCell*(this: var HTMLTableRowElement) {.importcpp: "deleteCell",
    header: "cheerp/clientlib.h".}

proc deleteCell*(this: var HTMLTableRowElement; index: cdouble) {.
    importcpp: "deleteCell", header: "cheerp/clientlib.h".}

proc insertCell*(this: var HTMLTableRowElement): ptr HTMLTableDataCellElement {.
    importcpp: "insertCell", header: "cheerp/clientlib.h".}

proc insertCell*(this: var HTMLTableRowElement; index: cdouble): ptr HTMLTableDataCellElement {.
    importcpp: "insertCell", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableRowElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableRowElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableRowElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableRowElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableRowElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableRowElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableRowElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableRowElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableRowElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableRowElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableRowElement): ptr HTMLTableRowElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableRowElement; a2: ptr HTMLTableRowElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableRowElement*(): HTMLTableRowElement {.constructor,
    importcpp: "client::HTMLTableRowElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var HTMLTableSectionElement): ptr String {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var HTMLTableSectionElement; a2: String) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_ch*(this: var HTMLTableSectionElement): ptr String {.
    importcpp: "get_ch", header: "cheerp/clientlib.h".}

proc set_ch*(this: var HTMLTableSectionElement; a2: String) {.
    importcpp: "set_ch", header: "cheerp/clientlib.h".}

proc get_chOff*(this: var HTMLTableSectionElement): ptr String {.
    importcpp: "get_chOff", header: "cheerp/clientlib.h".}

proc set_chOff*(this: var HTMLTableSectionElement; a2: String) {.
    importcpp: "set_chOff", header: "cheerp/clientlib.h".}

proc get_rows*(this: var HTMLTableSectionElement): ptr HTMLCollectionOf[
    HTMLTableRowElement] {.importcpp: "get_rows", header: "cheerp/clientlib.h".}

proc get_vAlign*(this: var HTMLTableSectionElement): ptr String {.
    importcpp: "get_vAlign", header: "cheerp/clientlib.h".}

proc set_vAlign*(this: var HTMLTableSectionElement; a2: String) {.
    importcpp: "set_vAlign", header: "cheerp/clientlib.h".}

proc deleteRow*(this: var HTMLTableSectionElement) {.importcpp: "deleteRow",
    header: "cheerp/clientlib.h".}

proc deleteRow*(this: var HTMLTableSectionElement; index: cdouble) {.
    importcpp: "deleteRow", header: "cheerp/clientlib.h".}

proc insertRow*(this: var HTMLTableSectionElement): ptr HTMLTableRowElement {.
    importcpp: "insertRow", header: "cheerp/clientlib.h".}

proc insertRow*(this: var HTMLTableSectionElement; index: cdouble): ptr HTMLTableRowElement {.
    importcpp: "insertRow", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableSectionElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableSectionElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableSectionElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableSectionElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTableSectionElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableSectionElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableSectionElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableSectionElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableSectionElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTableSectionElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTableSectionElement): ptr HTMLTableSectionElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTableSectionElement;
                    a2: ptr HTMLTableSectionElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTableSectionElement*(): HTMLTableSectionElement {.constructor,
    importcpp: "client::HTMLTableSectionElement(@)",
    header: "cheerp/clientlib.h".}

proc get_content*(this: var HTMLTemplateElement): ptr DocumentFragment {.
    importcpp: "get_content", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTemplateElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTemplateElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTemplateElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTemplateElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTemplateElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTemplateElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTemplateElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTemplateElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTemplateElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTemplateElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTemplateElement): ptr HTMLTemplateElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTemplateElement; a2: ptr HTMLTemplateElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTemplateElement*(): HTMLTemplateElement {.constructor,
    importcpp: "client::HTMLTemplateElement(@)", header: "cheerp/clientlib.h".}

proc get_autofocus*(this: var HTMLTextAreaElement): bool {.
    importcpp: "get_autofocus", header: "cheerp/clientlib.h".}

proc set_autofocus*(this: var HTMLTextAreaElement; a2: bool) {.
    importcpp: "set_autofocus", header: "cheerp/clientlib.h".}

proc get_cols*(this: var HTMLTextAreaElement): cdouble {.importcpp: "get_cols",
    header: "cheerp/clientlib.h".}

proc set_cols*(this: var HTMLTextAreaElement; a2: cdouble) {.
    importcpp: "set_cols", header: "cheerp/clientlib.h".}

proc get_defaultValue*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_defaultValue", header: "cheerp/clientlib.h".}

proc set_defaultValue*(this: var HTMLTextAreaElement; a2: String) {.
    importcpp: "set_defaultValue", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var HTMLTextAreaElement): bool {.
    importcpp: "get_disabled", header: "cheerp/clientlib.h".}

proc set_disabled*(this: var HTMLTextAreaElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLTextAreaElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_maxLength*(this: var HTMLTextAreaElement): cdouble {.
    importcpp: "get_maxLength", header: "cheerp/clientlib.h".}

proc set_maxLength*(this: var HTMLTextAreaElement; a2: cdouble) {.
    importcpp: "set_maxLength", header: "cheerp/clientlib.h".}

proc get_minLength*(this: var HTMLTextAreaElement): cdouble {.
    importcpp: "get_minLength", header: "cheerp/clientlib.h".}

proc set_minLength*(this: var HTMLTextAreaElement; a2: cdouble) {.
    importcpp: "set_minLength", header: "cheerp/clientlib.h".}

proc get_name*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc set_name*(this: var HTMLTextAreaElement; a2: String) {.
    importcpp: "set_name", header: "cheerp/clientlib.h".}

proc get_placeholder*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_placeholder", header: "cheerp/clientlib.h".}

proc set_placeholder*(this: var HTMLTextAreaElement; a2: String) {.
    importcpp: "set_placeholder", header: "cheerp/clientlib.h".}

proc get_readOnly*(this: var HTMLTextAreaElement): bool {.
    importcpp: "get_readOnly", header: "cheerp/clientlib.h".}

proc set_readOnly*(this: var HTMLTextAreaElement; a2: bool) {.
    importcpp: "set_readOnly", header: "cheerp/clientlib.h".}

proc get_required*(this: var HTMLTextAreaElement): bool {.
    importcpp: "get_required", header: "cheerp/clientlib.h".}

proc set_required*(this: var HTMLTextAreaElement; a2: bool) {.
    importcpp: "set_required", header: "cheerp/clientlib.h".}

proc get_rows*(this: var HTMLTextAreaElement): cdouble {.importcpp: "get_rows",
    header: "cheerp/clientlib.h".}

proc set_rows*(this: var HTMLTextAreaElement; a2: cdouble) {.
    importcpp: "set_rows", header: "cheerp/clientlib.h".}

proc get_selectionEnd*(this: var HTMLTextAreaElement): cdouble {.
    importcpp: "get_selectionEnd", header: "cheerp/clientlib.h".}

proc set_selectionEnd*(this: var HTMLTextAreaElement; a2: cdouble) {.
    importcpp: "set_selectionEnd", header: "cheerp/clientlib.h".}

proc get_selectionStart*(this: var HTMLTextAreaElement): cdouble {.
    importcpp: "get_selectionStart", header: "cheerp/clientlib.h".}

proc set_selectionStart*(this: var HTMLTextAreaElement; a2: cdouble) {.
    importcpp: "set_selectionStart", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc get_validationMessage*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_validationMessage", header: "cheerp/clientlib.h".}

proc get_validity*(this: var HTMLTextAreaElement): ptr ValidityState {.
    importcpp: "get_validity", header: "cheerp/clientlib.h".}

proc get_value*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_value", header: "cheerp/clientlib.h".}

proc set_value*(this: var HTMLTextAreaElement; a2: String) {.
    importcpp: "set_value", header: "cheerp/clientlib.h".}

proc get_willValidate*(this: var HTMLTextAreaElement): bool {.
    importcpp: "get_willValidate", header: "cheerp/clientlib.h".}

proc get_wrap*(this: var HTMLTextAreaElement): ptr String {.
    importcpp: "get_wrap", header: "cheerp/clientlib.h".}

proc set_wrap*(this: var HTMLTextAreaElement; a2: String) {.
    importcpp: "set_wrap", header: "cheerp/clientlib.h".}

proc checkValidity*(this: var HTMLTextAreaElement): bool {.
    importcpp: "checkValidity", header: "cheerp/clientlib.h".}

proc select*(this: var HTMLTextAreaElement) {.importcpp: "select",
    header: "cheerp/clientlib.h".}

proc setCustomValidity*(this: var HTMLTextAreaElement; error: String) {.
    importcpp: "setCustomValidity", header: "cheerp/clientlib.h".}

proc setSelectionRange*(this: var HTMLTextAreaElement; start: cdouble;
                        `end`: cdouble) {.importcpp: "setSelectionRange",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTextAreaElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTextAreaElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTextAreaElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTextAreaElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTextAreaElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTextAreaElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTextAreaElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTextAreaElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTextAreaElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTextAreaElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTextAreaElement): ptr HTMLTextAreaElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTextAreaElement; a2: ptr HTMLTextAreaElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTextAreaElement*(): HTMLTextAreaElement {.constructor,
    importcpp: "client::HTMLTextAreaElement(@)", header: "cheerp/clientlib.h".}

proc get_dateTime*(this: var HTMLTimeElement): ptr String {.
    importcpp: "get_dateTime", header: "cheerp/clientlib.h".}

proc set_dateTime*(this: var HTMLTimeElement; a2: String) {.
    importcpp: "set_dateTime", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTimeElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTimeElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTimeElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTimeElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTimeElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTimeElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTimeElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTimeElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTimeElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTimeElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTimeElement): ptr HTMLTimeElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTimeElement; a2: ptr HTMLTimeElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTimeElement*(): HTMLTimeElement {.constructor,
    importcpp: "client::HTMLTimeElement(@)", header: "cheerp/clientlib.h".}

proc get_text*(this: var HTMLTitleElement): ptr String {.importcpp: "get_text",
    header: "cheerp/clientlib.h".}

proc set_text*(this: var HTMLTitleElement; a2: String) {.importcpp: "set_text",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTitleElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTitleElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTitleElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTitleElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTitleElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTitleElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTitleElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTitleElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTitleElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTitleElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTitleElement): ptr HTMLTitleElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTitleElement; a2: ptr HTMLTitleElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTitleElement*(): HTMLTitleElement {.constructor,
    importcpp: "client::HTMLTitleElement(@)", header: "cheerp/clientlib.h".}

proc get_default*(this: var HTMLTrackElement): bool {.importcpp: "get_default",
    header: "cheerp/clientlib.h".}

proc set_default*(this: var HTMLTrackElement; a2: bool) {.
    importcpp: "set_default", header: "cheerp/clientlib.h".}

proc get_kind*(this: var HTMLTrackElement): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc set_kind*(this: var HTMLTrackElement; a2: String) {.importcpp: "set_kind",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var HTMLTrackElement): ptr String {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var HTMLTrackElement; a2: String) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var HTMLTrackElement): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_src*(this: var HTMLTrackElement): ptr String {.importcpp: "get_src",
    header: "cheerp/clientlib.h".}

proc set_src*(this: var HTMLTrackElement; a2: String) {.importcpp: "set_src",
    header: "cheerp/clientlib.h".}

proc get_srclang*(this: var HTMLTrackElement): ptr String {.
    importcpp: "get_srclang", header: "cheerp/clientlib.h".}

proc set_srclang*(this: var HTMLTrackElement; a2: String) {.
    importcpp: "set_srclang", header: "cheerp/clientlib.h".}

proc get_track*(this: var HTMLTrackElement): ptr TextTrack {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTrackElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTrackElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTrackElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTrackElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLTrackElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTrackElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTrackElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTrackElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTrackElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLTrackElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLTrackElement): ptr HTMLTrackElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLTrackElement; a2: ptr HTMLTrackElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLTrackElement*(): HTMLTrackElement {.constructor,
    importcpp: "client::HTMLTrackElement(@)", header: "cheerp/clientlib.h".}

proc get_ERROR*(this: var HTMLTrackElement): cdouble {.importcpp: "get_ERROR",
    header: "cheerp/clientlib.h".}

proc get_LOADED*(this: var HTMLTrackElement): cdouble {.importcpp: "get_LOADED",
    header: "cheerp/clientlib.h".}

proc get_LOADING*(this: var HTMLTrackElement): cdouble {.
    importcpp: "get_LOADING", header: "cheerp/clientlib.h".}

proc get_NONE*(this: var HTMLTrackElement): cdouble {.importcpp: "get_NONE",
    header: "cheerp/clientlib.h".}

proc get_compact*(this: var HTMLUListElement): bool {.importcpp: "get_compact",
    header: "cheerp/clientlib.h".}

proc set_compact*(this: var HTMLUListElement; a2: bool) {.
    importcpp: "set_compact", header: "cheerp/clientlib.h".}

proc get_type*(this: var HTMLUListElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var HTMLUListElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUListElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUListElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUListElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUListElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUListElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUListElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUListElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUListElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUListElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUListElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLUListElement): ptr HTMLUListElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLUListElement; a2: ptr HTMLUListElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLUListElement*(): HTMLUListElement {.constructor,
    importcpp: "client::HTMLUListElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUnknownElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUnknownElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUnknownElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUnknownElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLUnknownElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUnknownElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUnknownElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUnknownElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUnknownElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLUnknownElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLUnknownElement): ptr HTMLUnknownElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLUnknownElement; a2: ptr HTMLUnknownElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLUnknownElement*(): HTMLUnknownElement {.constructor,
    importcpp: "client::HTMLUnknownElement(@)", header: "cheerp/clientlib.h".}

proc get_MSVideoFormatChanged*(this: var HTMLVideoElementEventMap): ptr Event {.
    importcpp: "get_MSVideoFormatChanged", header: "cheerp/clientlib.h".}

proc set_MSVideoFormatChanged*(this: var HTMLVideoElementEventMap; a2: ptr Event) {.
    importcpp: "set_MSVideoFormatChanged", header: "cheerp/clientlib.h".}

proc get_MSVideoFrameStepCompleted*(this: var HTMLVideoElementEventMap): ptr Event {.
    importcpp: "get_MSVideoFrameStepCompleted", header: "cheerp/clientlib.h".}

proc set_MSVideoFrameStepCompleted*(this: var HTMLVideoElementEventMap;
                                    a2: ptr Event) {.
    importcpp: "set_MSVideoFrameStepCompleted", header: "cheerp/clientlib.h".}

proc get_MSVideoOptimalLayoutChanged*(this: var HTMLVideoElementEventMap): ptr Event {.
    importcpp: "get_MSVideoOptimalLayoutChanged", header: "cheerp/clientlib.h".}

proc set_MSVideoOptimalLayoutChanged*(this: var HTMLVideoElementEventMap;
                                      a2: ptr Event) {.
    importcpp: "set_MSVideoOptimalLayoutChanged", header: "cheerp/clientlib.h".}

proc get_height*(this: var HTMLVideoElement): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var HTMLVideoElement; a2: cdouble) {.
    importcpp: "set_height", header: "cheerp/clientlib.h".}

proc get_msHorizontalMirror*(this: var HTMLVideoElement): bool {.
    importcpp: "get_msHorizontalMirror", header: "cheerp/clientlib.h".}

proc set_msHorizontalMirror*(this: var HTMLVideoElement; a2: bool) {.
    importcpp: "set_msHorizontalMirror", header: "cheerp/clientlib.h".}

proc get_msIsLayoutOptimalForPlayback*(this: var HTMLVideoElement): bool {.
    importcpp: "get_msIsLayoutOptimalForPlayback", header: "cheerp/clientlib.h".}

proc get_msIsStereo3D*(this: var HTMLVideoElement): bool {.
    importcpp: "get_msIsStereo3D", header: "cheerp/clientlib.h".}

proc get_msStereo3DPackingMode*(this: var HTMLVideoElement): ptr String {.
    importcpp: "get_msStereo3DPackingMode", header: "cheerp/clientlib.h".}

proc set_msStereo3DPackingMode*(this: var HTMLVideoElement; a2: String) {.
    importcpp: "set_msStereo3DPackingMode", header: "cheerp/clientlib.h".}

proc get_msStereo3DRenderMode*(this: var HTMLVideoElement): ptr String {.
    importcpp: "get_msStereo3DRenderMode", header: "cheerp/clientlib.h".}

proc set_msStereo3DRenderMode*(this: var HTMLVideoElement; a2: String) {.
    importcpp: "set_msStereo3DRenderMode", header: "cheerp/clientlib.h".}

proc get_msZoom*(this: var HTMLVideoElement): bool {.importcpp: "get_msZoom",
    header: "cheerp/clientlib.h".}

proc set_msZoom*(this: var HTMLVideoElement; a2: bool) {.
    importcpp: "set_msZoom", header: "cheerp/clientlib.h".}

proc get_onMSVideoFormatChanged*(this: var HTMLVideoElement): ptr EventListener {.
    importcpp: "get_onMSVideoFormatChanged", header: "cheerp/clientlib.h".}

proc set_onMSVideoFormatChanged*(this: var HTMLVideoElement;
                                 a2: ptr EventListener) {.
    importcpp: "set_onMSVideoFormatChanged", header: "cheerp/clientlib.h".}

proc get_onMSVideoFrameStepCompleted*(this: var HTMLVideoElement): ptr EventListener {.
    importcpp: "get_onMSVideoFrameStepCompleted", header: "cheerp/clientlib.h".}

proc set_onMSVideoFrameStepCompleted*(this: var HTMLVideoElement;
                                      a2: ptr EventListener) {.
    importcpp: "set_onMSVideoFrameStepCompleted", header: "cheerp/clientlib.h".}

proc get_onMSVideoOptimalLayoutChanged*(this: var HTMLVideoElement): ptr EventListener {.
    importcpp: "get_onMSVideoOptimalLayoutChanged", header: "cheerp/clientlib.h".}

proc set_onMSVideoOptimalLayoutChanged*(this: var HTMLVideoElement;
                                        a2: ptr EventListener) {.
    importcpp: "set_onMSVideoOptimalLayoutChanged", header: "cheerp/clientlib.h".}

proc get_poster*(this: var HTMLVideoElement): ptr String {.
    importcpp: "get_poster", header: "cheerp/clientlib.h".}

proc set_poster*(this: var HTMLVideoElement; a2: String) {.
    importcpp: "set_poster", header: "cheerp/clientlib.h".}

proc get_videoHeight*(this: var HTMLVideoElement): cdouble {.
    importcpp: "get_videoHeight", header: "cheerp/clientlib.h".}

proc get_videoWidth*(this: var HTMLVideoElement): cdouble {.
    importcpp: "get_videoWidth", header: "cheerp/clientlib.h".}

proc get_webkitDisplayingFullscreen*(this: var HTMLVideoElement): bool {.
    importcpp: "get_webkitDisplayingFullscreen", header: "cheerp/clientlib.h".}

proc get_webkitSupportsFullscreen*(this: var HTMLVideoElement): bool {.
    importcpp: "get_webkitSupportsFullscreen", header: "cheerp/clientlib.h".}

proc get_width*(this: var HTMLVideoElement): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var HTMLVideoElement; a2: cdouble) {.
    importcpp: "set_width", header: "cheerp/clientlib.h".}

proc getVideoPlaybackQuality*(this: var HTMLVideoElement): ptr VideoPlaybackQuality {.
    importcpp: "getVideoPlaybackQuality", header: "cheerp/clientlib.h".}

proc msFrameStep*(this: var HTMLVideoElement; forward: bool) {.
    importcpp: "msFrameStep", header: "cheerp/clientlib.h".}

proc msInsertVideoEffect*(this: var HTMLVideoElement;
                          activatableClassId: String; effectRequired: bool) {.
    importcpp: "msInsertVideoEffect", header: "cheerp/clientlib.h".}

proc msInsertVideoEffect*(this: var HTMLVideoElement;
                          activatableClassId: String; effectRequired: bool;
                          config: ptr Object) {.
    importcpp: "msInsertVideoEffect", header: "cheerp/clientlib.h".}

proc msSetVideoRectangle*(this: var HTMLVideoElement; left: cdouble;
                          top: cdouble; right: cdouble; bottom: cdouble) {.
    importcpp: "msSetVideoRectangle", header: "cheerp/clientlib.h".}

proc webkitEnterFullScreen*(this: var HTMLVideoElement) {.
    importcpp: "webkitEnterFullScreen", header: "cheerp/clientlib.h".}

proc webkitExitFullScreen*(this: var HTMLVideoElement) {.
    importcpp: "webkitExitFullScreen", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLVideoElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLVideoElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLVideoElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLVideoElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var HTMLVideoElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLVideoElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLVideoElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLVideoElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLVideoElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var HTMLVideoElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLVideoElement): ptr HTMLVideoElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLVideoElement; a2: ptr HTMLVideoElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLVideoElement*(): HTMLVideoElement {.constructor,
    importcpp: "client::HTMLVideoElement(@)", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLegendElement): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HTMLegendElement): ptr HTMLegendElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HTMLegendElement; a2: ptr HTMLegendElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHTMLegendElement*(): HTMLegendElement {.constructor,
    importcpp: "client::HTMLegendElement(@)", header: "cheerp/clientlib.h".}

proc get_newURL*(this: var HashChangeEvent): ptr String {.
    importcpp: "get_newURL", header: "cheerp/clientlib.h".}

proc get_oldURL*(this: var HashChangeEvent): ptr String {.
    importcpp: "get_oldURL", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var HashChangeEvent): ptr HashChangeEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var HashChangeEvent; a2: ptr HashChangeEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHashChangeEvent*(`type`: String): HashChangeEvent {.constructor,
    importcpp: "client::HashChangeEvent(@)", header: "cheerp/clientlib.h".}

proc constructHashChangeEvent*(`type`: String;
                               eventInitDict: ptr HashChangeEventInit): HashChangeEvent {.
    constructor, importcpp: "client::HashChangeEvent(@)",
    header: "cheerp/clientlib.h".}

proc append*(this: var Headers; name: String; value: String) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc p_delete*(this: var Headers; name: String) {.importcpp: "_delete",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Headers; callback: ptr Function) {.importcpp: "forEach",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var Headers; callback: ptr Function; thisArg: ptr Object) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc get*(this: var Headers; name: String): ptr String {.importcpp: "get",
    header: "cheerp/clientlib.h".}

proc has*(this: var Headers; name: String): bool {.importcpp: "has",
    header: "cheerp/clientlib.h".}

proc set*(this: var Headers; name: String; value: String) {.importcpp: "set",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Headers): ptr Headers {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Headers; a2: ptr Headers) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHeaders*(): Headers {.constructor,
                                    importcpp: "client::Headers(@)",
                                    header: "cheerp/clientlib.h".}

proc constructHeaders*(init: ptr Headers): Headers {.constructor,
    importcpp: "client::Headers(@)", header: "cheerp/clientlib.h".}

proc constructHeaders*(init: ptr Array): Headers {.constructor,
    importcpp: "client::Headers(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var History): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_scrollRestoration*(this: var History): ptr String {.
    importcpp: "get_scrollRestoration", header: "cheerp/clientlib.h".}

proc set_scrollRestoration*(this: var History; a2: String) {.
    importcpp: "set_scrollRestoration", header: "cheerp/clientlib.h".}

proc back*(this: var History) {.importcpp: "back", header: "cheerp/clientlib.h".}

proc back*(this: var History; distance: ptr Object) {.importcpp: "back",
    header: "cheerp/clientlib.h".}

proc forward*(this: var History) {.importcpp: "forward",
                                   header: "cheerp/clientlib.h".}

proc forward*(this: var History; distance: ptr Object) {.importcpp: "forward",
    header: "cheerp/clientlib.h".}

proc go*(this: var History) {.importcpp: "go", header: "cheerp/clientlib.h".}

proc go*(this: var History; delta: ptr Object) {.importcpp: "go",
    header: "cheerp/clientlib.h".}

proc pushState*(this: var History; data: ptr Object) {.importcpp: "pushState",
    header: "cheerp/clientlib.h".}

proc pushState*(this: var History; data: ptr Object; title: String) {.
    importcpp: "pushState", header: "cheerp/clientlib.h".}

proc pushState*(this: var History; data: ptr Object; title: String; url: String) {.
    importcpp: "pushState", header: "cheerp/clientlib.h".}

proc replaceState*(this: var History; data: ptr Object) {.
    importcpp: "replaceState", header: "cheerp/clientlib.h".}

proc replaceState*(this: var History; data: ptr Object; title: String) {.
    importcpp: "replaceState", header: "cheerp/clientlib.h".}

proc replaceState*(this: var History; data: ptr Object; title: String;
                   url: String) {.importcpp: "replaceState",
                                  header: "cheerp/clientlib.h".}

proc get_prototype*(this: var History): ptr History {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var History; a2: ptr History) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructHistory*(): History {.constructor,
                                    importcpp: "client::History(@)",
                                    header: "cheerp/clientlib.h".}

proc get_context*(this: var HkdfCtrParams): ptr Int8Array {.
    importcpp: "get_context", header: "cheerp/clientlib.h".}

proc set_context*(this: var HkdfCtrParams; a2: ptr Int8Array) {.
    importcpp: "set_context", header: "cheerp/clientlib.h".}

proc get_hash*(this: var HkdfCtrParams): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var HkdfCtrParams; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var HkdfCtrParams): ptr Int8Array {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var HkdfCtrParams; a2: ptr Int8Array) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc get_direction*(this: var IDBCursor): ptr String {.
    importcpp: "get_direction", header: "cheerp/clientlib.h".}

proc get_key*(this: var IDBCursor): ptr IDBKeyRange {.importcpp: "get_key",
    header: "cheerp/clientlib.h".}

proc get_source*(this: var IDBCursor): ptr IDBObjectStore {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc advance*(this: var IDBCursor; count: cdouble) {.importcpp: "advance",
    header: "cheerp/clientlib.h".}

proc p_continue*(this: var IDBCursor) {.importcpp: "_continue",
                                        header: "cheerp/clientlib.h".}

proc p_continue*(this: var IDBCursor; key: ptr IDBKeyRange) {.
    importcpp: "_continue", header: "cheerp/clientlib.h".}

proc p_continue*(this: var IDBCursor; key: cdouble) {.importcpp: "_continue",
    header: "cheerp/clientlib.h".}

proc p_continue*(this: var IDBCursor; key: String) {.importcpp: "_continue",
    header: "cheerp/clientlib.h".}

proc p_continue*(this: var IDBCursor; key: ptr Date) {.importcpp: "_continue",
    header: "cheerp/clientlib.h".}

proc p_continue*(this: var IDBCursor; key: ptr IDBArrayKey) {.
    importcpp: "_continue", header: "cheerp/clientlib.h".}

proc p_delete*(this: var IDBCursor): ptr IDBRequest {.importcpp: "_delete",
    header: "cheerp/clientlib.h".}

proc update*(this: var IDBCursor; value: ptr Object): ptr IDBRequest {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBCursor): ptr IDBCursor {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBCursor; a2: ptr IDBCursor) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBCursor*(): IDBCursor {.constructor,
                                        importcpp: "client::IDBCursor(@)",
                                        header: "cheerp/clientlib.h".}

proc get_NEXT*(this: var IDBCursor): ptr String {.importcpp: "get_NEXT",
    header: "cheerp/clientlib.h".}

proc get_NEXT_NO_DUPLICATE*(this: var IDBCursor): ptr String {.
    importcpp: "get_NEXT_NO_DUPLICATE", header: "cheerp/clientlib.h".}

proc get_PREV*(this: var IDBCursor): ptr String {.importcpp: "get_PREV",
    header: "cheerp/clientlib.h".}

proc get_PREV_NO_DUPLICATE*(this: var IDBCursor): ptr String {.
    importcpp: "get_PREV_NO_DUPLICATE", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBCursorWithValue): ptr IDBCursorWithValue {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBCursorWithValue; a2: ptr IDBCursorWithValue) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBCursorWithValue*(): IDBCursorWithValue {.constructor,
    importcpp: "client::IDBCursorWithValue(@)", header: "cheerp/clientlib.h".}

proc get_abort*(this: var IDBDatabaseEventMap): ptr Event {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var IDBDatabaseEventMap; a2: ptr Event) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_error*(this: var IDBDatabaseEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var IDBDatabaseEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_name*(this: var IDBDatabase): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_objectStoreNames*(this: var IDBDatabase): ptr DOMStringList {.
    importcpp: "get_objectStoreNames", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var IDBDatabase): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var IDBDatabase; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var IDBDatabase): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var IDBDatabase; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onversionchange*(this: var IDBDatabase): ptr EventListener {.
    importcpp: "get_onversionchange", header: "cheerp/clientlib.h".}

proc set_onversionchange*(this: var IDBDatabase; a2: ptr EventListener) {.
    importcpp: "set_onversionchange", header: "cheerp/clientlib.h".}

proc get_version*(this: var IDBDatabase): cdouble {.importcpp: "get_version",
    header: "cheerp/clientlib.h".}

proc close*(this: var IDBDatabase) {.importcpp: "close",
                                     header: "cheerp/clientlib.h".}

proc createObjectStore*(this: var IDBDatabase; name: String): ptr IDBObjectStore {.
    importcpp: "createObjectStore", header: "cheerp/clientlib.h".}

proc createObjectStore*(this: var IDBDatabase; name: String;
                        optionalParameters: ptr IDBObjectStoreParameters): ptr IDBObjectStore {.
    importcpp: "createObjectStore", header: "cheerp/clientlib.h".}

proc deleteObjectStore*(this: var IDBDatabase; name: String) {.
    importcpp: "deleteObjectStore", header: "cheerp/clientlib.h".}

proc transaction*(this: var IDBDatabase; storeNames: String): ptr IDBTransaction {.
    importcpp: "transaction", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBDatabase; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBDatabase; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBDatabase; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBDatabase; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBDatabase; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBDatabase; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBDatabase; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBDatabase; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBDatabase; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBDatabase; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBDatabase): ptr IDBDatabase {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBDatabase; a2: ptr IDBDatabase) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBDatabase*(): IDBDatabase {.constructor,
    importcpp: "client::IDBDatabase(@)", header: "cheerp/clientlib.h".}

proc get_indexedDB*(this: var IDBEnvironment): ptr IDBFactory {.
    importcpp: "get_indexedDB", header: "cheerp/clientlib.h".}

proc cmp*(this: var IDBFactory; first: ptr Object; second: ptr Object): cdouble {.
    importcpp: "cmp", header: "cheerp/clientlib.h".}

proc deleteDatabase*(this: var IDBFactory; name: String): ptr IDBOpenDBRequest {.
    importcpp: "deleteDatabase", header: "cheerp/clientlib.h".}

proc open*(this: var IDBFactory; name: String): ptr IDBOpenDBRequest {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var IDBFactory; name: String; version: cdouble): ptr IDBOpenDBRequest {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBFactory): ptr IDBFactory {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBFactory; a2: ptr IDBFactory) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBFactory*(): IDBFactory {.constructor,
    importcpp: "client::IDBFactory(@)", header: "cheerp/clientlib.h".}

proc get_keyPath*(this: var IDBIndex): ptr String {.importcpp: "get_keyPath",
    header: "cheerp/clientlib.h".}

proc get_multiEntry*(this: var IDBIndex): bool {.importcpp: "get_multiEntry",
    header: "cheerp/clientlib.h".}

proc set_multiEntry*(this: var IDBIndex; a2: bool) {.
    importcpp: "set_multiEntry", header: "cheerp/clientlib.h".}

proc get_name*(this: var IDBIndex): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_objectStore*(this: var IDBIndex): ptr IDBObjectStore {.
    importcpp: "get_objectStore", header: "cheerp/clientlib.h".}

proc get_unique*(this: var IDBIndex): bool {.importcpp: "get_unique",
    header: "cheerp/clientlib.h".}

proc count*(this: var IDBIndex): ptr IDBRequest {.importcpp: "count",
    header: "cheerp/clientlib.h".}

proc count*(this: var IDBIndex; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBIndex; key: cdouble): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBIndex; key: String): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBIndex; key: ptr Date): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBIndex; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc get*(this: var IDBIndex; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var IDBIndex; key: cdouble): ptr IDBRequest {.importcpp: "get",
    header: "cheerp/clientlib.h".}

proc get*(this: var IDBIndex; key: String): ptr IDBRequest {.importcpp: "get",
    header: "cheerp/clientlib.h".}

proc get*(this: var IDBIndex; key: ptr Date): ptr IDBRequest {.importcpp: "get",
    header: "cheerp/clientlib.h".}

proc get*(this: var IDBIndex; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc getKey*(this: var IDBIndex; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "getKey", header: "cheerp/clientlib.h".}

proc getKey*(this: var IDBIndex; key: cdouble): ptr IDBRequest {.
    importcpp: "getKey", header: "cheerp/clientlib.h".}

proc getKey*(this: var IDBIndex; key: String): ptr IDBRequest {.
    importcpp: "getKey", header: "cheerp/clientlib.h".}

proc getKey*(this: var IDBIndex; key: ptr Date): ptr IDBRequest {.
    importcpp: "getKey", header: "cheerp/clientlib.h".}

proc getKey*(this: var IDBIndex; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "getKey", header: "cheerp/clientlib.h".}

proc openCursor*(this: var IDBIndex): ptr IDBRequest {.importcpp: "openCursor",
    header: "cheerp/clientlib.h".}

proc openCursor*(this: var IDBIndex; range: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "openCursor", header: "cheerp/clientlib.h".}

proc openKeyCursor*(this: var IDBIndex): ptr IDBRequest {.
    importcpp: "openKeyCursor", header: "cheerp/clientlib.h".}

proc openKeyCursor*(this: var IDBIndex; range: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "openKeyCursor", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBIndex): ptr IDBIndex {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBIndex; a2: ptr IDBIndex) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBIndex*(): IDBIndex {.constructor,
                                      importcpp: "client::IDBIndex(@)",
                                      header: "cheerp/clientlib.h".}

proc get_lowerOpen*(this: var IDBKeyRange): bool {.importcpp: "get_lowerOpen",
    header: "cheerp/clientlib.h".}

proc get_upperOpen*(this: var IDBKeyRange): bool {.importcpp: "get_upperOpen",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBKeyRange): ptr IDBKeyRange {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBKeyRange; a2: ptr IDBKeyRange) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBKeyRange*(): IDBKeyRange {.constructor,
    importcpp: "client::IDBKeyRange(@)", header: "cheerp/clientlib.h".}

proc bound*(lower: ptr Object; upper: ptr Object): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::bound(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc bound*(lower: ptr Object; upper: ptr Object; lowerOpen: bool): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::bound(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc bound*(lower: ptr Object; upper: ptr Object; lowerOpen: bool;
            upperOpen: bool): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::bound(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc lowerBound*(lower: ptr Object): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::lowerBound(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc lowerBound*(lower: ptr Object; open: bool): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::lowerBound(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc only*(value: ptr Object): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::only(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc upperBound*(upper: ptr Object): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::upperBound(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc upperBound*(upper: ptr Object; open: bool): ptr IDBKeyRange {.
    importcpp: "client::IDBKeyRange::upperBound(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc get_autoIncrement*(this: var IDBObjectStore): bool {.
    importcpp: "get_autoIncrement", header: "cheerp/clientlib.h".}

proc set_autoIncrement*(this: var IDBObjectStore; a2: bool) {.
    importcpp: "set_autoIncrement", header: "cheerp/clientlib.h".}

proc get_indexNames*(this: var IDBObjectStore): ptr DOMStringList {.
    importcpp: "get_indexNames", header: "cheerp/clientlib.h".}

proc get_keyPath*(this: var IDBObjectStore): ptr String {.
    importcpp: "get_keyPath", header: "cheerp/clientlib.h".}

proc get_name*(this: var IDBObjectStore): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_transaction*(this: var IDBObjectStore): ptr IDBTransaction {.
    importcpp: "get_transaction", header: "cheerp/clientlib.h".}

proc add*(this: var IDBObjectStore; value: ptr Object): ptr IDBRequest {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var IDBObjectStore; value: ptr Object; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var IDBObjectStore; value: ptr Object; key: cdouble): ptr IDBRequest {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var IDBObjectStore; value: ptr Object; key: String): ptr IDBRequest {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var IDBObjectStore; value: ptr Object; key: ptr Date): ptr IDBRequest {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc add*(this: var IDBObjectStore; value: ptr Object; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "add", header: "cheerp/clientlib.h".}

proc clear*(this: var IDBObjectStore): ptr IDBRequest {.importcpp: "clear",
    header: "cheerp/clientlib.h".}

proc count*(this: var IDBObjectStore): ptr IDBRequest {.importcpp: "count",
    header: "cheerp/clientlib.h".}

proc count*(this: var IDBObjectStore; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBObjectStore; key: cdouble): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBObjectStore; key: String): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBObjectStore; key: ptr Date): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc count*(this: var IDBObjectStore; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "count", header: "cheerp/clientlib.h".}

proc createIndex*(this: var IDBObjectStore; name: String; keyPath: String): ptr IDBIndex {.
    importcpp: "createIndex", header: "cheerp/clientlib.h".}

proc createIndex*(this: var IDBObjectStore; name: String; keyPath: String;
                  optionalParameters: ptr IDBIndexParameters): ptr IDBIndex {.
    importcpp: "createIndex", header: "cheerp/clientlib.h".}

proc createIndex*(this: var IDBObjectStore; name: String; keyPath: ptr Array): ptr IDBIndex {.
    importcpp: "createIndex", header: "cheerp/clientlib.h".}

proc createIndex*(this: var IDBObjectStore; name: String; keyPath: ptr Array;
                  optionalParameters: ptr IDBIndexParameters): ptr IDBIndex {.
    importcpp: "createIndex", header: "cheerp/clientlib.h".}

proc p_delete*(this: var IDBObjectStore; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var IDBObjectStore; key: cdouble): ptr IDBRequest {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var IDBObjectStore; key: String): ptr IDBRequest {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var IDBObjectStore; key: ptr Date): ptr IDBRequest {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc p_delete*(this: var IDBObjectStore; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "_delete", header: "cheerp/clientlib.h".}

proc deleteIndex*(this: var IDBObjectStore; indexName: String) {.
    importcpp: "deleteIndex", header: "cheerp/clientlib.h".}

proc get*(this: var IDBObjectStore; key: ptr Object): ptr IDBRequest {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc index*(this: var IDBObjectStore; name: String): ptr IDBIndex {.
    importcpp: "index", header: "cheerp/clientlib.h".}

proc openCursor*(this: var IDBObjectStore): ptr IDBRequest {.
    importcpp: "openCursor", header: "cheerp/clientlib.h".}

proc openCursor*(this: var IDBObjectStore; range: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "openCursor", header: "cheerp/clientlib.h".}

proc put*(this: var IDBObjectStore; value: ptr Object): ptr IDBRequest {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc put*(this: var IDBObjectStore; value: ptr Object; key: ptr IDBKeyRange): ptr IDBRequest {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc put*(this: var IDBObjectStore; value: ptr Object; key: cdouble): ptr IDBRequest {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc put*(this: var IDBObjectStore; value: ptr Object; key: String): ptr IDBRequest {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc put*(this: var IDBObjectStore; value: ptr Object; key: ptr Date): ptr IDBRequest {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc put*(this: var IDBObjectStore; value: ptr Object; key: ptr IDBArrayKey): ptr IDBRequest {.
    importcpp: "put", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBObjectStore): ptr IDBObjectStore {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBObjectStore; a2: ptr IDBObjectStore) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBObjectStore*(): IDBObjectStore {.constructor,
    importcpp: "client::IDBObjectStore(@)", header: "cheerp/clientlib.h".}

proc get_error*(this: var IDBRequestEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var IDBRequestEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_success*(this: var IDBRequestEventMap): ptr Event {.
    importcpp: "get_success", header: "cheerp/clientlib.h".}

proc set_success*(this: var IDBRequestEventMap; a2: ptr Event) {.
    importcpp: "set_success", header: "cheerp/clientlib.h".}

proc get_blocked*(this: var IDBOpenDBRequestEventMap): ptr Event {.
    importcpp: "get_blocked", header: "cheerp/clientlib.h".}

proc set_blocked*(this: var IDBOpenDBRequestEventMap; a2: ptr Event) {.
    importcpp: "set_blocked", header: "cheerp/clientlib.h".}

proc get_upgradeneeded*(this: var IDBOpenDBRequestEventMap): ptr IDBVersionChangeEvent {.
    importcpp: "get_upgradeneeded", header: "cheerp/clientlib.h".}

proc set_upgradeneeded*(this: var IDBOpenDBRequestEventMap;
                        a2: ptr IDBVersionChangeEvent) {.
    importcpp: "set_upgradeneeded", header: "cheerp/clientlib.h".}

proc get_error*(this: var IDBRequest): ptr DOMException {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var IDBRequest): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var IDBRequest; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onsuccess*(this: var IDBRequest): ptr EventListener {.
    importcpp: "get_onsuccess", header: "cheerp/clientlib.h".}

proc set_onsuccess*(this: var IDBRequest; a2: ptr EventListener) {.
    importcpp: "set_onsuccess", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var IDBRequest): ptr String {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_source*(this: var IDBRequest): ptr IDBObjectStore {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc get_transaction*(this: var IDBRequest): ptr IDBTransaction {.
    importcpp: "get_transaction", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBRequest; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBRequest; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBRequest; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBRequest; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBRequest; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBRequest; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBRequest; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBRequest; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBRequest; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBRequest; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBRequest): ptr IDBRequest {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBRequest; a2: ptr IDBRequest) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBRequest*(): IDBRequest {.constructor,
    importcpp: "client::IDBRequest(@)", header: "cheerp/clientlib.h".}

proc get_onblocked*(this: var IDBOpenDBRequest): ptr EventListener {.
    importcpp: "get_onblocked", header: "cheerp/clientlib.h".}

proc set_onblocked*(this: var IDBOpenDBRequest; a2: ptr EventListener) {.
    importcpp: "set_onblocked", header: "cheerp/clientlib.h".}

proc get_onupgradeneeded*(this: var IDBOpenDBRequest): ptr EventListener {.
    importcpp: "get_onupgradeneeded", header: "cheerp/clientlib.h".}

proc set_onupgradeneeded*(this: var IDBOpenDBRequest; a2: ptr EventListener) {.
    importcpp: "set_onupgradeneeded", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBOpenDBRequest; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBOpenDBRequest; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBOpenDBRequest; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBOpenDBRequest; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBOpenDBRequest; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBOpenDBRequest; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBOpenDBRequest; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBOpenDBRequest; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBOpenDBRequest; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBOpenDBRequest; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBOpenDBRequest): ptr IDBOpenDBRequest {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBOpenDBRequest; a2: ptr IDBOpenDBRequest) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBOpenDBRequest*(): IDBOpenDBRequest {.constructor,
    importcpp: "client::IDBOpenDBRequest(@)", header: "cheerp/clientlib.h".}

proc get_abort*(this: var IDBTransactionEventMap): ptr Event {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var IDBTransactionEventMap; a2: ptr Event) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_complete*(this: var IDBTransactionEventMap): ptr Event {.
    importcpp: "get_complete", header: "cheerp/clientlib.h".}

proc set_complete*(this: var IDBTransactionEventMap; a2: ptr Event) {.
    importcpp: "set_complete", header: "cheerp/clientlib.h".}

proc get_error*(this: var IDBTransactionEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var IDBTransactionEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_db*(this: var IDBTransaction): ptr IDBDatabase {.importcpp: "get_db",
    header: "cheerp/clientlib.h".}

proc get_error*(this: var IDBTransaction): ptr DOMException {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_mode*(this: var IDBTransaction): ptr String {.importcpp: "get_mode",
    header: "cheerp/clientlib.h".}

proc get_onabort*(this: var IDBTransaction): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var IDBTransaction; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_oncomplete*(this: var IDBTransaction): ptr EventListener {.
    importcpp: "get_oncomplete", header: "cheerp/clientlib.h".}

proc set_oncomplete*(this: var IDBTransaction; a2: ptr EventListener) {.
    importcpp: "set_oncomplete", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var IDBTransaction): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var IDBTransaction; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc abort*(this: var IDBTransaction) {.importcpp: "abort",
                                        header: "cheerp/clientlib.h".}

proc objectStore*(this: var IDBTransaction; name: String): ptr IDBObjectStore {.
    importcpp: "objectStore", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBTransaction; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBTransaction; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBTransaction; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBTransaction; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var IDBTransaction; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBTransaction; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBTransaction; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBTransaction; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBTransaction; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var IDBTransaction; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBTransaction): ptr IDBTransaction {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBTransaction; a2: ptr IDBTransaction) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIDBTransaction*(): IDBTransaction {.constructor,
    importcpp: "client::IDBTransaction(@)", header: "cheerp/clientlib.h".}

proc get_READ_ONLY*(this: var IDBTransaction): ptr String {.
    importcpp: "get_READ_ONLY", header: "cheerp/clientlib.h".}

proc get_READ_WRITE*(this: var IDBTransaction): ptr String {.
    importcpp: "get_READ_WRITE", header: "cheerp/clientlib.h".}

proc get_VERSION_CHANGE*(this: var IDBTransaction): ptr String {.
    importcpp: "get_VERSION_CHANGE", header: "cheerp/clientlib.h".}

proc get_newVersion*(this: var IDBVersionChangeEvent): cdouble {.
    importcpp: "get_newVersion", header: "cheerp/clientlib.h".}

proc get_oldVersion*(this: var IDBVersionChangeEvent): cdouble {.
    importcpp: "get_oldVersion", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IDBVersionChangeEvent): ptr IDBVersionChangeEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IDBVersionChangeEvent;
                    a2: ptr IDBVersionChangeEvent) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructIDBVersionChangeEvent*(): IDBVersionChangeEvent {.constructor,
    importcpp: "client::IDBVersionChangeEvent(@)", header: "cheerp/clientlib.h".}

proc getFrequencyResponse*(this: var IIRFilterNode;
                           frequencyHz: ptr Float32Array;
                           magResponse: ptr Float32Array;
                           phaseResponse: ptr Float32Array) {.
    importcpp: "getFrequencyResponse", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IIRFilterNode): ptr IIRFilterNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IIRFilterNode; a2: ptr IIRFilterNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIIRFilterNode*(): IIRFilterNode {.constructor,
    importcpp: "client::IIRFilterNode(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var ImageBitmap): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var ImageBitmap): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc close*(this: var ImageBitmap) {.importcpp: "close",
                                     header: "cheerp/clientlib.h".}

proc get_colorSpaceConversion*(this: var ImageBitmapOptions): ptr String {.
    importcpp: "get_colorSpaceConversion", header: "cheerp/clientlib.h".}

proc set_colorSpaceConversion*(this: var ImageBitmapOptions; a2: String) {.
    importcpp: "set_colorSpaceConversion", header: "cheerp/clientlib.h".}

proc get_imageOrientation*(this: var ImageBitmapOptions): ptr String {.
    importcpp: "get_imageOrientation", header: "cheerp/clientlib.h".}

proc set_imageOrientation*(this: var ImageBitmapOptions; a2: String) {.
    importcpp: "set_imageOrientation", header: "cheerp/clientlib.h".}

proc get_premultiplyAlpha*(this: var ImageBitmapOptions): ptr String {.
    importcpp: "get_premultiplyAlpha", header: "cheerp/clientlib.h".}

proc set_premultiplyAlpha*(this: var ImageBitmapOptions; a2: String) {.
    importcpp: "set_premultiplyAlpha", header: "cheerp/clientlib.h".}

proc get_resizeHeight*(this: var ImageBitmapOptions): cdouble {.
    importcpp: "get_resizeHeight", header: "cheerp/clientlib.h".}

proc set_resizeHeight*(this: var ImageBitmapOptions; a2: cdouble) {.
    importcpp: "set_resizeHeight", header: "cheerp/clientlib.h".}

proc get_resizeQuality*(this: var ImageBitmapOptions): ptr String {.
    importcpp: "get_resizeQuality", header: "cheerp/clientlib.h".}

proc set_resizeQuality*(this: var ImageBitmapOptions; a2: String) {.
    importcpp: "set_resizeQuality", header: "cheerp/clientlib.h".}

proc get_resizeWidth*(this: var ImageBitmapOptions): cdouble {.
    importcpp: "get_resizeWidth", header: "cheerp/clientlib.h".}

proc set_resizeWidth*(this: var ImageBitmapOptions; a2: cdouble) {.
    importcpp: "set_resizeWidth", header: "cheerp/clientlib.h".}

proc get_data*(this: var ImageData): ptr Uint8ClampedArray {.
    importcpp: "get_data", header: "cheerp/clientlib.h".}

proc get_height*(this: var ImageData): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var ImageData): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ImageData): ptr ImageData {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ImageData; a2: ptr ImageData) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructImageData*(width: cdouble; height: cdouble): ImageData {.
    constructor, importcpp: "client::ImageData(@)", header: "cheerp/clientlib.h".}

proc constructImageData*(array: ptr Uint8ClampedArray; width: cdouble;
                         height: cdouble): ImageData {.constructor,
    importcpp: "client::ImageData(@)", header: "cheerp/clientlib.h".}

proc get_root*(this: var IntersectionObserver): ptr Element {.
    importcpp: "get_root", header: "cheerp/clientlib.h".}

proc get_rootMargin*(this: var IntersectionObserver): ptr String {.
    importcpp: "get_rootMargin", header: "cheerp/clientlib.h".}

proc get_thresholds*(this: var IntersectionObserver): ptr Array {.
    importcpp: "get_thresholds", header: "cheerp/clientlib.h".}

proc disconnect*(this: var IntersectionObserver) {.importcpp: "disconnect",
    header: "cheerp/clientlib.h".}

proc observe*(this: var IntersectionObserver; target: ptr Element) {.
    importcpp: "observe", header: "cheerp/clientlib.h".}

proc takeRecords*(this: var IntersectionObserver): ptr Array {.
    importcpp: "takeRecords", header: "cheerp/clientlib.h".}

proc unobserve*(this: var IntersectionObserver; target: ptr Element) {.
    importcpp: "unobserve", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IntersectionObserver): ptr IntersectionObserver {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IntersectionObserver; a2: ptr IntersectionObserver) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIntersectionObserver*(callback: ptr EventListener): IntersectionObserver {.
    constructor, importcpp: "client::IntersectionObserver(@)",
    header: "cheerp/clientlib.h".}

proc constructIntersectionObserver*(callback: ptr EventListener;
                                    options: ptr IntersectionObserverInit): IntersectionObserver {.
    constructor, importcpp: "client::IntersectionObserver(@)",
    header: "cheerp/clientlib.h".}

proc get_boundingClientRect*(this: var IntersectionObserverEntry): ptr ClientRect {.
    importcpp: "get_boundingClientRect", header: "cheerp/clientlib.h".}

proc get_intersectionRatio*(this: var IntersectionObserverEntry): cdouble {.
    importcpp: "get_intersectionRatio", header: "cheerp/clientlib.h".}

proc get_intersectionRect*(this: var IntersectionObserverEntry): ptr ClientRect {.
    importcpp: "get_intersectionRect", header: "cheerp/clientlib.h".}

proc get_isIntersecting*(this: var IntersectionObserverEntry): bool {.
    importcpp: "get_isIntersecting", header: "cheerp/clientlib.h".}

proc get_rootBounds*(this: var IntersectionObserverEntry): ptr ClientRect {.
    importcpp: "get_rootBounds", header: "cheerp/clientlib.h".}

proc get_target*(this: var IntersectionObserverEntry): ptr Element {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc get_time*(this: var IntersectionObserverEntry): cdouble {.
    importcpp: "get_time", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var IntersectionObserverEntry): ptr IntersectionObserverEntry {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var IntersectionObserverEntry;
                    a2: ptr IntersectionObserverEntry) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructIntersectionObserverEntry*(
    intersectionObserverEntryInit: ptr IntersectionObserverEntryInit): IntersectionObserverEntry {.
    constructor, importcpp: "client::IntersectionObserverEntry(@)",
    header: "cheerp/clientlib.h".}

proc get_altKey*(this: var KeyboardEvent): bool {.importcpp: "get_altKey",
    header: "cheerp/clientlib.h".}

proc get_char*(this: var KeyboardEvent): ptr String {.importcpp: "get_char",
    header: "cheerp/clientlib.h".}

proc set_char*(this: var KeyboardEvent; a2: String) {.importcpp: "set_char",
    header: "cheerp/clientlib.h".}

proc get_charCode*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_charCode", header: "cheerp/clientlib.h".}

proc get_code*(this: var KeyboardEvent): ptr String {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc get_ctrlKey*(this: var KeyboardEvent): bool {.importcpp: "get_ctrlKey",
    header: "cheerp/clientlib.h".}

proc get_key*(this: var KeyboardEvent): ptr String {.importcpp: "get_key",
    header: "cheerp/clientlib.h".}

proc get_keyCode*(this: var KeyboardEvent): cdouble {.importcpp: "get_keyCode",
    header: "cheerp/clientlib.h".}

proc get_location*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_location", header: "cheerp/clientlib.h".}

proc get_metaKey*(this: var KeyboardEvent): bool {.importcpp: "get_metaKey",
    header: "cheerp/clientlib.h".}

proc get_repeat*(this: var KeyboardEvent): bool {.importcpp: "get_repeat",
    header: "cheerp/clientlib.h".}

proc get_shiftKey*(this: var KeyboardEvent): bool {.importcpp: "get_shiftKey",
    header: "cheerp/clientlib.h".}

proc get_which*(this: var KeyboardEvent): cdouble {.importcpp: "get_which",
    header: "cheerp/clientlib.h".}

proc getModifierState*(this: var KeyboardEvent; keyArg: String): bool {.
    importcpp: "getModifierState", header: "cheerp/clientlib.h".}

proc initKeyboardEvent*(this: var KeyboardEvent; typeArg: String;
                        canBubbleArg: bool; cancelableArg: bool;
                        viewArg: ptr Window; keyArg: String;
                        locationArg: cdouble; modifiersListArg: String;
                        repeat: bool; locale: String) {.
    importcpp: "initKeyboardEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var KeyboardEvent): ptr KeyboardEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var KeyboardEvent; a2: ptr KeyboardEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructKeyboardEvent*(typeArg: String): KeyboardEvent {.constructor,
    importcpp: "client::KeyboardEvent(@)", header: "cheerp/clientlib.h".}

proc constructKeyboardEvent*(typeArg: String;
                             eventInitDict: ptr KeyboardEventInit): KeyboardEvent {.
    constructor, importcpp: "client::KeyboardEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_DOM_KEY_LOCATION_JOYSTICK*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_DOM_KEY_LOCATION_JOYSTICK", header: "cheerp/clientlib.h".}

proc get_DOM_KEY_LOCATION_LEFT*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_DOM_KEY_LOCATION_LEFT", header: "cheerp/clientlib.h".}

proc get_DOM_KEY_LOCATION_MOBILE*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_DOM_KEY_LOCATION_MOBILE", header: "cheerp/clientlib.h".}

proc get_DOM_KEY_LOCATION_NUMPAD*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_DOM_KEY_LOCATION_NUMPAD", header: "cheerp/clientlib.h".}

proc get_DOM_KEY_LOCATION_RIGHT*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_DOM_KEY_LOCATION_RIGHT", header: "cheerp/clientlib.h".}

proc get_DOM_KEY_LOCATION_STANDARD*(this: var KeyboardEvent): cdouble {.
    importcpp: "get_DOM_KEY_LOCATION_STANDARD", header: "cheerp/clientlib.h".}

proc get_label*(this: var ListeningStateChangedEvent): ptr String {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc get_state*(this: var ListeningStateChangedEvent): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ListeningStateChangedEvent): ptr ListeningStateChangedEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ListeningStateChangedEvent;
                    a2: ptr ListeningStateChangedEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructListeningStateChangedEvent*(): ListeningStateChangedEvent {.
    constructor, importcpp: "client::ListeningStateChangedEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_hash*(this: var Location): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var Location; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_host*(this: var Location): ptr String {.importcpp: "get_host",
    header: "cheerp/clientlib.h".}

proc set_host*(this: var Location; a2: String) {.importcpp: "set_host",
    header: "cheerp/clientlib.h".}

proc get_hostname*(this: var Location): ptr String {.importcpp: "get_hostname",
    header: "cheerp/clientlib.h".}

proc set_hostname*(this: var Location; a2: String) {.importcpp: "set_hostname",
    header: "cheerp/clientlib.h".}

proc get_href*(this: var Location): ptr String {.importcpp: "get_href",
    header: "cheerp/clientlib.h".}

proc set_href*(this: var Location; a2: String) {.importcpp: "set_href",
    header: "cheerp/clientlib.h".}

proc get_origin*(this: var Location): ptr String {.importcpp: "get_origin",
    header: "cheerp/clientlib.h".}

proc get_pathname*(this: var Location): ptr String {.importcpp: "get_pathname",
    header: "cheerp/clientlib.h".}

proc set_pathname*(this: var Location; a2: String) {.importcpp: "set_pathname",
    header: "cheerp/clientlib.h".}

proc get_port*(this: var Location): ptr String {.importcpp: "get_port",
    header: "cheerp/clientlib.h".}

proc set_port*(this: var Location; a2: String) {.importcpp: "set_port",
    header: "cheerp/clientlib.h".}

proc get_protocol*(this: var Location): ptr String {.importcpp: "get_protocol",
    header: "cheerp/clientlib.h".}

proc set_protocol*(this: var Location; a2: String) {.importcpp: "set_protocol",
    header: "cheerp/clientlib.h".}

proc get_search*(this: var Location): ptr String {.importcpp: "get_search",
    header: "cheerp/clientlib.h".}

proc set_search*(this: var Location; a2: String) {.importcpp: "set_search",
    header: "cheerp/clientlib.h".}

proc assign*(this: var Location; url: String) {.importcpp: "assign",
    header: "cheerp/clientlib.h".}

proc reload*(this: var Location) {.importcpp: "reload",
                                   header: "cheerp/clientlib.h".}

proc reload*(this: var Location; forcedReload: bool) {.importcpp: "reload",
    header: "cheerp/clientlib.h".}

proc replace*(this: var Location; url: String) {.importcpp: "replace",
    header: "cheerp/clientlib.h".}

proc toString*(this: var Location): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Location): ptr Location {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Location; a2: ptr Location) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructLocation*(): Location {.constructor,
                                      importcpp: "client::Location(@)",
                                      header: "cheerp/clientlib.h".}

proc get_id*(this: var MSAssertion): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var MSAssertion): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSAssertion): ptr MSAssertion {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSAssertion; a2: ptr MSAssertion) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSAssertion*(): MSAssertion {.constructor,
    importcpp: "client::MSAssertion(@)", header: "cheerp/clientlib.h".}

proc append*(this: var MSBlobBuilder; data: ptr Object) {.importcpp: "append",
    header: "cheerp/clientlib.h".}

proc append*(this: var MSBlobBuilder; data: ptr Object; endings: String) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc getBlob*(this: var MSBlobBuilder): ptr Blob {.importcpp: "getBlob",
    header: "cheerp/clientlib.h".}

proc getBlob*(this: var MSBlobBuilder; contentType: String): ptr Blob {.
    importcpp: "getBlob", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSBlobBuilder): ptr MSBlobBuilder {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSBlobBuilder; a2: ptr MSBlobBuilder) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSBlobBuilder*(): MSBlobBuilder {.constructor,
    importcpp: "client::MSBlobBuilder(@)", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var MSCredentials; challenge: String): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var MSCredentials; challenge: String;
                   filter: ptr MSCredentialFilter): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var MSCredentials; challenge: String;
                   filter: ptr MSCredentialFilter;
                   params: ptr MSSignatureParameters): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var MSCredentials; accountInfo: ptr MSAccountInfo;
                     params: ptr Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var MSCredentials; accountInfo: ptr MSAccountInfo;
                     params: ptr Array; challenge: String): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSCredentials): ptr MSCredentials {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSCredentials; a2: ptr MSCredentials) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSCredentials*(): MSCredentials {.constructor,
    importcpp: "client::MSCredentials(@)", header: "cheerp/clientlib.h".}

proc get_maxFr*(this: var MSDCCEvent): cdouble {.importcpp: "get_maxFr",
    header: "cheerp/clientlib.h".}

proc get_maxFs*(this: var MSDCCEvent): cdouble {.importcpp: "get_maxFs",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSDCCEvent): ptr MSDCCEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSDCCEvent; a2: ptr MSDCCEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSDCCEvent*(`type`: String; eventInitDict: ptr MSDCCEventInit): MSDCCEvent {.
    constructor, importcpp: "client::MSDCCEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_sources*(this: var MSDSHEvent): ptr Array {.importcpp: "get_sources",
    header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var MSDSHEvent): cdouble {.importcpp: "get_timestamp",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSDSHEvent): ptr MSDSHEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSDSHEvent; a2: ptr MSDSHEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSDSHEvent*(`type`: String; eventInitDict: ptr MSDSHEventInit): MSDSHEvent {.
    constructor, importcpp: "client::MSDSHEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_algorithm*(this: var MSFIDOCredentialAssertion): ptr String {.
    importcpp: "get_algorithm", header: "cheerp/clientlib.h".}

proc get_publicKey*(this: var MSFIDOCredentialAssertion): ptr String {.
    importcpp: "get_publicKey", header: "cheerp/clientlib.h".}

proc get_transportHints*(this: var MSFIDOCredentialAssertion): ptr Array {.
    importcpp: "get_transportHints", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSFIDOCredentialAssertion): ptr MSFIDOCredentialAssertion {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSFIDOCredentialAssertion;
                    a2: ptr MSFIDOCredentialAssertion) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSFIDOCredentialAssertion*(): MSFIDOCredentialAssertion {.
    constructor, importcpp: "client::MSFIDOCredentialAssertion(@)",
    header: "cheerp/clientlib.h".}

proc get_authnrData*(this: var MSFIDOSignature): ptr String {.
    importcpp: "get_authnrData", header: "cheerp/clientlib.h".}

proc get_clientData*(this: var MSFIDOSignature): ptr String {.
    importcpp: "get_clientData", header: "cheerp/clientlib.h".}

proc get_signature*(this: var MSFIDOSignature): ptr String {.
    importcpp: "get_signature", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSFIDOSignature): ptr MSFIDOSignature {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSFIDOSignature; a2: ptr MSFIDOSignature) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSFIDOSignature*(): MSFIDOSignature {.constructor,
    importcpp: "client::MSFIDOSignature(@)", header: "cheerp/clientlib.h".}

proc get_signature*(this: var MSFIDOSignatureAssertion): ptr MSFIDOSignature {.
    importcpp: "get_signature", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSFIDOSignatureAssertion): ptr MSFIDOSignatureAssertion {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSFIDOSignatureAssertion;
                    a2: ptr MSFIDOSignatureAssertion) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSFIDOSignatureAssertion*(): MSFIDOSignatureAssertion {.
    constructor, importcpp: "client::MSFIDOSignatureAssertion(@)",
    header: "cheerp/clientlib.h".}

proc msSaveBlob*(this: var MSFileSaver; blob: ptr Object): bool {.
    importcpp: "msSaveBlob", header: "cheerp/clientlib.h".}

proc msSaveBlob*(this: var MSFileSaver; blob: ptr Object; defaultName: String): bool {.
    importcpp: "msSaveBlob", header: "cheerp/clientlib.h".}

proc msSaveOrOpenBlob*(this: var MSFileSaver; blob: ptr Object): bool {.
    importcpp: "msSaveOrOpenBlob", header: "cheerp/clientlib.h".}

proc msSaveOrOpenBlob*(this: var MSFileSaver; blob: ptr Object;
                       defaultName: String): bool {.
    importcpp: "msSaveOrOpenBlob", header: "cheerp/clientlib.h".}

proc get_target*(this: var MSGesture): ptr Element {.importcpp: "get_target",
    header: "cheerp/clientlib.h".}

proc set_target*(this: var MSGesture; a2: ptr Element) {.
    importcpp: "set_target", header: "cheerp/clientlib.h".}

proc addPointer*(this: var MSGesture; pointerId: cdouble) {.
    importcpp: "addPointer", header: "cheerp/clientlib.h".}

proc stop*(this: var MSGesture) {.importcpp: "stop",
                                  header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSGesture): ptr MSGesture {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSGesture; a2: ptr MSGesture) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSGesture*(): MSGesture {.constructor,
                                        importcpp: "client::MSGesture(@)",
                                        header: "cheerp/clientlib.h".}

proc get_clientX*(this: var MSGestureEvent): cdouble {.importcpp: "get_clientX",
    header: "cheerp/clientlib.h".}

proc get_clientY*(this: var MSGestureEvent): cdouble {.importcpp: "get_clientY",
    header: "cheerp/clientlib.h".}

proc get_expansion*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_expansion", header: "cheerp/clientlib.h".}

proc get_hwTimestamp*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_hwTimestamp", header: "cheerp/clientlib.h".}

proc get_offsetX*(this: var MSGestureEvent): cdouble {.importcpp: "get_offsetX",
    header: "cheerp/clientlib.h".}

proc get_offsetY*(this: var MSGestureEvent): cdouble {.importcpp: "get_offsetY",
    header: "cheerp/clientlib.h".}

proc get_rotation*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_rotation", header: "cheerp/clientlib.h".}

proc get_scale*(this: var MSGestureEvent): cdouble {.importcpp: "get_scale",
    header: "cheerp/clientlib.h".}

proc get_screenX*(this: var MSGestureEvent): cdouble {.importcpp: "get_screenX",
    header: "cheerp/clientlib.h".}

proc get_screenY*(this: var MSGestureEvent): cdouble {.importcpp: "get_screenY",
    header: "cheerp/clientlib.h".}

proc get_translationX*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_translationX", header: "cheerp/clientlib.h".}

proc get_translationY*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_translationY", header: "cheerp/clientlib.h".}

proc get_velocityAngular*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_velocityAngular", header: "cheerp/clientlib.h".}

proc get_velocityExpansion*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_velocityExpansion", header: "cheerp/clientlib.h".}

proc get_velocityX*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_velocityX", header: "cheerp/clientlib.h".}

proc get_velocityY*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_velocityY", header: "cheerp/clientlib.h".}

proc initGestureEvent*(this: var MSGestureEvent; typeArg: String;
                       canBubbleArg: bool; cancelableArg: bool;
                       viewArg: ptr Window; detailArg: cdouble;
                       screenXArg: cdouble; screenYArg: cdouble;
                       clientXArg: cdouble; clientYArg: cdouble;
                       offsetXArg: cdouble; offsetYArg: cdouble;
                       translationXArg: cdouble; translationYArg: cdouble;
                       scaleArg: cdouble; expansionArg: cdouble;
                       rotationArg: cdouble; velocityXArg: cdouble;
                       velocityYArg: cdouble; velocityExpansionArg: cdouble;
                       velocityAngularArg: cdouble; hwTimestampArg: cdouble) {.
    importcpp: "initGestureEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSGestureEvent): ptr MSGestureEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSGestureEvent; a2: ptr MSGestureEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSGestureEvent*(): MSGestureEvent {.constructor,
    importcpp: "client::MSGestureEvent(@)", header: "cheerp/clientlib.h".}

proc get_MSGESTURE_FLAG_BEGIN*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_MSGESTURE_FLAG_BEGIN", header: "cheerp/clientlib.h".}

proc get_MSGESTURE_FLAG_CANCEL*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_MSGESTURE_FLAG_CANCEL", header: "cheerp/clientlib.h".}

proc get_MSGESTURE_FLAG_END*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_MSGESTURE_FLAG_END", header: "cheerp/clientlib.h".}

proc get_MSGESTURE_FLAG_INERTIA*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_MSGESTURE_FLAG_INERTIA", header: "cheerp/clientlib.h".}

proc get_MSGESTURE_FLAG_NONE*(this: var MSGestureEvent): cdouble {.
    importcpp: "get_MSGESTURE_FLAG_NONE", header: "cheerp/clientlib.h".}

proc get_constrictionActive*(this: var MSGraphicsTrust): bool {.
    importcpp: "get_constrictionActive", header: "cheerp/clientlib.h".}

proc get_status*(this: var MSGraphicsTrust): ptr String {.
    importcpp: "get_status", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSGraphicsTrust): ptr MSGraphicsTrust {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSGraphicsTrust; a2: ptr MSGraphicsTrust) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSGraphicsTrust*(): MSGraphicsTrust {.constructor,
    importcpp: "client::MSGraphicsTrust(@)", header: "cheerp/clientlib.h".}

proc get_MSCandidateWindowHide*(this: var MSInputMethodContextEventMap): ptr Event {.
    importcpp: "get_MSCandidateWindowHide", header: "cheerp/clientlib.h".}

proc set_MSCandidateWindowHide*(this: var MSInputMethodContextEventMap;
                                a2: ptr Event) {.
    importcpp: "set_MSCandidateWindowHide", header: "cheerp/clientlib.h".}

proc get_MSCandidateWindowShow*(this: var MSInputMethodContextEventMap): ptr Event {.
    importcpp: "get_MSCandidateWindowShow", header: "cheerp/clientlib.h".}

proc set_MSCandidateWindowShow*(this: var MSInputMethodContextEventMap;
                                a2: ptr Event) {.
    importcpp: "set_MSCandidateWindowShow", header: "cheerp/clientlib.h".}

proc get_MSCandidateWindowUpdate*(this: var MSInputMethodContextEventMap): ptr Event {.
    importcpp: "get_MSCandidateWindowUpdate", header: "cheerp/clientlib.h".}

proc set_MSCandidateWindowUpdate*(this: var MSInputMethodContextEventMap;
                                  a2: ptr Event) {.
    importcpp: "set_MSCandidateWindowUpdate", header: "cheerp/clientlib.h".}

proc get_compositionEndOffset*(this: var MSInputMethodContext): cdouble {.
    importcpp: "get_compositionEndOffset", header: "cheerp/clientlib.h".}

proc get_compositionStartOffset*(this: var MSInputMethodContext): cdouble {.
    importcpp: "get_compositionStartOffset", header: "cheerp/clientlib.h".}

proc get_oncandidatewindowhide*(this: var MSInputMethodContext): ptr EventListener {.
    importcpp: "get_oncandidatewindowhide", header: "cheerp/clientlib.h".}

proc set_oncandidatewindowhide*(this: var MSInputMethodContext;
                                a2: ptr EventListener) {.
    importcpp: "set_oncandidatewindowhide", header: "cheerp/clientlib.h".}

proc get_oncandidatewindowshow*(this: var MSInputMethodContext): ptr EventListener {.
    importcpp: "get_oncandidatewindowshow", header: "cheerp/clientlib.h".}

proc set_oncandidatewindowshow*(this: var MSInputMethodContext;
                                a2: ptr EventListener) {.
    importcpp: "set_oncandidatewindowshow", header: "cheerp/clientlib.h".}

proc get_oncandidatewindowupdate*(this: var MSInputMethodContext): ptr EventListener {.
    importcpp: "get_oncandidatewindowupdate", header: "cheerp/clientlib.h".}

proc set_oncandidatewindowupdate*(this: var MSInputMethodContext;
                                  a2: ptr EventListener) {.
    importcpp: "set_oncandidatewindowupdate", header: "cheerp/clientlib.h".}

proc get_target*(this: var MSInputMethodContext): ptr HTMLElement {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc getCandidateWindowClientRect*(this: var MSInputMethodContext): ptr ClientRect {.
    importcpp: "getCandidateWindowClientRect", header: "cheerp/clientlib.h".}

proc getCompositionAlternatives*(this: var MSInputMethodContext): ptr Array {.
    importcpp: "getCompositionAlternatives", header: "cheerp/clientlib.h".}

proc hasComposition*(this: var MSInputMethodContext): bool {.
    importcpp: "hasComposition", header: "cheerp/clientlib.h".}

proc isCandidateWindowVisible*(this: var MSInputMethodContext): bool {.
    importcpp: "isCandidateWindowVisible", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSInputMethodContext; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSInputMethodContext; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSInputMethodContext; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSInputMethodContext; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSInputMethodContext; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSInputMethodContext; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSInputMethodContext; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSInputMethodContext; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSInputMethodContext; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSInputMethodContext; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSInputMethodContext): ptr MSInputMethodContext {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSInputMethodContext; a2: ptr MSInputMethodContext) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSInputMethodContext*(): MSInputMethodContext {.constructor,
    importcpp: "client::MSInputMethodContext(@)", header: "cheerp/clientlib.h".}

proc get_code*(this: var MSMediaKeyError): cdouble {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc get_systemCode*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_systemCode", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSMediaKeyError): ptr MSMediaKeyError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSMediaKeyError; a2: ptr MSMediaKeyError) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSMediaKeyError*(): MSMediaKeyError {.constructor,
    importcpp: "client::MSMediaKeyError(@)", header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_KEYERR_CLIENT*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_MS_MEDIA_KEYERR_CLIENT", header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_KEYERR_DOMAIN*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_MS_MEDIA_KEYERR_DOMAIN", header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_KEYERR_HARDWARECHANGE*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_MS_MEDIA_KEYERR_HARDWARECHANGE",
    header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_KEYERR_OUTPUT*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_MS_MEDIA_KEYERR_OUTPUT", header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_KEYERR_SERVICE*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_MS_MEDIA_KEYERR_SERVICE", header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_KEYERR_UNKNOWN*(this: var MSMediaKeyError): cdouble {.
    importcpp: "get_MS_MEDIA_KEYERR_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_destinationURL*(this: var MSMediaKeyMessageEvent): ptr String {.
    importcpp: "get_destinationURL", header: "cheerp/clientlib.h".}

proc get_message*(this: var MSMediaKeyMessageEvent): ptr Uint8Array {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSMediaKeyMessageEvent): ptr MSMediaKeyMessageEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSMediaKeyMessageEvent;
                    a2: ptr MSMediaKeyMessageEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSMediaKeyMessageEvent*(): MSMediaKeyMessageEvent {.constructor,
    importcpp: "client::MSMediaKeyMessageEvent(@)", header: "cheerp/clientlib.h".}

proc get_initData*(this: var MSMediaKeyNeededEvent): ptr Uint8Array {.
    importcpp: "get_initData", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSMediaKeyNeededEvent): ptr MSMediaKeyNeededEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSMediaKeyNeededEvent;
                    a2: ptr MSMediaKeyNeededEvent) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructMSMediaKeyNeededEvent*(): MSMediaKeyNeededEvent {.constructor,
    importcpp: "client::MSMediaKeyNeededEvent(@)", header: "cheerp/clientlib.h".}

proc get_error*(this: var MSMediaKeySession): ptr MSMediaKeyError {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_keySystem*(this: var MSMediaKeySession): ptr String {.
    importcpp: "get_keySystem", header: "cheerp/clientlib.h".}

proc get_sessionId*(this: var MSMediaKeySession): ptr String {.
    importcpp: "get_sessionId", header: "cheerp/clientlib.h".}

proc close*(this: var MSMediaKeySession) {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc update*(this: var MSMediaKeySession; key: ptr Uint8Array) {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSMediaKeySession): ptr MSMediaKeySession {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSMediaKeySession; a2: ptr MSMediaKeySession) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSMediaKeySession*(): MSMediaKeySession {.constructor,
    importcpp: "client::MSMediaKeySession(@)", header: "cheerp/clientlib.h".}

proc get_keySystem*(this: var MSMediaKeys): ptr String {.
    importcpp: "get_keySystem", header: "cheerp/clientlib.h".}

proc createSession*(this: var MSMediaKeys; `type`: String;
                    initData: ptr Uint8Array): ptr MSMediaKeySession {.
    importcpp: "createSession", header: "cheerp/clientlib.h".}

proc createSession*(this: var MSMediaKeys; `type`: String;
                    initData: ptr Uint8Array; cdmData: ptr Uint8Array): ptr MSMediaKeySession {.
    importcpp: "createSession", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSMediaKeys): ptr MSMediaKeys {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSMediaKeys; a2: ptr MSMediaKeys) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSMediaKeys*(keySystem: String): MSMediaKeys {.constructor,
    importcpp: "client::MSMediaKeys(@)", header: "cheerp/clientlib.h".}

proc isTypeSupported*(keySystem: String): bool {.
    importcpp: "client::MSMediaKeys::isTypeSupported(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc isTypeSupported*(keySystem: String; `type`: String): bool {.
    importcpp: "client::MSMediaKeys::isTypeSupported(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc isTypeSupportedWithFeatures*(keySystem: String): ptr String {.
    importcpp: "client::MSMediaKeys::isTypeSupportedWithFeatures(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc isTypeSupportedWithFeatures*(keySystem: String; `type`: String): ptr String {.
    importcpp: "client::MSMediaKeys::isTypeSupportedWithFeatures(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc confirmSiteSpecificTrackingException*(this: var MSNavigatorDoNotTrack;
    args: ptr ConfirmSiteSpecificExceptionsInformation): bool {.
    importcpp: "confirmSiteSpecificTrackingException",
    header: "cheerp/clientlib.h".}

proc confirmWebWideTrackingException*(this: var MSNavigatorDoNotTrack;
                                      args: ptr ExceptionInformation): bool {.
    importcpp: "confirmWebWideTrackingException", header: "cheerp/clientlib.h".}

proc removeSiteSpecificTrackingException*(this: var MSNavigatorDoNotTrack;
    args: ptr ExceptionInformation) {.importcpp: "removeSiteSpecificTrackingException",
                                      header: "cheerp/clientlib.h".}

proc removeWebWideTrackingException*(this: var MSNavigatorDoNotTrack;
                                     args: ptr ExceptionInformation) {.
    importcpp: "removeWebWideTrackingException", header: "cheerp/clientlib.h".}

proc storeSiteSpecificTrackingException*(this: var MSNavigatorDoNotTrack;
    args: ptr StoreSiteSpecificExceptionsInformation) {.
    importcpp: "storeSiteSpecificTrackingException",
    header: "cheerp/clientlib.h".}

proc storeWebWideTrackingException*(this: var MSNavigatorDoNotTrack;
                                    args: ptr StoreExceptionsInformation) {.
    importcpp: "storeWebWideTrackingException", header: "cheerp/clientlib.h".}

proc get_height*(this: var MSPointerEvent): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_hwTimestamp*(this: var MSPointerEvent): cdouble {.
    importcpp: "get_hwTimestamp", header: "cheerp/clientlib.h".}

proc get_isPrimary*(this: var MSPointerEvent): bool {.
    importcpp: "get_isPrimary", header: "cheerp/clientlib.h".}

proc get_pointerId*(this: var MSPointerEvent): cdouble {.
    importcpp: "get_pointerId", header: "cheerp/clientlib.h".}

proc get_pressure*(this: var MSPointerEvent): cdouble {.
    importcpp: "get_pressure", header: "cheerp/clientlib.h".}

proc get_rotation*(this: var MSPointerEvent): cdouble {.
    importcpp: "get_rotation", header: "cheerp/clientlib.h".}

proc get_tiltX*(this: var MSPointerEvent): cdouble {.importcpp: "get_tiltX",
    header: "cheerp/clientlib.h".}

proc get_tiltY*(this: var MSPointerEvent): cdouble {.importcpp: "get_tiltY",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var MSPointerEvent): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc getCurrentPoint*(this: var MSPointerEvent; element: ptr Element) {.
    importcpp: "getCurrentPoint", header: "cheerp/clientlib.h".}

proc getIntermediatePoints*(this: var MSPointerEvent; element: ptr Element) {.
    importcpp: "getIntermediatePoints", header: "cheerp/clientlib.h".}

proc initPointerEvent*(this: var MSPointerEvent; typeArg: String;
                       canBubbleArg: bool; cancelableArg: bool;
                       viewArg: ptr Window; detailArg: cdouble;
                       screenXArg: cdouble; screenYArg: cdouble;
                       clientXArg: cdouble; clientYArg: cdouble;
                       ctrlKeyArg: bool; altKeyArg: bool; shiftKeyArg: bool;
                       metaKeyArg: bool; buttonArg: cdouble;
                       relatedTargetArg: ptr EventTarget; offsetXArg: cdouble;
                       offsetYArg: cdouble; widthArg: cdouble;
                       heightArg: cdouble; pressure: cdouble; rotation: cdouble;
                       tiltX: cdouble; tiltY: cdouble; pointerIdArg: cdouble;
                       pointerType: ptr Object; hwTimestampArg: cdouble;
                       isPrimary: bool) {.importcpp: "initPointerEvent",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSPointerEvent): ptr MSPointerEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSPointerEvent; a2: ptr MSPointerEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSPointerEvent*(typeArg: String): MSPointerEvent {.constructor,
    importcpp: "client::MSPointerEvent(@)", header: "cheerp/clientlib.h".}

proc constructMSPointerEvent*(typeArg: String;
                              eventInitDict: ptr PointerEventInit): MSPointerEvent {.
    constructor, importcpp: "client::MSPointerEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var MSStream): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc msClose*(this: var MSStream) {.importcpp: "msClose",
                                    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSStream): ptr MSStream {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSStream; a2: ptr MSStream) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSStream*(): MSStream {.constructor,
                                      importcpp: "client::MSStream(@)",
                                      header: "cheerp/clientlib.h".}

proc get_abort*(this: var MSStreamReaderEventMap): ptr UIEvent {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var MSStreamReaderEventMap; a2: ptr UIEvent) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_error*(this: var MSStreamReaderEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var MSStreamReaderEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_load*(this: var MSStreamReaderEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var MSStreamReaderEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_loadend*(this: var MSStreamReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_loadend", header: "cheerp/clientlib.h".}

proc set_loadend*(this: var MSStreamReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_loadend", header: "cheerp/clientlib.h".}

proc get_loadstart*(this: var MSStreamReaderEventMap): ptr Event {.
    importcpp: "get_loadstart", header: "cheerp/clientlib.h".}

proc set_loadstart*(this: var MSStreamReaderEventMap; a2: ptr Event) {.
    importcpp: "set_loadstart", header: "cheerp/clientlib.h".}

proc get_progress*(this: var MSStreamReaderEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var MSStreamReaderEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_error*(this: var MSStreamReader): ptr DOMError {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var MSStreamReader): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var MSStreamReader; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var MSStreamReader): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var MSStreamReader; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onload*(this: var MSStreamReader): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var MSStreamReader; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onloadend*(this: var MSStreamReader): ptr EventListener {.
    importcpp: "get_onloadend", header: "cheerp/clientlib.h".}

proc set_onloadend*(this: var MSStreamReader; a2: ptr EventListener) {.
    importcpp: "set_onloadend", header: "cheerp/clientlib.h".}

proc get_onloadstart*(this: var MSStreamReader): ptr EventListener {.
    importcpp: "get_onloadstart", header: "cheerp/clientlib.h".}

proc set_onloadstart*(this: var MSStreamReader; a2: ptr EventListener) {.
    importcpp: "set_onloadstart", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var MSStreamReader): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var MSStreamReader; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var MSStreamReader): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc abort*(this: var MSStreamReader) {.importcpp: "abort",
                                        header: "cheerp/clientlib.h".}

proc readAsArrayBuffer*(this: var MSStreamReader; stream: ptr MSStream) {.
    importcpp: "readAsArrayBuffer", header: "cheerp/clientlib.h".}

proc readAsArrayBuffer*(this: var MSStreamReader; stream: ptr MSStream;
                        size: cdouble) {.importcpp: "readAsArrayBuffer",
    header: "cheerp/clientlib.h".}

proc readAsBinaryString*(this: var MSStreamReader; stream: ptr MSStream) {.
    importcpp: "readAsBinaryString", header: "cheerp/clientlib.h".}

proc readAsBinaryString*(this: var MSStreamReader; stream: ptr MSStream;
                         size: cdouble) {.importcpp: "readAsBinaryString",
    header: "cheerp/clientlib.h".}

proc readAsBlob*(this: var MSStreamReader; stream: ptr MSStream) {.
    importcpp: "readAsBlob", header: "cheerp/clientlib.h".}

proc readAsBlob*(this: var MSStreamReader; stream: ptr MSStream; size: cdouble) {.
    importcpp: "readAsBlob", header: "cheerp/clientlib.h".}

proc readAsDataURL*(this: var MSStreamReader; stream: ptr MSStream) {.
    importcpp: "readAsDataURL", header: "cheerp/clientlib.h".}

proc readAsDataURL*(this: var MSStreamReader; stream: ptr MSStream;
                    size: cdouble) {.importcpp: "readAsDataURL",
                                     header: "cheerp/clientlib.h".}

proc readAsText*(this: var MSStreamReader; stream: ptr MSStream) {.
    importcpp: "readAsText", header: "cheerp/clientlib.h".}

proc readAsText*(this: var MSStreamReader; stream: ptr MSStream;
                 encoding: String) {.importcpp: "readAsText",
                                     header: "cheerp/clientlib.h".}

proc readAsText*(this: var MSStreamReader; stream: ptr MSStream;
                 encoding: String; size: cdouble) {.importcpp: "readAsText",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSStreamReader; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSStreamReader; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSStreamReader; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSStreamReader; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MSStreamReader; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSStreamReader; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSStreamReader; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSStreamReader; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSStreamReader; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MSStreamReader; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MSStreamReader): ptr MSStreamReader {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MSStreamReader; a2: ptr MSStreamReader) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMSStreamReader*(): MSStreamReader {.constructor,
    importcpp: "client::MSStreamReader(@)", header: "cheerp/clientlib.h".}

proc get_DONE*(this: var MSStreamReader): cdouble {.importcpp: "get_DONE",
    header: "cheerp/clientlib.h".}

proc get_EMPTY*(this: var MSStreamReader): cdouble {.importcpp: "get_EMPTY",
    header: "cheerp/clientlib.h".}

proc get_LOADING*(this: var MSStreamReader): cdouble {.importcpp: "get_LOADING",
    header: "cheerp/clientlib.h".}

proc get_deviceId*(this: var MediaDeviceInfo): ptr String {.
    importcpp: "get_deviceId", header: "cheerp/clientlib.h".}

proc get_groupId*(this: var MediaDeviceInfo): ptr String {.
    importcpp: "get_groupId", header: "cheerp/clientlib.h".}

proc get_kind*(this: var MediaDeviceInfo): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var MediaDeviceInfo): ptr String {.importcpp: "get_label",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaDeviceInfo): ptr MediaDeviceInfo {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaDeviceInfo; a2: ptr MediaDeviceInfo) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaDeviceInfo*(): MediaDeviceInfo {.constructor,
    importcpp: "client::MediaDeviceInfo(@)", header: "cheerp/clientlib.h".}

proc get_devicechange*(this: var MediaDevicesEventMap): ptr Event {.
    importcpp: "get_devicechange", header: "cheerp/clientlib.h".}

proc set_devicechange*(this: var MediaDevicesEventMap; a2: ptr Event) {.
    importcpp: "set_devicechange", header: "cheerp/clientlib.h".}

proc get_ondevicechange*(this: var MediaDevices): ptr EventListener {.
    importcpp: "get_ondevicechange", header: "cheerp/clientlib.h".}

proc set_ondevicechange*(this: var MediaDevices; a2: ptr EventListener) {.
    importcpp: "set_ondevicechange", header: "cheerp/clientlib.h".}

proc enumerateDevices*(this: var MediaDevices): ptr Promise {.
    importcpp: "enumerateDevices", header: "cheerp/clientlib.h".}

proc getSupportedConstraints*(this: var MediaDevices): ptr MediaTrackSupportedConstraints {.
    importcpp: "getSupportedConstraints", header: "cheerp/clientlib.h".}

proc getUserMedia*(this: var MediaDevices;
                   constraints: ptr MediaStreamConstraints): ptr Promise {.
    importcpp: "getUserMedia", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaDevices; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaDevices; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaDevices; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaDevices; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaDevices; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaDevices; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaDevices; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaDevices; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaDevices; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaDevices; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaDevices): ptr MediaDevices {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaDevices; a2: ptr MediaDevices) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaDevices*(): MediaDevices {.constructor,
    importcpp: "client::MediaDevices(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaElementAudioSourceNode): ptr MediaElementAudioSourceNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaElementAudioSourceNode;
                    a2: ptr MediaElementAudioSourceNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaElementAudioSourceNode*(): MediaElementAudioSourceNode {.
    constructor, importcpp: "client::MediaElementAudioSourceNode(@)",
    header: "cheerp/clientlib.h".}

proc get_initData*(this: var MediaEncryptedEvent): ptr ArrayBuffer {.
    importcpp: "get_initData", header: "cheerp/clientlib.h".}

proc get_initDataType*(this: var MediaEncryptedEvent): ptr String {.
    importcpp: "get_initDataType", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaEncryptedEvent): ptr MediaEncryptedEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaEncryptedEvent; a2: ptr MediaEncryptedEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaEncryptedEvent*(`type`: String): MediaEncryptedEvent {.
    constructor, importcpp: "client::MediaEncryptedEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructMediaEncryptedEvent*(`type`: String;
                                   eventInitDict: ptr MediaEncryptedEventInit): MediaEncryptedEvent {.
    constructor, importcpp: "client::MediaEncryptedEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_code*(this: var MediaError): cdouble {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var MediaError): ptr String {.importcpp: "get_message",
    header: "cheerp/clientlib.h".}

proc get_msExtendedCode*(this: var MediaError): cdouble {.
    importcpp: "get_msExtendedCode", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaError): ptr MediaError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaError; a2: ptr MediaError) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaError*(): MediaError {.constructor,
    importcpp: "client::MediaError(@)", header: "cheerp/clientlib.h".}

proc get_MEDIA_ERR_ABORTED*(this: var MediaError): cdouble {.
    importcpp: "get_MEDIA_ERR_ABORTED", header: "cheerp/clientlib.h".}

proc get_MEDIA_ERR_DECODE*(this: var MediaError): cdouble {.
    importcpp: "get_MEDIA_ERR_DECODE", header: "cheerp/clientlib.h".}

proc get_MEDIA_ERR_NETWORK*(this: var MediaError): cdouble {.
    importcpp: "get_MEDIA_ERR_NETWORK", header: "cheerp/clientlib.h".}

proc get_MEDIA_ERR_SRC_NOT_SUPPORTED*(this: var MediaError): cdouble {.
    importcpp: "get_MEDIA_ERR_SRC_NOT_SUPPORTED", header: "cheerp/clientlib.h".}

proc get_MS_MEDIA_ERR_ENCRYPTED*(this: var MediaError): cdouble {.
    importcpp: "get_MS_MEDIA_ERR_ENCRYPTED", header: "cheerp/clientlib.h".}

proc get_message*(this: var MediaKeyMessageEvent): ptr ArrayBuffer {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc get_messageType*(this: var MediaKeyMessageEvent): ptr String {.
    importcpp: "get_messageType", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaKeyMessageEvent): ptr MediaKeyMessageEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaKeyMessageEvent; a2: ptr MediaKeyMessageEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaKeyMessageEvent*(`type`: String): MediaKeyMessageEvent {.
    constructor, importcpp: "client::MediaKeyMessageEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructMediaKeyMessageEvent*(`type`: String;
                                    eventInitDict: ptr MediaKeyMessageEventInit): MediaKeyMessageEvent {.
    constructor, importcpp: "client::MediaKeyMessageEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_closed*(this: var MediaKeySession): ptr Promise {.
    importcpp: "get_closed", header: "cheerp/clientlib.h".}

proc get_expiration*(this: var MediaKeySession): cdouble {.
    importcpp: "get_expiration", header: "cheerp/clientlib.h".}

proc get_keyStatuses*(this: var MediaKeySession): ptr MediaKeyStatusMap {.
    importcpp: "get_keyStatuses", header: "cheerp/clientlib.h".}

proc get_sessionId*(this: var MediaKeySession): ptr String {.
    importcpp: "get_sessionId", header: "cheerp/clientlib.h".}

proc close*(this: var MediaKeySession): ptr Promise {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Int8Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Int16Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Int32Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Uint8Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Uint16Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Uint32Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Uint8ClampedArray): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Float32Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr Float64Array): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr DataView): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc generateRequest*(this: var MediaKeySession; initDataType: String;
                      initData: ptr ArrayBuffer): ptr Promise {.
    importcpp: "generateRequest", header: "cheerp/clientlib.h".}

proc load*(this: var MediaKeySession; sessionId: String): ptr Promise {.
    importcpp: "load", header: "cheerp/clientlib.h".}

proc remove*(this: var MediaKeySession): ptr Promise {.importcpp: "remove",
    header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Int8Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Int16Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Int32Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Uint8Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Uint16Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Uint32Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Uint8ClampedArray): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Float32Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr Float64Array): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr DataView): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc update*(this: var MediaKeySession; response: ptr ArrayBuffer): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaKeySession): ptr MediaKeySession {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaKeySession; a2: ptr MediaKeySession) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaKeySession*(): MediaKeySession {.constructor,
    importcpp: "client::MediaKeySession(@)", header: "cheerp/clientlib.h".}

proc get_size*(this: var MediaKeyStatusMap): cdouble {.importcpp: "get_size",
    header: "cheerp/clientlib.h".}

proc forEach*(this: var MediaKeyStatusMap; callback: ptr Function) {.
    importcpp: "forEach", header: "cheerp/clientlib.h".}

proc forEach*(this: var MediaKeyStatusMap; callback: ptr Function;
              thisArg: ptr Object) {.importcpp: "forEach",
                                     header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Int8Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Int16Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Int32Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Uint8Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Uint16Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Uint32Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Uint8ClampedArray): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Float32Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr Float64Array): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr DataView): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc get*(this: var MediaKeyStatusMap; keyId: ptr ArrayBuffer): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Int8Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Int16Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Int32Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Uint8Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Uint16Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Uint32Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Uint8ClampedArray): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Float32Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr Float64Array): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr DataView): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc has*(this: var MediaKeyStatusMap; keyId: ptr ArrayBuffer): bool {.
    importcpp: "has", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaKeyStatusMap): ptr MediaKeyStatusMap {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaKeyStatusMap; a2: ptr MediaKeyStatusMap) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaKeyStatusMap*(): MediaKeyStatusMap {.constructor,
    importcpp: "client::MediaKeyStatusMap(@)", header: "cheerp/clientlib.h".}

proc get_keySystem*(this: var MediaKeySystemAccess): ptr String {.
    importcpp: "get_keySystem", header: "cheerp/clientlib.h".}

proc createMediaKeys*(this: var MediaKeySystemAccess): ptr Promise {.
    importcpp: "createMediaKeys", header: "cheerp/clientlib.h".}

proc getConfiguration*(this: var MediaKeySystemAccess): ptr MediaKeySystemConfiguration {.
    importcpp: "getConfiguration", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaKeySystemAccess): ptr MediaKeySystemAccess {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaKeySystemAccess; a2: ptr MediaKeySystemAccess) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaKeySystemAccess*(): MediaKeySystemAccess {.constructor,
    importcpp: "client::MediaKeySystemAccess(@)", header: "cheerp/clientlib.h".}

proc createSession*(this: var MediaKeys): ptr MediaKeySession {.
    importcpp: "createSession", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys; serverCertificate: ptr Int8Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Int16Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Int32Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Uint8Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Uint16Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Uint32Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Uint8ClampedArray): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Float32Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr Float64Array): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys; serverCertificate: ptr DataView): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc setServerCertificate*(this: var MediaKeys;
                           serverCertificate: ptr ArrayBuffer): ptr Promise {.
    importcpp: "setServerCertificate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaKeys): ptr MediaKeys {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaKeys; a2: ptr MediaKeys) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaKeys*(): MediaKeys {.constructor,
                                        importcpp: "client::MediaKeys(@)",
                                        header: "cheerp/clientlib.h".}

proc get_length*(this: var MediaList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_mediaText*(this: var MediaList): ptr String {.
    importcpp: "get_mediaText", header: "cheerp/clientlib.h".}

proc set_mediaText*(this: var MediaList; a2: String) {.
    importcpp: "set_mediaText", header: "cheerp/clientlib.h".}

proc appendMedium*(this: var MediaList; medium: String) {.
    importcpp: "appendMedium", header: "cheerp/clientlib.h".}

proc deleteMedium*(this: var MediaList; medium: String) {.
    importcpp: "deleteMedium", header: "cheerp/clientlib.h".}

proc item*(this: var MediaList; index: cdouble): ptr String {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc toString*(this: var MediaList): cdouble {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var MediaList; index: cint): ptr String {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: MediaList; index: cint): ptr String {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaList): ptr MediaList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaList; a2: ptr MediaList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaList*(): MediaList {.constructor,
                                        importcpp: "client::MediaList(@)",
                                        header: "cheerp/clientlib.h".}

proc get_matches*(this: var MediaQueryList): bool {.importcpp: "get_matches",
    header: "cheerp/clientlib.h".}

proc get_media*(this: var MediaQueryList): ptr String {.importcpp: "get_media",
    header: "cheerp/clientlib.h".}

proc addListener*(this: var MediaQueryList; listener: ptr MediaQueryListListener) {.
    importcpp: "addListener", header: "cheerp/clientlib.h".}

proc removeListener*(this: var MediaQueryList;
                     listener: ptr MediaQueryListListener) {.
    importcpp: "removeListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaQueryList): ptr MediaQueryList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaQueryList; a2: ptr MediaQueryList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaQueryList*(): MediaQueryList {.constructor,
    importcpp: "client::MediaQueryList(@)", header: "cheerp/clientlib.h".}

proc get_activeSourceBuffers*(this: var MediaSource): ptr SourceBufferList {.
    importcpp: "get_activeSourceBuffers", header: "cheerp/clientlib.h".}

proc get_duration*(this: var MediaSource): cdouble {.importcpp: "get_duration",
    header: "cheerp/clientlib.h".}

proc set_duration*(this: var MediaSource; a2: cdouble) {.
    importcpp: "set_duration", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var MediaSource): ptr String {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_sourceBuffers*(this: var MediaSource): ptr SourceBufferList {.
    importcpp: "get_sourceBuffers", header: "cheerp/clientlib.h".}

proc addSourceBuffer*(this: var MediaSource; `type`: String): ptr SourceBuffer {.
    importcpp: "addSourceBuffer", header: "cheerp/clientlib.h".}

proc endOfStream*(this: var MediaSource) {.importcpp: "endOfStream",
    header: "cheerp/clientlib.h".}

proc endOfStream*(this: var MediaSource; error: cdouble) {.
    importcpp: "endOfStream", header: "cheerp/clientlib.h".}

proc removeSourceBuffer*(this: var MediaSource; sourceBuffer: ptr SourceBuffer) {.
    importcpp: "removeSourceBuffer", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaSource): ptr MediaSource {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaSource; a2: ptr MediaSource) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaSource*(): MediaSource {.constructor,
    importcpp: "client::MediaSource(@)", header: "cheerp/clientlib.h".}

proc isTypeSupported*(`type`: String): bool {.
    importcpp: "client::MediaSource::isTypeSupported(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc get_active*(this: var MediaStreamEventMap): ptr Event {.
    importcpp: "get_active", header: "cheerp/clientlib.h".}

proc set_active*(this: var MediaStreamEventMap; a2: ptr Event) {.
    importcpp: "set_active", header: "cheerp/clientlib.h".}

proc get_addtrack*(this: var MediaStreamEventMap): ptr MediaStreamTrackEvent {.
    importcpp: "get_addtrack", header: "cheerp/clientlib.h".}

proc set_addtrack*(this: var MediaStreamEventMap; a2: ptr MediaStreamTrackEvent) {.
    importcpp: "set_addtrack", header: "cheerp/clientlib.h".}

proc get_inactive*(this: var MediaStreamEventMap): ptr Event {.
    importcpp: "get_inactive", header: "cheerp/clientlib.h".}

proc set_inactive*(this: var MediaStreamEventMap; a2: ptr Event) {.
    importcpp: "set_inactive", header: "cheerp/clientlib.h".}

proc get_removetrack*(this: var MediaStreamEventMap): ptr MediaStreamTrackEvent {.
    importcpp: "get_removetrack", header: "cheerp/clientlib.h".}

proc set_removetrack*(this: var MediaStreamEventMap;
                      a2: ptr MediaStreamTrackEvent) {.
    importcpp: "set_removetrack", header: "cheerp/clientlib.h".}

proc get_active*(this: var MediaStream): bool {.importcpp: "get_active",
    header: "cheerp/clientlib.h".}

proc get_id*(this: var MediaStream): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_onactive*(this: var MediaStream): ptr EventListener {.
    importcpp: "get_onactive", header: "cheerp/clientlib.h".}

proc set_onactive*(this: var MediaStream; a2: ptr EventListener) {.
    importcpp: "set_onactive", header: "cheerp/clientlib.h".}

proc get_onaddtrack*(this: var MediaStream): ptr EventListener {.
    importcpp: "get_onaddtrack", header: "cheerp/clientlib.h".}

proc set_onaddtrack*(this: var MediaStream; a2: ptr EventListener) {.
    importcpp: "set_onaddtrack", header: "cheerp/clientlib.h".}

proc get_oninactive*(this: var MediaStream): ptr EventListener {.
    importcpp: "get_oninactive", header: "cheerp/clientlib.h".}

proc set_oninactive*(this: var MediaStream; a2: ptr EventListener) {.
    importcpp: "set_oninactive", header: "cheerp/clientlib.h".}

proc get_onremovetrack*(this: var MediaStream): ptr EventListener {.
    importcpp: "get_onremovetrack", header: "cheerp/clientlib.h".}

proc set_onremovetrack*(this: var MediaStream; a2: ptr EventListener) {.
    importcpp: "set_onremovetrack", header: "cheerp/clientlib.h".}

proc addTrack*(this: var MediaStream; track: ptr MediaStreamTrack) {.
    importcpp: "addTrack", header: "cheerp/clientlib.h".}

proc clone*(this: var MediaStream): ptr MediaStream {.importcpp: "clone",
    header: "cheerp/clientlib.h".}

proc getAudioTracks*(this: var MediaStream): ptr Array {.
    importcpp: "getAudioTracks", header: "cheerp/clientlib.h".}

proc getTrackById*(this: var MediaStream; trackId: String): ptr MediaStreamTrack {.
    importcpp: "getTrackById", header: "cheerp/clientlib.h".}

proc getTracks*(this: var MediaStream): ptr Array {.importcpp: "getTracks",
    header: "cheerp/clientlib.h".}

proc getVideoTracks*(this: var MediaStream): ptr Array {.
    importcpp: "getVideoTracks", header: "cheerp/clientlib.h".}

proc removeTrack*(this: var MediaStream; track: ptr MediaStreamTrack) {.
    importcpp: "removeTrack", header: "cheerp/clientlib.h".}

proc stop*(this: var MediaStream) {.importcpp: "stop",
                                    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStream; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStream; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStream; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStream; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStream; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStream; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStream; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStream; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStream; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStream; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStream): ptr MediaStream {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStream; a2: ptr MediaStream) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaStream*(): MediaStream {.constructor,
    importcpp: "client::MediaStream(@)", header: "cheerp/clientlib.h".}

proc constructMediaStream*(stream: ptr MediaStream): MediaStream {.constructor,
    importcpp: "client::MediaStream(@)", header: "cheerp/clientlib.h".}

proc constructMediaStream*(tracks: ptr Array): MediaStream {.constructor,
    importcpp: "client::MediaStream(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStreamAudioSourceNode): ptr MediaStreamAudioSourceNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStreamAudioSourceNode;
                    a2: ptr MediaStreamAudioSourceNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaStreamAudioSourceNode*(): MediaStreamAudioSourceNode {.
    constructor, importcpp: "client::MediaStreamAudioSourceNode(@)",
    header: "cheerp/clientlib.h".}

proc get_constraintName*(this: var MediaStreamError): ptr String {.
    importcpp: "get_constraintName", header: "cheerp/clientlib.h".}

proc get_message*(this: var MediaStreamError): ptr String {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc get_name*(this: var MediaStreamError): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStreamError): ptr MediaStreamError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStreamError; a2: ptr MediaStreamError) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaStreamError*(): MediaStreamError {.constructor,
    importcpp: "client::MediaStreamError(@)", header: "cheerp/clientlib.h".}

proc get_error*(this: var MediaStreamErrorEvent): ptr MediaStreamError {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStreamErrorEvent): ptr MediaStreamErrorEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStreamErrorEvent;
                    a2: ptr MediaStreamErrorEvent) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructMediaStreamErrorEvent*(typeArg: String): MediaStreamErrorEvent {.
    constructor, importcpp: "client::MediaStreamErrorEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructMediaStreamErrorEvent*(typeArg: String; eventInitDict: ptr MediaStreamErrorEventInit): MediaStreamErrorEvent {.
    constructor, importcpp: "client::MediaStreamErrorEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_stream*(this: var MediaStreamEvent): ptr MediaStream {.
    importcpp: "get_stream", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStreamEvent): ptr MediaStreamEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStreamEvent; a2: ptr MediaStreamEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaStreamEvent*(`type`: String;
                                eventInitDict: ptr MediaStreamEventInit): MediaStreamEvent {.
    constructor, importcpp: "client::MediaStreamEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_ended*(this: var MediaStreamTrackEventMap): ptr MediaStreamErrorEvent {.
    importcpp: "get_ended", header: "cheerp/clientlib.h".}

proc set_ended*(this: var MediaStreamTrackEventMap;
                a2: ptr MediaStreamErrorEvent) {.importcpp: "set_ended",
    header: "cheerp/clientlib.h".}

proc get_mute*(this: var MediaStreamTrackEventMap): ptr Event {.
    importcpp: "get_mute", header: "cheerp/clientlib.h".}

proc set_mute*(this: var MediaStreamTrackEventMap; a2: ptr Event) {.
    importcpp: "set_mute", header: "cheerp/clientlib.h".}

proc get_overconstrained*(this: var MediaStreamTrackEventMap): ptr MediaStreamErrorEvent {.
    importcpp: "get_overconstrained", header: "cheerp/clientlib.h".}

proc set_overconstrained*(this: var MediaStreamTrackEventMap;
                          a2: ptr MediaStreamErrorEvent) {.
    importcpp: "set_overconstrained", header: "cheerp/clientlib.h".}

proc get_unmute*(this: var MediaStreamTrackEventMap): ptr Event {.
    importcpp: "get_unmute", header: "cheerp/clientlib.h".}

proc set_unmute*(this: var MediaStreamTrackEventMap; a2: ptr Event) {.
    importcpp: "set_unmute", header: "cheerp/clientlib.h".}

proc get_enabled*(this: var MediaStreamTrack): bool {.importcpp: "get_enabled",
    header: "cheerp/clientlib.h".}

proc set_enabled*(this: var MediaStreamTrack; a2: bool) {.
    importcpp: "set_enabled", header: "cheerp/clientlib.h".}

proc get_id*(this: var MediaStreamTrack): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_kind*(this: var MediaStreamTrack): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var MediaStreamTrack): ptr String {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc get_muted*(this: var MediaStreamTrack): bool {.importcpp: "get_muted",
    header: "cheerp/clientlib.h".}

proc get_onended*(this: var MediaStreamTrack): ptr EventListener {.
    importcpp: "get_onended", header: "cheerp/clientlib.h".}

proc set_onended*(this: var MediaStreamTrack; a2: ptr EventListener) {.
    importcpp: "set_onended", header: "cheerp/clientlib.h".}

proc get_onmute*(this: var MediaStreamTrack): ptr EventListener {.
    importcpp: "get_onmute", header: "cheerp/clientlib.h".}

proc set_onmute*(this: var MediaStreamTrack; a2: ptr EventListener) {.
    importcpp: "set_onmute", header: "cheerp/clientlib.h".}

proc get_onoverconstrained*(this: var MediaStreamTrack): ptr EventListener {.
    importcpp: "get_onoverconstrained", header: "cheerp/clientlib.h".}

proc set_onoverconstrained*(this: var MediaStreamTrack; a2: ptr EventListener) {.
    importcpp: "set_onoverconstrained", header: "cheerp/clientlib.h".}

proc get_onunmute*(this: var MediaStreamTrack): ptr EventListener {.
    importcpp: "get_onunmute", header: "cheerp/clientlib.h".}

proc set_onunmute*(this: var MediaStreamTrack; a2: ptr EventListener) {.
    importcpp: "set_onunmute", header: "cheerp/clientlib.h".}

proc get_readonly*(this: var MediaStreamTrack): bool {.
    importcpp: "get_readonly", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var MediaStreamTrack): ptr String {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_remote*(this: var MediaStreamTrack): bool {.importcpp: "get_remote",
    header: "cheerp/clientlib.h".}

proc applyConstraints*(this: var MediaStreamTrack;
                       constraints: ptr MediaTrackConstraints): ptr Promise {.
    importcpp: "applyConstraints", header: "cheerp/clientlib.h".}

proc clone*(this: var MediaStreamTrack): ptr MediaStreamTrack {.
    importcpp: "clone", header: "cheerp/clientlib.h".}

proc getCapabilities*(this: var MediaStreamTrack): ptr MediaTrackCapabilities {.
    importcpp: "getCapabilities", header: "cheerp/clientlib.h".}

proc getConstraints*(this: var MediaStreamTrack): ptr MediaTrackConstraints {.
    importcpp: "getConstraints", header: "cheerp/clientlib.h".}

proc getSettings*(this: var MediaStreamTrack): ptr MediaTrackSettings {.
    importcpp: "getSettings", header: "cheerp/clientlib.h".}

proc stop*(this: var MediaStreamTrack) {.importcpp: "stop",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStreamTrack; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStreamTrack; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStreamTrack; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStreamTrack; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MediaStreamTrack; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStreamTrack; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStreamTrack; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStreamTrack; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStreamTrack; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MediaStreamTrack; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStreamTrack): ptr MediaStreamTrack {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStreamTrack; a2: ptr MediaStreamTrack) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMediaStreamTrack*(): MediaStreamTrack {.constructor,
    importcpp: "client::MediaStreamTrack(@)", header: "cheerp/clientlib.h".}

proc get_track*(this: var MediaStreamTrackEvent): ptr MediaStreamTrack {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MediaStreamTrackEvent): ptr MediaStreamTrackEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MediaStreamTrackEvent;
                    a2: ptr MediaStreamTrackEvent) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructMediaStreamTrackEvent*(typeArg: String): MediaStreamTrackEvent {.
    constructor, importcpp: "client::MediaStreamTrackEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructMediaStreamTrackEvent*(typeArg: String; eventInitDict: ptr MediaStreamTrackEventInit): MediaStreamTrackEvent {.
    constructor, importcpp: "client::MediaStreamTrackEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_port1*(this: var MessageChannel): ptr MessagePort {.
    importcpp: "get_port1", header: "cheerp/clientlib.h".}

proc get_port2*(this: var MessageChannel): ptr MessagePort {.
    importcpp: "get_port2", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MessageChannel): ptr MessageChannel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MessageChannel; a2: ptr MessageChannel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMessageChannel*(): MessageChannel {.constructor,
    importcpp: "client::MessageChannel(@)", header: "cheerp/clientlib.h".}

proc get_origin*(this: var MessageEvent): ptr String {.importcpp: "get_origin",
    header: "cheerp/clientlib.h".}

proc get_ports*(this: var MessageEvent): ptr ReadonlyArray[MessagePort] {.
    importcpp: "get_ports", header: "cheerp/clientlib.h".}

proc get_source*(this: var MessageEvent): ptr Window {.importcpp: "get_source",
    header: "cheerp/clientlib.h".}

proc initMessageEvent*(this: var MessageEvent; `type`: String; bubbles: bool;
                       cancelable: bool; data: ptr Object; origin: String;
                       lastEventId: String; source: ptr Window) {.
    importcpp: "initMessageEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MessageEvent): ptr MessageEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MessageEvent; a2: ptr MessageEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMessageEvent*(`type`: String): MessageEvent {.constructor,
    importcpp: "client::MessageEvent(@)", header: "cheerp/clientlib.h".}

proc constructMessageEvent*(`type`: String; eventInitDict: ptr MessageEventInit): MessageEvent {.
    constructor, importcpp: "client::MessageEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var MessagePortEventMap): ptr MessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var MessagePortEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var MessagePort): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var MessagePort; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc close*(this: var MessagePort) {.importcpp: "close",
                                     header: "cheerp/clientlib.h".}

proc postMessage*(this: var MessagePort) {.importcpp: "postMessage",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var MessagePort; message: ptr Object) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var MessagePort; message: ptr Object;
                  transfer: ptr Array) {.importcpp: "postMessage",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var MessagePort; message: String) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var MessagePort; message: String; transfer: ptr Array) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc start*(this: var MessagePort) {.importcpp: "start",
                                     header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MessagePort; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MessagePort; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MessagePort; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MessagePort; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var MessagePort; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MessagePort; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MessagePort; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MessagePort; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MessagePort; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var MessagePort; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MessagePort): ptr MessagePort {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MessagePort; a2: ptr MessagePort) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMessagePort*(): MessagePort {.constructor,
    importcpp: "client::MessagePort(@)", header: "cheerp/clientlib.h".}

proc get_description*(this: var MimeType): ptr String {.
    importcpp: "get_description", header: "cheerp/clientlib.h".}

proc get_enabledPlugin*(this: var MimeType): ptr Plugin {.
    importcpp: "get_enabledPlugin", header: "cheerp/clientlib.h".}

proc get_suffixes*(this: var MimeType): ptr String {.importcpp: "get_suffixes",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var MimeType): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MimeType): ptr MimeType {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MimeType; a2: ptr MimeType) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMimeType*(): MimeType {.constructor,
                                      importcpp: "client::MimeType(@)",
                                      header: "cheerp/clientlib.h".}

proc get_length*(this: var MimeTypeArray): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var MimeTypeArray; index: cdouble): ptr Plugin {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc namedItem*(this: var MimeTypeArray; `type`: String): ptr Plugin {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc `[]`*(this: var MimeTypeArray; index: cint): ptr Plugin {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: MimeTypeArray; index: cint): ptr Plugin {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MimeTypeArray): ptr MimeTypeArray {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MimeTypeArray; a2: ptr MimeTypeArray) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMimeTypeArray*(): MimeTypeArray {.constructor,
    importcpp: "client::MimeTypeArray(@)", header: "cheerp/clientlib.h".}

proc get_attrChange*(this: var MutationEvent): cdouble {.
    importcpp: "get_attrChange", header: "cheerp/clientlib.h".}

proc get_attrName*(this: var MutationEvent): ptr String {.
    importcpp: "get_attrName", header: "cheerp/clientlib.h".}

proc get_newValue*(this: var MutationEvent): ptr String {.
    importcpp: "get_newValue", header: "cheerp/clientlib.h".}

proc get_prevValue*(this: var MutationEvent): ptr String {.
    importcpp: "get_prevValue", header: "cheerp/clientlib.h".}

proc get_relatedNode*(this: var MutationEvent): ptr Node {.
    importcpp: "get_relatedNode", header: "cheerp/clientlib.h".}

proc initMutationEvent*(this: var MutationEvent; typeArg: String;
                        canBubbleArg: bool; cancelableArg: bool;
                        relatedNodeArg: ptr Node; prevValueArg: String;
                        newValueArg: String; attrNameArg: String;
                        attrChangeArg: cdouble) {.
    importcpp: "initMutationEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MutationEvent): ptr MutationEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MutationEvent; a2: ptr MutationEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMutationEvent*(): MutationEvent {.constructor,
    importcpp: "client::MutationEvent(@)", header: "cheerp/clientlib.h".}

proc get_ADDITION*(this: var MutationEvent): cdouble {.
    importcpp: "get_ADDITION", header: "cheerp/clientlib.h".}

proc get_MODIFICATION*(this: var MutationEvent): cdouble {.
    importcpp: "get_MODIFICATION", header: "cheerp/clientlib.h".}

proc get_REMOVAL*(this: var MutationEvent): cdouble {.importcpp: "get_REMOVAL",
    header: "cheerp/clientlib.h".}

proc disconnect*(this: var MutationObserver) {.importcpp: "disconnect",
    header: "cheerp/clientlib.h".}

proc observe*(this: var MutationObserver; target: ptr Node;
              options: ptr MutationObserverInit) {.importcpp: "observe",
    header: "cheerp/clientlib.h".}

proc takeRecords*(this: var MutationObserver): ptr Array {.
    importcpp: "takeRecords", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MutationObserver): ptr MutationObserver {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MutationObserver; a2: ptr MutationObserver) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMutationObserver*(callback: ptr EventListener): MutationObserver {.
    constructor, importcpp: "client::MutationObserver(@)",
    header: "cheerp/clientlib.h".}

proc get_addedNodes*(this: var MutationRecord): ptr NodeList {.
    importcpp: "get_addedNodes", header: "cheerp/clientlib.h".}

proc get_attributeName*(this: var MutationRecord): ptr String {.
    importcpp: "get_attributeName", header: "cheerp/clientlib.h".}

proc get_attributeNamespace*(this: var MutationRecord): ptr String {.
    importcpp: "get_attributeNamespace", header: "cheerp/clientlib.h".}

proc get_nextSibling*(this: var MutationRecord): ptr Node {.
    importcpp: "get_nextSibling", header: "cheerp/clientlib.h".}

proc get_oldValue*(this: var MutationRecord): ptr String {.
    importcpp: "get_oldValue", header: "cheerp/clientlib.h".}

proc get_previousSibling*(this: var MutationRecord): ptr Node {.
    importcpp: "get_previousSibling", header: "cheerp/clientlib.h".}

proc get_removedNodes*(this: var MutationRecord): ptr NodeList {.
    importcpp: "get_removedNodes", header: "cheerp/clientlib.h".}

proc get_target*(this: var MutationRecord): ptr Node {.importcpp: "get_target",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var MutationRecord): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var MutationRecord): ptr MutationRecord {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var MutationRecord; a2: ptr MutationRecord) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructMutationRecord*(): MutationRecord {.constructor,
    importcpp: "client::MutationRecord(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var NamedNodeMap): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc getNamedItem*(this: var NamedNodeMap; qualifiedName: String): ptr Attr {.
    importcpp: "getNamedItem", header: "cheerp/clientlib.h".}

proc getNamedItemNS*(this: var NamedNodeMap; p_namespace: String;
                     localName: String): ptr Attr {.importcpp: "getNamedItemNS",
    header: "cheerp/clientlib.h".}

proc item*(this: var NamedNodeMap; index: cdouble): ptr Attr {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc removeNamedItem*(this: var NamedNodeMap; qualifiedName: String): ptr Attr {.
    importcpp: "removeNamedItem", header: "cheerp/clientlib.h".}

proc removeNamedItemNS*(this: var NamedNodeMap; p_namespace: String;
                        localName: String): ptr Attr {.
    importcpp: "removeNamedItemNS", header: "cheerp/clientlib.h".}

proc setNamedItem*(this: var NamedNodeMap; attr: ptr Attr): ptr Attr {.
    importcpp: "setNamedItem", header: "cheerp/clientlib.h".}

proc setNamedItemNS*(this: var NamedNodeMap; attr: ptr Attr): ptr Attr {.
    importcpp: "setNamedItemNS", header: "cheerp/clientlib.h".}

proc `[]`*(this: var NamedNodeMap; index: cint): ptr Attr {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: NamedNodeMap; index: cint): ptr Attr {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var NamedNodeMap): ptr NamedNodeMap {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var NamedNodeMap; a2: ptr NamedNodeMap) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructNamedNodeMap*(): NamedNodeMap {.constructor,
    importcpp: "client::NamedNodeMap(@)", header: "cheerp/clientlib.h".}

proc get_appCodeName*(this: var NavigatorID): ptr String {.
    importcpp: "get_appCodeName", header: "cheerp/clientlib.h".}

proc get_appName*(this: var NavigatorID): ptr String {.importcpp: "get_appName",
    header: "cheerp/clientlib.h".}

proc get_appVersion*(this: var NavigatorID): ptr String {.
    importcpp: "get_appVersion", header: "cheerp/clientlib.h".}

proc get_platform*(this: var NavigatorID): ptr String {.
    importcpp: "get_platform", header: "cheerp/clientlib.h".}

proc get_product*(this: var NavigatorID): ptr String {.importcpp: "get_product",
    header: "cheerp/clientlib.h".}

proc get_productSub*(this: var NavigatorID): ptr String {.
    importcpp: "get_productSub", header: "cheerp/clientlib.h".}

proc get_userAgent*(this: var NavigatorID): ptr String {.
    importcpp: "get_userAgent", header: "cheerp/clientlib.h".}

proc get_vendor*(this: var NavigatorID): ptr String {.importcpp: "get_vendor",
    header: "cheerp/clientlib.h".}

proc get_vendorSub*(this: var NavigatorID): ptr String {.
    importcpp: "get_vendorSub", header: "cheerp/clientlib.h".}

proc get_onLine*(this: var NavigatorOnLine): bool {.importcpp: "get_onLine",
    header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Blob): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Int8Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Int16Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Int32Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Uint8Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Uint16Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Uint32Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String;
                 data: ptr Uint8ClampedArray): bool {.importcpp: "sendBeacon",
    header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Float32Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr Float64Array): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr DataView): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr ArrayBuffer): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: ptr FormData): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc sendBeacon*(this: var NavigatorBeacon; url: String; data: String): bool {.
    importcpp: "sendBeacon", header: "cheerp/clientlib.h".}

proc get_hardwareConcurrency*(this: var NavigatorConcurrentHardware): cdouble {.
    importcpp: "get_hardwareConcurrency", header: "cheerp/clientlib.h".}

proc get_mediaDevices*(this: var NavigatorUserMedia): ptr MediaDevices {.
    importcpp: "get_mediaDevices", header: "cheerp/clientlib.h".}

proc getDisplayMedia*(this: var NavigatorUserMedia;
                      constraints: ptr MediaStreamConstraints): ptr Promise {.
    importcpp: "getDisplayMedia", header: "cheerp/clientlib.h".}

proc getUserMedia*(this: var NavigatorUserMedia;
                   constraints: ptr MediaStreamConstraints;
                   successCallback: ptr EventListener;
                   errorCallback: ptr EventListener) {.
    importcpp: "getUserMedia", header: "cheerp/clientlib.h".}

proc get_language*(this: var NavigatorLanguage): ptr String {.
    importcpp: "get_language", header: "cheerp/clientlib.h".}

proc get_languages*(this: var NavigatorLanguage): ptr ReadonlyArray[String] {.
    importcpp: "get_languages", header: "cheerp/clientlib.h".}

proc get_activeVRDisplays*(this: var Navigator): ptr ReadonlyArray[VRDisplay] {.
    importcpp: "get_activeVRDisplays", header: "cheerp/clientlib.h".}

proc get_authentication*(this: var Navigator): ptr WebAuthentication {.
    importcpp: "get_authentication", header: "cheerp/clientlib.h".}

proc get_cookieEnabled*(this: var Navigator): bool {.
    importcpp: "get_cookieEnabled", header: "cheerp/clientlib.h".}

proc get_doNotTrack*(this: var Navigator): ptr String {.
    importcpp: "get_doNotTrack", header: "cheerp/clientlib.h".}

proc get_gamepadInputEmulation*(this: var Navigator): ptr String {.
    importcpp: "get_gamepadInputEmulation", header: "cheerp/clientlib.h".}

proc set_gamepadInputEmulation*(this: var Navigator; a2: String) {.
    importcpp: "set_gamepadInputEmulation", header: "cheerp/clientlib.h".}

proc get_geolocation*(this: var Navigator): ptr Geolocation {.
    importcpp: "get_geolocation", header: "cheerp/clientlib.h".}

proc get_maxTouchPoints*(this: var Navigator): cdouble {.
    importcpp: "get_maxTouchPoints", header: "cheerp/clientlib.h".}

proc get_mimeTypes*(this: var Navigator): ptr MimeTypeArray {.
    importcpp: "get_mimeTypes", header: "cheerp/clientlib.h".}

proc get_msManipulationViewsEnabled*(this: var Navigator): bool {.
    importcpp: "get_msManipulationViewsEnabled", header: "cheerp/clientlib.h".}

proc get_msMaxTouchPoints*(this: var Navigator): cdouble {.
    importcpp: "get_msMaxTouchPoints", header: "cheerp/clientlib.h".}

proc get_msPointerEnabled*(this: var Navigator): bool {.
    importcpp: "get_msPointerEnabled", header: "cheerp/clientlib.h".}

proc get_plugins*(this: var Navigator): ptr PluginArray {.
    importcpp: "get_plugins", header: "cheerp/clientlib.h".}

proc get_pointerEnabled*(this: var Navigator): bool {.
    importcpp: "get_pointerEnabled", header: "cheerp/clientlib.h".}

proc get_serviceWorker*(this: var Navigator): ptr ServiceWorkerContainer {.
    importcpp: "get_serviceWorker", header: "cheerp/clientlib.h".}

proc get_webdriver*(this: var Navigator): bool {.importcpp: "get_webdriver",
    header: "cheerp/clientlib.h".}

proc getGamepads*(this: var Navigator): ptr Array {.importcpp: "getGamepads",
    header: "cheerp/clientlib.h".}

proc getVRDisplays*(this: var Navigator): ptr Promise {.
    importcpp: "getVRDisplays", header: "cheerp/clientlib.h".}

proc javaEnabled*(this: var Navigator): bool {.importcpp: "javaEnabled",
    header: "cheerp/clientlib.h".}

proc msLaunchUri*(this: var Navigator; uri: String) {.importcpp: "msLaunchUri",
    header: "cheerp/clientlib.h".}

proc msLaunchUri*(this: var Navigator; uri: String;
                  successCallback: ptr EventListener) {.
    importcpp: "msLaunchUri", header: "cheerp/clientlib.h".}

proc msLaunchUri*(this: var Navigator; uri: String;
                  successCallback: ptr EventListener;
                  noHandlerCallback: ptr EventListener) {.
    importcpp: "msLaunchUri", header: "cheerp/clientlib.h".}

proc requestMediaKeySystemAccess*(this: var Navigator; keySystem: String;
                                  supportedConfigurations: ptr Array): ptr Promise {.
    importcpp: "requestMediaKeySystemAccess", header: "cheerp/clientlib.h".}

proc vibrate*(this: var Navigator; pattern: cdouble): bool {.
    importcpp: "vibrate", header: "cheerp/clientlib.h".}

proc vibrate*(this: var Navigator; pattern: ptr Array): bool {.
    importcpp: "vibrate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Navigator): ptr Navigator {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Navigator; a2: ptr Navigator) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructNavigator*(): Navigator {.constructor,
                                        importcpp: "client::Navigator(@)",
                                        header: "cheerp/clientlib.h".}

proc acceptNode*(this: var NodeFilter; node: ptr Node): cdouble {.
    importcpp: "acceptNode", header: "cheerp/clientlib.h".}

proc get_FILTER_ACCEPT*(this: var NodeFilter): cdouble {.
    importcpp: "get_FILTER_ACCEPT", header: "cheerp/clientlib.h".}

proc get_FILTER_REJECT*(this: var NodeFilter): cdouble {.
    importcpp: "get_FILTER_REJECT", header: "cheerp/clientlib.h".}

proc get_FILTER_SKIP*(this: var NodeFilter): cdouble {.
    importcpp: "get_FILTER_SKIP", header: "cheerp/clientlib.h".}

proc get_SHOW_ALL*(this: var NodeFilter): cdouble {.importcpp: "get_SHOW_ALL",
    header: "cheerp/clientlib.h".}

proc get_SHOW_ATTRIBUTE*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_ATTRIBUTE", header: "cheerp/clientlib.h".}

proc get_SHOW_CDATA_SECTION*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_CDATA_SECTION", header: "cheerp/clientlib.h".}

proc get_SHOW_COMMENT*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_COMMENT", header: "cheerp/clientlib.h".}

proc get_SHOW_DOCUMENT*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_DOCUMENT", header: "cheerp/clientlib.h".}

proc get_SHOW_DOCUMENT_FRAGMENT*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_DOCUMENT_FRAGMENT", header: "cheerp/clientlib.h".}

proc get_SHOW_DOCUMENT_TYPE*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_DOCUMENT_TYPE", header: "cheerp/clientlib.h".}

proc get_SHOW_ELEMENT*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_ELEMENT", header: "cheerp/clientlib.h".}

proc get_SHOW_ENTITY*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_ENTITY", header: "cheerp/clientlib.h".}

proc get_SHOW_ENTITY_REFERENCE*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_ENTITY_REFERENCE", header: "cheerp/clientlib.h".}

proc get_SHOW_NOTATION*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_NOTATION", header: "cheerp/clientlib.h".}

proc get_SHOW_PROCESSING_INSTRUCTION*(this: var NodeFilter): cdouble {.
    importcpp: "get_SHOW_PROCESSING_INSTRUCTION", header: "cheerp/clientlib.h".}

proc get_SHOW_TEXT*(this: var NodeFilter): cdouble {.importcpp: "get_SHOW_TEXT",
    header: "cheerp/clientlib.h".}

proc get_expandEntityReferences*(this: var NodeIterator): bool {.
    importcpp: "get_expandEntityReferences", header: "cheerp/clientlib.h".}

proc get_filter*(this: var NodeIterator): ptr NodeFilter {.
    importcpp: "get_filter", header: "cheerp/clientlib.h".}

proc get_root*(this: var NodeIterator): ptr Node {.importcpp: "get_root",
    header: "cheerp/clientlib.h".}

proc get_whatToShow*(this: var NodeIterator): cdouble {.
    importcpp: "get_whatToShow", header: "cheerp/clientlib.h".}

proc detach*(this: var NodeIterator) {.importcpp: "detach",
                                       header: "cheerp/clientlib.h".}

proc nextNode*(this: var NodeIterator): ptr Node {.importcpp: "nextNode",
    header: "cheerp/clientlib.h".}

proc previousNode*(this: var NodeIterator): ptr Node {.
    importcpp: "previousNode", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var NodeIterator): ptr NodeIterator {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var NodeIterator; a2: ptr NodeIterator) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructNodeIterator*(): NodeIterator {.constructor,
    importcpp: "client::NodeIterator(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var NodeList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var NodeList; index: cdouble): ptr Node {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var NodeList; index: cint): ptr Node {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: NodeList; index: cint): ptr Node {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var NodeList): ptr NodeList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var NodeList; a2: ptr NodeList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructNodeList*(): NodeList {.constructor,
                                      importcpp: "client::NodeList(@)",
                                      header: "cheerp/clientlib.h".}

proc get_length*[TNode](this: var NodeListOf[TNode]): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc set_length*[TNode](this: var NodeListOf[TNode]; a2: cdouble) {.
    importcpp: "set_length", header: "cheerp/clientlib.h".}

proc item*[TNode](this: var NodeListOf[TNode]; index: cdouble): ptr TNode {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*[TNode](this: var NodeListOf[TNode]; index: cint): ptr TNode {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*[TNode](this: NodeListOf[TNode]; index: cint): ptr TNode {.
    noSideEffect, importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc querySelector*(this: var NodeSelector; selectors: String): ptr Element {.
    importcpp: "querySelector", header: "cheerp/clientlib.h".}

proc querySelectorAll*(this: var NodeSelector; selectors: String): ptr NodeListOf[
    Element] {.importcpp: "querySelectorAll", header: "cheerp/clientlib.h".}

proc get_click*(this: var NotificationEventMap): ptr Event {.
    importcpp: "get_click", header: "cheerp/clientlib.h".}

proc set_click*(this: var NotificationEventMap; a2: ptr Event) {.
    importcpp: "set_click", header: "cheerp/clientlib.h".}

proc get_close*(this: var NotificationEventMap): ptr Event {.
    importcpp: "get_close", header: "cheerp/clientlib.h".}

proc set_close*(this: var NotificationEventMap; a2: ptr Event) {.
    importcpp: "set_close", header: "cheerp/clientlib.h".}

proc get_error*(this: var NotificationEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var NotificationEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_show*(this: var NotificationEventMap): ptr Event {.
    importcpp: "get_show", header: "cheerp/clientlib.h".}

proc set_show*(this: var NotificationEventMap; a2: ptr Event) {.
    importcpp: "set_show", header: "cheerp/clientlib.h".}

proc get_body*(this: var Notification): ptr String {.importcpp: "get_body",
    header: "cheerp/clientlib.h".}

proc get_dir*(this: var Notification): ptr String {.importcpp: "get_dir",
    header: "cheerp/clientlib.h".}

proc get_icon*(this: var Notification): ptr String {.importcpp: "get_icon",
    header: "cheerp/clientlib.h".}

proc get_lang*(this: var Notification): ptr String {.importcpp: "get_lang",
    header: "cheerp/clientlib.h".}

proc get_onclick*(this: var Notification): ptr EventListener {.
    importcpp: "get_onclick", header: "cheerp/clientlib.h".}

proc set_onclick*(this: var Notification; a2: ptr EventListener) {.
    importcpp: "set_onclick", header: "cheerp/clientlib.h".}

proc get_onclose*(this: var Notification): ptr EventListener {.
    importcpp: "get_onclose", header: "cheerp/clientlib.h".}

proc set_onclose*(this: var Notification; a2: ptr EventListener) {.
    importcpp: "set_onclose", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var Notification): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var Notification; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onshow*(this: var Notification): ptr EventListener {.
    importcpp: "get_onshow", header: "cheerp/clientlib.h".}

proc set_onshow*(this: var Notification; a2: ptr EventListener) {.
    importcpp: "set_onshow", header: "cheerp/clientlib.h".}

proc get_permission*(this: var Notification): ptr String {.
    importcpp: "get_permission", header: "cheerp/clientlib.h".}

proc get_tag*(this: var Notification): ptr String {.importcpp: "get_tag",
    header: "cheerp/clientlib.h".}

proc get_title*(this: var Notification): ptr String {.importcpp: "get_title",
    header: "cheerp/clientlib.h".}

proc close*(this: var Notification) {.importcpp: "close",
                                      header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Notification; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Notification; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Notification; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Notification; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Notification; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Notification; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Notification; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Notification; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Notification; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Notification; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Notification): ptr Notification {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Notification; a2: ptr Notification) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructNotification*(title: String): Notification {.constructor,
    importcpp: "client::Notification(@)", header: "cheerp/clientlib.h".}

proc constructNotification*(title: String; options: ptr NotificationOptions): Notification {.
    constructor, importcpp: "client::Notification(@)",
    header: "cheerp/clientlib.h".}

proc requestPermission*(): ptr Promise {.
    importcpp: "client::Notification::requestPermission(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc requestPermission*(callback: ptr EventListener): ptr Promise {.
    importcpp: "client::Notification::requestPermission(@)",
    header: "cheerp/clientlib.h".}
  ## cheerp::static

proc get_renderedBuffer*(this: var OfflineAudioCompletionEvent): ptr AudioBuffer {.
    importcpp: "get_renderedBuffer", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var OfflineAudioCompletionEvent): ptr OfflineAudioCompletionEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var OfflineAudioCompletionEvent;
                    a2: ptr OfflineAudioCompletionEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructOfflineAudioCompletionEvent*(): OfflineAudioCompletionEvent {.
    constructor, importcpp: "client::OfflineAudioCompletionEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_complete*(this: var OfflineAudioContextEventMap): ptr OfflineAudioCompletionEvent {.
    importcpp: "get_complete", header: "cheerp/clientlib.h".}

proc set_complete*(this: var OfflineAudioContextEventMap;
                   a2: ptr OfflineAudioCompletionEvent) {.
    importcpp: "set_complete", header: "cheerp/clientlib.h".}

proc get_length*(this: var OfflineAudioContext): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc get_oncomplete*(this: var OfflineAudioContext): ptr EventListener {.
    importcpp: "get_oncomplete", header: "cheerp/clientlib.h".}

proc set_oncomplete*(this: var OfflineAudioContext; a2: ptr EventListener) {.
    importcpp: "set_oncomplete", header: "cheerp/clientlib.h".}

proc startRendering*(this: var OfflineAudioContext): ptr Promise {.
    importcpp: "startRendering", header: "cheerp/clientlib.h".}

proc suspend*(this: var OfflineAudioContext; suspendTime: cdouble): ptr Promise {.
    importcpp: "suspend", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OfflineAudioContext; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OfflineAudioContext; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OfflineAudioContext; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OfflineAudioContext; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OfflineAudioContext; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OfflineAudioContext; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OfflineAudioContext; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OfflineAudioContext; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OfflineAudioContext; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OfflineAudioContext; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var OfflineAudioContext): ptr OfflineAudioContext {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var OfflineAudioContext; a2: ptr OfflineAudioContext) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructOfflineAudioContext*(numberOfChannels: cdouble; length: cdouble;
                                   sampleRate: cdouble): OfflineAudioContext {.
    constructor, importcpp: "client::OfflineAudioContext(@)",
    header: "cheerp/clientlib.h".}

proc get_ended*(this: var OscillatorNodeEventMap): ptr Event {.
    importcpp: "get_ended", header: "cheerp/clientlib.h".}

proc set_ended*(this: var OscillatorNodeEventMap; a2: ptr Event) {.
    importcpp: "set_ended", header: "cheerp/clientlib.h".}

proc get_detune*(this: var OscillatorNode): ptr AudioParam {.
    importcpp: "get_detune", header: "cheerp/clientlib.h".}

proc get_frequency*(this: var OscillatorNode): ptr AudioParam {.
    importcpp: "get_frequency", header: "cheerp/clientlib.h".}

proc get_onended*(this: var OscillatorNode): ptr EventListener {.
    importcpp: "get_onended", header: "cheerp/clientlib.h".}

proc set_onended*(this: var OscillatorNode; a2: ptr EventListener) {.
    importcpp: "set_onended", header: "cheerp/clientlib.h".}

proc get_type*(this: var OscillatorNode): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var OscillatorNode; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc setPeriodicWave*(this: var OscillatorNode; periodicWave: ptr PeriodicWave) {.
    importcpp: "setPeriodicWave", header: "cheerp/clientlib.h".}

proc start*(this: var OscillatorNode) {.importcpp: "start",
                                        header: "cheerp/clientlib.h".}

proc start*(this: var OscillatorNode; `when`: cdouble) {.importcpp: "start",
    header: "cheerp/clientlib.h".}

proc stop*(this: var OscillatorNode) {.importcpp: "stop",
                                       header: "cheerp/clientlib.h".}

proc stop*(this: var OscillatorNode; `when`: cdouble) {.importcpp: "stop",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OscillatorNode; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OscillatorNode; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OscillatorNode; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OscillatorNode; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var OscillatorNode; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OscillatorNode; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OscillatorNode; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OscillatorNode; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OscillatorNode; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var OscillatorNode; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var OscillatorNode): ptr OscillatorNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var OscillatorNode; a2: ptr OscillatorNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructOscillatorNode*(): OscillatorNode {.constructor,
    importcpp: "client::OscillatorNode(@)", header: "cheerp/clientlib.h".}

proc get_horizontalOverflow*(this: var OverflowEvent): bool {.
    importcpp: "get_horizontalOverflow", header: "cheerp/clientlib.h".}

proc get_orient*(this: var OverflowEvent): cdouble {.importcpp: "get_orient",
    header: "cheerp/clientlib.h".}

proc get_verticalOverflow*(this: var OverflowEvent): bool {.
    importcpp: "get_verticalOverflow", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var OverflowEvent): ptr OverflowEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var OverflowEvent; a2: ptr OverflowEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructOverflowEvent*(): OverflowEvent {.constructor,
    importcpp: "client::OverflowEvent(@)", header: "cheerp/clientlib.h".}

proc get_BOTH*(this: var OverflowEvent): cdouble {.importcpp: "get_BOTH",
    header: "cheerp/clientlib.h".}

proc get_HORIZONTAL*(this: var OverflowEvent): cdouble {.
    importcpp: "get_HORIZONTAL", header: "cheerp/clientlib.h".}

proc get_VERTICAL*(this: var OverflowEvent): cdouble {.
    importcpp: "get_VERTICAL", header: "cheerp/clientlib.h".}

proc get_persisted*(this: var PageTransitionEvent): bool {.
    importcpp: "get_persisted", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PageTransitionEvent): ptr PageTransitionEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PageTransitionEvent; a2: ptr PageTransitionEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPageTransitionEvent*(): PageTransitionEvent {.constructor,
    importcpp: "client::PageTransitionEvent(@)", header: "cheerp/clientlib.h".}

proc get_coneInnerAngle*(this: var PannerNode): cdouble {.
    importcpp: "get_coneInnerAngle", header: "cheerp/clientlib.h".}

proc set_coneInnerAngle*(this: var PannerNode; a2: cdouble) {.
    importcpp: "set_coneInnerAngle", header: "cheerp/clientlib.h".}

proc get_coneOuterAngle*(this: var PannerNode): cdouble {.
    importcpp: "get_coneOuterAngle", header: "cheerp/clientlib.h".}

proc set_coneOuterAngle*(this: var PannerNode; a2: cdouble) {.
    importcpp: "set_coneOuterAngle", header: "cheerp/clientlib.h".}

proc get_coneOuterGain*(this: var PannerNode): cdouble {.
    importcpp: "get_coneOuterGain", header: "cheerp/clientlib.h".}

proc set_coneOuterGain*(this: var PannerNode; a2: cdouble) {.
    importcpp: "set_coneOuterGain", header: "cheerp/clientlib.h".}

proc get_distanceModel*(this: var PannerNode): ptr String {.
    importcpp: "get_distanceModel", header: "cheerp/clientlib.h".}

proc set_distanceModel*(this: var PannerNode; a2: String) {.
    importcpp: "set_distanceModel", header: "cheerp/clientlib.h".}

proc get_maxDistance*(this: var PannerNode): cdouble {.
    importcpp: "get_maxDistance", header: "cheerp/clientlib.h".}

proc set_maxDistance*(this: var PannerNode; a2: cdouble) {.
    importcpp: "set_maxDistance", header: "cheerp/clientlib.h".}

proc get_panningModel*(this: var PannerNode): ptr String {.
    importcpp: "get_panningModel", header: "cheerp/clientlib.h".}

proc set_panningModel*(this: var PannerNode; a2: String) {.
    importcpp: "set_panningModel", header: "cheerp/clientlib.h".}

proc get_refDistance*(this: var PannerNode): cdouble {.
    importcpp: "get_refDistance", header: "cheerp/clientlib.h".}

proc set_refDistance*(this: var PannerNode; a2: cdouble) {.
    importcpp: "set_refDistance", header: "cheerp/clientlib.h".}

proc get_rolloffFactor*(this: var PannerNode): cdouble {.
    importcpp: "get_rolloffFactor", header: "cheerp/clientlib.h".}

proc set_rolloffFactor*(this: var PannerNode; a2: cdouble) {.
    importcpp: "set_rolloffFactor", header: "cheerp/clientlib.h".}

proc setOrientation*(this: var PannerNode; x: cdouble; y: cdouble; z: cdouble) {.
    importcpp: "setOrientation", header: "cheerp/clientlib.h".}

proc setPosition*(this: var PannerNode; x: cdouble; y: cdouble; z: cdouble) {.
    importcpp: "setPosition", header: "cheerp/clientlib.h".}

proc setVelocity*(this: var PannerNode; x: cdouble; y: cdouble; z: cdouble) {.
    importcpp: "setVelocity", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PannerNode): ptr PannerNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PannerNode; a2: ptr PannerNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPannerNode*(): PannerNode {.constructor,
    importcpp: "client::PannerNode(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Path2D): ptr Path2D {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Path2D; a2: ptr Path2D) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPath2D*(): Path2D {.constructor, importcpp: "client::Path2D(@)",
                                  header: "cheerp/clientlib.h".}

proc constructPath2D*(d: ptr Path2D): Path2D {.constructor,
    importcpp: "client::Path2D(@)", header: "cheerp/clientlib.h".}

proc constructPath2D*(d: String): Path2D {.constructor,
    importcpp: "client::Path2D(@)", header: "cheerp/clientlib.h".}

proc get_addressLine*(this: var PaymentAddress): ptr Array {.
    importcpp: "get_addressLine", header: "cheerp/clientlib.h".}

proc get_city*(this: var PaymentAddress): ptr String {.importcpp: "get_city",
    header: "cheerp/clientlib.h".}

proc get_country*(this: var PaymentAddress): ptr String {.
    importcpp: "get_country", header: "cheerp/clientlib.h".}

proc get_dependentLocality*(this: var PaymentAddress): ptr String {.
    importcpp: "get_dependentLocality", header: "cheerp/clientlib.h".}

proc get_languageCode*(this: var PaymentAddress): ptr String {.
    importcpp: "get_languageCode", header: "cheerp/clientlib.h".}

proc get_organization*(this: var PaymentAddress): ptr String {.
    importcpp: "get_organization", header: "cheerp/clientlib.h".}

proc get_phone*(this: var PaymentAddress): ptr String {.importcpp: "get_phone",
    header: "cheerp/clientlib.h".}

proc get_postalCode*(this: var PaymentAddress): ptr String {.
    importcpp: "get_postalCode", header: "cheerp/clientlib.h".}

proc get_recipient*(this: var PaymentAddress): ptr String {.
    importcpp: "get_recipient", header: "cheerp/clientlib.h".}

proc get_region*(this: var PaymentAddress): ptr String {.
    importcpp: "get_region", header: "cheerp/clientlib.h".}

proc get_sortingCode*(this: var PaymentAddress): ptr String {.
    importcpp: "get_sortingCode", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PaymentAddress): ptr PaymentAddress {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PaymentAddress; a2: ptr PaymentAddress) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPaymentAddress*(): PaymentAddress {.constructor,
    importcpp: "client::PaymentAddress(@)", header: "cheerp/clientlib.h".}

proc get_shippingaddresschange*(this: var PaymentRequestEventMap): ptr Event {.
    importcpp: "get_shippingaddresschange", header: "cheerp/clientlib.h".}

proc set_shippingaddresschange*(this: var PaymentRequestEventMap; a2: ptr Event) {.
    importcpp: "set_shippingaddresschange", header: "cheerp/clientlib.h".}

proc get_shippingoptionchange*(this: var PaymentRequestEventMap): ptr Event {.
    importcpp: "get_shippingoptionchange", header: "cheerp/clientlib.h".}

proc set_shippingoptionchange*(this: var PaymentRequestEventMap; a2: ptr Event) {.
    importcpp: "set_shippingoptionchange", header: "cheerp/clientlib.h".}

proc get_id*(this: var PaymentRequest): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_onshippingaddresschange*(this: var PaymentRequest): ptr EventListener {.
    importcpp: "get_onshippingaddresschange", header: "cheerp/clientlib.h".}

proc set_onshippingaddresschange*(this: var PaymentRequest;
                                  a2: ptr EventListener) {.
    importcpp: "set_onshippingaddresschange", header: "cheerp/clientlib.h".}

proc get_onshippingoptionchange*(this: var PaymentRequest): ptr EventListener {.
    importcpp: "get_onshippingoptionchange", header: "cheerp/clientlib.h".}

proc set_onshippingoptionchange*(this: var PaymentRequest; a2: ptr EventListener) {.
    importcpp: "set_onshippingoptionchange", header: "cheerp/clientlib.h".}

proc get_shippingAddress*(this: var PaymentRequest): ptr PaymentAddress {.
    importcpp: "get_shippingAddress", header: "cheerp/clientlib.h".}

proc get_shippingOption*(this: var PaymentRequest): ptr String {.
    importcpp: "get_shippingOption", header: "cheerp/clientlib.h".}

proc get_shippingType*(this: var PaymentRequest): ptr String {.
    importcpp: "get_shippingType", header: "cheerp/clientlib.h".}

proc abort*(this: var PaymentRequest): ptr Promise {.importcpp: "abort",
    header: "cheerp/clientlib.h".}

proc canMakePayment*(this: var PaymentRequest): ptr Promise {.
    importcpp: "canMakePayment", header: "cheerp/clientlib.h".}

proc show*(this: var PaymentRequest): ptr Promise {.importcpp: "show",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var PaymentRequest; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var PaymentRequest; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var PaymentRequest; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var PaymentRequest; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var PaymentRequest; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var PaymentRequest; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var PaymentRequest; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var PaymentRequest; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var PaymentRequest; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var PaymentRequest; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PaymentRequest): ptr PaymentRequest {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PaymentRequest; a2: ptr PaymentRequest) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPaymentRequest*(methodData: ptr Array;
                              details: ptr PaymentDetailsInit): PaymentRequest {.
    constructor, importcpp: "client::PaymentRequest(@)",
    header: "cheerp/clientlib.h".}

proc constructPaymentRequest*(methodData: ptr Array;
                              details: ptr PaymentDetailsInit;
                              options: ptr PaymentOptions): PaymentRequest {.
    constructor, importcpp: "client::PaymentRequest(@)",
    header: "cheerp/clientlib.h".}

proc updateWith*(this: var PaymentRequestUpdateEvent;
                 detailsPromise: ptr Promise) {.importcpp: "updateWith",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PaymentRequestUpdateEvent): ptr PaymentRequestUpdateEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PaymentRequestUpdateEvent;
                    a2: ptr PaymentRequestUpdateEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPaymentRequestUpdateEvent*(`type`: String): PaymentRequestUpdateEvent {.
    constructor, importcpp: "client::PaymentRequestUpdateEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructPaymentRequestUpdateEvent*(`type`: String;
    eventInitDict: ptr PaymentRequestUpdateEventInit): PaymentRequestUpdateEvent {.
    constructor, importcpp: "client::PaymentRequestUpdateEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_methodName*(this: var PaymentResponse): ptr String {.
    importcpp: "get_methodName", header: "cheerp/clientlib.h".}

proc get_payerEmail*(this: var PaymentResponse): ptr String {.
    importcpp: "get_payerEmail", header: "cheerp/clientlib.h".}

proc get_payerName*(this: var PaymentResponse): ptr String {.
    importcpp: "get_payerName", header: "cheerp/clientlib.h".}

proc get_payerPhone*(this: var PaymentResponse): ptr String {.
    importcpp: "get_payerPhone", header: "cheerp/clientlib.h".}

proc get_requestId*(this: var PaymentResponse): ptr String {.
    importcpp: "get_requestId", header: "cheerp/clientlib.h".}

proc get_shippingAddress*(this: var PaymentResponse): ptr PaymentAddress {.
    importcpp: "get_shippingAddress", header: "cheerp/clientlib.h".}

proc get_shippingOption*(this: var PaymentResponse): ptr String {.
    importcpp: "get_shippingOption", header: "cheerp/clientlib.h".}

proc complete*(this: var PaymentResponse): ptr Promise {.importcpp: "complete",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PaymentResponse): ptr PaymentResponse {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PaymentResponse; a2: ptr PaymentResponse) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPaymentResponse*(): PaymentResponse {.constructor,
    importcpp: "client::PaymentResponse(@)", header: "cheerp/clientlib.h".}

proc get_activeNetworkRequestCount*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_activeNetworkRequestCount", header: "cheerp/clientlib.h".}

proc get_averageFrameTime*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_averageFrameTime", header: "cheerp/clientlib.h".}

proc get_averagePaintTime*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_averagePaintTime", header: "cheerp/clientlib.h".}

proc get_extraInformationEnabled*(this: var PerfWidgetExternal): bool {.
    importcpp: "get_extraInformationEnabled", header: "cheerp/clientlib.h".}

proc get_independentRenderingEnabled*(this: var PerfWidgetExternal): bool {.
    importcpp: "get_independentRenderingEnabled", header: "cheerp/clientlib.h".}

proc get_irDisablingContentString*(this: var PerfWidgetExternal): ptr String {.
    importcpp: "get_irDisablingContentString", header: "cheerp/clientlib.h".}

proc get_irStatusAvailable*(this: var PerfWidgetExternal): bool {.
    importcpp: "get_irStatusAvailable", header: "cheerp/clientlib.h".}

proc get_maxCpuSpeed*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_maxCpuSpeed", header: "cheerp/clientlib.h".}

proc get_paintRequestsPerSecond*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_paintRequestsPerSecond", header: "cheerp/clientlib.h".}

proc get_performanceCounter*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_performanceCounter", header: "cheerp/clientlib.h".}

proc get_performanceCounterFrequency*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "get_performanceCounterFrequency", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var PerfWidgetExternal; eventType: String;
                       callback: ptr Function) {.importcpp: "addEventListener",
    header: "cheerp/clientlib.h".}

proc getMemoryUsage*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "getMemoryUsage", header: "cheerp/clientlib.h".}

proc getProcessCpuUsage*(this: var PerfWidgetExternal): cdouble {.
    importcpp: "getProcessCpuUsage", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var PerfWidgetExternal; eventType: String;
                          callback: ptr Function) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc repositionWindow*(this: var PerfWidgetExternal; x: cdouble; y: cdouble) {.
    importcpp: "repositionWindow", header: "cheerp/clientlib.h".}

proc resizeWindow*(this: var PerfWidgetExternal; width: cdouble; height: cdouble) {.
    importcpp: "resizeWindow", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerfWidgetExternal): ptr PerfWidgetExternal {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerfWidgetExternal; a2: ptr PerfWidgetExternal) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerfWidgetExternal*(): PerfWidgetExternal {.constructor,
    importcpp: "client::PerfWidgetExternal(@)", header: "cheerp/clientlib.h".}

proc get_navigation*(this: var Performance): ptr PerformanceNavigation {.
    importcpp: "get_navigation", header: "cheerp/clientlib.h".}

proc get_timeOrigin*(this: var Performance): cdouble {.
    importcpp: "get_timeOrigin", header: "cheerp/clientlib.h".}

proc get_timing*(this: var Performance): ptr PerformanceTiming {.
    importcpp: "get_timing", header: "cheerp/clientlib.h".}

proc clearMarks*(this: var Performance) {.importcpp: "clearMarks",
    header: "cheerp/clientlib.h".}

proc clearMarks*(this: var Performance; markName: String) {.
    importcpp: "clearMarks", header: "cheerp/clientlib.h".}

proc clearMeasures*(this: var Performance) {.importcpp: "clearMeasures",
    header: "cheerp/clientlib.h".}

proc clearMeasures*(this: var Performance; measureName: String) {.
    importcpp: "clearMeasures", header: "cheerp/clientlib.h".}

proc clearResourceTimings*(this: var Performance) {.
    importcpp: "clearResourceTimings", header: "cheerp/clientlib.h".}

proc mark*(this: var Performance; markName: String) {.importcpp: "mark",
    header: "cheerp/clientlib.h".}

proc measure*(this: var Performance; measureName: String) {.
    importcpp: "measure", header: "cheerp/clientlib.h".}

proc measure*(this: var Performance; measureName: String; startMarkName: String) {.
    importcpp: "measure", header: "cheerp/clientlib.h".}

proc measure*(this: var Performance; measureName: String; startMarkName: String;
              endMarkName: String) {.importcpp: "measure",
                                     header: "cheerp/clientlib.h".}

proc now*(this: var Performance): cdouble {.importcpp: "now",
    header: "cheerp/clientlib.h".}

proc setResourceTimingBufferSize*(this: var Performance; maxSize: cdouble) {.
    importcpp: "setResourceTimingBufferSize", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Performance): ptr Performance {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Performance; a2: ptr Performance) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformance*(): Performance {.constructor,
    importcpp: "client::Performance(@)", header: "cheerp/clientlib.h".}

proc get_duration*(this: var PerformanceEntry): cdouble {.
    importcpp: "get_duration", header: "cheerp/clientlib.h".}

proc get_entryType*(this: var PerformanceEntry): ptr String {.
    importcpp: "get_entryType", header: "cheerp/clientlib.h".}

proc get_name*(this: var PerformanceEntry): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_startTime*(this: var PerformanceEntry): cdouble {.
    importcpp: "get_startTime", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceEntry): ptr PerformanceEntry {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceEntry; a2: ptr PerformanceEntry) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformanceEntry*(): PerformanceEntry {.constructor,
    importcpp: "client::PerformanceEntry(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceMark): ptr PerformanceMark {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceMark; a2: ptr PerformanceMark) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformanceMark*(): PerformanceMark {.constructor,
    importcpp: "client::PerformanceMark(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceMeasure): ptr PerformanceMeasure {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceMeasure; a2: ptr PerformanceMeasure) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformanceMeasure*(): PerformanceMeasure {.constructor,
    importcpp: "client::PerformanceMeasure(@)", header: "cheerp/clientlib.h".}

proc get_redirectCount*(this: var PerformanceNavigation): cdouble {.
    importcpp: "get_redirectCount", header: "cheerp/clientlib.h".}

proc get_type*(this: var PerformanceNavigation): cdouble {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceNavigation): ptr PerformanceNavigation {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceNavigation;
                    a2: ptr PerformanceNavigation) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructPerformanceNavigation*(): PerformanceNavigation {.constructor,
    importcpp: "client::PerformanceNavigation(@)", header: "cheerp/clientlib.h".}

proc get_TYPE_BACK_FORWARD*(this: var PerformanceNavigation): cdouble {.
    importcpp: "get_TYPE_BACK_FORWARD", header: "cheerp/clientlib.h".}

proc get_TYPE_NAVIGATE*(this: var PerformanceNavigation): cdouble {.
    importcpp: "get_TYPE_NAVIGATE", header: "cheerp/clientlib.h".}

proc get_TYPE_RELOAD*(this: var PerformanceNavigation): cdouble {.
    importcpp: "get_TYPE_RELOAD", header: "cheerp/clientlib.h".}

proc get_TYPE_RESERVED*(this: var PerformanceNavigation): cdouble {.
    importcpp: "get_TYPE_RESERVED", header: "cheerp/clientlib.h".}

proc get_connectEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_connectEnd", header: "cheerp/clientlib.h".}

proc get_connectStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_connectStart", header: "cheerp/clientlib.h".}

proc get_domComplete*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domComplete", header: "cheerp/clientlib.h".}

proc get_domContentLoadedEventEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domContentLoadedEventEnd", header: "cheerp/clientlib.h".}

proc get_domContentLoadedEventStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domContentLoadedEventStart", header: "cheerp/clientlib.h".}

proc get_domInteractive*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domInteractive", header: "cheerp/clientlib.h".}

proc get_domLoading*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domLoading", header: "cheerp/clientlib.h".}

proc get_domainLookupEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domainLookupEnd", header: "cheerp/clientlib.h".}

proc get_domainLookupStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_domainLookupStart", header: "cheerp/clientlib.h".}

proc get_fetchStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_fetchStart", header: "cheerp/clientlib.h".}

proc get_loadEventEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_loadEventEnd", header: "cheerp/clientlib.h".}

proc get_loadEventStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_loadEventStart", header: "cheerp/clientlib.h".}

proc get_navigationStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_navigationStart", header: "cheerp/clientlib.h".}

proc get_redirectCount*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_redirectCount", header: "cheerp/clientlib.h".}

proc get_redirectEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_redirectEnd", header: "cheerp/clientlib.h".}

proc get_redirectStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_redirectStart", header: "cheerp/clientlib.h".}

proc get_requestStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_requestStart", header: "cheerp/clientlib.h".}

proc get_responseEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_responseEnd", header: "cheerp/clientlib.h".}

proc get_responseStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_responseStart", header: "cheerp/clientlib.h".}

proc get_type*(this: var PerformanceNavigationTiming): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc get_unloadEventEnd*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_unloadEventEnd", header: "cheerp/clientlib.h".}

proc get_unloadEventStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_unloadEventStart", header: "cheerp/clientlib.h".}

proc get_workerStart*(this: var PerformanceNavigationTiming): cdouble {.
    importcpp: "get_workerStart", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceNavigationTiming): ptr PerformanceNavigationTiming {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceNavigationTiming;
                    a2: ptr PerformanceNavigationTiming) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformanceNavigationTiming*(): PerformanceNavigationTiming {.
    constructor, importcpp: "client::PerformanceNavigationTiming(@)",
    header: "cheerp/clientlib.h".}

proc get_connectEnd*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_connectEnd", header: "cheerp/clientlib.h".}

proc get_connectStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_connectStart", header: "cheerp/clientlib.h".}

proc get_domainLookupEnd*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_domainLookupEnd", header: "cheerp/clientlib.h".}

proc get_domainLookupStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_domainLookupStart", header: "cheerp/clientlib.h".}

proc get_fetchStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_fetchStart", header: "cheerp/clientlib.h".}

proc get_initiatorType*(this: var PerformanceResourceTiming): ptr String {.
    importcpp: "get_initiatorType", header: "cheerp/clientlib.h".}

proc get_redirectEnd*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_redirectEnd", header: "cheerp/clientlib.h".}

proc get_redirectStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_redirectStart", header: "cheerp/clientlib.h".}

proc get_requestStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_requestStart", header: "cheerp/clientlib.h".}

proc get_responseEnd*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_responseEnd", header: "cheerp/clientlib.h".}

proc get_responseStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_responseStart", header: "cheerp/clientlib.h".}

proc get_workerStart*(this: var PerformanceResourceTiming): cdouble {.
    importcpp: "get_workerStart", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceResourceTiming): ptr PerformanceResourceTiming {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceResourceTiming;
                    a2: ptr PerformanceResourceTiming) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformanceResourceTiming*(): PerformanceResourceTiming {.
    constructor, importcpp: "client::PerformanceResourceTiming(@)",
    header: "cheerp/clientlib.h".}

proc get_connectEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_connectEnd", header: "cheerp/clientlib.h".}

proc get_connectStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_connectStart", header: "cheerp/clientlib.h".}

proc get_domComplete*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domComplete", header: "cheerp/clientlib.h".}

proc get_domContentLoadedEventEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domContentLoadedEventEnd", header: "cheerp/clientlib.h".}

proc get_domContentLoadedEventStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domContentLoadedEventStart", header: "cheerp/clientlib.h".}

proc get_domInteractive*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domInteractive", header: "cheerp/clientlib.h".}

proc get_domLoading*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domLoading", header: "cheerp/clientlib.h".}

proc get_domainLookupEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domainLookupEnd", header: "cheerp/clientlib.h".}

proc get_domainLookupStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_domainLookupStart", header: "cheerp/clientlib.h".}

proc get_fetchStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_fetchStart", header: "cheerp/clientlib.h".}

proc get_loadEventEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_loadEventEnd", header: "cheerp/clientlib.h".}

proc get_loadEventStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_loadEventStart", header: "cheerp/clientlib.h".}

proc get_msFirstPaint*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_msFirstPaint", header: "cheerp/clientlib.h".}

proc get_navigationStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_navigationStart", header: "cheerp/clientlib.h".}

proc get_redirectEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_redirectEnd", header: "cheerp/clientlib.h".}

proc get_redirectStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_redirectStart", header: "cheerp/clientlib.h".}

proc get_requestStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_requestStart", header: "cheerp/clientlib.h".}

proc get_responseEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_responseEnd", header: "cheerp/clientlib.h".}

proc get_responseStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_responseStart", header: "cheerp/clientlib.h".}

proc get_secureConnectionStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_secureConnectionStart", header: "cheerp/clientlib.h".}

proc get_unloadEventEnd*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_unloadEventEnd", header: "cheerp/clientlib.h".}

proc get_unloadEventStart*(this: var PerformanceTiming): cdouble {.
    importcpp: "get_unloadEventStart", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PerformanceTiming): ptr PerformanceTiming {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PerformanceTiming; a2: ptr PerformanceTiming) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPerformanceTiming*(): PerformanceTiming {.constructor,
    importcpp: "client::PerformanceTiming(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PeriodicWave): ptr PeriodicWave {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PeriodicWave; a2: ptr PeriodicWave) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPeriodicWave*(): PeriodicWave {.constructor,
    importcpp: "client::PeriodicWave(@)", header: "cheerp/clientlib.h".}

proc get_state*(this: var PermissionRequest): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc `defer`*(this: var PermissionRequest) {.importcpp: "defer",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PermissionRequest): ptr PermissionRequest {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PermissionRequest; a2: ptr PermissionRequest) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPermissionRequest*(): PermissionRequest {.constructor,
    importcpp: "client::PermissionRequest(@)", header: "cheerp/clientlib.h".}

proc get_permissionRequest*(this: var PermissionRequestedEvent): ptr PermissionRequest {.
    importcpp: "get_permissionRequest", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PermissionRequestedEvent): ptr PermissionRequestedEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PermissionRequestedEvent;
                    a2: ptr PermissionRequestedEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPermissionRequestedEvent*(): PermissionRequestedEvent {.
    constructor, importcpp: "client::PermissionRequestedEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_description*(this: var Plugin): ptr String {.
    importcpp: "get_description", header: "cheerp/clientlib.h".}

proc get_filename*(this: var Plugin): ptr String {.importcpp: "get_filename",
    header: "cheerp/clientlib.h".}

proc get_length*(this: var Plugin): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_name*(this: var Plugin): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_version*(this: var Plugin): ptr String {.importcpp: "get_version",
    header: "cheerp/clientlib.h".}

proc item*(this: var Plugin; index: cdouble): ptr MimeType {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc namedItem*(this: var Plugin; `type`: String): ptr MimeType {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc `[]`*(this: var Plugin; index: cint): ptr MimeType {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Plugin; index: cint): ptr MimeType {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Plugin): ptr Plugin {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Plugin; a2: ptr Plugin) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPlugin*(): Plugin {.constructor, importcpp: "client::Plugin(@)",
                                  header: "cheerp/clientlib.h".}

proc get_length*(this: var PluginArray): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var PluginArray; index: cdouble): ptr Plugin {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc namedItem*(this: var PluginArray; name: String): ptr Plugin {.
    importcpp: "namedItem", header: "cheerp/clientlib.h".}

proc refresh*(this: var PluginArray) {.importcpp: "refresh",
                                       header: "cheerp/clientlib.h".}

proc refresh*(this: var PluginArray; reload: bool) {.importcpp: "refresh",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var PluginArray; index: cint): ptr Plugin {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: PluginArray; index: cint): ptr Plugin {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PluginArray): ptr PluginArray {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PluginArray; a2: ptr PluginArray) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPluginArray*(): PluginArray {.constructor,
    importcpp: "client::PluginArray(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var PointerEvent): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_hwTimestamp*(this: var PointerEvent): cdouble {.
    importcpp: "get_hwTimestamp", header: "cheerp/clientlib.h".}

proc get_isPrimary*(this: var PointerEvent): bool {.importcpp: "get_isPrimary",
    header: "cheerp/clientlib.h".}

proc get_pointerId*(this: var PointerEvent): cdouble {.
    importcpp: "get_pointerId", header: "cheerp/clientlib.h".}

proc get_pressure*(this: var PointerEvent): cdouble {.importcpp: "get_pressure",
    header: "cheerp/clientlib.h".}

proc get_rotation*(this: var PointerEvent): cdouble {.importcpp: "get_rotation",
    header: "cheerp/clientlib.h".}

proc get_tiltX*(this: var PointerEvent): cdouble {.importcpp: "get_tiltX",
    header: "cheerp/clientlib.h".}

proc get_tiltY*(this: var PointerEvent): cdouble {.importcpp: "get_tiltY",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var PointerEvent): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc getCurrentPoint*(this: var PointerEvent; element: ptr Element) {.
    importcpp: "getCurrentPoint", header: "cheerp/clientlib.h".}

proc getIntermediatePoints*(this: var PointerEvent; element: ptr Element) {.
    importcpp: "getIntermediatePoints", header: "cheerp/clientlib.h".}

proc initPointerEvent*(this: var PointerEvent; typeArg: String;
                       canBubbleArg: bool; cancelableArg: bool;
                       viewArg: ptr Window; detailArg: cdouble;
                       screenXArg: cdouble; screenYArg: cdouble;
                       clientXArg: cdouble; clientYArg: cdouble;
                       ctrlKeyArg: bool; altKeyArg: bool; shiftKeyArg: bool;
                       metaKeyArg: bool; buttonArg: cdouble;
                       relatedTargetArg: ptr EventTarget; offsetXArg: cdouble;
                       offsetYArg: cdouble; widthArg: cdouble;
                       heightArg: cdouble; pressure: cdouble; rotation: cdouble;
                       tiltX: cdouble; tiltY: cdouble; pointerIdArg: cdouble;
                       pointerType: ptr Object; hwTimestampArg: cdouble;
                       isPrimary: bool) {.importcpp: "initPointerEvent",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PointerEvent): ptr PointerEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PointerEvent; a2: ptr PointerEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPointerEvent*(typeArg: String): PointerEvent {.constructor,
    importcpp: "client::PointerEvent(@)", header: "cheerp/clientlib.h".}

proc constructPointerEvent*(typeArg: String; eventInitDict: ptr PointerEventInit): PointerEvent {.
    constructor, importcpp: "client::PointerEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PopStateEvent): ptr PopStateEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PopStateEvent; a2: ptr PopStateEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPopStateEvent*(`type`: String): PopStateEvent {.constructor,
    importcpp: "client::PopStateEvent(@)", header: "cheerp/clientlib.h".}

proc constructPopStateEvent*(`type`: String;
                             eventInitDict: ptr PopStateEventInit): PopStateEvent {.
    constructor, importcpp: "client::PopStateEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_coords*(this: var Position): ptr Coordinates {.importcpp: "get_coords",
    header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var Position): cdouble {.importcpp: "get_timestamp",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Position): ptr Position {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Position; a2: ptr Position) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPosition*(): Position {.constructor,
                                      importcpp: "client::Position(@)",
                                      header: "cheerp/clientlib.h".}

proc get_code*(this: var PositionError): cdouble {.importcpp: "get_code",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var PositionError): ptr String {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc toString*(this: var PositionError): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PositionError): ptr PositionError {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PositionError; a2: ptr PositionError) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPositionError*(): PositionError {.constructor,
    importcpp: "client::PositionError(@)", header: "cheerp/clientlib.h".}

proc get_PERMISSION_DENIED*(this: var PositionError): cdouble {.
    importcpp: "get_PERMISSION_DENIED", header: "cheerp/clientlib.h".}

proc get_POSITION_UNAVAILABLE*(this: var PositionError): cdouble {.
    importcpp: "get_POSITION_UNAVAILABLE", header: "cheerp/clientlib.h".}

proc get_TIMEOUT*(this: var PositionError): cdouble {.importcpp: "get_TIMEOUT",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var ProcessingInstruction): ptr String {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ProcessingInstruction): ptr ProcessingInstruction {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ProcessingInstruction;
                    a2: ptr ProcessingInstruction) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructProcessingInstruction*(): ProcessingInstruction {.constructor,
    importcpp: "client::ProcessingInstruction(@)", header: "cheerp/clientlib.h".}

proc get_promise*(this: var PromiseRejectionEvent): ptr Promise {.
    importcpp: "get_promise", header: "cheerp/clientlib.h".}

proc get_promise*(this: var PromiseRejectionEventInit): ptr Promise {.
    importcpp: "get_promise", header: "cheerp/clientlib.h".}

proc set_promise*(this: var PromiseRejectionEventInit; a2: ptr Promise) {.
    importcpp: "set_promise", header: "cheerp/clientlib.h".}

proc set_reason*(this: var PromiseRejectionEventInit; a2: ptr Object) {.
    importcpp: "set_reason", header: "cheerp/clientlib.h".}

proc get_supportedContentEncodings*(this: var PushManager): ptr ReadonlyArray[
    String] {.importcpp: "get_supportedContentEncodings",
              header: "cheerp/clientlib.h".}

proc getSubscription*(this: var PushManager): ptr Promise {.
    importcpp: "getSubscription", header: "cheerp/clientlib.h".}

proc permissionState*(this: var PushManager): ptr Promise {.
    importcpp: "permissionState", header: "cheerp/clientlib.h".}

proc permissionState*(this: var PushManager;
                      options: ptr PushSubscriptionOptionsInit): ptr Promise {.
    importcpp: "permissionState", header: "cheerp/clientlib.h".}

proc subscribe*(this: var PushManager): ptr Promise {.importcpp: "subscribe",
    header: "cheerp/clientlib.h".}

proc subscribe*(this: var PushManager; options: ptr PushSubscriptionOptionsInit): ptr Promise {.
    importcpp: "subscribe", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PushManager): ptr PushManager {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PushManager; a2: ptr PushManager) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPushManager*(): PushManager {.constructor,
    importcpp: "client::PushManager(@)", header: "cheerp/clientlib.h".}

proc get_endpoint*(this: var PushSubscription): ptr String {.
    importcpp: "get_endpoint", header: "cheerp/clientlib.h".}

proc get_expirationTime*(this: var PushSubscription): cdouble {.
    importcpp: "get_expirationTime", header: "cheerp/clientlib.h".}

proc get_options*(this: var PushSubscription): ptr PushSubscriptionOptions {.
    importcpp: "get_options", header: "cheerp/clientlib.h".}

proc unsubscribe*(this: var PushSubscription): ptr Promise {.
    importcpp: "unsubscribe", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PushSubscription): ptr PushSubscription {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PushSubscription; a2: ptr PushSubscription) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPushSubscription*(): PushSubscription {.constructor,
    importcpp: "client::PushSubscription(@)", header: "cheerp/clientlib.h".}

proc get_applicationServerKey*(this: var PushSubscriptionOptions): ptr ArrayBuffer {.
    importcpp: "get_applicationServerKey", header: "cheerp/clientlib.h".}

proc get_userVisibleOnly*(this: var PushSubscriptionOptions): bool {.
    importcpp: "get_userVisibleOnly", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var PushSubscriptionOptions): ptr PushSubscriptionOptions {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var PushSubscriptionOptions;
                    a2: ptr PushSubscriptionOptions) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructPushSubscriptionOptions*(): PushSubscriptionOptions {.constructor,
    importcpp: "client::PushSubscriptionOptions(@)",
    header: "cheerp/clientlib.h".}

proc get_tone*(this: var RTCDTMFToneChangeEvent): ptr String {.
    importcpp: "get_tone", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCDTMFToneChangeEvent): ptr RTCDTMFToneChangeEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCDTMFToneChangeEvent;
                    a2: ptr RTCDTMFToneChangeEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCDTMFToneChangeEvent*(typeArg: String; eventInitDict: ptr RTCDTMFToneChangeEventInit): RTCDTMFToneChangeEvent {.
    constructor, importcpp: "client::RTCDTMFToneChangeEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_dtlsstatechange*(this: var RTCDtlsTransportEventMap): ptr RTCDtlsTransportStateChangedEvent {.
    importcpp: "get_dtlsstatechange", header: "cheerp/clientlib.h".}

proc set_dtlsstatechange*(this: var RTCDtlsTransportEventMap;
                          a2: ptr RTCDtlsTransportStateChangedEvent) {.
    importcpp: "set_dtlsstatechange", header: "cheerp/clientlib.h".}

proc get_error*(this: var RTCDtlsTransportEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var RTCDtlsTransportEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc getStats*(this: var RTCStatsProvider): ptr Promise {.importcpp: "getStats",
    header: "cheerp/clientlib.h".}

proc msGetStats*(this: var RTCStatsProvider): ptr Promise {.
    importcpp: "msGetStats", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCStatsProvider): ptr RTCStatsProvider {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCStatsProvider; a2: ptr RTCStatsProvider) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCStatsProvider*(): RTCStatsProvider {.constructor,
    importcpp: "client::RTCStatsProvider(@)", header: "cheerp/clientlib.h".}

proc get_ondtlsstatechange*(this: var RTCDtlsTransport): ptr EventListener {.
    importcpp: "get_ondtlsstatechange", header: "cheerp/clientlib.h".}

proc set_ondtlsstatechange*(this: var RTCDtlsTransport; a2: ptr EventListener) {.
    importcpp: "set_ondtlsstatechange", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var RTCDtlsTransport): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var RTCDtlsTransport; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_state*(this: var RTCDtlsTransport): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc get_transport*(this: var RTCDtlsTransport): ptr RTCIceTransport {.
    importcpp: "get_transport", header: "cheerp/clientlib.h".}

proc getLocalParameters*(this: var RTCDtlsTransport): ptr RTCDtlsParameters {.
    importcpp: "getLocalParameters", header: "cheerp/clientlib.h".}

proc getRemoteCertificates*(this: var RTCDtlsTransport): ptr Array {.
    importcpp: "getRemoteCertificates", header: "cheerp/clientlib.h".}

proc getRemoteParameters*(this: var RTCDtlsTransport): ptr RTCDtlsParameters {.
    importcpp: "getRemoteParameters", header: "cheerp/clientlib.h".}

proc start*(this: var RTCDtlsTransport; remoteParameters: ptr RTCDtlsParameters) {.
    importcpp: "start", header: "cheerp/clientlib.h".}

proc stop*(this: var RTCDtlsTransport) {.importcpp: "stop",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtlsTransport; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtlsTransport; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtlsTransport; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtlsTransport; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtlsTransport; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtlsTransport; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtlsTransport; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtlsTransport; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtlsTransport; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtlsTransport; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCDtlsTransport): ptr RTCDtlsTransport {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCDtlsTransport; a2: ptr RTCDtlsTransport) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCDtlsTransport*(transport: ptr RTCIceTransport): RTCDtlsTransport {.
    constructor, importcpp: "client::RTCDtlsTransport(@)",
    header: "cheerp/clientlib.h".}

proc get_state*(this: var RTCDtlsTransportStateChangedEvent): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCDtlsTransportStateChangedEvent): ptr RTCDtlsTransportStateChangedEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCDtlsTransportStateChangedEvent;
                    a2: ptr RTCDtlsTransportStateChangedEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCDtlsTransportStateChangedEvent*(): RTCDtlsTransportStateChangedEvent {.
    constructor, importcpp: "client::RTCDtlsTransportStateChangedEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_tonechange*(this: var RTCDtmfSenderEventMap): ptr RTCDTMFToneChangeEvent {.
    importcpp: "get_tonechange", header: "cheerp/clientlib.h".}

proc set_tonechange*(this: var RTCDtmfSenderEventMap;
                     a2: ptr RTCDTMFToneChangeEvent) {.
    importcpp: "set_tonechange", header: "cheerp/clientlib.h".}

proc get_canInsertDTMF*(this: var RTCDtmfSender): bool {.
    importcpp: "get_canInsertDTMF", header: "cheerp/clientlib.h".}

proc get_duration*(this: var RTCDtmfSender): cdouble {.
    importcpp: "get_duration", header: "cheerp/clientlib.h".}

proc get_interToneGap*(this: var RTCDtmfSender): cdouble {.
    importcpp: "get_interToneGap", header: "cheerp/clientlib.h".}

proc get_ontonechange*(this: var RTCDtmfSender): ptr EventListener {.
    importcpp: "get_ontonechange", header: "cheerp/clientlib.h".}

proc set_ontonechange*(this: var RTCDtmfSender; a2: ptr EventListener) {.
    importcpp: "set_ontonechange", header: "cheerp/clientlib.h".}

proc get_sender*(this: var RTCDtmfSender): ptr RTCRtpSender {.
    importcpp: "get_sender", header: "cheerp/clientlib.h".}

proc get_toneBuffer*(this: var RTCDtmfSender): ptr String {.
    importcpp: "get_toneBuffer", header: "cheerp/clientlib.h".}

proc insertDTMF*(this: var RTCDtmfSender; tones: String) {.
    importcpp: "insertDTMF", header: "cheerp/clientlib.h".}

proc insertDTMF*(this: var RTCDtmfSender; tones: String; duration: cdouble) {.
    importcpp: "insertDTMF", header: "cheerp/clientlib.h".}

proc insertDTMF*(this: var RTCDtmfSender; tones: String; duration: cdouble;
                 interToneGap: cdouble) {.importcpp: "insertDTMF",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtmfSender; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtmfSender; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtmfSender; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtmfSender; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCDtmfSender; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtmfSender; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtmfSender; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtmfSender; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtmfSender; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCDtmfSender; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCDtmfSender): ptr RTCDtmfSender {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCDtmfSender; a2: ptr RTCDtmfSender) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCDtmfSender*(sender: ptr RTCRtpSender): RTCDtmfSender {.
    constructor, importcpp: "client::RTCDtmfSender(@)",
    header: "cheerp/clientlib.h".}

proc get_candidate*(this: var RTCIceCandidate): ptr String {.
    importcpp: "get_candidate", header: "cheerp/clientlib.h".}

proc set_candidate*(this: var RTCIceCandidate; a2: String) {.
    importcpp: "set_candidate", header: "cheerp/clientlib.h".}

proc get_sdpMLineIndex*(this: var RTCIceCandidate): cdouble {.
    importcpp: "get_sdpMLineIndex", header: "cheerp/clientlib.h".}

proc set_sdpMLineIndex*(this: var RTCIceCandidate; a2: cdouble) {.
    importcpp: "set_sdpMLineIndex", header: "cheerp/clientlib.h".}

proc get_sdpMid*(this: var RTCIceCandidate): ptr String {.
    importcpp: "get_sdpMid", header: "cheerp/clientlib.h".}

proc set_sdpMid*(this: var RTCIceCandidate; a2: String) {.
    importcpp: "set_sdpMid", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCIceCandidate): ptr RTCIceCandidate {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCIceCandidate; a2: ptr RTCIceCandidate) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCIceCandidate*(): RTCIceCandidate {.constructor,
    importcpp: "client::RTCIceCandidate(@)", header: "cheerp/clientlib.h".}

proc constructRTCIceCandidate*(candidateInitDict: ptr RTCIceCandidateInit): RTCIceCandidate {.
    constructor, importcpp: "client::RTCIceCandidate(@)",
    header: "cheerp/clientlib.h".}

proc get_pair*(this: var RTCIceCandidatePairChangedEvent): ptr RTCIceCandidatePair {.
    importcpp: "get_pair", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCIceCandidatePairChangedEvent): ptr RTCIceCandidatePairChangedEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCIceCandidatePairChangedEvent;
                    a2: ptr RTCIceCandidatePairChangedEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCIceCandidatePairChangedEvent*(): RTCIceCandidatePairChangedEvent {.
    constructor, importcpp: "client::RTCIceCandidatePairChangedEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_error*(this: var RTCIceGathererEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var RTCIceGathererEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_localcandidate*(this: var RTCIceGathererEventMap): ptr RTCIceGathererEvent {.
    importcpp: "get_localcandidate", header: "cheerp/clientlib.h".}

proc set_localcandidate*(this: var RTCIceGathererEventMap;
                         a2: ptr RTCIceGathererEvent) {.
    importcpp: "set_localcandidate", header: "cheerp/clientlib.h".}

proc get_component*(this: var RTCIceGatherer): ptr String {.
    importcpp: "get_component", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var RTCIceGatherer): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var RTCIceGatherer; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onlocalcandidate*(this: var RTCIceGatherer): ptr EventListener {.
    importcpp: "get_onlocalcandidate", header: "cheerp/clientlib.h".}

proc set_onlocalcandidate*(this: var RTCIceGatherer; a2: ptr EventListener) {.
    importcpp: "set_onlocalcandidate", header: "cheerp/clientlib.h".}

proc createAssociatedGatherer*(this: var RTCIceGatherer): ptr RTCIceGatherer {.
    importcpp: "createAssociatedGatherer", header: "cheerp/clientlib.h".}

proc getLocalCandidates*(this: var RTCIceGatherer): ptr Array {.
    importcpp: "getLocalCandidates", header: "cheerp/clientlib.h".}

proc getLocalParameters*(this: var RTCIceGatherer): ptr RTCIceParameters {.
    importcpp: "getLocalParameters", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceGatherer; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceGatherer; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceGatherer; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceGatherer; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceGatherer; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceGatherer; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceGatherer; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceGatherer; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceGatherer; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceGatherer; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCIceGatherer): ptr RTCIceGatherer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCIceGatherer; a2: ptr RTCIceGatherer) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCIceGatherer*(options: ptr RTCIceGatherOptions): RTCIceGatherer {.
    constructor, importcpp: "client::RTCIceGatherer(@)",
    header: "cheerp/clientlib.h".}

proc get_candidate*(this: var RTCIceGathererEvent): ptr RTCIceCandidateDictionary {.
    importcpp: "get_candidate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCIceGathererEvent): ptr RTCIceGathererEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCIceGathererEvent; a2: ptr RTCIceGathererEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCIceGathererEvent*(): RTCIceGathererEvent {.constructor,
    importcpp: "client::RTCIceGathererEvent(@)", header: "cheerp/clientlib.h".}

proc get_candidatepairchange*(this: var RTCIceTransportEventMap): ptr RTCIceCandidatePairChangedEvent {.
    importcpp: "get_candidatepairchange", header: "cheerp/clientlib.h".}

proc set_candidatepairchange*(this: var RTCIceTransportEventMap;
                              a2: ptr RTCIceCandidatePairChangedEvent) {.
    importcpp: "set_candidatepairchange", header: "cheerp/clientlib.h".}

proc get_icestatechange*(this: var RTCIceTransportEventMap): ptr RTCIceTransportStateChangedEvent {.
    importcpp: "get_icestatechange", header: "cheerp/clientlib.h".}

proc set_icestatechange*(this: var RTCIceTransportEventMap;
                         a2: ptr RTCIceTransportStateChangedEvent) {.
    importcpp: "set_icestatechange", header: "cheerp/clientlib.h".}

proc get_component*(this: var RTCIceTransport): ptr String {.
    importcpp: "get_component", header: "cheerp/clientlib.h".}

proc get_iceGatherer*(this: var RTCIceTransport): ptr RTCIceGatherer {.
    importcpp: "get_iceGatherer", header: "cheerp/clientlib.h".}

proc get_oncandidatepairchange*(this: var RTCIceTransport): ptr EventListener {.
    importcpp: "get_oncandidatepairchange", header: "cheerp/clientlib.h".}

proc set_oncandidatepairchange*(this: var RTCIceTransport; a2: ptr EventListener) {.
    importcpp: "set_oncandidatepairchange", header: "cheerp/clientlib.h".}

proc get_onicestatechange*(this: var RTCIceTransport): ptr EventListener {.
    importcpp: "get_onicestatechange", header: "cheerp/clientlib.h".}

proc set_onicestatechange*(this: var RTCIceTransport; a2: ptr EventListener) {.
    importcpp: "set_onicestatechange", header: "cheerp/clientlib.h".}

proc get_role*(this: var RTCIceTransport): ptr String {.importcpp: "get_role",
    header: "cheerp/clientlib.h".}

proc get_state*(this: var RTCIceTransport): ptr String {.importcpp: "get_state",
    header: "cheerp/clientlib.h".}

proc addRemoteCandidate*(this: var RTCIceTransport;
                         remoteCandidate: ptr RTCIceCandidateDictionary) {.
    importcpp: "addRemoteCandidate", header: "cheerp/clientlib.h".}

proc addRemoteCandidate*(this: var RTCIceTransport;
                         remoteCandidate: ptr RTCIceCandidateComplete) {.
    importcpp: "addRemoteCandidate", header: "cheerp/clientlib.h".}

proc createAssociatedTransport*(this: var RTCIceTransport): ptr RTCIceTransport {.
    importcpp: "createAssociatedTransport", header: "cheerp/clientlib.h".}

proc getNominatedCandidatePair*(this: var RTCIceTransport): ptr RTCIceCandidatePair {.
    importcpp: "getNominatedCandidatePair", header: "cheerp/clientlib.h".}

proc getRemoteCandidates*(this: var RTCIceTransport): ptr Array {.
    importcpp: "getRemoteCandidates", header: "cheerp/clientlib.h".}

proc getRemoteParameters*(this: var RTCIceTransport): ptr RTCIceParameters {.
    importcpp: "getRemoteParameters", header: "cheerp/clientlib.h".}

proc setRemoteCandidates*(this: var RTCIceTransport; remoteCandidates: ptr Array) {.
    importcpp: "setRemoteCandidates", header: "cheerp/clientlib.h".}

proc start*(this: var RTCIceTransport; gatherer: ptr RTCIceGatherer;
            remoteParameters: ptr RTCIceParameters) {.importcpp: "start",
    header: "cheerp/clientlib.h".}

proc stop*(this: var RTCIceTransport) {.importcpp: "stop",
                                        header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceTransport; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceTransport; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceTransport; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceTransport; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCIceTransport; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceTransport; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceTransport; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceTransport; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceTransport; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCIceTransport; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCIceTransport): ptr RTCIceTransport {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCIceTransport; a2: ptr RTCIceTransport) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCIceTransport*(): RTCIceTransport {.constructor,
    importcpp: "client::RTCIceTransport(@)", header: "cheerp/clientlib.h".}

proc get_state*(this: var RTCIceTransportStateChangedEvent): ptr String {.
    importcpp: "get_state", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCIceTransportStateChangedEvent): ptr RTCIceTransportStateChangedEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCIceTransportStateChangedEvent;
                    a2: ptr RTCIceTransportStateChangedEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCIceTransportStateChangedEvent*(): RTCIceTransportStateChangedEvent {.
    constructor, importcpp: "client::RTCIceTransportStateChangedEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_addstream*(this: var RTCPeerConnectionEventMap): ptr MediaStreamEvent {.
    importcpp: "get_addstream", header: "cheerp/clientlib.h".}

proc set_addstream*(this: var RTCPeerConnectionEventMap;
                    a2: ptr MediaStreamEvent) {.importcpp: "set_addstream",
    header: "cheerp/clientlib.h".}

proc get_icecandidate*(this: var RTCPeerConnectionEventMap): ptr RTCPeerConnectionIceEvent {.
    importcpp: "get_icecandidate", header: "cheerp/clientlib.h".}

proc set_icecandidate*(this: var RTCPeerConnectionEventMap;
                       a2: ptr RTCPeerConnectionIceEvent) {.
    importcpp: "set_icecandidate", header: "cheerp/clientlib.h".}

proc get_iceconnectionstatechange*(this: var RTCPeerConnectionEventMap): ptr Event {.
    importcpp: "get_iceconnectionstatechange", header: "cheerp/clientlib.h".}

proc set_iceconnectionstatechange*(this: var RTCPeerConnectionEventMap;
                                   a2: ptr Event) {.
    importcpp: "set_iceconnectionstatechange", header: "cheerp/clientlib.h".}

proc get_icegatheringstatechange*(this: var RTCPeerConnectionEventMap): ptr Event {.
    importcpp: "get_icegatheringstatechange", header: "cheerp/clientlib.h".}

proc set_icegatheringstatechange*(this: var RTCPeerConnectionEventMap;
                                  a2: ptr Event) {.
    importcpp: "set_icegatheringstatechange", header: "cheerp/clientlib.h".}

proc get_negotiationneeded*(this: var RTCPeerConnectionEventMap): ptr Event {.
    importcpp: "get_negotiationneeded", header: "cheerp/clientlib.h".}

proc set_negotiationneeded*(this: var RTCPeerConnectionEventMap; a2: ptr Event) {.
    importcpp: "set_negotiationneeded", header: "cheerp/clientlib.h".}

proc get_removestream*(this: var RTCPeerConnectionEventMap): ptr MediaStreamEvent {.
    importcpp: "get_removestream", header: "cheerp/clientlib.h".}

proc set_removestream*(this: var RTCPeerConnectionEventMap;
                       a2: ptr MediaStreamEvent) {.
    importcpp: "set_removestream", header: "cheerp/clientlib.h".}

proc get_signalingstatechange*(this: var RTCPeerConnectionEventMap): ptr Event {.
    importcpp: "get_signalingstatechange", header: "cheerp/clientlib.h".}

proc set_signalingstatechange*(this: var RTCPeerConnectionEventMap;
                               a2: ptr Event) {.
    importcpp: "set_signalingstatechange", header: "cheerp/clientlib.h".}

proc get_canTrickleIceCandidates*(this: var RTCPeerConnection): bool {.
    importcpp: "get_canTrickleIceCandidates", header: "cheerp/clientlib.h".}

proc get_iceConnectionState*(this: var RTCPeerConnection): ptr String {.
    importcpp: "get_iceConnectionState", header: "cheerp/clientlib.h".}

proc get_iceGatheringState*(this: var RTCPeerConnection): ptr String {.
    importcpp: "get_iceGatheringState", header: "cheerp/clientlib.h".}

proc get_localDescription*(this: var RTCPeerConnection): ptr RTCSessionDescription {.
    importcpp: "get_localDescription", header: "cheerp/clientlib.h".}

proc get_onaddstream*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_onaddstream", header: "cheerp/clientlib.h".}

proc set_onaddstream*(this: var RTCPeerConnection; a2: ptr EventListener) {.
    importcpp: "set_onaddstream", header: "cheerp/clientlib.h".}

proc get_onicecandidate*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_onicecandidate", header: "cheerp/clientlib.h".}

proc set_onicecandidate*(this: var RTCPeerConnection; a2: ptr EventListener) {.
    importcpp: "set_onicecandidate", header: "cheerp/clientlib.h".}

proc get_oniceconnectionstatechange*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_oniceconnectionstatechange", header: "cheerp/clientlib.h".}

proc set_oniceconnectionstatechange*(this: var RTCPeerConnection;
                                     a2: ptr EventListener) {.
    importcpp: "set_oniceconnectionstatechange", header: "cheerp/clientlib.h".}

proc get_onicegatheringstatechange*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_onicegatheringstatechange", header: "cheerp/clientlib.h".}

proc set_onicegatheringstatechange*(this: var RTCPeerConnection;
                                    a2: ptr EventListener) {.
    importcpp: "set_onicegatheringstatechange", header: "cheerp/clientlib.h".}

proc get_onnegotiationneeded*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_onnegotiationneeded", header: "cheerp/clientlib.h".}

proc set_onnegotiationneeded*(this: var RTCPeerConnection; a2: ptr EventListener) {.
    importcpp: "set_onnegotiationneeded", header: "cheerp/clientlib.h".}

proc get_onremovestream*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_onremovestream", header: "cheerp/clientlib.h".}

proc set_onremovestream*(this: var RTCPeerConnection; a2: ptr EventListener) {.
    importcpp: "set_onremovestream", header: "cheerp/clientlib.h".}

proc get_onsignalingstatechange*(this: var RTCPeerConnection): ptr EventListener {.
    importcpp: "get_onsignalingstatechange", header: "cheerp/clientlib.h".}

proc set_onsignalingstatechange*(this: var RTCPeerConnection;
                                 a2: ptr EventListener) {.
    importcpp: "set_onsignalingstatechange", header: "cheerp/clientlib.h".}

proc get_remoteDescription*(this: var RTCPeerConnection): ptr RTCSessionDescription {.
    importcpp: "get_remoteDescription", header: "cheerp/clientlib.h".}

proc get_signalingState*(this: var RTCPeerConnection): ptr String {.
    importcpp: "get_signalingState", header: "cheerp/clientlib.h".}

proc addIceCandidate*(this: var RTCPeerConnection;
                      candidate: ptr RTCIceCandidateInit): ptr Promise {.
    importcpp: "addIceCandidate", header: "cheerp/clientlib.h".}

proc addIceCandidate*(this: var RTCPeerConnection;
                      candidate: ptr RTCIceCandidate): ptr Promise {.
    importcpp: "addIceCandidate", header: "cheerp/clientlib.h".}

proc addStream*(this: var RTCPeerConnection; stream: ptr MediaStream) {.
    importcpp: "addStream", header: "cheerp/clientlib.h".}

proc close*(this: var RTCPeerConnection) {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc createAnswer*(this: var RTCPeerConnection): ptr Promise {.
    importcpp: "createAnswer", header: "cheerp/clientlib.h".}

proc createAnswer*(this: var RTCPeerConnection; options: ptr RTCOfferOptions): ptr Promise {.
    importcpp: "createAnswer", header: "cheerp/clientlib.h".}

proc createOffer*(this: var RTCPeerConnection): ptr Promise {.
    importcpp: "createOffer", header: "cheerp/clientlib.h".}

proc createOffer*(this: var RTCPeerConnection; options: ptr RTCOfferOptions): ptr Promise {.
    importcpp: "createOffer", header: "cheerp/clientlib.h".}

proc getConfiguration*(this: var RTCPeerConnection): ptr RTCConfiguration {.
    importcpp: "getConfiguration", header: "cheerp/clientlib.h".}

proc getLocalStreams*(this: var RTCPeerConnection): ptr Array {.
    importcpp: "getLocalStreams", header: "cheerp/clientlib.h".}

proc getRemoteStreams*(this: var RTCPeerConnection): ptr Array {.
    importcpp: "getRemoteStreams", header: "cheerp/clientlib.h".}

proc getStats*(this: var RTCPeerConnection; selector: ptr MediaStreamTrack): ptr Promise {.
    importcpp: "getStats", header: "cheerp/clientlib.h".}

proc getStats*(this: var RTCPeerConnection; selector: ptr MediaStreamTrack;
               successCallback: ptr EventListener): ptr Promise {.
    importcpp: "getStats", header: "cheerp/clientlib.h".}

proc getStats*(this: var RTCPeerConnection; selector: ptr MediaStreamTrack;
               successCallback: ptr EventListener;
               failureCallback: ptr EventListener): ptr Promise {.
    importcpp: "getStats", header: "cheerp/clientlib.h".}

proc getStreamById*(this: var RTCPeerConnection; streamId: String): ptr MediaStream {.
    importcpp: "getStreamById", header: "cheerp/clientlib.h".}

proc removeStream*(this: var RTCPeerConnection; stream: ptr MediaStream) {.
    importcpp: "removeStream", header: "cheerp/clientlib.h".}

proc setLocalDescription*(this: var RTCPeerConnection;
                          description: ptr RTCSessionDescriptionInit): ptr Promise {.
    importcpp: "setLocalDescription", header: "cheerp/clientlib.h".}

proc setRemoteDescription*(this: var RTCPeerConnection;
                           description: ptr RTCSessionDescriptionInit): ptr Promise {.
    importcpp: "setRemoteDescription", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCPeerConnection; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCPeerConnection; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCPeerConnection; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCPeerConnection; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCPeerConnection; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCPeerConnection; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCPeerConnection; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCPeerConnection; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCPeerConnection; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCPeerConnection; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCPeerConnection): ptr RTCPeerConnection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCPeerConnection; a2: ptr RTCPeerConnection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCPeerConnection*(configuration: ptr RTCConfiguration): RTCPeerConnection {.
    constructor, importcpp: "client::RTCPeerConnection(@)",
    header: "cheerp/clientlib.h".}

proc get_candidate*(this: var RTCPeerConnectionIceEvent): ptr RTCIceCandidate {.
    importcpp: "get_candidate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCPeerConnectionIceEvent): ptr RTCPeerConnectionIceEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCPeerConnectionIceEvent;
                    a2: ptr RTCPeerConnectionIceEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCPeerConnectionIceEvent*(`type`: String;
    eventInitDict: ptr RTCPeerConnectionIceEventInit): RTCPeerConnectionIceEvent {.
    constructor, importcpp: "client::RTCPeerConnectionIceEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_error*(this: var RTCRtpReceiverEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var RTCRtpReceiverEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_msdecodercapacitychange*(this: var RTCRtpReceiverEventMap): ptr Event {.
    importcpp: "get_msdecodercapacitychange", header: "cheerp/clientlib.h".}

proc set_msdecodercapacitychange*(this: var RTCRtpReceiverEventMap;
                                  a2: ptr Event) {.
    importcpp: "set_msdecodercapacitychange", header: "cheerp/clientlib.h".}

proc get_msdsh*(this: var RTCRtpReceiverEventMap): ptr Event {.
    importcpp: "get_msdsh", header: "cheerp/clientlib.h".}

proc set_msdsh*(this: var RTCRtpReceiverEventMap; a2: ptr Event) {.
    importcpp: "set_msdsh", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var RTCRtpReceiver): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var RTCRtpReceiver; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onmsdecodercapacitychange*(this: var RTCRtpReceiver): ptr EventListener {.
    importcpp: "get_onmsdecodercapacitychange", header: "cheerp/clientlib.h".}

proc set_onmsdecodercapacitychange*(this: var RTCRtpReceiver;
                                    a2: ptr EventListener) {.
    importcpp: "set_onmsdecodercapacitychange", header: "cheerp/clientlib.h".}

proc get_onmsdsh*(this: var RTCRtpReceiver): ptr EventListener {.
    importcpp: "get_onmsdsh", header: "cheerp/clientlib.h".}

proc set_onmsdsh*(this: var RTCRtpReceiver; a2: ptr EventListener) {.
    importcpp: "set_onmsdsh", header: "cheerp/clientlib.h".}

proc get_rtcpTransport*(this: var RTCRtpReceiver): ptr RTCDtlsTransport {.
    importcpp: "get_rtcpTransport", header: "cheerp/clientlib.h".}

proc get_track*(this: var RTCRtpReceiver): ptr MediaStreamTrack {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc get_transport*(this: var RTCRtpReceiver): ptr RTCDtlsTransport {.
    importcpp: "get_transport", header: "cheerp/clientlib.h".}

proc getContributingSources*(this: var RTCRtpReceiver): ptr Array {.
    importcpp: "getContributingSources", header: "cheerp/clientlib.h".}

proc receive*(this: var RTCRtpReceiver; parameters: ptr RTCRtpParameters) {.
    importcpp: "receive", header: "cheerp/clientlib.h".}

proc requestSendCSRC*(this: var RTCRtpReceiver; csrc: cdouble) {.
    importcpp: "requestSendCSRC", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpReceiver; transport: ptr RTCDtlsTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpReceiver; transport: ptr RTCDtlsTransport;
                   rtcpTransport: ptr RTCDtlsTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpReceiver; transport: ptr RTCSrtpSdesTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpReceiver;
                   transport: ptr RTCSrtpSdesTransport;
                   rtcpTransport: ptr RTCDtlsTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc stop*(this: var RTCRtpReceiver) {.importcpp: "stop",
                                       header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpReceiver; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpReceiver; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpReceiver; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpReceiver; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpReceiver; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpReceiver; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpReceiver; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpReceiver; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpReceiver; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpReceiver; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCRtpReceiver): ptr RTCRtpReceiver {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCRtpReceiver; a2: ptr RTCRtpReceiver) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCRtpReceiver*(transport: ptr RTCDtlsTransport; kind: String): RTCRtpReceiver {.
    constructor, importcpp: "client::RTCRtpReceiver(@)",
    header: "cheerp/clientlib.h".}

proc constructRTCRtpReceiver*(transport: ptr RTCDtlsTransport; kind: String;
                              rtcpTransport: ptr RTCDtlsTransport): RTCRtpReceiver {.
    constructor, importcpp: "client::RTCRtpReceiver(@)",
    header: "cheerp/clientlib.h".}

proc constructRTCRtpReceiver*(transport: ptr RTCSrtpSdesTransport; kind: String): RTCRtpReceiver {.
    constructor, importcpp: "client::RTCRtpReceiver(@)",
    header: "cheerp/clientlib.h".}

proc constructRTCRtpReceiver*(transport: ptr RTCSrtpSdesTransport; kind: String;
                              rtcpTransport: ptr RTCDtlsTransport): RTCRtpReceiver {.
    constructor, importcpp: "client::RTCRtpReceiver(@)",
    header: "cheerp/clientlib.h".}

proc get_error*(this: var RTCRtpSenderEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var RTCRtpSenderEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_ssrcconflict*(this: var RTCRtpSenderEventMap): ptr RTCSsrcConflictEvent {.
    importcpp: "get_ssrcconflict", header: "cheerp/clientlib.h".}

proc set_ssrcconflict*(this: var RTCRtpSenderEventMap;
                       a2: ptr RTCSsrcConflictEvent) {.
    importcpp: "set_ssrcconflict", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var RTCRtpSender): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var RTCRtpSender; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onssrcconflict*(this: var RTCRtpSender): ptr EventListener {.
    importcpp: "get_onssrcconflict", header: "cheerp/clientlib.h".}

proc set_onssrcconflict*(this: var RTCRtpSender; a2: ptr EventListener) {.
    importcpp: "set_onssrcconflict", header: "cheerp/clientlib.h".}

proc get_rtcpTransport*(this: var RTCRtpSender): ptr RTCDtlsTransport {.
    importcpp: "get_rtcpTransport", header: "cheerp/clientlib.h".}

proc get_track*(this: var RTCRtpSender): ptr MediaStreamTrack {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc get_transport*(this: var RTCRtpSender): ptr RTCDtlsTransport {.
    importcpp: "get_transport", header: "cheerp/clientlib.h".}

proc send*(this: var RTCRtpSender; parameters: ptr RTCRtpParameters) {.
    importcpp: "send", header: "cheerp/clientlib.h".}

proc setTrack*(this: var RTCRtpSender; track: ptr MediaStreamTrack) {.
    importcpp: "setTrack", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpSender; transport: ptr RTCDtlsTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpSender; transport: ptr RTCDtlsTransport;
                   rtcpTransport: ptr RTCDtlsTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpSender; transport: ptr RTCSrtpSdesTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc setTransport*(this: var RTCRtpSender; transport: ptr RTCSrtpSdesTransport;
                   rtcpTransport: ptr RTCDtlsTransport) {.
    importcpp: "setTransport", header: "cheerp/clientlib.h".}

proc stop*(this: var RTCRtpSender) {.importcpp: "stop",
                                     header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpSender; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpSender; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpSender; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpSender; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCRtpSender; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpSender; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpSender; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpSender; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpSender; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCRtpSender; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCRtpSender): ptr RTCRtpSender {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCRtpSender; a2: ptr RTCRtpSender) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCRtpSender*(track: ptr MediaStreamTrack;
                            transport: ptr RTCDtlsTransport): RTCRtpSender {.
    constructor, importcpp: "client::RTCRtpSender(@)",
    header: "cheerp/clientlib.h".}

proc constructRTCRtpSender*(track: ptr MediaStreamTrack;
                            transport: ptr RTCDtlsTransport;
                            rtcpTransport: ptr RTCDtlsTransport): RTCRtpSender {.
    constructor, importcpp: "client::RTCRtpSender(@)",
    header: "cheerp/clientlib.h".}

proc constructRTCRtpSender*(track: ptr MediaStreamTrack;
                            transport: ptr RTCSrtpSdesTransport): RTCRtpSender {.
    constructor, importcpp: "client::RTCRtpSender(@)",
    header: "cheerp/clientlib.h".}

proc constructRTCRtpSender*(track: ptr MediaStreamTrack;
                            transport: ptr RTCSrtpSdesTransport;
                            rtcpTransport: ptr RTCDtlsTransport): RTCRtpSender {.
    constructor, importcpp: "client::RTCRtpSender(@)",
    header: "cheerp/clientlib.h".}

proc get_sdp*(this: var RTCSessionDescription): ptr String {.
    importcpp: "get_sdp", header: "cheerp/clientlib.h".}

proc set_sdp*(this: var RTCSessionDescription; a2: String) {.
    importcpp: "set_sdp", header: "cheerp/clientlib.h".}

proc get_type*(this: var RTCSessionDescription): ptr String {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc set_type*(this: var RTCSessionDescription; a2: String) {.
    importcpp: "set_type", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCSessionDescription): ptr RTCSessionDescription {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCSessionDescription;
                    a2: ptr RTCSessionDescription) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructRTCSessionDescription*(): RTCSessionDescription {.constructor,
    importcpp: "client::RTCSessionDescription(@)", header: "cheerp/clientlib.h".}

proc constructRTCSessionDescription*(descriptionInitDict: ptr RTCSessionDescriptionInit): RTCSessionDescription {.
    constructor, importcpp: "client::RTCSessionDescription(@)",
    header: "cheerp/clientlib.h".}

proc get_error*(this: var RTCSrtpSdesTransportEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var RTCSrtpSdesTransportEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var RTCSrtpSdesTransport): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var RTCSrtpSdesTransport; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_transport*(this: var RTCSrtpSdesTransport): ptr RTCIceTransport {.
    importcpp: "get_transport", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var RTCSrtpSdesTransport; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCSrtpSdesTransport): ptr RTCSrtpSdesTransport {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCSrtpSdesTransport; a2: ptr RTCSrtpSdesTransport) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCSrtpSdesTransport*(transport: ptr RTCIceTransport;
    encryptParameters: ptr RTCSrtpSdesParameters; decryptParameters: ptr RTCSrtpSdesParameters): RTCSrtpSdesTransport {.
    constructor, importcpp: "client::RTCSrtpSdesTransport(@)",
    header: "cheerp/clientlib.h".}

proc getLocalParameters*(): ptr Array {.importcpp: "client::RTCSrtpSdesTransport::getLocalParameters(@)",
                                        header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc get_ssrc*(this: var RTCSsrcConflictEvent): cdouble {.importcpp: "get_ssrc",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RTCSsrcConflictEvent): ptr RTCSsrcConflictEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RTCSsrcConflictEvent; a2: ptr RTCSsrcConflictEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRTCSsrcConflictEvent*(): RTCSsrcConflictEvent {.constructor,
    importcpp: "client::RTCSsrcConflictEvent(@)", header: "cheerp/clientlib.h".}

proc getRandomValues*[T](this: var RandomSource; array: ptr T): ptr T {.
    importcpp: "getRandomValues", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var RandomSource): ptr RandomSource {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var RandomSource; a2: ptr RandomSource) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRandomSource*(): RandomSource {.constructor,
    importcpp: "client::RandomSource(@)", header: "cheerp/clientlib.h".}

proc get_collapsed*(this: var Range): bool {.importcpp: "get_collapsed",
    header: "cheerp/clientlib.h".}

proc get_commonAncestorContainer*(this: var Range): ptr Node {.
    importcpp: "get_commonAncestorContainer", header: "cheerp/clientlib.h".}

proc get_endContainer*(this: var Range): ptr Node {.
    importcpp: "get_endContainer", header: "cheerp/clientlib.h".}

proc get_endOffset*(this: var Range): cdouble {.importcpp: "get_endOffset",
    header: "cheerp/clientlib.h".}

proc get_startContainer*(this: var Range): ptr Node {.
    importcpp: "get_startContainer", header: "cheerp/clientlib.h".}

proc get_startOffset*(this: var Range): cdouble {.importcpp: "get_startOffset",
    header: "cheerp/clientlib.h".}

proc cloneContents*(this: var Range): ptr DocumentFragment {.
    importcpp: "cloneContents", header: "cheerp/clientlib.h".}

proc cloneRange*(this: var Range): ptr Range {.importcpp: "cloneRange",
    header: "cheerp/clientlib.h".}

proc collapse*(this: var Range) {.importcpp: "collapse",
                                  header: "cheerp/clientlib.h".}

proc collapse*(this: var Range; toStart: bool) {.importcpp: "collapse",
    header: "cheerp/clientlib.h".}

proc compareBoundaryPoints*(this: var Range; how: cdouble;
                            sourceRange: ptr Range): cdouble {.
    importcpp: "compareBoundaryPoints", header: "cheerp/clientlib.h".}

proc createContextualFragment*(this: var Range; fragment: String): ptr DocumentFragment {.
    importcpp: "createContextualFragment", header: "cheerp/clientlib.h".}

proc deleteContents*(this: var Range) {.importcpp: "deleteContents",
                                        header: "cheerp/clientlib.h".}

proc detach*(this: var Range) {.importcpp: "detach",
                                header: "cheerp/clientlib.h".}

proc extractContents*(this: var Range): ptr DocumentFragment {.
    importcpp: "extractContents", header: "cheerp/clientlib.h".}

proc getBoundingClientRect*(this: var Range): ptr ClientRect {.
    importcpp: "getBoundingClientRect", header: "cheerp/clientlib.h".}

proc getClientRects*(this: var Range): ptr ClientRectList {.
    importcpp: "getClientRects", header: "cheerp/clientlib.h".}

proc insertNode*(this: var Range; node: ptr Node) {.importcpp: "insertNode",
    header: "cheerp/clientlib.h".}

proc isPointInRange*(this: var Range; node: ptr Node; offset: cdouble): bool {.
    importcpp: "isPointInRange", header: "cheerp/clientlib.h".}

proc selectNode*(this: var Range; node: ptr Node) {.importcpp: "selectNode",
    header: "cheerp/clientlib.h".}

proc selectNodeContents*(this: var Range; node: ptr Node) {.
    importcpp: "selectNodeContents", header: "cheerp/clientlib.h".}

proc setEnd*(this: var Range; node: ptr Node; offset: cdouble) {.
    importcpp: "setEnd", header: "cheerp/clientlib.h".}

proc setEndAfter*(this: var Range; node: ptr Node) {.importcpp: "setEndAfter",
    header: "cheerp/clientlib.h".}

proc setEndBefore*(this: var Range; node: ptr Node) {.importcpp: "setEndBefore",
    header: "cheerp/clientlib.h".}

proc setStart*(this: var Range; node: ptr Node; offset: cdouble) {.
    importcpp: "setStart", header: "cheerp/clientlib.h".}

proc setStartAfter*(this: var Range; node: ptr Node) {.
    importcpp: "setStartAfter", header: "cheerp/clientlib.h".}

proc setStartBefore*(this: var Range; node: ptr Node) {.
    importcpp: "setStartBefore", header: "cheerp/clientlib.h".}

proc surroundContents*(this: var Range; newParent: ptr Node) {.
    importcpp: "surroundContents", header: "cheerp/clientlib.h".}

proc toString*(this: var Range): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Range): ptr Range {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Range; a2: ptr Range) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRange*(): Range {.constructor, importcpp: "client::Range(@)",
                                header: "cheerp/clientlib.h".}

proc get_END_TO_END*(this: var Range): cdouble {.importcpp: "get_END_TO_END",
    header: "cheerp/clientlib.h".}

proc get_END_TO_START*(this: var Range): cdouble {.
    importcpp: "get_END_TO_START", header: "cheerp/clientlib.h".}

proc get_START_TO_END*(this: var Range): cdouble {.
    importcpp: "get_START_TO_END", header: "cheerp/clientlib.h".}

proc get_START_TO_START*(this: var Range): cdouble {.
    importcpp: "get_START_TO_START", header: "cheerp/clientlib.h".}

proc get_locked*(this: var ReadableStream): bool {.importcpp: "get_locked",
    header: "cheerp/clientlib.h".}

proc cancel*(this: var ReadableStream): ptr Promise {.importcpp: "cancel",
    header: "cheerp/clientlib.h".}

proc getReader*(this: var ReadableStream): ptr ReadableStreamReader {.
    importcpp: "getReader", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ReadableStream): ptr ReadableStream {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ReadableStream; a2: ptr ReadableStream) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructReadableStream*(): ReadableStream {.constructor,
    importcpp: "client::ReadableStream(@)", header: "cheerp/clientlib.h".}

proc cancel*(this: var ReadableStreamReader): ptr Promise {.importcpp: "cancel",
    header: "cheerp/clientlib.h".}

proc read*(this: var ReadableStreamReader): ptr Promise {.importcpp: "read",
    header: "cheerp/clientlib.h".}

proc releaseLock*(this: var ReadableStreamReader) {.importcpp: "releaseLock",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ReadableStreamReader): ptr ReadableStreamReader {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ReadableStreamReader; a2: ptr ReadableStreamReader) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructReadableStreamReader*(): ReadableStreamReader {.constructor,
    importcpp: "client::ReadableStreamReader(@)", header: "cheerp/clientlib.h".}

proc get_cache*(this: var Request): ptr String {.importcpp: "get_cache",
    header: "cheerp/clientlib.h".}

proc get_credentials*(this: var Request): ptr String {.
    importcpp: "get_credentials", header: "cheerp/clientlib.h".}

proc get_destination*(this: var Request): ptr String {.
    importcpp: "get_destination", header: "cheerp/clientlib.h".}

proc get_headers*(this: var Request): ptr Headers {.importcpp: "get_headers",
    header: "cheerp/clientlib.h".}

proc get_integrity*(this: var Request): ptr String {.importcpp: "get_integrity",
    header: "cheerp/clientlib.h".}

proc get_keepalive*(this: var Request): bool {.importcpp: "get_keepalive",
    header: "cheerp/clientlib.h".}

proc get_method*(this: var Request): ptr String {.importcpp: "get_method",
    header: "cheerp/clientlib.h".}

proc get_mode*(this: var Request): ptr String {.importcpp: "get_mode",
    header: "cheerp/clientlib.h".}

proc get_redirect*(this: var Request): ptr String {.importcpp: "get_redirect",
    header: "cheerp/clientlib.h".}

proc get_referrer*(this: var Request): ptr String {.importcpp: "get_referrer",
    header: "cheerp/clientlib.h".}

proc get_referrerPolicy*(this: var Request): ptr String {.
    importcpp: "get_referrerPolicy", header: "cheerp/clientlib.h".}

proc get_signal*(this: var Request): ptr AbortSignal {.importcpp: "get_signal",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var Request): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_url*(this: var Request): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc clone*(this: var Request): ptr Request {.importcpp: "clone",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Request): ptr Request {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Request; a2: ptr Request) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructRequest*(input: ptr Request): Request {.constructor,
    importcpp: "client::Request(@)", header: "cheerp/clientlib.h".}

proc constructRequest*(input: ptr Request; init: ptr RequestInit): Request {.
    constructor, importcpp: "client::Request(@)", header: "cheerp/clientlib.h".}

proc constructRequest*(input: String): Request {.constructor,
    importcpp: "client::Request(@)", header: "cheerp/clientlib.h".}

proc constructRequest*(input: String; init: ptr RequestInit): Request {.
    constructor, importcpp: "client::Request(@)", header: "cheerp/clientlib.h".}

proc get_body*(this: var Response): ptr ReadableStream {.importcpp: "get_body",
    header: "cheerp/clientlib.h".}

proc get_headers*(this: var Response): ptr Headers {.importcpp: "get_headers",
    header: "cheerp/clientlib.h".}

proc get_ok*(this: var Response): bool {.importcpp: "get_ok",
    header: "cheerp/clientlib.h".}

proc get_redirected*(this: var Response): bool {.importcpp: "get_redirected",
    header: "cheerp/clientlib.h".}

proc get_status*(this: var Response): cdouble {.importcpp: "get_status",
    header: "cheerp/clientlib.h".}

proc get_statusText*(this: var Response): ptr String {.
    importcpp: "get_statusText", header: "cheerp/clientlib.h".}

proc get_type*(this: var Response): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_url*(this: var Response): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc clone*(this: var Response): ptr Response {.importcpp: "clone",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Response): ptr Response {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Response; a2: ptr Response) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructResponse*(): Response {.constructor,
                                      importcpp: "client::Response(@)",
                                      header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Blob): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Blob; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Int8Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Int8Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Int16Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Int16Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Int32Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Int32Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint8Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint8Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint16Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint16Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint32Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint32Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint8ClampedArray): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Uint8ClampedArray; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Float32Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Float32Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Float64Array): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr Float64Array; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr DataView): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr DataView; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr ArrayBuffer): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr ArrayBuffer; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr FormData): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: ptr FormData; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: String): Response {.constructor,
    importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc constructResponse*(body: String; init: ptr ResponseInit): Response {.
    constructor, importcpp: "client::Response(@)", header: "cheerp/clientlib.h".}

proc error*(): ptr Response {.importcpp: "client::Response::error(@)",
                              header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc redirect*(url: String): ptr Response {.
    importcpp: "client::Response::redirect(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc redirect*(url: String; status: cdouble): ptr Response {.
    importcpp: "client::Response::redirect(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc get_onclick*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onclick", header: "cheerp/clientlib.h".}

proc set_onclick*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onclick", header: "cheerp/clientlib.h".}

proc get_ondblclick*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_ondblclick", header: "cheerp/clientlib.h".}

proc set_ondblclick*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_ondblclick", header: "cheerp/clientlib.h".}

proc get_onfocusin*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onfocusin", header: "cheerp/clientlib.h".}

proc set_onfocusin*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onfocusin", header: "cheerp/clientlib.h".}

proc get_onfocusout*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onfocusout", header: "cheerp/clientlib.h".}

proc set_onfocusout*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onfocusout", header: "cheerp/clientlib.h".}

proc get_onload*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onmousedown*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onmousedown", header: "cheerp/clientlib.h".}

proc set_onmousedown*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onmousedown", header: "cheerp/clientlib.h".}

proc get_onmousemove*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onmousemove", header: "cheerp/clientlib.h".}

proc set_onmousemove*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onmousemove", header: "cheerp/clientlib.h".}

proc get_onmouseout*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onmouseout", header: "cheerp/clientlib.h".}

proc set_onmouseout*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseout", header: "cheerp/clientlib.h".}

proc get_onmouseover*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onmouseover", header: "cheerp/clientlib.h".}

proc set_onmouseover*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseover", header: "cheerp/clientlib.h".}

proc get_onmouseup*(this: var SVGElement): ptr EventListener {.
    importcpp: "get_onmouseup", header: "cheerp/clientlib.h".}

proc set_onmouseup*(this: var SVGElement; a2: ptr EventListener) {.
    importcpp: "set_onmouseup", header: "cheerp/clientlib.h".}

proc get_ownerSVGElement*(this: var SVGElement): ptr SVGSVGElement {.
    importcpp: "get_ownerSVGElement", header: "cheerp/clientlib.h".}

proc get_viewportElement*(this: var SVGElement): ptr SVGElement {.
    importcpp: "get_viewportElement", header: "cheerp/clientlib.h".}

proc get_xmlbase*(this: var SVGElement): ptr String {.importcpp: "get_xmlbase",
    header: "cheerp/clientlib.h".}

proc set_xmlbase*(this: var SVGElement; a2: String) {.importcpp: "set_xmlbase",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGElement): ptr SVGElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGElement; a2: ptr SVGElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGElement*(): SVGElement {.constructor,
    importcpp: "client::SVGElement(@)", header: "cheerp/clientlib.h".}

proc get_requiredExtensions*(this: var SVGTests): ptr SVGStringList {.
    importcpp: "get_requiredExtensions", header: "cheerp/clientlib.h".}

proc get_requiredFeatures*(this: var SVGTests): ptr SVGStringList {.
    importcpp: "get_requiredFeatures", header: "cheerp/clientlib.h".}

proc get_systemLanguage*(this: var SVGTests): ptr SVGStringList {.
    importcpp: "get_systemLanguage", header: "cheerp/clientlib.h".}

proc hasExtension*(this: var SVGTests; extension: String): bool {.
    importcpp: "hasExtension", header: "cheerp/clientlib.h".}

proc get_farthestViewportElement*(this: var SVGGraphicsElement): ptr SVGElement {.
    importcpp: "get_farthestViewportElement", header: "cheerp/clientlib.h".}

proc get_nearestViewportElement*(this: var SVGGraphicsElement): ptr SVGElement {.
    importcpp: "get_nearestViewportElement", header: "cheerp/clientlib.h".}

proc get_transform*(this: var SVGGraphicsElement): ptr SVGAnimatedTransformList {.
    importcpp: "get_transform", header: "cheerp/clientlib.h".}

proc getBBox*(this: var SVGGraphicsElement): ptr SVGRect {.importcpp: "getBBox",
    header: "cheerp/clientlib.h".}

proc getCTM*(this: var SVGGraphicsElement): ptr SVGMatrix {.importcpp: "getCTM",
    header: "cheerp/clientlib.h".}

proc getScreenCTM*(this: var SVGGraphicsElement): ptr SVGMatrix {.
    importcpp: "getScreenCTM", header: "cheerp/clientlib.h".}

proc getTransformToElement*(this: var SVGGraphicsElement;
                            element: ptr SVGElement): ptr SVGMatrix {.
    importcpp: "getTransformToElement", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGraphicsElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGraphicsElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGraphicsElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGraphicsElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGraphicsElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGraphicsElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGraphicsElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGraphicsElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGraphicsElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGraphicsElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGGraphicsElement): ptr SVGGraphicsElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGGraphicsElement; a2: ptr SVGGraphicsElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGGraphicsElement*(): SVGGraphicsElement {.constructor,
    importcpp: "client::SVGGraphicsElement(@)", header: "cheerp/clientlib.h".}

proc get_href*(this: var SVGURIReference): ptr SVGAnimatedString {.
    importcpp: "get_href", header: "cheerp/clientlib.h".}

proc get_target*(this: var SVGAElement): ptr SVGAnimatedString {.
    importcpp: "get_target", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGAElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGAElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGAElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGAElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGAElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGAElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGAElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGAElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGAElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGAElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAElement): ptr SVGAElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAElement; a2: ptr SVGAElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAElement*(): SVGAElement {.constructor,
    importcpp: "client::SVGAElement(@)", header: "cheerp/clientlib.h".}

proc get_unitType*(this: var SVGAngle): cdouble {.importcpp: "get_unitType",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var SVGAngle): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var SVGAngle; a2: cdouble) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc get_valueAsString*(this: var SVGAngle): ptr String {.
    importcpp: "get_valueAsString", header: "cheerp/clientlib.h".}

proc set_valueAsString*(this: var SVGAngle; a2: String) {.
    importcpp: "set_valueAsString", header: "cheerp/clientlib.h".}

proc get_valueInSpecifiedUnits*(this: var SVGAngle): cdouble {.
    importcpp: "get_valueInSpecifiedUnits", header: "cheerp/clientlib.h".}

proc set_valueInSpecifiedUnits*(this: var SVGAngle; a2: cdouble) {.
    importcpp: "set_valueInSpecifiedUnits", header: "cheerp/clientlib.h".}

proc convertToSpecifiedUnits*(this: var SVGAngle; unitType: cdouble) {.
    importcpp: "convertToSpecifiedUnits", header: "cheerp/clientlib.h".}

proc newValueSpecifiedUnits*(this: var SVGAngle; unitType: cdouble;
                             valueInSpecifiedUnits: cdouble) {.
    importcpp: "newValueSpecifiedUnits", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAngle): ptr SVGAngle {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAngle; a2: ptr SVGAngle) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAngle*(): SVGAngle {.constructor,
                                      importcpp: "client::SVGAngle(@)",
                                      header: "cheerp/clientlib.h".}

proc get_SVG_ANGLETYPE_DEG*(this: var SVGAngle): cdouble {.
    importcpp: "get_SVG_ANGLETYPE_DEG", header: "cheerp/clientlib.h".}

proc get_SVG_ANGLETYPE_GRAD*(this: var SVGAngle): cdouble {.
    importcpp: "get_SVG_ANGLETYPE_GRAD", header: "cheerp/clientlib.h".}

proc get_SVG_ANGLETYPE_RAD*(this: var SVGAngle): cdouble {.
    importcpp: "get_SVG_ANGLETYPE_RAD", header: "cheerp/clientlib.h".}

proc get_SVG_ANGLETYPE_UNKNOWN*(this: var SVGAngle): cdouble {.
    importcpp: "get_SVG_ANGLETYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_SVG_ANGLETYPE_UNSPECIFIED*(this: var SVGAngle): cdouble {.
    importcpp: "get_SVG_ANGLETYPE_UNSPECIFIED", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedAngle): ptr SVGAngle {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedAngle): ptr SVGAngle {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedAngle): ptr SVGAnimatedAngle {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedAngle; a2: ptr SVGAnimatedAngle) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedAngle*(): SVGAnimatedAngle {.constructor,
    importcpp: "client::SVGAnimatedAngle(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedBoolean): bool {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedBoolean): bool {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc set_baseVal*(this: var SVGAnimatedBoolean; a2: bool) {.
    importcpp: "set_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedBoolean): ptr SVGAnimatedBoolean {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedBoolean; a2: ptr SVGAnimatedBoolean) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedBoolean*(): SVGAnimatedBoolean {.constructor,
    importcpp: "client::SVGAnimatedBoolean(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedEnumeration): cdouble {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedEnumeration): cdouble {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc set_baseVal*(this: var SVGAnimatedEnumeration; a2: cdouble) {.
    importcpp: "set_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedEnumeration): ptr SVGAnimatedEnumeration {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedEnumeration;
                    a2: ptr SVGAnimatedEnumeration) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedEnumeration*(): SVGAnimatedEnumeration {.constructor,
    importcpp: "client::SVGAnimatedEnumeration(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedInteger): cdouble {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedInteger): cdouble {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc set_baseVal*(this: var SVGAnimatedInteger; a2: cdouble) {.
    importcpp: "set_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedInteger): ptr SVGAnimatedInteger {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedInteger; a2: ptr SVGAnimatedInteger) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedInteger*(): SVGAnimatedInteger {.constructor,
    importcpp: "client::SVGAnimatedInteger(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedLength): ptr SVGLength {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedLength): ptr SVGLength {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedLength): ptr SVGAnimatedLength {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedLength; a2: ptr SVGAnimatedLength) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedLength*(): SVGAnimatedLength {.constructor,
    importcpp: "client::SVGAnimatedLength(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedLengthList): ptr SVGLengthList {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedLengthList): ptr SVGLengthList {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedLengthList): ptr SVGAnimatedLengthList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedLengthList;
                    a2: ptr SVGAnimatedLengthList) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructSVGAnimatedLengthList*(): SVGAnimatedLengthList {.constructor,
    importcpp: "client::SVGAnimatedLengthList(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedNumber): cdouble {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedNumber): cdouble {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc set_baseVal*(this: var SVGAnimatedNumber; a2: cdouble) {.
    importcpp: "set_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedNumber): ptr SVGAnimatedNumber {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedNumber; a2: ptr SVGAnimatedNumber) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedNumber*(): SVGAnimatedNumber {.constructor,
    importcpp: "client::SVGAnimatedNumber(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedNumberList): ptr SVGNumberList {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedNumberList): ptr SVGNumberList {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedNumberList): ptr SVGAnimatedNumberList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedNumberList;
                    a2: ptr SVGAnimatedNumberList) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructSVGAnimatedNumberList*(): SVGAnimatedNumberList {.constructor,
    importcpp: "client::SVGAnimatedNumberList(@)", header: "cheerp/clientlib.h".}

proc get_animatedPoints*(this: var SVGAnimatedPoints): ptr SVGPointList {.
    importcpp: "get_animatedPoints", header: "cheerp/clientlib.h".}

proc get_points*(this: var SVGAnimatedPoints): ptr SVGPointList {.
    importcpp: "get_points", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedPreserveAspectRatio): ptr SVGPreserveAspectRatio {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedPreserveAspectRatio): ptr SVGPreserveAspectRatio {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedPreserveAspectRatio): ptr SVGAnimatedPreserveAspectRatio {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedPreserveAspectRatio;
                    a2: ptr SVGAnimatedPreserveAspectRatio) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedPreserveAspectRatio*(): SVGAnimatedPreserveAspectRatio {.
    constructor, importcpp: "client::SVGAnimatedPreserveAspectRatio(@)",
    header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedRect): ptr SVGRect {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedRect): ptr SVGRect {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedRect): ptr SVGAnimatedRect {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedRect; a2: ptr SVGAnimatedRect) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedRect*(): SVGAnimatedRect {.constructor,
    importcpp: "client::SVGAnimatedRect(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedString): ptr String {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedString): ptr String {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc set_baseVal*(this: var SVGAnimatedString; a2: String) {.
    importcpp: "set_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedString): ptr SVGAnimatedString {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedString; a2: ptr SVGAnimatedString) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedString*(): SVGAnimatedString {.constructor,
    importcpp: "client::SVGAnimatedString(@)", header: "cheerp/clientlib.h".}

proc get_animVal*(this: var SVGAnimatedTransformList): ptr SVGTransformList {.
    importcpp: "get_animVal", header: "cheerp/clientlib.h".}

proc get_baseVal*(this: var SVGAnimatedTransformList): ptr SVGTransformList {.
    importcpp: "get_baseVal", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGAnimatedTransformList): ptr SVGAnimatedTransformList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGAnimatedTransformList;
                    a2: ptr SVGAnimatedTransformList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGAnimatedTransformList*(): SVGAnimatedTransformList {.
    constructor, importcpp: "client::SVGAnimatedTransformList(@)",
    header: "cheerp/clientlib.h".}

proc get_cx*(this: var SVGCircleElement): ptr SVGAnimatedLength {.
    importcpp: "get_cx", header: "cheerp/clientlib.h".}

proc get_cy*(this: var SVGCircleElement): ptr SVGAnimatedLength {.
    importcpp: "get_cy", header: "cheerp/clientlib.h".}

proc get_r*(this: var SVGCircleElement): ptr SVGAnimatedLength {.
    importcpp: "get_r", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGCircleElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGCircleElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGCircleElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGCircleElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGCircleElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGCircleElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGCircleElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGCircleElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGCircleElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGCircleElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGCircleElement): ptr SVGCircleElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGCircleElement; a2: ptr SVGCircleElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGCircleElement*(): SVGCircleElement {.constructor,
    importcpp: "client::SVGCircleElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_UNIT_TYPE_OBJECTBOUNDINGBOX*(this: var SVGUnitTypes): cdouble {.
    importcpp: "get_SVG_UNIT_TYPE_OBJECTBOUNDINGBOX",
    header: "cheerp/clientlib.h".}

proc get_SVG_UNIT_TYPE_UNKNOWN*(this: var SVGUnitTypes): cdouble {.
    importcpp: "get_SVG_UNIT_TYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_SVG_UNIT_TYPE_USERSPACEONUSE*(this: var SVGUnitTypes): cdouble {.
    importcpp: "get_SVG_UNIT_TYPE_USERSPACEONUSE", header: "cheerp/clientlib.h".}

proc get_clipPathUnits*(this: var SVGClipPathElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_clipPathUnits", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGClipPathElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGClipPathElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGClipPathElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGClipPathElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGClipPathElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGClipPathElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGClipPathElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGClipPathElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGClipPathElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGClipPathElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGClipPathElement): ptr SVGClipPathElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGClipPathElement; a2: ptr SVGClipPathElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGClipPathElement*(): SVGClipPathElement {.constructor,
    importcpp: "client::SVGClipPathElement(@)", header: "cheerp/clientlib.h".}

proc get_amplitude*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedNumber {.
    importcpp: "get_amplitude", header: "cheerp/clientlib.h".}

proc get_exponent*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedNumber {.
    importcpp: "get_exponent", header: "cheerp/clientlib.h".}

proc get_intercept*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedNumber {.
    importcpp: "get_intercept", header: "cheerp/clientlib.h".}

proc get_offset*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedNumber {.
    importcpp: "get_offset", header: "cheerp/clientlib.h".}

proc get_slope*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedNumber {.
    importcpp: "get_slope", header: "cheerp/clientlib.h".}

proc get_tableValues*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedNumberList {.
    importcpp: "get_tableValues", header: "cheerp/clientlib.h".}

proc get_type*(this: var SVGComponentTransferFunctionElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGComponentTransferFunctionElement;
                       `type`: String; listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGComponentTransferFunctionElement;
                       `type`: String; listener: ptr EventListener;
                       options: bool) {.importcpp: "addEventListener",
                                        header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGComponentTransferFunctionElement;
                       `type`: String; listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGComponentTransferFunctionElement;
                       `type`: String; listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGComponentTransferFunctionElement;
                       `type`: String; listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGComponentTransferFunctionElement;
                          `type`: String; listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGComponentTransferFunctionElement;
                          `type`: String; listener: ptr EventListener;
                          options: bool) {.importcpp: "removeEventListener",
    header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGComponentTransferFunctionElement;
                          `type`: String; listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGComponentTransferFunctionElement;
                          `type`: String; listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGComponentTransferFunctionElement;
                          `type`: String; listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGComponentTransferFunctionElement): ptr SVGComponentTransferFunctionElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGComponentTransferFunctionElement;
                    a2: ptr SVGComponentTransferFunctionElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGComponentTransferFunctionElement*(): SVGComponentTransferFunctionElement {.
    constructor, importcpp: "client::SVGComponentTransferFunctionElement(@)",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE*(
    this: var SVGComponentTransferFunctionElement): cdouble {.
    importcpp: "get_SVG_FECOMPONENTTRANSFER_TYPE_DISCRETE",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPONENTTRANSFER_TYPE_GAMMA*(
    this: var SVGComponentTransferFunctionElement): cdouble {.
    importcpp: "get_SVG_FECOMPONENTTRANSFER_TYPE_GAMMA",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY*(
    this: var SVGComponentTransferFunctionElement): cdouble {.
    importcpp: "get_SVG_FECOMPONENTTRANSFER_TYPE_IDENTITY",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPONENTTRANSFER_TYPE_LINEAR*(
    this: var SVGComponentTransferFunctionElement): cdouble {.
    importcpp: "get_SVG_FECOMPONENTTRANSFER_TYPE_LINEAR",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPONENTTRANSFER_TYPE_TABLE*(
    this: var SVGComponentTransferFunctionElement): cdouble {.
    importcpp: "get_SVG_FECOMPONENTTRANSFER_TYPE_TABLE",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN*(
    this: var SVGComponentTransferFunctionElement): cdouble {.
    importcpp: "get_SVG_FECOMPONENTTRANSFER_TYPE_UNKNOWN",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDefsElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDefsElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDefsElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDefsElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDefsElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDefsElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDefsElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDefsElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDefsElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDefsElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGDefsElement): ptr SVGDefsElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGDefsElement; a2: ptr SVGDefsElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGDefsElement*(): SVGDefsElement {.constructor,
    importcpp: "client::SVGDefsElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDescElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDescElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDescElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDescElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGDescElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDescElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDescElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDescElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDescElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGDescElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGDescElement): ptr SVGDescElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGDescElement; a2: ptr SVGDescElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGDescElement*(): SVGDescElement {.constructor,
    importcpp: "client::SVGDescElement(@)", header: "cheerp/clientlib.h".}

proc get_click*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_click", header: "cheerp/clientlib.h".}

proc set_click*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_click", header: "cheerp/clientlib.h".}

proc get_dblclick*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_dblclick", header: "cheerp/clientlib.h".}

proc set_dblclick*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_dblclick", header: "cheerp/clientlib.h".}

proc get_focusin*(this: var SVGElementEventMap): ptr FocusEvent {.
    importcpp: "get_focusin", header: "cheerp/clientlib.h".}

proc set_focusin*(this: var SVGElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focusin", header: "cheerp/clientlib.h".}

proc get_focusout*(this: var SVGElementEventMap): ptr FocusEvent {.
    importcpp: "get_focusout", header: "cheerp/clientlib.h".}

proc set_focusout*(this: var SVGElementEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focusout", header: "cheerp/clientlib.h".}

proc get_load*(this: var SVGElementEventMap): ptr Event {.importcpp: "get_load",
    header: "cheerp/clientlib.h".}

proc set_load*(this: var SVGElementEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_mousedown*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_mousedown", header: "cheerp/clientlib.h".}

proc set_mousedown*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousedown", header: "cheerp/clientlib.h".}

proc get_mousemove*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_mousemove", header: "cheerp/clientlib.h".}

proc set_mousemove*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousemove", header: "cheerp/clientlib.h".}

proc get_mouseout*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseout", header: "cheerp/clientlib.h".}

proc set_mouseout*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseout", header: "cheerp/clientlib.h".}

proc get_mouseover*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseover", header: "cheerp/clientlib.h".}

proc set_mouseover*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseover", header: "cheerp/clientlib.h".}

proc get_mouseup*(this: var SVGElementEventMap): ptr MouseEvent {.
    importcpp: "get_mouseup", header: "cheerp/clientlib.h".}

proc set_mouseup*(this: var SVGElementEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseup", header: "cheerp/clientlib.h".}

proc get_childNodes*(this: var SVGElementInstance): ptr SVGElementInstanceList {.
    importcpp: "get_childNodes", header: "cheerp/clientlib.h".}

proc get_correspondingElement*(this: var SVGElementInstance): ptr SVGElement {.
    importcpp: "get_correspondingElement", header: "cheerp/clientlib.h".}

proc get_correspondingUseElement*(this: var SVGElementInstance): ptr SVGUseElement {.
    importcpp: "get_correspondingUseElement", header: "cheerp/clientlib.h".}

proc get_firstChild*(this: var SVGElementInstance): ptr SVGElementInstance {.
    importcpp: "get_firstChild", header: "cheerp/clientlib.h".}

proc get_lastChild*(this: var SVGElementInstance): ptr SVGElementInstance {.
    importcpp: "get_lastChild", header: "cheerp/clientlib.h".}

proc get_nextSibling*(this: var SVGElementInstance): ptr SVGElementInstance {.
    importcpp: "get_nextSibling", header: "cheerp/clientlib.h".}

proc get_parentNode*(this: var SVGElementInstance): ptr SVGElementInstance {.
    importcpp: "get_parentNode", header: "cheerp/clientlib.h".}

proc get_previousSibling*(this: var SVGElementInstance): ptr SVGElementInstance {.
    importcpp: "get_previousSibling", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGElementInstance): ptr SVGElementInstance {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGElementInstance; a2: ptr SVGElementInstance) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGElementInstance*(): SVGElementInstance {.constructor,
    importcpp: "client::SVGElementInstance(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var SVGElementInstanceList): cdouble {.
    importcpp: "get_length", header: "cheerp/clientlib.h".}

proc item*(this: var SVGElementInstanceList; index: cdouble): ptr SVGElementInstance {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGElementInstanceList): ptr SVGElementInstanceList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGElementInstanceList;
                    a2: ptr SVGElementInstanceList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGElementInstanceList*(): SVGElementInstanceList {.constructor,
    importcpp: "client::SVGElementInstanceList(@)", header: "cheerp/clientlib.h".}

proc get_cx*(this: var SVGEllipseElement): ptr SVGAnimatedLength {.
    importcpp: "get_cx", header: "cheerp/clientlib.h".}

proc get_cy*(this: var SVGEllipseElement): ptr SVGAnimatedLength {.
    importcpp: "get_cy", header: "cheerp/clientlib.h".}

proc get_rx*(this: var SVGEllipseElement): ptr SVGAnimatedLength {.
    importcpp: "get_rx", header: "cheerp/clientlib.h".}

proc get_ry*(this: var SVGEllipseElement): ptr SVGAnimatedLength {.
    importcpp: "get_ry", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGEllipseElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGEllipseElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGEllipseElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGEllipseElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGEllipseElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGEllipseElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGEllipseElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGEllipseElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGEllipseElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGEllipseElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGEllipseElement): ptr SVGEllipseElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGEllipseElement; a2: ptr SVGEllipseElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGEllipseElement*(): SVGEllipseElement {.constructor,
    importcpp: "client::SVGEllipseElement(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGFilterPrimitiveStandardAttributes): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_result*(this: var SVGFilterPrimitiveStandardAttributes): ptr SVGAnimatedString {.
    importcpp: "get_result", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGFilterPrimitiveStandardAttributes): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGFilterPrimitiveStandardAttributes): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGFilterPrimitiveStandardAttributes): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEBlendElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_in2*(this: var SVGFEBlendElement): ptr SVGAnimatedString {.
    importcpp: "get_in2", header: "cheerp/clientlib.h".}

proc get_mode*(this: var SVGFEBlendElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_mode", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEBlendElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEBlendElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEBlendElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEBlendElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEBlendElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEBlendElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEBlendElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEBlendElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEBlendElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEBlendElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEBlendElement): ptr SVGFEBlendElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEBlendElement; a2: ptr SVGFEBlendElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEBlendElement*(): SVGFEBlendElement {.constructor,
    importcpp: "client::SVGFEBlendElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_COLOR*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_COLOR", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_COLOR_BURN*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_COLOR_BURN", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_COLOR_DODGE*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_COLOR_DODGE", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_DARKEN*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_DARKEN", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_DIFFERENCE*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_DIFFERENCE", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_EXCLUSION*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_EXCLUSION", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_HARD_LIGHT*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_HARD_LIGHT", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_HUE*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_HUE", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_LIGHTEN*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_LIGHTEN", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_LUMINOSITY*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_LUMINOSITY", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_MULTIPLY*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_MULTIPLY", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_NORMAL*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_NORMAL", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_OVERLAY*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_OVERLAY", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_SATURATION*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_SATURATION", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_SCREEN*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_SCREEN", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_SOFT_LIGHT*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_SOFT_LIGHT", header: "cheerp/clientlib.h".}

proc get_SVG_FEBLEND_MODE_UNKNOWN*(this: var SVGFEBlendElement): cdouble {.
    importcpp: "get_SVG_FEBLEND_MODE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEColorMatrixElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_type*(this: var SVGFEColorMatrixElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc get_values*(this: var SVGFEColorMatrixElement): ptr SVGAnimatedNumberList {.
    importcpp: "get_values", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEColorMatrixElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEColorMatrixElement): ptr SVGFEColorMatrixElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEColorMatrixElement;
                    a2: ptr SVGFEColorMatrixElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEColorMatrixElement*(): SVGFEColorMatrixElement {.constructor,
    importcpp: "client::SVGFEColorMatrixElement(@)",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOLORMATRIX_TYPE_HUEROTATE*(this: var SVGFEColorMatrixElement): cdouble {.
    importcpp: "get_SVG_FECOLORMATRIX_TYPE_HUEROTATE",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA*(
    this: var SVGFEColorMatrixElement): cdouble {.
    importcpp: "get_SVG_FECOLORMATRIX_TYPE_LUMINANCETOALPHA",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOLORMATRIX_TYPE_MATRIX*(this: var SVGFEColorMatrixElement): cdouble {.
    importcpp: "get_SVG_FECOLORMATRIX_TYPE_MATRIX", header: "cheerp/clientlib.h".}

proc get_SVG_FECOLORMATRIX_TYPE_SATURATE*(this: var SVGFEColorMatrixElement): cdouble {.
    importcpp: "get_SVG_FECOLORMATRIX_TYPE_SATURATE",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOLORMATRIX_TYPE_UNKNOWN*(this: var SVGFEColorMatrixElement): cdouble {.
    importcpp: "get_SVG_FECOLORMATRIX_TYPE_UNKNOWN",
    header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEComponentTransferElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEComponentTransferElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEComponentTransferElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEComponentTransferElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEComponentTransferElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEComponentTransferElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEComponentTransferElement;
                          `type`: String; listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEComponentTransferElement;
                          `type`: String; listener: ptr EventListener;
                          options: bool) {.importcpp: "removeEventListener",
    header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEComponentTransferElement;
                          `type`: String; listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEComponentTransferElement;
                          `type`: String; listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEComponentTransferElement;
                          `type`: String; listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEComponentTransferElement): ptr SVGFEComponentTransferElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEComponentTransferElement;
                    a2: ptr SVGFEComponentTransferElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEComponentTransferElement*(): SVGFEComponentTransferElement {.
    constructor, importcpp: "client::SVGFEComponentTransferElement(@)",
    header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFECompositeElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_in2*(this: var SVGFECompositeElement): ptr SVGAnimatedString {.
    importcpp: "get_in2", header: "cheerp/clientlib.h".}

proc get_k1*(this: var SVGFECompositeElement): ptr SVGAnimatedNumber {.
    importcpp: "get_k1", header: "cheerp/clientlib.h".}

proc get_k2*(this: var SVGFECompositeElement): ptr SVGAnimatedNumber {.
    importcpp: "get_k2", header: "cheerp/clientlib.h".}

proc get_k3*(this: var SVGFECompositeElement): ptr SVGAnimatedNumber {.
    importcpp: "get_k3", header: "cheerp/clientlib.h".}

proc get_k4*(this: var SVGFECompositeElement): ptr SVGAnimatedNumber {.
    importcpp: "get_k4", header: "cheerp/clientlib.h".}

proc get_operator*(this: var SVGFECompositeElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_operator", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFECompositeElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFECompositeElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFECompositeElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFECompositeElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFECompositeElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFECompositeElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFECompositeElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFECompositeElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFECompositeElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFECompositeElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFECompositeElement): ptr SVGFECompositeElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFECompositeElement;
                    a2: ptr SVGFECompositeElement) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructSVGFECompositeElement*(): SVGFECompositeElement {.constructor,
    importcpp: "client::SVGFECompositeElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_ARITHMETIC*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_ARITHMETIC",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_ATOP*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_ATOP", header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_IN*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_IN", header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_OUT*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_OUT", header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_OVER*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_OVER", header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_UNKNOWN*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_UNKNOWN",
    header: "cheerp/clientlib.h".}

proc get_SVG_FECOMPOSITE_OPERATOR_XOR*(this: var SVGFECompositeElement): cdouble {.
    importcpp: "get_SVG_FECOMPOSITE_OPERATOR_XOR", header: "cheerp/clientlib.h".}

proc get_bias*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedNumber {.
    importcpp: "get_bias", header: "cheerp/clientlib.h".}

proc get_divisor*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedNumber {.
    importcpp: "get_divisor", header: "cheerp/clientlib.h".}

proc get_edgeMode*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_edgeMode", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_kernelMatrix*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedNumberList {.
    importcpp: "get_kernelMatrix", header: "cheerp/clientlib.h".}

proc get_kernelUnitLengthX*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedNumber {.
    importcpp: "get_kernelUnitLengthX", header: "cheerp/clientlib.h".}

proc get_kernelUnitLengthY*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedNumber {.
    importcpp: "get_kernelUnitLengthY", header: "cheerp/clientlib.h".}

proc get_orderX*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedInteger {.
    importcpp: "get_orderX", header: "cheerp/clientlib.h".}

proc get_orderY*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedInteger {.
    importcpp: "get_orderY", header: "cheerp/clientlib.h".}

proc get_preserveAlpha*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedBoolean {.
    importcpp: "get_preserveAlpha", header: "cheerp/clientlib.h".}

proc get_targetX*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedInteger {.
    importcpp: "get_targetX", header: "cheerp/clientlib.h".}

proc get_targetY*(this: var SVGFEConvolveMatrixElement): ptr SVGAnimatedInteger {.
    importcpp: "get_targetY", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEConvolveMatrixElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEConvolveMatrixElement): ptr SVGFEConvolveMatrixElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEConvolveMatrixElement;
                    a2: ptr SVGFEConvolveMatrixElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEConvolveMatrixElement*(): SVGFEConvolveMatrixElement {.
    constructor, importcpp: "client::SVGFEConvolveMatrixElement(@)",
    header: "cheerp/clientlib.h".}

proc get_SVG_EDGEMODE_DUPLICATE*(this: var SVGFEConvolveMatrixElement): cdouble {.
    importcpp: "get_SVG_EDGEMODE_DUPLICATE", header: "cheerp/clientlib.h".}

proc get_SVG_EDGEMODE_NONE*(this: var SVGFEConvolveMatrixElement): cdouble {.
    importcpp: "get_SVG_EDGEMODE_NONE", header: "cheerp/clientlib.h".}

proc get_SVG_EDGEMODE_UNKNOWN*(this: var SVGFEConvolveMatrixElement): cdouble {.
    importcpp: "get_SVG_EDGEMODE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_SVG_EDGEMODE_WRAP*(this: var SVGFEConvolveMatrixElement): cdouble {.
    importcpp: "get_SVG_EDGEMODE_WRAP", header: "cheerp/clientlib.h".}

proc get_diffuseConstant*(this: var SVGFEDiffuseLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_diffuseConstant", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEDiffuseLightingElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_kernelUnitLengthX*(this: var SVGFEDiffuseLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_kernelUnitLengthX", header: "cheerp/clientlib.h".}

proc get_kernelUnitLengthY*(this: var SVGFEDiffuseLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_kernelUnitLengthY", header: "cheerp/clientlib.h".}

proc get_surfaceScale*(this: var SVGFEDiffuseLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_surfaceScale", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDiffuseLightingElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEDiffuseLightingElement): ptr SVGFEDiffuseLightingElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEDiffuseLightingElement;
                    a2: ptr SVGFEDiffuseLightingElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEDiffuseLightingElement*(): SVGFEDiffuseLightingElement {.
    constructor, importcpp: "client::SVGFEDiffuseLightingElement(@)",
    header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEDisplacementMapElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_in2*(this: var SVGFEDisplacementMapElement): ptr SVGAnimatedString {.
    importcpp: "get_in2", header: "cheerp/clientlib.h".}

proc get_scale*(this: var SVGFEDisplacementMapElement): ptr SVGAnimatedNumber {.
    importcpp: "get_scale", header: "cheerp/clientlib.h".}

proc get_xChannelSelector*(this: var SVGFEDisplacementMapElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_xChannelSelector", header: "cheerp/clientlib.h".}

proc get_yChannelSelector*(this: var SVGFEDisplacementMapElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_yChannelSelector", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDisplacementMapElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEDisplacementMapElement): ptr SVGFEDisplacementMapElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEDisplacementMapElement;
                    a2: ptr SVGFEDisplacementMapElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEDisplacementMapElement*(): SVGFEDisplacementMapElement {.
    constructor, importcpp: "client::SVGFEDisplacementMapElement(@)",
    header: "cheerp/clientlib.h".}

proc get_SVG_CHANNEL_A*(this: var SVGFEDisplacementMapElement): cdouble {.
    importcpp: "get_SVG_CHANNEL_A", header: "cheerp/clientlib.h".}

proc get_SVG_CHANNEL_B*(this: var SVGFEDisplacementMapElement): cdouble {.
    importcpp: "get_SVG_CHANNEL_B", header: "cheerp/clientlib.h".}

proc get_SVG_CHANNEL_G*(this: var SVGFEDisplacementMapElement): cdouble {.
    importcpp: "get_SVG_CHANNEL_G", header: "cheerp/clientlib.h".}

proc get_SVG_CHANNEL_R*(this: var SVGFEDisplacementMapElement): cdouble {.
    importcpp: "get_SVG_CHANNEL_R", header: "cheerp/clientlib.h".}

proc get_SVG_CHANNEL_UNKNOWN*(this: var SVGFEDisplacementMapElement): cdouble {.
    importcpp: "get_SVG_CHANNEL_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_azimuth*(this: var SVGFEDistantLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_azimuth", header: "cheerp/clientlib.h".}

proc get_elevation*(this: var SVGFEDistantLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_elevation", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEDistantLightElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEDistantLightElement): ptr SVGFEDistantLightElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEDistantLightElement;
                    a2: ptr SVGFEDistantLightElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEDistantLightElement*(): SVGFEDistantLightElement {.
    constructor, importcpp: "client::SVGFEDistantLightElement(@)",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFloodElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFloodElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFloodElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFloodElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFloodElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFloodElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFloodElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFloodElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFloodElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFloodElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEFloodElement): ptr SVGFEFloodElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEFloodElement; a2: ptr SVGFEFloodElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEFloodElement*(): SVGFEFloodElement {.constructor,
    importcpp: "client::SVGFEFloodElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncAElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncAElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncAElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncAElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncAElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncAElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncAElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncAElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncAElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncAElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEFuncAElement): ptr SVGFEFuncAElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEFuncAElement; a2: ptr SVGFEFuncAElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEFuncAElement*(): SVGFEFuncAElement {.constructor,
    importcpp: "client::SVGFEFuncAElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncBElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncBElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncBElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncBElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncBElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncBElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncBElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncBElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncBElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncBElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEFuncBElement): ptr SVGFEFuncBElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEFuncBElement; a2: ptr SVGFEFuncBElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEFuncBElement*(): SVGFEFuncBElement {.constructor,
    importcpp: "client::SVGFEFuncBElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncGElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncGElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncGElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncGElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncGElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncGElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncGElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncGElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncGElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncGElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEFuncGElement): ptr SVGFEFuncGElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEFuncGElement; a2: ptr SVGFEFuncGElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEFuncGElement*(): SVGFEFuncGElement {.constructor,
    importcpp: "client::SVGFEFuncGElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncRElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncRElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncRElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncRElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEFuncRElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncRElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncRElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncRElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncRElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEFuncRElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEFuncRElement): ptr SVGFEFuncRElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEFuncRElement; a2: ptr SVGFEFuncRElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEFuncRElement*(): SVGFEFuncRElement {.constructor,
    importcpp: "client::SVGFEFuncRElement(@)", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEGaussianBlurElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_stdDeviationX*(this: var SVGFEGaussianBlurElement): ptr SVGAnimatedNumber {.
    importcpp: "get_stdDeviationX", header: "cheerp/clientlib.h".}

proc get_stdDeviationY*(this: var SVGFEGaussianBlurElement): ptr SVGAnimatedNumber {.
    importcpp: "get_stdDeviationY", header: "cheerp/clientlib.h".}

proc setStdDeviation*(this: var SVGFEGaussianBlurElement;
                      stdDeviationX: cdouble; stdDeviationY: cdouble) {.
    importcpp: "setStdDeviation", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEGaussianBlurElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEGaussianBlurElement): ptr SVGFEGaussianBlurElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEGaussianBlurElement;
                    a2: ptr SVGFEGaussianBlurElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEGaussianBlurElement*(): SVGFEGaussianBlurElement {.
    constructor, importcpp: "client::SVGFEGaussianBlurElement(@)",
    header: "cheerp/clientlib.h".}

proc get_preserveAspectRatio*(this: var SVGFEImageElement): ptr SVGAnimatedPreserveAspectRatio {.
    importcpp: "get_preserveAspectRatio", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEImageElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEImageElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEImageElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEImageElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEImageElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEImageElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEImageElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEImageElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEImageElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEImageElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEImageElement): ptr SVGFEImageElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEImageElement; a2: ptr SVGFEImageElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEImageElement*(): SVGFEImageElement {.constructor,
    importcpp: "client::SVGFEImageElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEMergeElement): ptr SVGFEMergeElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEMergeElement; a2: ptr SVGFEMergeElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEMergeElement*(): SVGFEMergeElement {.constructor,
    importcpp: "client::SVGFEMergeElement(@)", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEMergeNodeElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMergeNodeElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEMergeNodeElement): ptr SVGFEMergeNodeElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEMergeNodeElement;
                    a2: ptr SVGFEMergeNodeElement) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructSVGFEMergeNodeElement*(): SVGFEMergeNodeElement {.constructor,
    importcpp: "client::SVGFEMergeNodeElement(@)", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEMorphologyElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_operator*(this: var SVGFEMorphologyElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_operator", header: "cheerp/clientlib.h".}

proc get_radiusX*(this: var SVGFEMorphologyElement): ptr SVGAnimatedNumber {.
    importcpp: "get_radiusX", header: "cheerp/clientlib.h".}

proc get_radiusY*(this: var SVGFEMorphologyElement): ptr SVGAnimatedNumber {.
    importcpp: "get_radiusY", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEMorphologyElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEMorphologyElement): ptr SVGFEMorphologyElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEMorphologyElement;
                    a2: ptr SVGFEMorphologyElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEMorphologyElement*(): SVGFEMorphologyElement {.constructor,
    importcpp: "client::SVGFEMorphologyElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_MORPHOLOGY_OPERATOR_DILATE*(this: var SVGFEMorphologyElement): cdouble {.
    importcpp: "get_SVG_MORPHOLOGY_OPERATOR_DILATE",
    header: "cheerp/clientlib.h".}

proc get_SVG_MORPHOLOGY_OPERATOR_ERODE*(this: var SVGFEMorphologyElement): cdouble {.
    importcpp: "get_SVG_MORPHOLOGY_OPERATOR_ERODE", header: "cheerp/clientlib.h".}

proc get_SVG_MORPHOLOGY_OPERATOR_UNKNOWN*(this: var SVGFEMorphologyElement): cdouble {.
    importcpp: "get_SVG_MORPHOLOGY_OPERATOR_UNKNOWN",
    header: "cheerp/clientlib.h".}

proc get_dx*(this: var SVGFEOffsetElement): ptr SVGAnimatedNumber {.
    importcpp: "get_dx", header: "cheerp/clientlib.h".}

proc get_dy*(this: var SVGFEOffsetElement): ptr SVGAnimatedNumber {.
    importcpp: "get_dy", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFEOffsetElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEOffsetElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEOffsetElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEOffsetElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEOffsetElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEOffsetElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEOffsetElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEOffsetElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEOffsetElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEOffsetElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEOffsetElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEOffsetElement): ptr SVGFEOffsetElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEOffsetElement; a2: ptr SVGFEOffsetElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEOffsetElement*(): SVGFEOffsetElement {.constructor,
    importcpp: "client::SVGFEOffsetElement(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGFEPointLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGFEPointLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc get_z*(this: var SVGFEPointLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_z", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEPointLightElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEPointLightElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEPointLightElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEPointLightElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFEPointLightElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEPointLightElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEPointLightElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEPointLightElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEPointLightElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFEPointLightElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFEPointLightElement): ptr SVGFEPointLightElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFEPointLightElement;
                    a2: ptr SVGFEPointLightElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFEPointLightElement*(): SVGFEPointLightElement {.constructor,
    importcpp: "client::SVGFEPointLightElement(@)", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFESpecularLightingElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc get_kernelUnitLengthX*(this: var SVGFESpecularLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_kernelUnitLengthX", header: "cheerp/clientlib.h".}

proc get_kernelUnitLengthY*(this: var SVGFESpecularLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_kernelUnitLengthY", header: "cheerp/clientlib.h".}

proc get_specularConstant*(this: var SVGFESpecularLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_specularConstant", header: "cheerp/clientlib.h".}

proc get_specularExponent*(this: var SVGFESpecularLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_specularExponent", header: "cheerp/clientlib.h".}

proc get_surfaceScale*(this: var SVGFESpecularLightingElement): ptr SVGAnimatedNumber {.
    importcpp: "get_surfaceScale", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpecularLightingElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpecularLightingElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpecularLightingElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpecularLightingElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpecularLightingElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpecularLightingElement;
                          `type`: String; listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpecularLightingElement;
                          `type`: String; listener: ptr EventListener;
                          options: bool) {.importcpp: "removeEventListener",
    header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpecularLightingElement;
                          `type`: String; listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpecularLightingElement;
                          `type`: String; listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpecularLightingElement;
                          `type`: String; listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFESpecularLightingElement): ptr SVGFESpecularLightingElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFESpecularLightingElement;
                    a2: ptr SVGFESpecularLightingElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFESpecularLightingElement*(): SVGFESpecularLightingElement {.
    constructor, importcpp: "client::SVGFESpecularLightingElement(@)",
    header: "cheerp/clientlib.h".}

proc get_limitingConeAngle*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_limitingConeAngle", header: "cheerp/clientlib.h".}

proc get_pointsAtX*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_pointsAtX", header: "cheerp/clientlib.h".}

proc get_pointsAtY*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_pointsAtY", header: "cheerp/clientlib.h".}

proc get_pointsAtZ*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_pointsAtZ", header: "cheerp/clientlib.h".}

proc get_specularExponent*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_specularExponent", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc get_z*(this: var SVGFESpotLightElement): ptr SVGAnimatedNumber {.
    importcpp: "get_z", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpotLightElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpotLightElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpotLightElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpotLightElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFESpotLightElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpotLightElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpotLightElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpotLightElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpotLightElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFESpotLightElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFESpotLightElement): ptr SVGFESpotLightElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFESpotLightElement;
                    a2: ptr SVGFESpotLightElement) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructSVGFESpotLightElement*(): SVGFESpotLightElement {.constructor,
    importcpp: "client::SVGFESpotLightElement(@)", header: "cheerp/clientlib.h".}

proc get_in1*(this: var SVGFETileElement): ptr SVGAnimatedString {.
    importcpp: "get_in1", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETileElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETileElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETileElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETileElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETileElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETileElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETileElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETileElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETileElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETileElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFETileElement): ptr SVGFETileElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFETileElement; a2: ptr SVGFETileElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFETileElement*(): SVGFETileElement {.constructor,
    importcpp: "client::SVGFETileElement(@)", header: "cheerp/clientlib.h".}

proc get_baseFrequencyX*(this: var SVGFETurbulenceElement): ptr SVGAnimatedNumber {.
    importcpp: "get_baseFrequencyX", header: "cheerp/clientlib.h".}

proc get_baseFrequencyY*(this: var SVGFETurbulenceElement): ptr SVGAnimatedNumber {.
    importcpp: "get_baseFrequencyY", header: "cheerp/clientlib.h".}

proc get_numOctaves*(this: var SVGFETurbulenceElement): ptr SVGAnimatedInteger {.
    importcpp: "get_numOctaves", header: "cheerp/clientlib.h".}

proc get_seed*(this: var SVGFETurbulenceElement): ptr SVGAnimatedNumber {.
    importcpp: "get_seed", header: "cheerp/clientlib.h".}

proc get_stitchTiles*(this: var SVGFETurbulenceElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_stitchTiles", header: "cheerp/clientlib.h".}

proc get_type*(this: var SVGFETurbulenceElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_type", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFETurbulenceElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFETurbulenceElement): ptr SVGFETurbulenceElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFETurbulenceElement;
                    a2: ptr SVGFETurbulenceElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFETurbulenceElement*(): SVGFETurbulenceElement {.constructor,
    importcpp: "client::SVGFETurbulenceElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_STITCHTYPE_NOSTITCH*(this: var SVGFETurbulenceElement): cdouble {.
    importcpp: "get_SVG_STITCHTYPE_NOSTITCH", header: "cheerp/clientlib.h".}

proc get_SVG_STITCHTYPE_STITCH*(this: var SVGFETurbulenceElement): cdouble {.
    importcpp: "get_SVG_STITCHTYPE_STITCH", header: "cheerp/clientlib.h".}

proc get_SVG_STITCHTYPE_UNKNOWN*(this: var SVGFETurbulenceElement): cdouble {.
    importcpp: "get_SVG_STITCHTYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_SVG_TURBULENCE_TYPE_FRACTALNOISE*(this: var SVGFETurbulenceElement): cdouble {.
    importcpp: "get_SVG_TURBULENCE_TYPE_FRACTALNOISE",
    header: "cheerp/clientlib.h".}

proc get_SVG_TURBULENCE_TYPE_TURBULENCE*(this: var SVGFETurbulenceElement): cdouble {.
    importcpp: "get_SVG_TURBULENCE_TYPE_TURBULENCE",
    header: "cheerp/clientlib.h".}

proc get_SVG_TURBULENCE_TYPE_UNKNOWN*(this: var SVGFETurbulenceElement): cdouble {.
    importcpp: "get_SVG_TURBULENCE_TYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_filterResX*(this: var SVGFilterElement): ptr SVGAnimatedInteger {.
    importcpp: "get_filterResX", header: "cheerp/clientlib.h".}

proc get_filterResY*(this: var SVGFilterElement): ptr SVGAnimatedInteger {.
    importcpp: "get_filterResY", header: "cheerp/clientlib.h".}

proc get_filterUnits*(this: var SVGFilterElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_filterUnits", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGFilterElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_primitiveUnits*(this: var SVGFilterElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_primitiveUnits", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGFilterElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGFilterElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGFilterElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc setFilterRes*(this: var SVGFilterElement; filterResX: cdouble;
                   filterResY: cdouble) {.importcpp: "setFilterRes",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFilterElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFilterElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFilterElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFilterElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGFilterElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFilterElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFilterElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFilterElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFilterElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGFilterElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGFilterElement): ptr SVGFilterElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGFilterElement; a2: ptr SVGFilterElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGFilterElement*(): SVGFilterElement {.constructor,
    importcpp: "client::SVGFilterElement(@)", header: "cheerp/clientlib.h".}

proc get_preserveAspectRatio*(this: var SVGFitToViewBox): ptr SVGAnimatedPreserveAspectRatio {.
    importcpp: "get_preserveAspectRatio", header: "cheerp/clientlib.h".}

proc get_viewBox*(this: var SVGFitToViewBox): ptr SVGAnimatedRect {.
    importcpp: "get_viewBox", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGForeignObjectElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGForeignObjectElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGForeignObjectElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGForeignObjectElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGForeignObjectElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGForeignObjectElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGForeignObjectElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGForeignObjectElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGForeignObjectElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGForeignObjectElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGForeignObjectElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGForeignObjectElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGForeignObjectElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGForeignObjectElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGForeignObjectElement): ptr SVGForeignObjectElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGForeignObjectElement;
                    a2: ptr SVGForeignObjectElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGForeignObjectElement*(): SVGForeignObjectElement {.constructor,
    importcpp: "client::SVGForeignObjectElement(@)",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGGElement): ptr SVGGElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGGElement; a2: ptr SVGGElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGGElement*(): SVGGElement {.constructor,
    importcpp: "client::SVGGElement(@)", header: "cheerp/clientlib.h".}

proc get_gradientTransform*(this: var SVGGradientElement): ptr SVGAnimatedTransformList {.
    importcpp: "get_gradientTransform", header: "cheerp/clientlib.h".}

proc get_gradientUnits*(this: var SVGGradientElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_gradientUnits", header: "cheerp/clientlib.h".}

proc get_spreadMethod*(this: var SVGGradientElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_spreadMethod", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGradientElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGradientElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGradientElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGradientElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGGradientElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGradientElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGradientElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGradientElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGradientElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGGradientElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGGradientElement): ptr SVGGradientElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGGradientElement; a2: ptr SVGGradientElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGGradientElement*(): SVGGradientElement {.constructor,
    importcpp: "client::SVGGradientElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_SPREADMETHOD_PAD*(this: var SVGGradientElement): cdouble {.
    importcpp: "get_SVG_SPREADMETHOD_PAD", header: "cheerp/clientlib.h".}

proc get_SVG_SPREADMETHOD_REFLECT*(this: var SVGGradientElement): cdouble {.
    importcpp: "get_SVG_SPREADMETHOD_REFLECT", header: "cheerp/clientlib.h".}

proc get_SVG_SPREADMETHOD_REPEAT*(this: var SVGGradientElement): cdouble {.
    importcpp: "get_SVG_SPREADMETHOD_REPEAT", header: "cheerp/clientlib.h".}

proc get_SVG_SPREADMETHOD_UNKNOWN*(this: var SVGGradientElement): cdouble {.
    importcpp: "get_SVG_SPREADMETHOD_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGImageElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_preserveAspectRatio*(this: var SVGImageElement): ptr SVGAnimatedPreserveAspectRatio {.
    importcpp: "get_preserveAspectRatio", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGImageElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGImageElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGImageElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGImageElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGImageElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGImageElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGImageElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGImageElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGImageElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGImageElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGImageElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGImageElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGImageElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGImageElement): ptr SVGImageElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGImageElement; a2: ptr SVGImageElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGImageElement*(): SVGImageElement {.constructor,
    importcpp: "client::SVGImageElement(@)", header: "cheerp/clientlib.h".}

proc get_unitType*(this: var SVGLength): cdouble {.importcpp: "get_unitType",
    header: "cheerp/clientlib.h".}

proc get_value*(this: var SVGLength): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var SVGLength; a2: cdouble) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc get_valueAsString*(this: var SVGLength): ptr String {.
    importcpp: "get_valueAsString", header: "cheerp/clientlib.h".}

proc set_valueAsString*(this: var SVGLength; a2: String) {.
    importcpp: "set_valueAsString", header: "cheerp/clientlib.h".}

proc get_valueInSpecifiedUnits*(this: var SVGLength): cdouble {.
    importcpp: "get_valueInSpecifiedUnits", header: "cheerp/clientlib.h".}

proc set_valueInSpecifiedUnits*(this: var SVGLength; a2: cdouble) {.
    importcpp: "set_valueInSpecifiedUnits", header: "cheerp/clientlib.h".}

proc convertToSpecifiedUnits*(this: var SVGLength; unitType: cdouble) {.
    importcpp: "convertToSpecifiedUnits", header: "cheerp/clientlib.h".}

proc newValueSpecifiedUnits*(this: var SVGLength; unitType: cdouble;
                             valueInSpecifiedUnits: cdouble) {.
    importcpp: "newValueSpecifiedUnits", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGLength): ptr SVGLength {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGLength; a2: ptr SVGLength) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGLength*(): SVGLength {.constructor,
                                        importcpp: "client::SVGLength(@)",
                                        header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_CM*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_CM", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_EMS*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_EMS", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_EXS*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_EXS", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_IN*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_IN", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_MM*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_MM", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_NUMBER*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_NUMBER", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_PC*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_PC", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_PERCENTAGE*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_PERCENTAGE", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_PT*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_PT", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_PX*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_PX", header: "cheerp/clientlib.h".}

proc get_SVG_LENGTHTYPE_UNKNOWN*(this: var SVGLength): cdouble {.
    importcpp: "get_SVG_LENGTHTYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_numberOfItems*(this: var SVGLengthList): cdouble {.
    importcpp: "get_numberOfItems", header: "cheerp/clientlib.h".}

proc appendItem*(this: var SVGLengthList; newItem: ptr SVGLength): ptr SVGLength {.
    importcpp: "appendItem", header: "cheerp/clientlib.h".}

proc clear*(this: var SVGLengthList) {.importcpp: "clear",
                                       header: "cheerp/clientlib.h".}

proc getItem*(this: var SVGLengthList; index: cdouble): ptr SVGLength {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc initialize*(this: var SVGLengthList; newItem: ptr SVGLength): ptr SVGLength {.
    importcpp: "initialize", header: "cheerp/clientlib.h".}

proc insertItemBefore*(this: var SVGLengthList; newItem: ptr SVGLength;
                       index: cdouble): ptr SVGLength {.
    importcpp: "insertItemBefore", header: "cheerp/clientlib.h".}

proc removeItem*(this: var SVGLengthList; index: cdouble): ptr SVGLength {.
    importcpp: "removeItem", header: "cheerp/clientlib.h".}

proc replaceItem*(this: var SVGLengthList; newItem: ptr SVGLength;
                  index: cdouble): ptr SVGLength {.importcpp: "replaceItem",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGLengthList): ptr SVGLengthList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGLengthList; a2: ptr SVGLengthList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGLengthList*(): SVGLengthList {.constructor,
    importcpp: "client::SVGLengthList(@)", header: "cheerp/clientlib.h".}

proc get_x1*(this: var SVGLineElement): ptr SVGAnimatedLength {.
    importcpp: "get_x1", header: "cheerp/clientlib.h".}

proc get_x2*(this: var SVGLineElement): ptr SVGAnimatedLength {.
    importcpp: "get_x2", header: "cheerp/clientlib.h".}

proc get_y1*(this: var SVGLineElement): ptr SVGAnimatedLength {.
    importcpp: "get_y1", header: "cheerp/clientlib.h".}

proc get_y2*(this: var SVGLineElement): ptr SVGAnimatedLength {.
    importcpp: "get_y2", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLineElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLineElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLineElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLineElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLineElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLineElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLineElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLineElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLineElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLineElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGLineElement): ptr SVGLineElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGLineElement; a2: ptr SVGLineElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGLineElement*(): SVGLineElement {.constructor,
    importcpp: "client::SVGLineElement(@)", header: "cheerp/clientlib.h".}

proc get_x1*(this: var SVGLinearGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_x1", header: "cheerp/clientlib.h".}

proc get_x2*(this: var SVGLinearGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_x2", header: "cheerp/clientlib.h".}

proc get_y1*(this: var SVGLinearGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_y1", header: "cheerp/clientlib.h".}

proc get_y2*(this: var SVGLinearGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_y2", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLinearGradientElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLinearGradientElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLinearGradientElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLinearGradientElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGLinearGradientElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLinearGradientElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLinearGradientElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLinearGradientElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLinearGradientElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGLinearGradientElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGLinearGradientElement): ptr SVGLinearGradientElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGLinearGradientElement;
                    a2: ptr SVGLinearGradientElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGLinearGradientElement*(): SVGLinearGradientElement {.
    constructor, importcpp: "client::SVGLinearGradientElement(@)",
    header: "cheerp/clientlib.h".}

proc get_markerHeight*(this: var SVGMarkerElement): ptr SVGAnimatedLength {.
    importcpp: "get_markerHeight", header: "cheerp/clientlib.h".}

proc get_markerUnits*(this: var SVGMarkerElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_markerUnits", header: "cheerp/clientlib.h".}

proc get_markerWidth*(this: var SVGMarkerElement): ptr SVGAnimatedLength {.
    importcpp: "get_markerWidth", header: "cheerp/clientlib.h".}

proc get_orientAngle*(this: var SVGMarkerElement): ptr SVGAnimatedAngle {.
    importcpp: "get_orientAngle", header: "cheerp/clientlib.h".}

proc get_orientType*(this: var SVGMarkerElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_orientType", header: "cheerp/clientlib.h".}

proc get_refX*(this: var SVGMarkerElement): ptr SVGAnimatedLength {.
    importcpp: "get_refX", header: "cheerp/clientlib.h".}

proc get_refY*(this: var SVGMarkerElement): ptr SVGAnimatedLength {.
    importcpp: "get_refY", header: "cheerp/clientlib.h".}

proc setOrientToAngle*(this: var SVGMarkerElement; angle: ptr SVGAngle) {.
    importcpp: "setOrientToAngle", header: "cheerp/clientlib.h".}

proc setOrientToAuto*(this: var SVGMarkerElement) {.
    importcpp: "setOrientToAuto", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMarkerElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMarkerElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMarkerElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMarkerElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMarkerElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMarkerElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMarkerElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMarkerElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMarkerElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMarkerElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGMarkerElement): ptr SVGMarkerElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGMarkerElement; a2: ptr SVGMarkerElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGMarkerElement*(): SVGMarkerElement {.constructor,
    importcpp: "client::SVGMarkerElement(@)", header: "cheerp/clientlib.h".}

proc get_SVG_MARKERUNITS_STROKEWIDTH*(this: var SVGMarkerElement): cdouble {.
    importcpp: "get_SVG_MARKERUNITS_STROKEWIDTH", header: "cheerp/clientlib.h".}

proc get_SVG_MARKERUNITS_UNKNOWN*(this: var SVGMarkerElement): cdouble {.
    importcpp: "get_SVG_MARKERUNITS_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_SVG_MARKERUNITS_USERSPACEONUSE*(this: var SVGMarkerElement): cdouble {.
    importcpp: "get_SVG_MARKERUNITS_USERSPACEONUSE",
    header: "cheerp/clientlib.h".}

proc get_SVG_MARKER_ORIENT_ANGLE*(this: var SVGMarkerElement): cdouble {.
    importcpp: "get_SVG_MARKER_ORIENT_ANGLE", header: "cheerp/clientlib.h".}

proc get_SVG_MARKER_ORIENT_AUTO*(this: var SVGMarkerElement): cdouble {.
    importcpp: "get_SVG_MARKER_ORIENT_AUTO", header: "cheerp/clientlib.h".}

proc get_SVG_MARKER_ORIENT_UNKNOWN*(this: var SVGMarkerElement): cdouble {.
    importcpp: "get_SVG_MARKER_ORIENT_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGMaskElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_maskContentUnits*(this: var SVGMaskElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_maskContentUnits", header: "cheerp/clientlib.h".}

proc get_maskUnits*(this: var SVGMaskElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_maskUnits", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGMaskElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGMaskElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGMaskElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMaskElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMaskElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMaskElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMaskElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMaskElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMaskElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMaskElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMaskElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMaskElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMaskElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGMaskElement): ptr SVGMaskElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGMaskElement; a2: ptr SVGMaskElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGMaskElement*(): SVGMaskElement {.constructor,
    importcpp: "client::SVGMaskElement(@)", header: "cheerp/clientlib.h".}

proc get_a*(this: var SVGMatrix): cdouble {.importcpp: "get_a",
    header: "cheerp/clientlib.h".}

proc set_a*(this: var SVGMatrix; a2: cdouble) {.importcpp: "set_a",
    header: "cheerp/clientlib.h".}

proc get_b*(this: var SVGMatrix): cdouble {.importcpp: "get_b",
    header: "cheerp/clientlib.h".}

proc set_b*(this: var SVGMatrix; a2: cdouble) {.importcpp: "set_b",
    header: "cheerp/clientlib.h".}

proc get_c*(this: var SVGMatrix): cdouble {.importcpp: "get_c",
    header: "cheerp/clientlib.h".}

proc set_c*(this: var SVGMatrix; a2: cdouble) {.importcpp: "set_c",
    header: "cheerp/clientlib.h".}

proc get_d*(this: var SVGMatrix): cdouble {.importcpp: "get_d",
    header: "cheerp/clientlib.h".}

proc set_d*(this: var SVGMatrix; a2: cdouble) {.importcpp: "set_d",
    header: "cheerp/clientlib.h".}

proc get_e*(this: var SVGMatrix): cdouble {.importcpp: "get_e",
    header: "cheerp/clientlib.h".}

proc set_e*(this: var SVGMatrix; a2: cdouble) {.importcpp: "set_e",
    header: "cheerp/clientlib.h".}

proc get_f*(this: var SVGMatrix): cdouble {.importcpp: "get_f",
    header: "cheerp/clientlib.h".}

proc set_f*(this: var SVGMatrix; a2: cdouble) {.importcpp: "set_f",
    header: "cheerp/clientlib.h".}

proc flipX*(this: var SVGMatrix): ptr SVGMatrix {.importcpp: "flipX",
    header: "cheerp/clientlib.h".}

proc flipY*(this: var SVGMatrix): ptr SVGMatrix {.importcpp: "flipY",
    header: "cheerp/clientlib.h".}

proc inverse*(this: var SVGMatrix): ptr SVGMatrix {.importcpp: "inverse",
    header: "cheerp/clientlib.h".}

proc multiply*(this: var SVGMatrix; secondMatrix: ptr SVGMatrix): ptr SVGMatrix {.
    importcpp: "multiply", header: "cheerp/clientlib.h".}

proc rotate*(this: var SVGMatrix; angle: cdouble): ptr SVGMatrix {.
    importcpp: "rotate", header: "cheerp/clientlib.h".}

proc rotateFromVector*(this: var SVGMatrix; x: cdouble; y: cdouble): ptr SVGMatrix {.
    importcpp: "rotateFromVector", header: "cheerp/clientlib.h".}

proc scale*(this: var SVGMatrix; scaleFactor: cdouble): ptr SVGMatrix {.
    importcpp: "scale", header: "cheerp/clientlib.h".}

proc scaleNonUniform*(this: var SVGMatrix; scaleFactorX: cdouble;
                      scaleFactorY: cdouble): ptr SVGMatrix {.
    importcpp: "scaleNonUniform", header: "cheerp/clientlib.h".}

proc skewX*(this: var SVGMatrix; angle: cdouble): ptr SVGMatrix {.
    importcpp: "skewX", header: "cheerp/clientlib.h".}

proc skewY*(this: var SVGMatrix; angle: cdouble): ptr SVGMatrix {.
    importcpp: "skewY", header: "cheerp/clientlib.h".}

proc translate*(this: var SVGMatrix; x: cdouble; y: cdouble): ptr SVGMatrix {.
    importcpp: "translate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGMatrix): ptr SVGMatrix {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGMatrix; a2: ptr SVGMatrix) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGMatrix*(): SVGMatrix {.constructor,
                                        importcpp: "client::SVGMatrix(@)",
                                        header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMetadataElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMetadataElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMetadataElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMetadataElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGMetadataElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMetadataElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMetadataElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMetadataElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMetadataElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGMetadataElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGMetadataElement): ptr SVGMetadataElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGMetadataElement; a2: ptr SVGMetadataElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGMetadataElement*(): SVGMetadataElement {.constructor,
    importcpp: "client::SVGMetadataElement(@)", header: "cheerp/clientlib.h".}

proc get_value*(this: var SVGNumber): cdouble {.importcpp: "get_value",
    header: "cheerp/clientlib.h".}

proc set_value*(this: var SVGNumber; a2: cdouble) {.importcpp: "set_value",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGNumber): ptr SVGNumber {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGNumber; a2: ptr SVGNumber) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGNumber*(): SVGNumber {.constructor,
                                        importcpp: "client::SVGNumber(@)",
                                        header: "cheerp/clientlib.h".}

proc get_numberOfItems*(this: var SVGNumberList): cdouble {.
    importcpp: "get_numberOfItems", header: "cheerp/clientlib.h".}

proc appendItem*(this: var SVGNumberList; newItem: ptr SVGNumber): ptr SVGNumber {.
    importcpp: "appendItem", header: "cheerp/clientlib.h".}

proc clear*(this: var SVGNumberList) {.importcpp: "clear",
                                       header: "cheerp/clientlib.h".}

proc getItem*(this: var SVGNumberList; index: cdouble): ptr SVGNumber {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc initialize*(this: var SVGNumberList; newItem: ptr SVGNumber): ptr SVGNumber {.
    importcpp: "initialize", header: "cheerp/clientlib.h".}

proc insertItemBefore*(this: var SVGNumberList; newItem: ptr SVGNumber;
                       index: cdouble): ptr SVGNumber {.
    importcpp: "insertItemBefore", header: "cheerp/clientlib.h".}

proc removeItem*(this: var SVGNumberList; index: cdouble): ptr SVGNumber {.
    importcpp: "removeItem", header: "cheerp/clientlib.h".}

proc replaceItem*(this: var SVGNumberList; newItem: ptr SVGNumber;
                  index: cdouble): ptr SVGNumber {.importcpp: "replaceItem",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGNumberList): ptr SVGNumberList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGNumberList; a2: ptr SVGNumberList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGNumberList*(): SVGNumberList {.constructor,
    importcpp: "client::SVGNumberList(@)", header: "cheerp/clientlib.h".}

proc get_pathSegList*(this: var SVGPathElement): ptr SVGPathSegList {.
    importcpp: "get_pathSegList", header: "cheerp/clientlib.h".}

proc createSVGPathSegArcAbs*(this: var SVGPathElement; x: cdouble; y: cdouble;
                             r1: cdouble; r2: cdouble; angle: cdouble;
                             largeArcFlag: bool; sweepFlag: bool): ptr SVGPathSegArcAbs {.
    importcpp: "createSVGPathSegArcAbs", header: "cheerp/clientlib.h".}

proc createSVGPathSegArcRel*(this: var SVGPathElement; x: cdouble; y: cdouble;
                             r1: cdouble; r2: cdouble; angle: cdouble;
                             largeArcFlag: bool; sweepFlag: bool): ptr SVGPathSegArcRel {.
    importcpp: "createSVGPathSegArcRel", header: "cheerp/clientlib.h".}

proc createSVGPathSegClosePath*(this: var SVGPathElement): ptr SVGPathSegClosePath {.
    importcpp: "createSVGPathSegClosePath", header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoCubicAbs*(this: var SVGPathElement; x: cdouble;
                                      y: cdouble; x1: cdouble; y1: cdouble;
                                      x2: cdouble; y2: cdouble): ptr SVGPathSegCurvetoCubicAbs {.
    importcpp: "createSVGPathSegCurvetoCubicAbs", header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoCubicRel*(this: var SVGPathElement; x: cdouble;
                                      y: cdouble; x1: cdouble; y1: cdouble;
                                      x2: cdouble; y2: cdouble): ptr SVGPathSegCurvetoCubicRel {.
    importcpp: "createSVGPathSegCurvetoCubicRel", header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoCubicSmoothAbs*(this: var SVGPathElement;
    x: cdouble; y: cdouble; x2: cdouble; y2: cdouble): ptr SVGPathSegCurvetoCubicSmoothAbs {.
    importcpp: "createSVGPathSegCurvetoCubicSmoothAbs",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoCubicSmoothRel*(this: var SVGPathElement;
    x: cdouble; y: cdouble; x2: cdouble; y2: cdouble): ptr SVGPathSegCurvetoCubicSmoothRel {.
    importcpp: "createSVGPathSegCurvetoCubicSmoothRel",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoQuadraticAbs*(this: var SVGPathElement; x: cdouble;
    y: cdouble; x1: cdouble; y1: cdouble): ptr SVGPathSegCurvetoQuadraticAbs {.
    importcpp: "createSVGPathSegCurvetoQuadraticAbs",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoQuadraticRel*(this: var SVGPathElement; x: cdouble;
    y: cdouble; x1: cdouble; y1: cdouble): ptr SVGPathSegCurvetoQuadraticRel {.
    importcpp: "createSVGPathSegCurvetoQuadraticRel",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoQuadraticSmoothAbs*(this: var SVGPathElement;
    x: cdouble; y: cdouble): ptr SVGPathSegCurvetoQuadraticSmoothAbs {.
    importcpp: "createSVGPathSegCurvetoQuadraticSmoothAbs",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegCurvetoQuadraticSmoothRel*(this: var SVGPathElement;
    x: cdouble; y: cdouble): ptr SVGPathSegCurvetoQuadraticSmoothRel {.
    importcpp: "createSVGPathSegCurvetoQuadraticSmoothRel",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegLinetoAbs*(this: var SVGPathElement; x: cdouble; y: cdouble): ptr SVGPathSegLinetoAbs {.
    importcpp: "createSVGPathSegLinetoAbs", header: "cheerp/clientlib.h".}

proc createSVGPathSegLinetoHorizontalAbs*(this: var SVGPathElement; x: cdouble): ptr SVGPathSegLinetoHorizontalAbs {.
    importcpp: "createSVGPathSegLinetoHorizontalAbs",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegLinetoHorizontalRel*(this: var SVGPathElement; x: cdouble): ptr SVGPathSegLinetoHorizontalRel {.
    importcpp: "createSVGPathSegLinetoHorizontalRel",
    header: "cheerp/clientlib.h".}

proc createSVGPathSegLinetoRel*(this: var SVGPathElement; x: cdouble; y: cdouble): ptr SVGPathSegLinetoRel {.
    importcpp: "createSVGPathSegLinetoRel", header: "cheerp/clientlib.h".}

proc createSVGPathSegLinetoVerticalAbs*(this: var SVGPathElement; y: cdouble): ptr SVGPathSegLinetoVerticalAbs {.
    importcpp: "createSVGPathSegLinetoVerticalAbs", header: "cheerp/clientlib.h".}

proc createSVGPathSegLinetoVerticalRel*(this: var SVGPathElement; y: cdouble): ptr SVGPathSegLinetoVerticalRel {.
    importcpp: "createSVGPathSegLinetoVerticalRel", header: "cheerp/clientlib.h".}

proc createSVGPathSegMovetoAbs*(this: var SVGPathElement; x: cdouble; y: cdouble): ptr SVGPathSegMovetoAbs {.
    importcpp: "createSVGPathSegMovetoAbs", header: "cheerp/clientlib.h".}

proc createSVGPathSegMovetoRel*(this: var SVGPathElement; x: cdouble; y: cdouble): ptr SVGPathSegMovetoRel {.
    importcpp: "createSVGPathSegMovetoRel", header: "cheerp/clientlib.h".}

proc getPathSegAtLength*(this: var SVGPathElement; distance: cdouble): cdouble {.
    importcpp: "getPathSegAtLength", header: "cheerp/clientlib.h".}

proc getPointAtLength*(this: var SVGPathElement; distance: cdouble): ptr SVGPoint {.
    importcpp: "getPointAtLength", header: "cheerp/clientlib.h".}

proc getTotalLength*(this: var SVGPathElement): cdouble {.
    importcpp: "getTotalLength", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPathElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPathElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPathElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPathElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPathElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPathElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPathElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPathElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPathElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPathElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathElement): ptr SVGPathElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathElement; a2: ptr SVGPathElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathElement*(): SVGPathElement {.constructor,
    importcpp: "client::SVGPathElement(@)", header: "cheerp/clientlib.h".}

proc get_pathSegType*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_pathSegType", header: "cheerp/clientlib.h".}

proc get_pathSegTypeAsLetter*(this: var SVGPathSeg): ptr String {.
    importcpp: "get_pathSegTypeAsLetter", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSeg): ptr SVGPathSeg {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSeg; a2: ptr SVGPathSeg) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSeg*(): SVGPathSeg {.constructor,
    importcpp: "client::SVGPathSeg(@)", header: "cheerp/clientlib.h".}

proc get_PATHSEG_ARC_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_ARC_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_ARC_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_ARC_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_CLOSEPATH*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CLOSEPATH", header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_CUBIC_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_CUBIC_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_CUBIC_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_CUBIC_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_CUBIC_SMOOTH_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_CUBIC_SMOOTH_ABS",
    header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_CUBIC_SMOOTH_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_CUBIC_SMOOTH_REL",
    header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_QUADRATIC_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_QUADRATIC_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_QUADRATIC_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_QUADRATIC_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS",
    header: "cheerp/clientlib.h".}

proc get_PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL",
    header: "cheerp/clientlib.h".}

proc get_PATHSEG_LINETO_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_LINETO_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_LINETO_HORIZONTAL_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_LINETO_HORIZONTAL_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_LINETO_HORIZONTAL_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_LINETO_HORIZONTAL_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_LINETO_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_LINETO_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_LINETO_VERTICAL_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_LINETO_VERTICAL_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_LINETO_VERTICAL_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_LINETO_VERTICAL_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_MOVETO_ABS*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_MOVETO_ABS", header: "cheerp/clientlib.h".}

proc get_PATHSEG_MOVETO_REL*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_MOVETO_REL", header: "cheerp/clientlib.h".}

proc get_PATHSEG_UNKNOWN*(this: var SVGPathSeg): cdouble {.
    importcpp: "get_PATHSEG_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_angle*(this: var SVGPathSegArcAbs): cdouble {.importcpp: "get_angle",
    header: "cheerp/clientlib.h".}

proc set_angle*(this: var SVGPathSegArcAbs; a2: cdouble) {.
    importcpp: "set_angle", header: "cheerp/clientlib.h".}

proc get_largeArcFlag*(this: var SVGPathSegArcAbs): bool {.
    importcpp: "get_largeArcFlag", header: "cheerp/clientlib.h".}

proc set_largeArcFlag*(this: var SVGPathSegArcAbs; a2: bool) {.
    importcpp: "set_largeArcFlag", header: "cheerp/clientlib.h".}

proc get_r1*(this: var SVGPathSegArcAbs): cdouble {.importcpp: "get_r1",
    header: "cheerp/clientlib.h".}

proc set_r1*(this: var SVGPathSegArcAbs; a2: cdouble) {.importcpp: "set_r1",
    header: "cheerp/clientlib.h".}

proc get_r2*(this: var SVGPathSegArcAbs): cdouble {.importcpp: "get_r2",
    header: "cheerp/clientlib.h".}

proc set_r2*(this: var SVGPathSegArcAbs; a2: cdouble) {.importcpp: "set_r2",
    header: "cheerp/clientlib.h".}

proc get_sweepFlag*(this: var SVGPathSegArcAbs): bool {.
    importcpp: "get_sweepFlag", header: "cheerp/clientlib.h".}

proc set_sweepFlag*(this: var SVGPathSegArcAbs; a2: bool) {.
    importcpp: "set_sweepFlag", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegArcAbs): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegArcAbs; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegArcAbs): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegArcAbs; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegArcAbs): ptr SVGPathSegArcAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegArcAbs; a2: ptr SVGPathSegArcAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegArcAbs*(): SVGPathSegArcAbs {.constructor,
    importcpp: "client::SVGPathSegArcAbs(@)", header: "cheerp/clientlib.h".}

proc get_angle*(this: var SVGPathSegArcRel): cdouble {.importcpp: "get_angle",
    header: "cheerp/clientlib.h".}

proc set_angle*(this: var SVGPathSegArcRel; a2: cdouble) {.
    importcpp: "set_angle", header: "cheerp/clientlib.h".}

proc get_largeArcFlag*(this: var SVGPathSegArcRel): bool {.
    importcpp: "get_largeArcFlag", header: "cheerp/clientlib.h".}

proc set_largeArcFlag*(this: var SVGPathSegArcRel; a2: bool) {.
    importcpp: "set_largeArcFlag", header: "cheerp/clientlib.h".}

proc get_r1*(this: var SVGPathSegArcRel): cdouble {.importcpp: "get_r1",
    header: "cheerp/clientlib.h".}

proc set_r1*(this: var SVGPathSegArcRel; a2: cdouble) {.importcpp: "set_r1",
    header: "cheerp/clientlib.h".}

proc get_r2*(this: var SVGPathSegArcRel): cdouble {.importcpp: "get_r2",
    header: "cheerp/clientlib.h".}

proc set_r2*(this: var SVGPathSegArcRel; a2: cdouble) {.importcpp: "set_r2",
    header: "cheerp/clientlib.h".}

proc get_sweepFlag*(this: var SVGPathSegArcRel): bool {.
    importcpp: "get_sweepFlag", header: "cheerp/clientlib.h".}

proc set_sweepFlag*(this: var SVGPathSegArcRel; a2: bool) {.
    importcpp: "set_sweepFlag", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegArcRel): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegArcRel; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegArcRel): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegArcRel; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegArcRel): ptr SVGPathSegArcRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegArcRel; a2: ptr SVGPathSegArcRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegArcRel*(): SVGPathSegArcRel {.constructor,
    importcpp: "client::SVGPathSegArcRel(@)", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegClosePath): ptr SVGPathSegClosePath {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegClosePath; a2: ptr SVGPathSegClosePath) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegClosePath*(): SVGPathSegClosePath {.constructor,
    importcpp: "client::SVGPathSegClosePath(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoCubicAbs): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoCubicAbs; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_x1*(this: var SVGPathSegCurvetoCubicAbs): cdouble {.
    importcpp: "get_x1", header: "cheerp/clientlib.h".}

proc set_x1*(this: var SVGPathSegCurvetoCubicAbs; a2: cdouble) {.
    importcpp: "set_x1", header: "cheerp/clientlib.h".}

proc get_x2*(this: var SVGPathSegCurvetoCubicAbs): cdouble {.
    importcpp: "get_x2", header: "cheerp/clientlib.h".}

proc set_x2*(this: var SVGPathSegCurvetoCubicAbs; a2: cdouble) {.
    importcpp: "set_x2", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoCubicAbs): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoCubicAbs; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_y1*(this: var SVGPathSegCurvetoCubicAbs): cdouble {.
    importcpp: "get_y1", header: "cheerp/clientlib.h".}

proc set_y1*(this: var SVGPathSegCurvetoCubicAbs; a2: cdouble) {.
    importcpp: "set_y1", header: "cheerp/clientlib.h".}

proc get_y2*(this: var SVGPathSegCurvetoCubicAbs): cdouble {.
    importcpp: "get_y2", header: "cheerp/clientlib.h".}

proc set_y2*(this: var SVGPathSegCurvetoCubicAbs; a2: cdouble) {.
    importcpp: "set_y2", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoCubicAbs): ptr SVGPathSegCurvetoCubicAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoCubicAbs;
                    a2: ptr SVGPathSegCurvetoCubicAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoCubicAbs*(): SVGPathSegCurvetoCubicAbs {.
    constructor, importcpp: "client::SVGPathSegCurvetoCubicAbs(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoCubicRel): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoCubicRel; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_x1*(this: var SVGPathSegCurvetoCubicRel): cdouble {.
    importcpp: "get_x1", header: "cheerp/clientlib.h".}

proc set_x1*(this: var SVGPathSegCurvetoCubicRel; a2: cdouble) {.
    importcpp: "set_x1", header: "cheerp/clientlib.h".}

proc get_x2*(this: var SVGPathSegCurvetoCubicRel): cdouble {.
    importcpp: "get_x2", header: "cheerp/clientlib.h".}

proc set_x2*(this: var SVGPathSegCurvetoCubicRel; a2: cdouble) {.
    importcpp: "set_x2", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoCubicRel): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoCubicRel; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_y1*(this: var SVGPathSegCurvetoCubicRel): cdouble {.
    importcpp: "get_y1", header: "cheerp/clientlib.h".}

proc set_y1*(this: var SVGPathSegCurvetoCubicRel; a2: cdouble) {.
    importcpp: "set_y1", header: "cheerp/clientlib.h".}

proc get_y2*(this: var SVGPathSegCurvetoCubicRel): cdouble {.
    importcpp: "get_y2", header: "cheerp/clientlib.h".}

proc set_y2*(this: var SVGPathSegCurvetoCubicRel; a2: cdouble) {.
    importcpp: "set_y2", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoCubicRel): ptr SVGPathSegCurvetoCubicRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoCubicRel;
                    a2: ptr SVGPathSegCurvetoCubicRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoCubicRel*(): SVGPathSegCurvetoCubicRel {.
    constructor, importcpp: "client::SVGPathSegCurvetoCubicRel(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoCubicSmoothAbs): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoCubicSmoothAbs; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_x2*(this: var SVGPathSegCurvetoCubicSmoothAbs): cdouble {.
    importcpp: "get_x2", header: "cheerp/clientlib.h".}

proc set_x2*(this: var SVGPathSegCurvetoCubicSmoothAbs; a2: cdouble) {.
    importcpp: "set_x2", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoCubicSmoothAbs): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoCubicSmoothAbs; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_y2*(this: var SVGPathSegCurvetoCubicSmoothAbs): cdouble {.
    importcpp: "get_y2", header: "cheerp/clientlib.h".}

proc set_y2*(this: var SVGPathSegCurvetoCubicSmoothAbs; a2: cdouble) {.
    importcpp: "set_y2", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoCubicSmoothAbs): ptr SVGPathSegCurvetoCubicSmoothAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoCubicSmoothAbs;
                    a2: ptr SVGPathSegCurvetoCubicSmoothAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoCubicSmoothAbs*(): SVGPathSegCurvetoCubicSmoothAbs {.
    constructor, importcpp: "client::SVGPathSegCurvetoCubicSmoothAbs(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoCubicSmoothRel): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoCubicSmoothRel; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_x2*(this: var SVGPathSegCurvetoCubicSmoothRel): cdouble {.
    importcpp: "get_x2", header: "cheerp/clientlib.h".}

proc set_x2*(this: var SVGPathSegCurvetoCubicSmoothRel; a2: cdouble) {.
    importcpp: "set_x2", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoCubicSmoothRel): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoCubicSmoothRel; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_y2*(this: var SVGPathSegCurvetoCubicSmoothRel): cdouble {.
    importcpp: "get_y2", header: "cheerp/clientlib.h".}

proc set_y2*(this: var SVGPathSegCurvetoCubicSmoothRel; a2: cdouble) {.
    importcpp: "set_y2", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoCubicSmoothRel): ptr SVGPathSegCurvetoCubicSmoothRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoCubicSmoothRel;
                    a2: ptr SVGPathSegCurvetoCubicSmoothRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoCubicSmoothRel*(): SVGPathSegCurvetoCubicSmoothRel {.
    constructor, importcpp: "client::SVGPathSegCurvetoCubicSmoothRel(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoQuadraticAbs): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoQuadraticAbs; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_x1*(this: var SVGPathSegCurvetoQuadraticAbs): cdouble {.
    importcpp: "get_x1", header: "cheerp/clientlib.h".}

proc set_x1*(this: var SVGPathSegCurvetoQuadraticAbs; a2: cdouble) {.
    importcpp: "set_x1", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoQuadraticAbs): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoQuadraticAbs; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_y1*(this: var SVGPathSegCurvetoQuadraticAbs): cdouble {.
    importcpp: "get_y1", header: "cheerp/clientlib.h".}

proc set_y1*(this: var SVGPathSegCurvetoQuadraticAbs; a2: cdouble) {.
    importcpp: "set_y1", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoQuadraticAbs): ptr SVGPathSegCurvetoQuadraticAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoQuadraticAbs;
                    a2: ptr SVGPathSegCurvetoQuadraticAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoQuadraticAbs*(): SVGPathSegCurvetoQuadraticAbs {.
    constructor, importcpp: "client::SVGPathSegCurvetoQuadraticAbs(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoQuadraticRel): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoQuadraticRel; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_x1*(this: var SVGPathSegCurvetoQuadraticRel): cdouble {.
    importcpp: "get_x1", header: "cheerp/clientlib.h".}

proc set_x1*(this: var SVGPathSegCurvetoQuadraticRel; a2: cdouble) {.
    importcpp: "set_x1", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoQuadraticRel): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoQuadraticRel; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_y1*(this: var SVGPathSegCurvetoQuadraticRel): cdouble {.
    importcpp: "get_y1", header: "cheerp/clientlib.h".}

proc set_y1*(this: var SVGPathSegCurvetoQuadraticRel; a2: cdouble) {.
    importcpp: "set_y1", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoQuadraticRel): ptr SVGPathSegCurvetoQuadraticRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoQuadraticRel;
                    a2: ptr SVGPathSegCurvetoQuadraticRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoQuadraticRel*(): SVGPathSegCurvetoQuadraticRel {.
    constructor, importcpp: "client::SVGPathSegCurvetoQuadraticRel(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoQuadraticSmoothAbs): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoQuadraticSmoothAbs; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoQuadraticSmoothAbs): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoQuadraticSmoothAbs; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoQuadraticSmoothAbs): ptr SVGPathSegCurvetoQuadraticSmoothAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoQuadraticSmoothAbs;
                    a2: ptr SVGPathSegCurvetoQuadraticSmoothAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoQuadraticSmoothAbs*(): SVGPathSegCurvetoQuadraticSmoothAbs {.
    constructor, importcpp: "client::SVGPathSegCurvetoQuadraticSmoothAbs(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegCurvetoQuadraticSmoothRel): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegCurvetoQuadraticSmoothRel; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegCurvetoQuadraticSmoothRel): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegCurvetoQuadraticSmoothRel; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegCurvetoQuadraticSmoothRel): ptr SVGPathSegCurvetoQuadraticSmoothRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegCurvetoQuadraticSmoothRel;
                    a2: ptr SVGPathSegCurvetoQuadraticSmoothRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegCurvetoQuadraticSmoothRel*(): SVGPathSegCurvetoQuadraticSmoothRel {.
    constructor, importcpp: "client::SVGPathSegCurvetoQuadraticSmoothRel(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegLinetoAbs): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegLinetoAbs; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegLinetoAbs): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegLinetoAbs; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegLinetoAbs): ptr SVGPathSegLinetoAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegLinetoAbs; a2: ptr SVGPathSegLinetoAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegLinetoAbs*(): SVGPathSegLinetoAbs {.constructor,
    importcpp: "client::SVGPathSegLinetoAbs(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegLinetoHorizontalAbs): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegLinetoHorizontalAbs; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegLinetoHorizontalAbs): ptr SVGPathSegLinetoHorizontalAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegLinetoHorizontalAbs;
                    a2: ptr SVGPathSegLinetoHorizontalAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegLinetoHorizontalAbs*(): SVGPathSegLinetoHorizontalAbs {.
    constructor, importcpp: "client::SVGPathSegLinetoHorizontalAbs(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegLinetoHorizontalRel): cdouble {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegLinetoHorizontalRel; a2: cdouble) {.
    importcpp: "set_x", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegLinetoHorizontalRel): ptr SVGPathSegLinetoHorizontalRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegLinetoHorizontalRel;
                    a2: ptr SVGPathSegLinetoHorizontalRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegLinetoHorizontalRel*(): SVGPathSegLinetoHorizontalRel {.
    constructor, importcpp: "client::SVGPathSegLinetoHorizontalRel(@)",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegLinetoRel): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegLinetoRel; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegLinetoRel): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegLinetoRel; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegLinetoRel): ptr SVGPathSegLinetoRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegLinetoRel; a2: ptr SVGPathSegLinetoRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegLinetoRel*(): SVGPathSegLinetoRel {.constructor,
    importcpp: "client::SVGPathSegLinetoRel(@)", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegLinetoVerticalAbs): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegLinetoVerticalAbs; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegLinetoVerticalAbs): ptr SVGPathSegLinetoVerticalAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegLinetoVerticalAbs;
                    a2: ptr SVGPathSegLinetoVerticalAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegLinetoVerticalAbs*(): SVGPathSegLinetoVerticalAbs {.
    constructor, importcpp: "client::SVGPathSegLinetoVerticalAbs(@)",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegLinetoVerticalRel): cdouble {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegLinetoVerticalRel; a2: cdouble) {.
    importcpp: "set_y", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegLinetoVerticalRel): ptr SVGPathSegLinetoVerticalRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegLinetoVerticalRel;
                    a2: ptr SVGPathSegLinetoVerticalRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegLinetoVerticalRel*(): SVGPathSegLinetoVerticalRel {.
    constructor, importcpp: "client::SVGPathSegLinetoVerticalRel(@)",
    header: "cheerp/clientlib.h".}

proc get_numberOfItems*(this: var SVGPathSegList): cdouble {.
    importcpp: "get_numberOfItems", header: "cheerp/clientlib.h".}

proc appendItem*(this: var SVGPathSegList; newItem: ptr SVGPathSeg): ptr SVGPathSeg {.
    importcpp: "appendItem", header: "cheerp/clientlib.h".}

proc clear*(this: var SVGPathSegList) {.importcpp: "clear",
                                        header: "cheerp/clientlib.h".}

proc getItem*(this: var SVGPathSegList; index: cdouble): ptr SVGPathSeg {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc initialize*(this: var SVGPathSegList; newItem: ptr SVGPathSeg): ptr SVGPathSeg {.
    importcpp: "initialize", header: "cheerp/clientlib.h".}

proc insertItemBefore*(this: var SVGPathSegList; newItem: ptr SVGPathSeg;
                       index: cdouble): ptr SVGPathSeg {.
    importcpp: "insertItemBefore", header: "cheerp/clientlib.h".}

proc removeItem*(this: var SVGPathSegList; index: cdouble): ptr SVGPathSeg {.
    importcpp: "removeItem", header: "cheerp/clientlib.h".}

proc replaceItem*(this: var SVGPathSegList; newItem: ptr SVGPathSeg;
                  index: cdouble): ptr SVGPathSeg {.importcpp: "replaceItem",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegList): ptr SVGPathSegList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegList; a2: ptr SVGPathSegList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegList*(): SVGPathSegList {.constructor,
    importcpp: "client::SVGPathSegList(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegMovetoAbs): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegMovetoAbs; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegMovetoAbs): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegMovetoAbs; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegMovetoAbs): ptr SVGPathSegMovetoAbs {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegMovetoAbs; a2: ptr SVGPathSegMovetoAbs) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegMovetoAbs*(): SVGPathSegMovetoAbs {.constructor,
    importcpp: "client::SVGPathSegMovetoAbs(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPathSegMovetoRel): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPathSegMovetoRel; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPathSegMovetoRel): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPathSegMovetoRel; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPathSegMovetoRel): ptr SVGPathSegMovetoRel {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPathSegMovetoRel; a2: ptr SVGPathSegMovetoRel) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPathSegMovetoRel*(): SVGPathSegMovetoRel {.constructor,
    importcpp: "client::SVGPathSegMovetoRel(@)", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGPatternElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_patternContentUnits*(this: var SVGPatternElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_patternContentUnits", header: "cheerp/clientlib.h".}

proc get_patternTransform*(this: var SVGPatternElement): ptr SVGAnimatedTransformList {.
    importcpp: "get_patternTransform", header: "cheerp/clientlib.h".}

proc get_patternUnits*(this: var SVGPatternElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_patternUnits", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGPatternElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPatternElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPatternElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPatternElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPatternElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPatternElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPatternElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPatternElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPatternElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPatternElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPatternElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPatternElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPatternElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPatternElement): ptr SVGPatternElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPatternElement; a2: ptr SVGPatternElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPatternElement*(): SVGPatternElement {.constructor,
    importcpp: "client::SVGPatternElement(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGPoint): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGPoint; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGPoint): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGPoint; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc matrixTransform*(this: var SVGPoint; matrix: ptr SVGMatrix): ptr SVGPoint {.
    importcpp: "matrixTransform", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPoint): ptr SVGPoint {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPoint; a2: ptr SVGPoint) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPoint*(): SVGPoint {.constructor,
                                      importcpp: "client::SVGPoint(@)",
                                      header: "cheerp/clientlib.h".}

proc get_numberOfItems*(this: var SVGPointList): cdouble {.
    importcpp: "get_numberOfItems", header: "cheerp/clientlib.h".}

proc appendItem*(this: var SVGPointList; newItem: ptr SVGPoint): ptr SVGPoint {.
    importcpp: "appendItem", header: "cheerp/clientlib.h".}

proc clear*(this: var SVGPointList) {.importcpp: "clear",
                                      header: "cheerp/clientlib.h".}

proc getItem*(this: var SVGPointList; index: cdouble): ptr SVGPoint {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc initialize*(this: var SVGPointList; newItem: ptr SVGPoint): ptr SVGPoint {.
    importcpp: "initialize", header: "cheerp/clientlib.h".}

proc insertItemBefore*(this: var SVGPointList; newItem: ptr SVGPoint;
                       index: cdouble): ptr SVGPoint {.
    importcpp: "insertItemBefore", header: "cheerp/clientlib.h".}

proc removeItem*(this: var SVGPointList; index: cdouble): ptr SVGPoint {.
    importcpp: "removeItem", header: "cheerp/clientlib.h".}

proc replaceItem*(this: var SVGPointList; newItem: ptr SVGPoint; index: cdouble): ptr SVGPoint {.
    importcpp: "replaceItem", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPointList): ptr SVGPointList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPointList; a2: ptr SVGPointList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPointList*(): SVGPointList {.constructor,
    importcpp: "client::SVGPointList(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolygonElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolygonElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolygonElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolygonElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolygonElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolygonElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolygonElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolygonElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolygonElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolygonElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPolygonElement): ptr SVGPolygonElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPolygonElement; a2: ptr SVGPolygonElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPolygonElement*(): SVGPolygonElement {.constructor,
    importcpp: "client::SVGPolygonElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolylineElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolylineElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolylineElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolylineElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGPolylineElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolylineElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolylineElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolylineElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolylineElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGPolylineElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPolylineElement): ptr SVGPolylineElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPolylineElement; a2: ptr SVGPolylineElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPolylineElement*(): SVGPolylineElement {.constructor,
    importcpp: "client::SVGPolylineElement(@)", header: "cheerp/clientlib.h".}

proc get_align*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_align", header: "cheerp/clientlib.h".}

proc set_align*(this: var SVGPreserveAspectRatio; a2: cdouble) {.
    importcpp: "set_align", header: "cheerp/clientlib.h".}

proc get_meetOrSlice*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_meetOrSlice", header: "cheerp/clientlib.h".}

proc set_meetOrSlice*(this: var SVGPreserveAspectRatio; a2: cdouble) {.
    importcpp: "set_meetOrSlice", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGPreserveAspectRatio): ptr SVGPreserveAspectRatio {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGPreserveAspectRatio;
                    a2: ptr SVGPreserveAspectRatio) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGPreserveAspectRatio*(): SVGPreserveAspectRatio {.constructor,
    importcpp: "client::SVGPreserveAspectRatio(@)", header: "cheerp/clientlib.h".}

proc get_SVG_MEETORSLICE_MEET*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_MEETORSLICE_MEET", header: "cheerp/clientlib.h".}

proc get_SVG_MEETORSLICE_SLICE*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_MEETORSLICE_SLICE", header: "cheerp/clientlib.h".}

proc get_SVG_MEETORSLICE_UNKNOWN*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_MEETORSLICE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_NONE*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_NONE", header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_UNKNOWN*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_UNKNOWN",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMAXYMAX*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMAXYMAX",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMAXYMID*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMAXYMID",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMAXYMIN*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMAXYMIN",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMIDYMAX*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMIDYMAX",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMIDYMID*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMIDYMID",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMIDYMIN*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMIDYMIN",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMINYMAX*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMINYMAX",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMINYMID*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMINYMID",
    header: "cheerp/clientlib.h".}

proc get_SVG_PRESERVEASPECTRATIO_XMINYMIN*(this: var SVGPreserveAspectRatio): cdouble {.
    importcpp: "get_SVG_PRESERVEASPECTRATIO_XMINYMIN",
    header: "cheerp/clientlib.h".}

proc get_cx*(this: var SVGRadialGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_cx", header: "cheerp/clientlib.h".}

proc get_cy*(this: var SVGRadialGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_cy", header: "cheerp/clientlib.h".}

proc get_fx*(this: var SVGRadialGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_fx", header: "cheerp/clientlib.h".}

proc get_fy*(this: var SVGRadialGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_fy", header: "cheerp/clientlib.h".}

proc get_r*(this: var SVGRadialGradientElement): ptr SVGAnimatedLength {.
    importcpp: "get_r", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRadialGradientElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRadialGradientElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRadialGradientElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRadialGradientElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRadialGradientElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRadialGradientElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRadialGradientElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRadialGradientElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRadialGradientElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRadialGradientElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGRadialGradientElement): ptr SVGRadialGradientElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGRadialGradientElement;
                    a2: ptr SVGRadialGradientElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGRadialGradientElement*(): SVGRadialGradientElement {.
    constructor, importcpp: "client::SVGRadialGradientElement(@)",
    header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGRect): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc set_height*(this: var SVGRect; a2: cdouble) {.importcpp: "set_height",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGRect): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc set_width*(this: var SVGRect; a2: cdouble) {.importcpp: "set_width",
    header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGRect): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var SVGRect; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGRect): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var SVGRect; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGRect): ptr SVGRect {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGRect; a2: ptr SVGRect) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGRect*(): SVGRect {.constructor,
                                    importcpp: "client::SVGRect(@)",
                                    header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGRectElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_rx*(this: var SVGRectElement): ptr SVGAnimatedLength {.
    importcpp: "get_rx", header: "cheerp/clientlib.h".}

proc get_ry*(this: var SVGRectElement): ptr SVGAnimatedLength {.
    importcpp: "get_ry", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGRectElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGRectElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGRectElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRectElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRectElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRectElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRectElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGRectElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRectElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRectElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRectElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRectElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGRectElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGRectElement): ptr SVGRectElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGRectElement; a2: ptr SVGRectElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGRectElement*(): SVGRectElement {.constructor,
    importcpp: "client::SVGRectElement(@)", header: "cheerp/clientlib.h".}

proc get_SVGAbort*(this: var SVGSVGElementEventMap): ptr Event {.
    importcpp: "get_SVGAbort", header: "cheerp/clientlib.h".}

proc set_SVGAbort*(this: var SVGSVGElementEventMap; a2: ptr Event) {.
    importcpp: "set_SVGAbort", header: "cheerp/clientlib.h".}

proc get_SVGError*(this: var SVGSVGElementEventMap): ptr Event {.
    importcpp: "get_SVGError", header: "cheerp/clientlib.h".}

proc set_SVGError*(this: var SVGSVGElementEventMap; a2: ptr Event) {.
    importcpp: "set_SVGError", header: "cheerp/clientlib.h".}

proc get_resize*(this: var SVGSVGElementEventMap): ptr UIEvent {.
    importcpp: "get_resize", header: "cheerp/clientlib.h".}

proc set_resize*(this: var SVGSVGElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_resize", header: "cheerp/clientlib.h".}

proc get_scroll*(this: var SVGSVGElementEventMap): ptr UIEvent {.
    importcpp: "get_scroll", header: "cheerp/clientlib.h".}

proc set_scroll*(this: var SVGSVGElementEventMap; a2: ptr UIEvent) {.
    importcpp: "set_scroll", header: "cheerp/clientlib.h".}

proc get_SVGUnload*(this: var SVGSVGElementEventMap): ptr Event {.
    importcpp: "get_SVGUnload", header: "cheerp/clientlib.h".}

proc set_SVGUnload*(this: var SVGSVGElementEventMap; a2: ptr Event) {.
    importcpp: "set_SVGUnload", header: "cheerp/clientlib.h".}

proc get_SVGZoom*(this: var SVGSVGElementEventMap): ptr SVGZoomEvent {.
    importcpp: "get_SVGZoom", header: "cheerp/clientlib.h".}

proc set_SVGZoom*(this: var SVGSVGElementEventMap; a2: ptr SVGZoomEvent) {.
    importcpp: "set_SVGZoom", header: "cheerp/clientlib.h".}

proc get_zoomAndPan*(this: var SVGZoomAndPan): cdouble {.
    importcpp: "get_zoomAndPan", header: "cheerp/clientlib.h".}

proc get_SVG_ZOOMANDPAN_DISABLE*(this: var SVGZoomAndPan): cdouble {.
    importcpp: "get_SVG_ZOOMANDPAN_DISABLE", header: "cheerp/clientlib.h".}

proc get_SVG_ZOOMANDPAN_MAGNIFY*(this: var SVGZoomAndPan): cdouble {.
    importcpp: "get_SVG_ZOOMANDPAN_MAGNIFY", header: "cheerp/clientlib.h".}

proc get_SVG_ZOOMANDPAN_UNKNOWN*(this: var SVGZoomAndPan): cdouble {.
    importcpp: "get_SVG_ZOOMANDPAN_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_contentScriptType*(this: var SVGSVGElement): ptr String {.
    importcpp: "get_contentScriptType", header: "cheerp/clientlib.h".}

proc set_contentScriptType*(this: var SVGSVGElement; a2: String) {.
    importcpp: "set_contentScriptType", header: "cheerp/clientlib.h".}

proc get_contentStyleType*(this: var SVGSVGElement): ptr String {.
    importcpp: "get_contentStyleType", header: "cheerp/clientlib.h".}

proc set_contentStyleType*(this: var SVGSVGElement; a2: String) {.
    importcpp: "set_contentStyleType", header: "cheerp/clientlib.h".}

proc get_currentScale*(this: var SVGSVGElement): cdouble {.
    importcpp: "get_currentScale", header: "cheerp/clientlib.h".}

proc set_currentScale*(this: var SVGSVGElement; a2: cdouble) {.
    importcpp: "set_currentScale", header: "cheerp/clientlib.h".}

proc get_currentTranslate*(this: var SVGSVGElement): ptr SVGPoint {.
    importcpp: "get_currentTranslate", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGSVGElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var SVGSVGElement): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var SVGSVGElement; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var SVGSVGElement): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var SVGSVGElement; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onresize*(this: var SVGSVGElement): ptr EventListener {.
    importcpp: "get_onresize", header: "cheerp/clientlib.h".}

proc set_onresize*(this: var SVGSVGElement; a2: ptr EventListener) {.
    importcpp: "set_onresize", header: "cheerp/clientlib.h".}

proc get_onscroll*(this: var SVGSVGElement): ptr EventListener {.
    importcpp: "get_onscroll", header: "cheerp/clientlib.h".}

proc set_onscroll*(this: var SVGSVGElement; a2: ptr EventListener) {.
    importcpp: "set_onscroll", header: "cheerp/clientlib.h".}

proc get_onunload*(this: var SVGSVGElement): ptr EventListener {.
    importcpp: "get_onunload", header: "cheerp/clientlib.h".}

proc set_onunload*(this: var SVGSVGElement; a2: ptr EventListener) {.
    importcpp: "set_onunload", header: "cheerp/clientlib.h".}

proc get_onzoom*(this: var SVGSVGElement): ptr EventListener {.
    importcpp: "get_onzoom", header: "cheerp/clientlib.h".}

proc set_onzoom*(this: var SVGSVGElement; a2: ptr EventListener) {.
    importcpp: "set_onzoom", header: "cheerp/clientlib.h".}

proc get_pixelUnitToMillimeterX*(this: var SVGSVGElement): cdouble {.
    importcpp: "get_pixelUnitToMillimeterX", header: "cheerp/clientlib.h".}

proc get_pixelUnitToMillimeterY*(this: var SVGSVGElement): cdouble {.
    importcpp: "get_pixelUnitToMillimeterY", header: "cheerp/clientlib.h".}

proc get_screenPixelToMillimeterX*(this: var SVGSVGElement): cdouble {.
    importcpp: "get_screenPixelToMillimeterX", header: "cheerp/clientlib.h".}

proc get_screenPixelToMillimeterY*(this: var SVGSVGElement): cdouble {.
    importcpp: "get_screenPixelToMillimeterY", header: "cheerp/clientlib.h".}

proc get_viewport*(this: var SVGSVGElement): ptr SVGRect {.
    importcpp: "get_viewport", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGSVGElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGSVGElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGSVGElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc checkEnclosure*(this: var SVGSVGElement; element: ptr SVGElement;
                     rect: ptr SVGRect): bool {.importcpp: "checkEnclosure",
    header: "cheerp/clientlib.h".}

proc checkIntersection*(this: var SVGSVGElement; element: ptr SVGElement;
                        rect: ptr SVGRect): bool {.
    importcpp: "checkIntersection", header: "cheerp/clientlib.h".}

proc createSVGAngle*(this: var SVGSVGElement): ptr SVGAngle {.
    importcpp: "createSVGAngle", header: "cheerp/clientlib.h".}

proc createSVGLength*(this: var SVGSVGElement): ptr SVGLength {.
    importcpp: "createSVGLength", header: "cheerp/clientlib.h".}

proc createSVGMatrix*(this: var SVGSVGElement): ptr SVGMatrix {.
    importcpp: "createSVGMatrix", header: "cheerp/clientlib.h".}

proc createSVGNumber*(this: var SVGSVGElement): ptr SVGNumber {.
    importcpp: "createSVGNumber", header: "cheerp/clientlib.h".}

proc createSVGPoint*(this: var SVGSVGElement): ptr SVGPoint {.
    importcpp: "createSVGPoint", header: "cheerp/clientlib.h".}

proc createSVGRect*(this: var SVGSVGElement): ptr SVGRect {.
    importcpp: "createSVGRect", header: "cheerp/clientlib.h".}

proc createSVGTransform*(this: var SVGSVGElement): ptr SVGTransform {.
    importcpp: "createSVGTransform", header: "cheerp/clientlib.h".}

proc createSVGTransformFromMatrix*(this: var SVGSVGElement;
                                   matrix: ptr SVGMatrix): ptr SVGTransform {.
    importcpp: "createSVGTransformFromMatrix", header: "cheerp/clientlib.h".}

proc deselectAll*(this: var SVGSVGElement) {.importcpp: "deselectAll",
    header: "cheerp/clientlib.h".}

proc forceRedraw*(this: var SVGSVGElement) {.importcpp: "forceRedraw",
    header: "cheerp/clientlib.h".}

proc getComputedStyle*(this: var SVGSVGElement; elt: ptr Element): ptr CSSStyleDeclaration {.
    importcpp: "getComputedStyle", header: "cheerp/clientlib.h".}

proc getComputedStyle*(this: var SVGSVGElement; elt: ptr Element;
                       pseudoElt: String): ptr CSSStyleDeclaration {.
    importcpp: "getComputedStyle", header: "cheerp/clientlib.h".}

proc getCurrentTime*(this: var SVGSVGElement): cdouble {.
    importcpp: "getCurrentTime", header: "cheerp/clientlib.h".}

proc getElementById*(this: var SVGSVGElement; elementId: String): ptr Element {.
    importcpp: "getElementById", header: "cheerp/clientlib.h".}

proc getEnclosureList*(this: var SVGSVGElement; rect: ptr SVGRect;
                       referenceElement: ptr SVGElement): ptr NodeListOf[Object] {.
    importcpp: "getEnclosureList", header: "cheerp/clientlib.h".}

proc getIntersectionList*(this: var SVGSVGElement; rect: ptr SVGRect;
                          referenceElement: ptr SVGElement): ptr NodeListOf[
    Object] {.importcpp: "getIntersectionList", header: "cheerp/clientlib.h".}

proc pauseAnimations*(this: var SVGSVGElement) {.importcpp: "pauseAnimations",
    header: "cheerp/clientlib.h".}

proc setCurrentTime*(this: var SVGSVGElement; seconds: cdouble) {.
    importcpp: "setCurrentTime", header: "cheerp/clientlib.h".}

proc suspendRedraw*(this: var SVGSVGElement; maxWaitMilliseconds: cdouble): cdouble {.
    importcpp: "suspendRedraw", header: "cheerp/clientlib.h".}

proc unpauseAnimations*(this: var SVGSVGElement) {.
    importcpp: "unpauseAnimations", header: "cheerp/clientlib.h".}

proc unsuspendRedraw*(this: var SVGSVGElement; suspendHandleID: cdouble) {.
    importcpp: "unsuspendRedraw", header: "cheerp/clientlib.h".}

proc unsuspendRedrawAll*(this: var SVGSVGElement) {.
    importcpp: "unsuspendRedrawAll", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSVGElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSVGElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSVGElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSVGElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSVGElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSVGElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSVGElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSVGElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSVGElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSVGElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGSVGElement): ptr SVGSVGElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGSVGElement; a2: ptr SVGSVGElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGSVGElement*(): SVGSVGElement {.constructor,
    importcpp: "client::SVGSVGElement(@)", header: "cheerp/clientlib.h".}

proc get_type*(this: var SVGScriptElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var SVGScriptElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGScriptElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGScriptElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGScriptElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGScriptElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGScriptElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGScriptElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGScriptElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGScriptElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGScriptElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGScriptElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGScriptElement): ptr SVGScriptElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGScriptElement; a2: ptr SVGScriptElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGScriptElement*(): SVGScriptElement {.constructor,
    importcpp: "client::SVGScriptElement(@)", header: "cheerp/clientlib.h".}

proc get_offset*(this: var SVGStopElement): ptr SVGAnimatedNumber {.
    importcpp: "get_offset", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStopElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStopElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStopElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStopElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStopElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStopElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStopElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStopElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStopElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStopElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGStopElement): ptr SVGStopElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGStopElement; a2: ptr SVGStopElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGStopElement*(): SVGStopElement {.constructor,
    importcpp: "client::SVGStopElement(@)", header: "cheerp/clientlib.h".}

proc get_numberOfItems*(this: var SVGStringList): cdouble {.
    importcpp: "get_numberOfItems", header: "cheerp/clientlib.h".}

proc appendItem*(this: var SVGStringList; newItem: String): ptr String {.
    importcpp: "appendItem", header: "cheerp/clientlib.h".}

proc clear*(this: var SVGStringList) {.importcpp: "clear",
                                       header: "cheerp/clientlib.h".}

proc getItem*(this: var SVGStringList; index: cdouble): ptr String {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc initialize*(this: var SVGStringList; newItem: String): ptr String {.
    importcpp: "initialize", header: "cheerp/clientlib.h".}

proc insertItemBefore*(this: var SVGStringList; newItem: String; index: cdouble): ptr String {.
    importcpp: "insertItemBefore", header: "cheerp/clientlib.h".}

proc removeItem*(this: var SVGStringList; index: cdouble): ptr String {.
    importcpp: "removeItem", header: "cheerp/clientlib.h".}

proc replaceItem*(this: var SVGStringList; newItem: String; index: cdouble): ptr String {.
    importcpp: "replaceItem", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGStringList): ptr SVGStringList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGStringList; a2: ptr SVGStringList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGStringList*(): SVGStringList {.constructor,
    importcpp: "client::SVGStringList(@)", header: "cheerp/clientlib.h".}

proc set_className*(this: var SVGStylable; a2: ptr Object) {.
    importcpp: "set_className", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGStylable): ptr SVGStylable {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGStylable; a2: ptr SVGStylable) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGStylable*(): SVGStylable {.constructor,
    importcpp: "client::SVGStylable(@)", header: "cheerp/clientlib.h".}

proc get_disabled*(this: var SVGStyleElement): bool {.importcpp: "get_disabled",
    header: "cheerp/clientlib.h".}

proc set_disabled*(this: var SVGStyleElement; a2: bool) {.
    importcpp: "set_disabled", header: "cheerp/clientlib.h".}

proc get_media*(this: var SVGStyleElement): ptr String {.importcpp: "get_media",
    header: "cheerp/clientlib.h".}

proc set_media*(this: var SVGStyleElement; a2: String) {.importcpp: "set_media",
    header: "cheerp/clientlib.h".}

proc get_title*(this: var SVGStyleElement): ptr String {.importcpp: "get_title",
    header: "cheerp/clientlib.h".}

proc set_title*(this: var SVGStyleElement; a2: String) {.importcpp: "set_title",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var SVGStyleElement): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc set_type*(this: var SVGStyleElement; a2: String) {.importcpp: "set_type",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStyleElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStyleElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStyleElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStyleElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGStyleElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStyleElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStyleElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStyleElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStyleElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGStyleElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGStyleElement): ptr SVGStyleElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGStyleElement; a2: ptr SVGStyleElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGStyleElement*(): SVGStyleElement {.constructor,
    importcpp: "client::SVGStyleElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSwitchElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSwitchElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSwitchElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSwitchElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSwitchElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSwitchElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSwitchElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSwitchElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSwitchElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSwitchElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGSwitchElement): ptr SVGSwitchElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGSwitchElement; a2: ptr SVGSwitchElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGSwitchElement*(): SVGSwitchElement {.constructor,
    importcpp: "client::SVGSwitchElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSymbolElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSymbolElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSymbolElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSymbolElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGSymbolElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSymbolElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSymbolElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSymbolElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSymbolElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGSymbolElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGSymbolElement): ptr SVGSymbolElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGSymbolElement; a2: ptr SVGSymbolElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGSymbolElement*(): SVGSymbolElement {.constructor,
    importcpp: "client::SVGSymbolElement(@)", header: "cheerp/clientlib.h".}

proc get_lengthAdjust*(this: var SVGTextContentElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_lengthAdjust", header: "cheerp/clientlib.h".}

proc get_textLength*(this: var SVGTextContentElement): ptr SVGAnimatedLength {.
    importcpp: "get_textLength", header: "cheerp/clientlib.h".}

proc getCharNumAtPosition*(this: var SVGTextContentElement; point: ptr SVGPoint): cdouble {.
    importcpp: "getCharNumAtPosition", header: "cheerp/clientlib.h".}

proc getComputedTextLength*(this: var SVGTextContentElement): cdouble {.
    importcpp: "getComputedTextLength", header: "cheerp/clientlib.h".}

proc getEndPositionOfChar*(this: var SVGTextContentElement; charnum: cdouble): ptr SVGPoint {.
    importcpp: "getEndPositionOfChar", header: "cheerp/clientlib.h".}

proc getExtentOfChar*(this: var SVGTextContentElement; charnum: cdouble): ptr SVGRect {.
    importcpp: "getExtentOfChar", header: "cheerp/clientlib.h".}

proc getNumberOfChars*(this: var SVGTextContentElement): cdouble {.
    importcpp: "getNumberOfChars", header: "cheerp/clientlib.h".}

proc getRotationOfChar*(this: var SVGTextContentElement; charnum: cdouble): cdouble {.
    importcpp: "getRotationOfChar", header: "cheerp/clientlib.h".}

proc getStartPositionOfChar*(this: var SVGTextContentElement; charnum: cdouble): ptr SVGPoint {.
    importcpp: "getStartPositionOfChar", header: "cheerp/clientlib.h".}

proc getSubStringLength*(this: var SVGTextContentElement; charnum: cdouble;
                         nchars: cdouble): cdouble {.
    importcpp: "getSubStringLength", header: "cheerp/clientlib.h".}

proc selectSubString*(this: var SVGTextContentElement; charnum: cdouble;
                      nchars: cdouble) {.importcpp: "selectSubString",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextContentElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextContentElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextContentElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextContentElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextContentElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextContentElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextContentElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextContentElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextContentElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextContentElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTextContentElement): ptr SVGTextContentElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTextContentElement;
                    a2: ptr SVGTextContentElement) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructSVGTextContentElement*(): SVGTextContentElement {.constructor,
    importcpp: "client::SVGTextContentElement(@)", header: "cheerp/clientlib.h".}

proc get_LENGTHADJUST_SPACING*(this: var SVGTextContentElement): cdouble {.
    importcpp: "get_LENGTHADJUST_SPACING", header: "cheerp/clientlib.h".}

proc get_LENGTHADJUST_SPACINGANDGLYPHS*(this: var SVGTextContentElement): cdouble {.
    importcpp: "get_LENGTHADJUST_SPACINGANDGLYPHS", header: "cheerp/clientlib.h".}

proc get_LENGTHADJUST_UNKNOWN*(this: var SVGTextContentElement): cdouble {.
    importcpp: "get_LENGTHADJUST_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_dx*(this: var SVGTextPositioningElement): ptr SVGAnimatedLengthList {.
    importcpp: "get_dx", header: "cheerp/clientlib.h".}

proc get_dy*(this: var SVGTextPositioningElement): ptr SVGAnimatedLengthList {.
    importcpp: "get_dy", header: "cheerp/clientlib.h".}

proc get_rotate*(this: var SVGTextPositioningElement): ptr SVGAnimatedNumberList {.
    importcpp: "get_rotate", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGTextPositioningElement): ptr SVGAnimatedLengthList {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGTextPositioningElement): ptr SVGAnimatedLengthList {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPositioningElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPositioningElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPositioningElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPositioningElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPositioningElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPositioningElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPositioningElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPositioningElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPositioningElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPositioningElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTextPositioningElement): ptr SVGTextPositioningElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTextPositioningElement;
                    a2: ptr SVGTextPositioningElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTextPositioningElement*(): SVGTextPositioningElement {.
    constructor, importcpp: "client::SVGTextPositioningElement(@)",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTSpanElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTSpanElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTSpanElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTSpanElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTSpanElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTSpanElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTSpanElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTSpanElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTSpanElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTSpanElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTSpanElement): ptr SVGTSpanElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTSpanElement; a2: ptr SVGTSpanElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTSpanElement*(): SVGTSpanElement {.constructor,
    importcpp: "client::SVGTSpanElement(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTextElement): ptr SVGTextElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTextElement; a2: ptr SVGTextElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTextElement*(): SVGTextElement {.constructor,
    importcpp: "client::SVGTextElement(@)", header: "cheerp/clientlib.h".}

proc get_method*(this: var SVGTextPathElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_method", header: "cheerp/clientlib.h".}

proc get_spacing*(this: var SVGTextPathElement): ptr SVGAnimatedEnumeration {.
    importcpp: "get_spacing", header: "cheerp/clientlib.h".}

proc get_startOffset*(this: var SVGTextPathElement): ptr SVGAnimatedLength {.
    importcpp: "get_startOffset", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPathElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPathElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPathElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPathElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTextPathElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPathElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPathElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPathElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPathElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTextPathElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTextPathElement): ptr SVGTextPathElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTextPathElement; a2: ptr SVGTextPathElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTextPathElement*(): SVGTextPathElement {.constructor,
    importcpp: "client::SVGTextPathElement(@)", header: "cheerp/clientlib.h".}

proc get_TEXTPATH_METHODTYPE_ALIGN*(this: var SVGTextPathElement): cdouble {.
    importcpp: "get_TEXTPATH_METHODTYPE_ALIGN", header: "cheerp/clientlib.h".}

proc get_TEXTPATH_METHODTYPE_STRETCH*(this: var SVGTextPathElement): cdouble {.
    importcpp: "get_TEXTPATH_METHODTYPE_STRETCH", header: "cheerp/clientlib.h".}

proc get_TEXTPATH_METHODTYPE_UNKNOWN*(this: var SVGTextPathElement): cdouble {.
    importcpp: "get_TEXTPATH_METHODTYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_TEXTPATH_SPACINGTYPE_AUTO*(this: var SVGTextPathElement): cdouble {.
    importcpp: "get_TEXTPATH_SPACINGTYPE_AUTO", header: "cheerp/clientlib.h".}

proc get_TEXTPATH_SPACINGTYPE_EXACT*(this: var SVGTextPathElement): cdouble {.
    importcpp: "get_TEXTPATH_SPACINGTYPE_EXACT", header: "cheerp/clientlib.h".}

proc get_TEXTPATH_SPACINGTYPE_UNKNOWN*(this: var SVGTextPathElement): cdouble {.
    importcpp: "get_TEXTPATH_SPACINGTYPE_UNKNOWN", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTitleElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTitleElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTitleElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTitleElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGTitleElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTitleElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTitleElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTitleElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTitleElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGTitleElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTitleElement): ptr SVGTitleElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTitleElement; a2: ptr SVGTitleElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTitleElement*(): SVGTitleElement {.constructor,
    importcpp: "client::SVGTitleElement(@)", header: "cheerp/clientlib.h".}

proc get_angle*(this: var SVGTransform): cdouble {.importcpp: "get_angle",
    header: "cheerp/clientlib.h".}

proc get_matrix*(this: var SVGTransform): ptr SVGMatrix {.
    importcpp: "get_matrix", header: "cheerp/clientlib.h".}

proc get_type*(this: var SVGTransform): cdouble {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc setMatrix*(this: var SVGTransform; matrix: ptr SVGMatrix) {.
    importcpp: "setMatrix", header: "cheerp/clientlib.h".}

proc setRotate*(this: var SVGTransform; angle: cdouble; cx: cdouble; cy: cdouble) {.
    importcpp: "setRotate", header: "cheerp/clientlib.h".}

proc setScale*(this: var SVGTransform; sx: cdouble; sy: cdouble) {.
    importcpp: "setScale", header: "cheerp/clientlib.h".}

proc setSkewX*(this: var SVGTransform; angle: cdouble) {.importcpp: "setSkewX",
    header: "cheerp/clientlib.h".}

proc setSkewY*(this: var SVGTransform; angle: cdouble) {.importcpp: "setSkewY",
    header: "cheerp/clientlib.h".}

proc setTranslate*(this: var SVGTransform; tx: cdouble; ty: cdouble) {.
    importcpp: "setTranslate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTransform): ptr SVGTransform {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTransform; a2: ptr SVGTransform) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTransform*(): SVGTransform {.constructor,
    importcpp: "client::SVGTransform(@)", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_MATRIX*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_MATRIX", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_ROTATE*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_ROTATE", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_SCALE*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_SCALE", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_SKEWX*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_SKEWX", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_SKEWY*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_SKEWY", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_TRANSLATE*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_TRANSLATE", header: "cheerp/clientlib.h".}

proc get_SVG_TRANSFORM_UNKNOWN*(this: var SVGTransform): cdouble {.
    importcpp: "get_SVG_TRANSFORM_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_numberOfItems*(this: var SVGTransformList): cdouble {.
    importcpp: "get_numberOfItems", header: "cheerp/clientlib.h".}

proc appendItem*(this: var SVGTransformList; newItem: ptr SVGTransform): ptr SVGTransform {.
    importcpp: "appendItem", header: "cheerp/clientlib.h".}

proc clear*(this: var SVGTransformList) {.importcpp: "clear",
    header: "cheerp/clientlib.h".}

proc consolidate*(this: var SVGTransformList): ptr SVGTransform {.
    importcpp: "consolidate", header: "cheerp/clientlib.h".}

proc createSVGTransformFromMatrix*(this: var SVGTransformList;
                                   matrix: ptr SVGMatrix): ptr SVGTransform {.
    importcpp: "createSVGTransformFromMatrix", header: "cheerp/clientlib.h".}

proc getItem*(this: var SVGTransformList; index: cdouble): ptr SVGTransform {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc initialize*(this: var SVGTransformList; newItem: ptr SVGTransform): ptr SVGTransform {.
    importcpp: "initialize", header: "cheerp/clientlib.h".}

proc insertItemBefore*(this: var SVGTransformList; newItem: ptr SVGTransform;
                       index: cdouble): ptr SVGTransform {.
    importcpp: "insertItemBefore", header: "cheerp/clientlib.h".}

proc removeItem*(this: var SVGTransformList; index: cdouble): ptr SVGTransform {.
    importcpp: "removeItem", header: "cheerp/clientlib.h".}

proc replaceItem*(this: var SVGTransformList; newItem: ptr SVGTransform;
                  index: cdouble): ptr SVGTransform {.importcpp: "replaceItem",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGTransformList): ptr SVGTransformList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGTransformList; a2: ptr SVGTransformList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGTransformList*(): SVGTransformList {.constructor,
    importcpp: "client::SVGTransformList(@)", header: "cheerp/clientlib.h".}

proc get_animatedInstanceRoot*(this: var SVGUseElement): ptr SVGElementInstance {.
    importcpp: "get_animatedInstanceRoot", header: "cheerp/clientlib.h".}

proc get_height*(this: var SVGUseElement): ptr SVGAnimatedLength {.
    importcpp: "get_height", header: "cheerp/clientlib.h".}

proc get_instanceRoot*(this: var SVGUseElement): ptr SVGElementInstance {.
    importcpp: "get_instanceRoot", header: "cheerp/clientlib.h".}

proc get_width*(this: var SVGUseElement): ptr SVGAnimatedLength {.
    importcpp: "get_width", header: "cheerp/clientlib.h".}

proc get_x*(this: var SVGUseElement): ptr SVGAnimatedLength {.
    importcpp: "get_x", header: "cheerp/clientlib.h".}

proc get_y*(this: var SVGUseElement): ptr SVGAnimatedLength {.
    importcpp: "get_y", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGUseElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGUseElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGUseElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGUseElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGUseElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGUseElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGUseElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGUseElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGUseElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGUseElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGUseElement): ptr SVGUseElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGUseElement; a2: ptr SVGUseElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGUseElement*(): SVGUseElement {.constructor,
    importcpp: "client::SVGUseElement(@)", header: "cheerp/clientlib.h".}

proc get_viewTarget*(this: var SVGViewElement): ptr SVGStringList {.
    importcpp: "get_viewTarget", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGViewElement; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGViewElement; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGViewElement; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGViewElement; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SVGViewElement; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGViewElement; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGViewElement; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGViewElement; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGViewElement; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SVGViewElement; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGViewElement): ptr SVGViewElement {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGViewElement; a2: ptr SVGViewElement) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGViewElement*(): SVGViewElement {.constructor,
    importcpp: "client::SVGViewElement(@)", header: "cheerp/clientlib.h".}

proc get_newScale*(this: var SVGZoomEvent): cdouble {.importcpp: "get_newScale",
    header: "cheerp/clientlib.h".}

proc get_newTranslate*(this: var SVGZoomEvent): ptr SVGPoint {.
    importcpp: "get_newTranslate", header: "cheerp/clientlib.h".}

proc get_previousScale*(this: var SVGZoomEvent): cdouble {.
    importcpp: "get_previousScale", header: "cheerp/clientlib.h".}

proc get_previousTranslate*(this: var SVGZoomEvent): ptr SVGPoint {.
    importcpp: "get_previousTranslate", header: "cheerp/clientlib.h".}

proc get_zoomRectScreen*(this: var SVGZoomEvent): ptr SVGRect {.
    importcpp: "get_zoomRectScreen", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SVGZoomEvent): ptr SVGZoomEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SVGZoomEvent; a2: ptr SVGZoomEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSVGZoomEvent*(): SVGZoomEvent {.constructor,
    importcpp: "client::SVGZoomEvent(@)", header: "cheerp/clientlib.h".}

proc get_id*(this: var ScopedCredential): ptr ArrayBuffer {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var ScopedCredential): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ScopedCredential): ptr ScopedCredential {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ScopedCredential; a2: ptr ScopedCredential) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructScopedCredential*(): ScopedCredential {.constructor,
    importcpp: "client::ScopedCredential(@)", header: "cheerp/clientlib.h".}

proc get_credential*(this: var ScopedCredentialInfo): ptr ScopedCredential {.
    importcpp: "get_credential", header: "cheerp/clientlib.h".}

proc get_publicKey*(this: var ScopedCredentialInfo): ptr CryptoKey {.
    importcpp: "get_publicKey", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ScopedCredentialInfo): ptr ScopedCredentialInfo {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ScopedCredentialInfo; a2: ptr ScopedCredentialInfo) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructScopedCredentialInfo*(): ScopedCredentialInfo {.constructor,
    importcpp: "client::ScopedCredentialInfo(@)", header: "cheerp/clientlib.h".}

proc get_MSOrientationChange*(this: var ScreenEventMap): ptr Event {.
    importcpp: "get_MSOrientationChange", header: "cheerp/clientlib.h".}

proc set_MSOrientationChange*(this: var ScreenEventMap; a2: ptr Event) {.
    importcpp: "set_MSOrientationChange", header: "cheerp/clientlib.h".}

proc get_availHeight*(this: var Screen): cdouble {.importcpp: "get_availHeight",
    header: "cheerp/clientlib.h".}

proc get_availWidth*(this: var Screen): cdouble {.importcpp: "get_availWidth",
    header: "cheerp/clientlib.h".}

proc get_bufferDepth*(this: var Screen): cdouble {.importcpp: "get_bufferDepth",
    header: "cheerp/clientlib.h".}

proc set_bufferDepth*(this: var Screen; a2: cdouble) {.
    importcpp: "set_bufferDepth", header: "cheerp/clientlib.h".}

proc get_colorDepth*(this: var Screen): cdouble {.importcpp: "get_colorDepth",
    header: "cheerp/clientlib.h".}

proc get_deviceXDPI*(this: var Screen): cdouble {.importcpp: "get_deviceXDPI",
    header: "cheerp/clientlib.h".}

proc get_deviceYDPI*(this: var Screen): cdouble {.importcpp: "get_deviceYDPI",
    header: "cheerp/clientlib.h".}

proc get_fontSmoothingEnabled*(this: var Screen): bool {.
    importcpp: "get_fontSmoothingEnabled", header: "cheerp/clientlib.h".}

proc get_height*(this: var Screen): cdouble {.importcpp: "get_height",
    header: "cheerp/clientlib.h".}

proc get_logicalXDPI*(this: var Screen): cdouble {.importcpp: "get_logicalXDPI",
    header: "cheerp/clientlib.h".}

proc get_logicalYDPI*(this: var Screen): cdouble {.importcpp: "get_logicalYDPI",
    header: "cheerp/clientlib.h".}

proc get_msOrientation*(this: var Screen): ptr String {.
    importcpp: "get_msOrientation", header: "cheerp/clientlib.h".}

proc get_onmsorientationchange*(this: var Screen): ptr EventListener {.
    importcpp: "get_onmsorientationchange", header: "cheerp/clientlib.h".}

proc set_onmsorientationchange*(this: var Screen; a2: ptr EventListener) {.
    importcpp: "set_onmsorientationchange", header: "cheerp/clientlib.h".}

proc get_pixelDepth*(this: var Screen): cdouble {.importcpp: "get_pixelDepth",
    header: "cheerp/clientlib.h".}

proc get_systemXDPI*(this: var Screen): cdouble {.importcpp: "get_systemXDPI",
    header: "cheerp/clientlib.h".}

proc get_systemYDPI*(this: var Screen): cdouble {.importcpp: "get_systemYDPI",
    header: "cheerp/clientlib.h".}

proc get_width*(this: var Screen): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc lockOrientation*(this: var Screen; orientations: ptr Array): bool {.
    importcpp: "lockOrientation", header: "cheerp/clientlib.h".}

proc msLockOrientation*(this: var Screen; orientations: String): bool {.
    importcpp: "msLockOrientation", header: "cheerp/clientlib.h".}

proc msLockOrientation*(this: var Screen; orientations: ptr Array): bool {.
    importcpp: "msLockOrientation", header: "cheerp/clientlib.h".}

proc msUnlockOrientation*(this: var Screen) {.importcpp: "msUnlockOrientation",
    header: "cheerp/clientlib.h".}

proc unlockOrientation*(this: var Screen) {.importcpp: "unlockOrientation",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Screen; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Screen; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Screen; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Screen; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Screen; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Screen; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Screen; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Screen; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Screen; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Screen; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Screen): ptr Screen {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Screen; a2: ptr Screen) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructScreen*(): Screen {.constructor, importcpp: "client::Screen(@)",
                                  header: "cheerp/clientlib.h".}

proc get_audioprocess*(this: var ScriptProcessorNodeEventMap): ptr AudioProcessingEvent {.
    importcpp: "get_audioprocess", header: "cheerp/clientlib.h".}

proc set_audioprocess*(this: var ScriptProcessorNodeEventMap;
                       a2: ptr AudioProcessingEvent) {.
    importcpp: "set_audioprocess", header: "cheerp/clientlib.h".}

proc get_bufferSize*(this: var ScriptProcessorNode): cdouble {.
    importcpp: "get_bufferSize", header: "cheerp/clientlib.h".}

proc get_onaudioprocess*(this: var ScriptProcessorNode): ptr EventListener {.
    importcpp: "get_onaudioprocess", header: "cheerp/clientlib.h".}

proc set_onaudioprocess*(this: var ScriptProcessorNode; a2: ptr EventListener) {.
    importcpp: "set_onaudioprocess", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ScriptProcessorNode; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ScriptProcessorNode; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ScriptProcessorNode; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ScriptProcessorNode; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ScriptProcessorNode; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ScriptProcessorNode; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ScriptProcessorNode; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ScriptProcessorNode; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ScriptProcessorNode; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ScriptProcessorNode; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ScriptProcessorNode): ptr ScriptProcessorNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ScriptProcessorNode; a2: ptr ScriptProcessorNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructScriptProcessorNode*(): ScriptProcessorNode {.constructor,
    importcpp: "client::ScriptProcessorNode(@)", header: "cheerp/clientlib.h".}

proc get_behavior*(this: var ScrollOptions): ptr String {.
    importcpp: "get_behavior", header: "cheerp/clientlib.h".}

proc set_behavior*(this: var ScrollOptions; a2: String) {.
    importcpp: "set_behavior", header: "cheerp/clientlib.h".}

proc get_block*(this: var ScrollIntoViewOptions): ptr String {.
    importcpp: "get_block", header: "cheerp/clientlib.h".}

proc set_block*(this: var ScrollIntoViewOptions; a2: String) {.
    importcpp: "set_block", header: "cheerp/clientlib.h".}

proc get_inline*(this: var ScrollIntoViewOptions): ptr String {.
    importcpp: "get_inline", header: "cheerp/clientlib.h".}

proc set_inline*(this: var ScrollIntoViewOptions; a2: String) {.
    importcpp: "set_inline", header: "cheerp/clientlib.h".}

proc get_left*(this: var ScrollToOptions): cdouble {.importcpp: "get_left",
    header: "cheerp/clientlib.h".}

proc set_left*(this: var ScrollToOptions; a2: cdouble) {.importcpp: "set_left",
    header: "cheerp/clientlib.h".}

proc get_top*(this: var ScrollToOptions): cdouble {.importcpp: "get_top",
    header: "cheerp/clientlib.h".}

proc set_top*(this: var ScrollToOptions; a2: cdouble) {.importcpp: "set_top",
    header: "cheerp/clientlib.h".}

proc get_blockedURI*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_blockedURI", header: "cheerp/clientlib.h".}

proc get_columnNumber*(this: var SecurityPolicyViolationEvent): cdouble {.
    importcpp: "get_columnNumber", header: "cheerp/clientlib.h".}

proc get_documentURI*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_documentURI", header: "cheerp/clientlib.h".}

proc get_effectiveDirective*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_effectiveDirective", header: "cheerp/clientlib.h".}

proc get_lineNumber*(this: var SecurityPolicyViolationEvent): cdouble {.
    importcpp: "get_lineNumber", header: "cheerp/clientlib.h".}

proc get_originalPolicy*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_originalPolicy", header: "cheerp/clientlib.h".}

proc get_referrer*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_referrer", header: "cheerp/clientlib.h".}

proc get_sourceFile*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_sourceFile", header: "cheerp/clientlib.h".}

proc get_statusCode*(this: var SecurityPolicyViolationEvent): cdouble {.
    importcpp: "get_statusCode", header: "cheerp/clientlib.h".}

proc get_violatedDirective*(this: var SecurityPolicyViolationEvent): ptr String {.
    importcpp: "get_violatedDirective", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SecurityPolicyViolationEvent): ptr SecurityPolicyViolationEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SecurityPolicyViolationEvent;
                    a2: ptr SecurityPolicyViolationEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSecurityPolicyViolationEvent*(`type`: String): SecurityPolicyViolationEvent {.
    constructor, importcpp: "client::SecurityPolicyViolationEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructSecurityPolicyViolationEvent*(`type`: String;
    eventInitDict: ptr SecurityPolicyViolationEventInit): SecurityPolicyViolationEvent {.
    constructor, importcpp: "client::SecurityPolicyViolationEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_anchorNode*(this: var Selection): ptr Node {.
    importcpp: "get_anchorNode", header: "cheerp/clientlib.h".}

proc get_anchorOffset*(this: var Selection): cdouble {.
    importcpp: "get_anchorOffset", header: "cheerp/clientlib.h".}

proc get_baseNode*(this: var Selection): ptr Node {.importcpp: "get_baseNode",
    header: "cheerp/clientlib.h".}

proc get_baseOffset*(this: var Selection): cdouble {.
    importcpp: "get_baseOffset", header: "cheerp/clientlib.h".}

proc get_extentNode*(this: var Selection): ptr Node {.
    importcpp: "get_extentNode", header: "cheerp/clientlib.h".}

proc get_extentOffset*(this: var Selection): cdouble {.
    importcpp: "get_extentOffset", header: "cheerp/clientlib.h".}

proc get_focusNode*(this: var Selection): ptr Node {.importcpp: "get_focusNode",
    header: "cheerp/clientlib.h".}

proc get_focusOffset*(this: var Selection): cdouble {.
    importcpp: "get_focusOffset", header: "cheerp/clientlib.h".}

proc get_isCollapsed*(this: var Selection): bool {.importcpp: "get_isCollapsed",
    header: "cheerp/clientlib.h".}

proc get_rangeCount*(this: var Selection): cdouble {.
    importcpp: "get_rangeCount", header: "cheerp/clientlib.h".}

proc get_type*(this: var Selection): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc addRange*(this: var Selection; range: ptr Range) {.importcpp: "addRange",
    header: "cheerp/clientlib.h".}

proc collapse*(this: var Selection; parentNode: ptr Node; offset: cdouble) {.
    importcpp: "collapse", header: "cheerp/clientlib.h".}

proc collapseToEnd*(this: var Selection) {.importcpp: "collapseToEnd",
    header: "cheerp/clientlib.h".}

proc collapseToStart*(this: var Selection) {.importcpp: "collapseToStart",
    header: "cheerp/clientlib.h".}

proc containsNode*(this: var Selection; node: ptr Node; partlyContained: bool): bool {.
    importcpp: "containsNode", header: "cheerp/clientlib.h".}

proc deleteFromDocument*(this: var Selection) {.importcpp: "deleteFromDocument",
    header: "cheerp/clientlib.h".}

proc empty*(this: var Selection) {.importcpp: "empty",
                                   header: "cheerp/clientlib.h".}

proc extend*(this: var Selection; newNode: ptr Node; offset: cdouble) {.
    importcpp: "extend", header: "cheerp/clientlib.h".}

proc getRangeAt*(this: var Selection; index: cdouble): ptr Range {.
    importcpp: "getRangeAt", header: "cheerp/clientlib.h".}

proc removeAllRanges*(this: var Selection) {.importcpp: "removeAllRanges",
    header: "cheerp/clientlib.h".}

proc removeRange*(this: var Selection; range: ptr Range) {.
    importcpp: "removeRange", header: "cheerp/clientlib.h".}

proc selectAllChildren*(this: var Selection; parentNode: ptr Node) {.
    importcpp: "selectAllChildren", header: "cheerp/clientlib.h".}

proc setBaseAndExtent*(this: var Selection; baseNode: ptr Node;
                       baseOffset: cdouble; extentNode: ptr Node;
                       extentOffset: cdouble) {.importcpp: "setBaseAndExtent",
    header: "cheerp/clientlib.h".}

proc setPosition*(this: var Selection; parentNode: ptr Node; offset: cdouble) {.
    importcpp: "setPosition", header: "cheerp/clientlib.h".}

proc toString*(this: var Selection): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Selection): ptr Selection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Selection; a2: ptr Selection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSelection*(): Selection {.constructor,
                                        importcpp: "client::Selection(@)",
                                        header: "cheerp/clientlib.h".}

proc getCachedFrameMessage*(this: var ServiceUIFrameContext; key: String): ptr String {.
    importcpp: "getCachedFrameMessage", header: "cheerp/clientlib.h".}

proc postFrameMessage*(this: var ServiceUIFrameContext; key: String;
                       data: String) {.importcpp: "postFrameMessage",
                                       header: "cheerp/clientlib.h".}

proc get_statechange*(this: var ServiceWorkerEventMap): ptr Event {.
    importcpp: "get_statechange", header: "cheerp/clientlib.h".}

proc set_statechange*(this: var ServiceWorkerEventMap; a2: ptr Event) {.
    importcpp: "set_statechange", header: "cheerp/clientlib.h".}

proc get_onstatechange*(this: var ServiceWorker): ptr EventListener {.
    importcpp: "get_onstatechange", header: "cheerp/clientlib.h".}

proc set_onstatechange*(this: var ServiceWorker; a2: ptr EventListener) {.
    importcpp: "set_onstatechange", header: "cheerp/clientlib.h".}

proc get_scriptURL*(this: var ServiceWorker): ptr String {.
    importcpp: "get_scriptURL", header: "cheerp/clientlib.h".}

proc get_state*(this: var ServiceWorker): ptr String {.importcpp: "get_state",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var ServiceWorker; message: ptr Object) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var ServiceWorker; message: ptr Object;
                  transfer: ptr Array) {.importcpp: "postMessage",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var ServiceWorker; message: String) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var ServiceWorker; message: String; transfer: ptr Array) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorker; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorker; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorker; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorker; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorker; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorker; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorker; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorker; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorker; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorker; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ServiceWorker): ptr ServiceWorker {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ServiceWorker; a2: ptr ServiceWorker) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructServiceWorker*(): ServiceWorker {.constructor,
    importcpp: "client::ServiceWorker(@)", header: "cheerp/clientlib.h".}

proc get_controllerchange*(this: var ServiceWorkerContainerEventMap): ptr Event {.
    importcpp: "get_controllerchange", header: "cheerp/clientlib.h".}

proc set_controllerchange*(this: var ServiceWorkerContainerEventMap;
                           a2: ptr Event) {.importcpp: "set_controllerchange",
    header: "cheerp/clientlib.h".}

proc get_message*(this: var ServiceWorkerContainerEventMap): ptr ServiceWorkerMessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var ServiceWorkerContainerEventMap;
                  a2: ptr ServiceWorkerMessageEvent) {.importcpp: "set_message",
    header: "cheerp/clientlib.h".}

proc get_messageerror*(this: var ServiceWorkerContainerEventMap): ptr MessageEvent {.
    importcpp: "get_messageerror", header: "cheerp/clientlib.h".}

proc set_messageerror*(this: var ServiceWorkerContainerEventMap;
                       a2: ptr MessageEvent) {.importcpp: "set_messageerror",
    header: "cheerp/clientlib.h".}

proc get_controller*(this: var ServiceWorkerContainer): ptr ServiceWorker {.
    importcpp: "get_controller", header: "cheerp/clientlib.h".}

proc get_oncontrollerchange*(this: var ServiceWorkerContainer): ptr EventListener {.
    importcpp: "get_oncontrollerchange", header: "cheerp/clientlib.h".}

proc set_oncontrollerchange*(this: var ServiceWorkerContainer;
                             a2: ptr EventListener) {.
    importcpp: "set_oncontrollerchange", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var ServiceWorkerContainer): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var ServiceWorkerContainer; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc get_onmessageerror*(this: var ServiceWorkerContainer): ptr EventListener {.
    importcpp: "get_onmessageerror", header: "cheerp/clientlib.h".}

proc set_onmessageerror*(this: var ServiceWorkerContainer; a2: ptr EventListener) {.
    importcpp: "set_onmessageerror", header: "cheerp/clientlib.h".}

proc get_ready*(this: var ServiceWorkerContainer): ptr Promise {.
    importcpp: "get_ready", header: "cheerp/clientlib.h".}

proc getRegistration*(this: var ServiceWorkerContainer): ptr Promise {.
    importcpp: "getRegistration", header: "cheerp/clientlib.h".}

proc getRegistration*(this: var ServiceWorkerContainer; clientURL: String): ptr Promise {.
    importcpp: "getRegistration", header: "cheerp/clientlib.h".}

proc getRegistrations*(this: var ServiceWorkerContainer): ptr Promise {.
    importcpp: "getRegistrations", header: "cheerp/clientlib.h".}

proc p_register*(this: var ServiceWorkerContainer; scriptURL: String): ptr Promise {.
    importcpp: "_register", header: "cheerp/clientlib.h".}

proc p_register*(this: var ServiceWorkerContainer; scriptURL: String;
                 options: ptr RegistrationOptions): ptr Promise {.
    importcpp: "_register", header: "cheerp/clientlib.h".}

proc startMessages*(this: var ServiceWorkerContainer) {.
    importcpp: "startMessages", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerContainer; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerContainer; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerContainer; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerContainer; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerContainer; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerContainer; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerContainer; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerContainer; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerContainer; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerContainer; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ServiceWorkerContainer): ptr ServiceWorkerContainer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ServiceWorkerContainer;
                    a2: ptr ServiceWorkerContainer) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructServiceWorkerContainer*(): ServiceWorkerContainer {.constructor,
    importcpp: "client::ServiceWorkerContainer(@)", header: "cheerp/clientlib.h".}

proc get_lastEventId*(this: var ServiceWorkerMessageEvent): ptr String {.
    importcpp: "get_lastEventId", header: "cheerp/clientlib.h".}

proc get_origin*(this: var ServiceWorkerMessageEvent): ptr String {.
    importcpp: "get_origin", header: "cheerp/clientlib.h".}

proc get_ports*(this: var ServiceWorkerMessageEvent): ptr ReadonlyArray[
    MessagePort] {.importcpp: "get_ports", header: "cheerp/clientlib.h".}

proc get_source*(this: var ServiceWorkerMessageEvent): ptr ServiceWorker {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ServiceWorkerMessageEvent): ptr ServiceWorkerMessageEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ServiceWorkerMessageEvent;
                    a2: ptr ServiceWorkerMessageEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructServiceWorkerMessageEvent*(`type`: String): ServiceWorkerMessageEvent {.
    constructor, importcpp: "client::ServiceWorkerMessageEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructServiceWorkerMessageEvent*(`type`: String;
    eventInitDict: ptr ServiceWorkerMessageEventInit): ServiceWorkerMessageEvent {.
    constructor, importcpp: "client::ServiceWorkerMessageEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_updatefound*(this: var ServiceWorkerRegistrationEventMap): ptr Event {.
    importcpp: "get_updatefound", header: "cheerp/clientlib.h".}

proc set_updatefound*(this: var ServiceWorkerRegistrationEventMap; a2: ptr Event) {.
    importcpp: "set_updatefound", header: "cheerp/clientlib.h".}

proc get_active*(this: var ServiceWorkerRegistration): ptr ServiceWorker {.
    importcpp: "get_active", header: "cheerp/clientlib.h".}

proc get_installing*(this: var ServiceWorkerRegistration): ptr ServiceWorker {.
    importcpp: "get_installing", header: "cheerp/clientlib.h".}

proc get_onupdatefound*(this: var ServiceWorkerRegistration): ptr EventListener {.
    importcpp: "get_onupdatefound", header: "cheerp/clientlib.h".}

proc set_onupdatefound*(this: var ServiceWorkerRegistration;
                        a2: ptr EventListener) {.importcpp: "set_onupdatefound",
    header: "cheerp/clientlib.h".}

proc get_pushManager*(this: var ServiceWorkerRegistration): ptr PushManager {.
    importcpp: "get_pushManager", header: "cheerp/clientlib.h".}

proc get_scope*(this: var ServiceWorkerRegistration): ptr String {.
    importcpp: "get_scope", header: "cheerp/clientlib.h".}

proc get_sync*(this: var ServiceWorkerRegistration): ptr SyncManager {.
    importcpp: "get_sync", header: "cheerp/clientlib.h".}

proc get_waiting*(this: var ServiceWorkerRegistration): ptr ServiceWorker {.
    importcpp: "get_waiting", header: "cheerp/clientlib.h".}

proc getNotifications*(this: var ServiceWorkerRegistration): ptr Promise {.
    importcpp: "getNotifications", header: "cheerp/clientlib.h".}

proc getNotifications*(this: var ServiceWorkerRegistration;
                       filter: ptr GetNotificationOptions): ptr Promise {.
    importcpp: "getNotifications", header: "cheerp/clientlib.h".}

proc showNotification*(this: var ServiceWorkerRegistration; title: String): ptr Promise {.
    importcpp: "showNotification", header: "cheerp/clientlib.h".}

proc showNotification*(this: var ServiceWorkerRegistration; title: String;
                       options: ptr NotificationOptions): ptr Promise {.
    importcpp: "showNotification", header: "cheerp/clientlib.h".}

proc unregister*(this: var ServiceWorkerRegistration): ptr Promise {.
    importcpp: "unregister", header: "cheerp/clientlib.h".}

proc update*(this: var ServiceWorkerRegistration): ptr Promise {.
    importcpp: "update", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var ServiceWorkerRegistration; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ServiceWorkerRegistration): ptr ServiceWorkerRegistration {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ServiceWorkerRegistration;
                    a2: ptr ServiceWorkerRegistration) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructServiceWorkerRegistration*(): ServiceWorkerRegistration {.
    constructor, importcpp: "client::ServiceWorkerRegistration(@)",
    header: "cheerp/clientlib.h".}

proc get_host*(this: var ShadowRoot): ptr Element {.importcpp: "get_host",
    header: "cheerp/clientlib.h".}

proc get_innerHTML*(this: var ShadowRoot): ptr String {.
    importcpp: "get_innerHTML", header: "cheerp/clientlib.h".}

proc set_innerHTML*(this: var ShadowRoot; a2: String) {.
    importcpp: "set_innerHTML", header: "cheerp/clientlib.h".}

proc get_delegatesFocus*(this: var ShadowRootInit): bool {.
    importcpp: "get_delegatesFocus", header: "cheerp/clientlib.h".}

proc set_delegatesFocus*(this: var ShadowRootInit; a2: bool) {.
    importcpp: "set_delegatesFocus", header: "cheerp/clientlib.h".}

proc get_mode*(this: var ShadowRootInit): ptr String {.importcpp: "get_mode",
    header: "cheerp/clientlib.h".}

proc set_mode*(this: var ShadowRootInit; a2: String) {.importcpp: "set_mode",
    header: "cheerp/clientlib.h".}

proc get_appendWindowEnd*(this: var SourceBuffer): cdouble {.
    importcpp: "get_appendWindowEnd", header: "cheerp/clientlib.h".}

proc set_appendWindowEnd*(this: var SourceBuffer; a2: cdouble) {.
    importcpp: "set_appendWindowEnd", header: "cheerp/clientlib.h".}

proc get_appendWindowStart*(this: var SourceBuffer): cdouble {.
    importcpp: "get_appendWindowStart", header: "cheerp/clientlib.h".}

proc set_appendWindowStart*(this: var SourceBuffer; a2: cdouble) {.
    importcpp: "set_appendWindowStart", header: "cheerp/clientlib.h".}

proc get_audioTracks*(this: var SourceBuffer): ptr AudioTrackList {.
    importcpp: "get_audioTracks", header: "cheerp/clientlib.h".}

proc get_buffered*(this: var SourceBuffer): ptr TimeRanges {.
    importcpp: "get_buffered", header: "cheerp/clientlib.h".}

proc get_mode*(this: var SourceBuffer): ptr String {.importcpp: "get_mode",
    header: "cheerp/clientlib.h".}

proc set_mode*(this: var SourceBuffer; a2: String) {.importcpp: "set_mode",
    header: "cheerp/clientlib.h".}

proc get_textTracks*(this: var SourceBuffer): ptr TextTrackList {.
    importcpp: "get_textTracks", header: "cheerp/clientlib.h".}

proc get_timestampOffset*(this: var SourceBuffer): cdouble {.
    importcpp: "get_timestampOffset", header: "cheerp/clientlib.h".}

proc set_timestampOffset*(this: var SourceBuffer; a2: cdouble) {.
    importcpp: "set_timestampOffset", header: "cheerp/clientlib.h".}

proc get_updating*(this: var SourceBuffer): bool {.importcpp: "get_updating",
    header: "cheerp/clientlib.h".}

proc get_videoTracks*(this: var SourceBuffer): ptr VideoTrackList {.
    importcpp: "get_videoTracks", header: "cheerp/clientlib.h".}

proc abort*(this: var SourceBuffer) {.importcpp: "abort",
                                      header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr ArrayBuffer) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Int8Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Int16Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Int32Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Uint8Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Uint16Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Uint32Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Uint8ClampedArray) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Float32Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr Float64Array) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendBuffer*(this: var SourceBuffer; data: ptr DataView) {.
    importcpp: "appendBuffer", header: "cheerp/clientlib.h".}

proc appendStream*(this: var SourceBuffer; stream: ptr MSStream) {.
    importcpp: "appendStream", header: "cheerp/clientlib.h".}

proc appendStream*(this: var SourceBuffer; stream: ptr MSStream;
                   maxSize: cdouble) {.importcpp: "appendStream",
                                       header: "cheerp/clientlib.h".}

proc remove*(this: var SourceBuffer; start: cdouble; `end`: cdouble) {.
    importcpp: "remove", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SourceBuffer): ptr SourceBuffer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SourceBuffer; a2: ptr SourceBuffer) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSourceBuffer*(): SourceBuffer {.constructor,
    importcpp: "client::SourceBuffer(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var SourceBufferList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var SourceBufferList; index: cdouble): ptr SourceBuffer {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var SourceBufferList; index: cint): ptr SourceBuffer {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: SourceBufferList; index: cint): ptr SourceBuffer {.
    noSideEffect, importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SourceBufferList): ptr SourceBufferList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SourceBufferList; a2: ptr SourceBufferList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSourceBufferList*(): SourceBufferList {.constructor,
    importcpp: "client::SourceBufferList(@)", header: "cheerp/clientlib.h".}

proc get_voiceschanged*(this: var SpeechSynthesisEventMap): ptr Event {.
    importcpp: "get_voiceschanged", header: "cheerp/clientlib.h".}

proc set_voiceschanged*(this: var SpeechSynthesisEventMap; a2: ptr Event) {.
    importcpp: "set_voiceschanged", header: "cheerp/clientlib.h".}

proc get_onvoiceschanged*(this: var SpeechSynthesis): ptr EventListener {.
    importcpp: "get_onvoiceschanged", header: "cheerp/clientlib.h".}

proc set_onvoiceschanged*(this: var SpeechSynthesis; a2: ptr EventListener) {.
    importcpp: "set_onvoiceschanged", header: "cheerp/clientlib.h".}

proc get_paused*(this: var SpeechSynthesis): bool {.importcpp: "get_paused",
    header: "cheerp/clientlib.h".}

proc get_pending*(this: var SpeechSynthesis): bool {.importcpp: "get_pending",
    header: "cheerp/clientlib.h".}

proc get_speaking*(this: var SpeechSynthesis): bool {.importcpp: "get_speaking",
    header: "cheerp/clientlib.h".}

proc cancel*(this: var SpeechSynthesis) {.importcpp: "cancel",
    header: "cheerp/clientlib.h".}

proc getVoices*(this: var SpeechSynthesis): ptr Array {.importcpp: "getVoices",
    header: "cheerp/clientlib.h".}

proc pause*(this: var SpeechSynthesis) {.importcpp: "pause",
    header: "cheerp/clientlib.h".}

proc resume*(this: var SpeechSynthesis) {.importcpp: "resume",
    header: "cheerp/clientlib.h".}

proc speak*(this: var SpeechSynthesis; utterance: ptr SpeechSynthesisUtterance) {.
    importcpp: "speak", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesis; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesis; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesis; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesis; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesis; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesis; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesis; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesis; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesis; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesis; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SpeechSynthesis): ptr SpeechSynthesis {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SpeechSynthesis; a2: ptr SpeechSynthesis) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSpeechSynthesis*(): SpeechSynthesis {.constructor,
    importcpp: "client::SpeechSynthesis(@)", header: "cheerp/clientlib.h".}

proc get_charIndex*(this: var SpeechSynthesisEvent): cdouble {.
    importcpp: "get_charIndex", header: "cheerp/clientlib.h".}

proc get_charLength*(this: var SpeechSynthesisEvent): cdouble {.
    importcpp: "get_charLength", header: "cheerp/clientlib.h".}

proc get_elapsedTime*(this: var SpeechSynthesisEvent): cdouble {.
    importcpp: "get_elapsedTime", header: "cheerp/clientlib.h".}

proc get_name*(this: var SpeechSynthesisEvent): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc get_utterance*(this: var SpeechSynthesisEvent): ptr SpeechSynthesisUtterance {.
    importcpp: "get_utterance", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SpeechSynthesisEvent): ptr SpeechSynthesisEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SpeechSynthesisEvent; a2: ptr SpeechSynthesisEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSpeechSynthesisEvent*(`type`: String): SpeechSynthesisEvent {.
    constructor, importcpp: "client::SpeechSynthesisEvent(@)",
    header: "cheerp/clientlib.h".}

proc constructSpeechSynthesisEvent*(`type`: String;
                                    eventInitDict: ptr SpeechSynthesisEventInit): SpeechSynthesisEvent {.
    constructor, importcpp: "client::SpeechSynthesisEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_boundary*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_boundary", header: "cheerp/clientlib.h".}

proc set_boundary*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_boundary", header: "cheerp/clientlib.h".}

proc get_end*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_end", header: "cheerp/clientlib.h".}

proc set_end*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_end", header: "cheerp/clientlib.h".}

proc get_error*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_mark*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_mark", header: "cheerp/clientlib.h".}

proc set_mark*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_mark", header: "cheerp/clientlib.h".}

proc get_pause*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_pause", header: "cheerp/clientlib.h".}

proc set_pause*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_pause", header: "cheerp/clientlib.h".}

proc get_resume*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_resume", header: "cheerp/clientlib.h".}

proc set_resume*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_resume", header: "cheerp/clientlib.h".}

proc get_start*(this: var SpeechSynthesisUtteranceEventMap): ptr Event {.
    importcpp: "get_start", header: "cheerp/clientlib.h".}

proc set_start*(this: var SpeechSynthesisUtteranceEventMap; a2: ptr Event) {.
    importcpp: "set_start", header: "cheerp/clientlib.h".}

proc get_lang*(this: var SpeechSynthesisUtterance): ptr String {.
    importcpp: "get_lang", header: "cheerp/clientlib.h".}

proc set_lang*(this: var SpeechSynthesisUtterance; a2: String) {.
    importcpp: "set_lang", header: "cheerp/clientlib.h".}

proc get_onboundary*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onboundary", header: "cheerp/clientlib.h".}

proc set_onboundary*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onboundary", header: "cheerp/clientlib.h".}

proc get_onend*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onend", header: "cheerp/clientlib.h".}

proc set_onend*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onend", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onmark*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onmark", header: "cheerp/clientlib.h".}

proc set_onmark*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onmark", header: "cheerp/clientlib.h".}

proc get_onpause*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onpause", header: "cheerp/clientlib.h".}

proc set_onpause*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onpause", header: "cheerp/clientlib.h".}

proc get_onresume*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onresume", header: "cheerp/clientlib.h".}

proc set_onresume*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onresume", header: "cheerp/clientlib.h".}

proc get_onstart*(this: var SpeechSynthesisUtterance): ptr EventListener {.
    importcpp: "get_onstart", header: "cheerp/clientlib.h".}

proc set_onstart*(this: var SpeechSynthesisUtterance; a2: ptr EventListener) {.
    importcpp: "set_onstart", header: "cheerp/clientlib.h".}

proc get_pitch*(this: var SpeechSynthesisUtterance): cdouble {.
    importcpp: "get_pitch", header: "cheerp/clientlib.h".}

proc set_pitch*(this: var SpeechSynthesisUtterance; a2: cdouble) {.
    importcpp: "set_pitch", header: "cheerp/clientlib.h".}

proc get_rate*(this: var SpeechSynthesisUtterance): cdouble {.
    importcpp: "get_rate", header: "cheerp/clientlib.h".}

proc set_rate*(this: var SpeechSynthesisUtterance; a2: cdouble) {.
    importcpp: "set_rate", header: "cheerp/clientlib.h".}

proc get_text*(this: var SpeechSynthesisUtterance): ptr String {.
    importcpp: "get_text", header: "cheerp/clientlib.h".}

proc set_text*(this: var SpeechSynthesisUtterance; a2: String) {.
    importcpp: "set_text", header: "cheerp/clientlib.h".}

proc get_voice*(this: var SpeechSynthesisUtterance): ptr SpeechSynthesisVoice {.
    importcpp: "get_voice", header: "cheerp/clientlib.h".}

proc set_voice*(this: var SpeechSynthesisUtterance; a2: ptr SpeechSynthesisVoice) {.
    importcpp: "set_voice", header: "cheerp/clientlib.h".}

proc get_volume*(this: var SpeechSynthesisUtterance): cdouble {.
    importcpp: "get_volume", header: "cheerp/clientlib.h".}

proc set_volume*(this: var SpeechSynthesisUtterance; a2: cdouble) {.
    importcpp: "set_volume", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var SpeechSynthesisUtterance; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SpeechSynthesisUtterance): ptr SpeechSynthesisUtterance {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SpeechSynthesisUtterance;
                    a2: ptr SpeechSynthesisUtterance) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSpeechSynthesisUtterance*(): SpeechSynthesisUtterance {.
    constructor, importcpp: "client::SpeechSynthesisUtterance(@)",
    header: "cheerp/clientlib.h".}

proc constructSpeechSynthesisUtterance*(text: String): SpeechSynthesisUtterance {.
    constructor, importcpp: "client::SpeechSynthesisUtterance(@)",
    header: "cheerp/clientlib.h".}

proc get_default*(this: var SpeechSynthesisVoice): bool {.
    importcpp: "get_default", header: "cheerp/clientlib.h".}

proc get_lang*(this: var SpeechSynthesisVoice): ptr String {.
    importcpp: "get_lang", header: "cheerp/clientlib.h".}

proc get_localService*(this: var SpeechSynthesisVoice): bool {.
    importcpp: "get_localService", header: "cheerp/clientlib.h".}

proc get_name*(this: var SpeechSynthesisVoice): ptr String {.
    importcpp: "get_name", header: "cheerp/clientlib.h".}

proc get_voiceURI*(this: var SpeechSynthesisVoice): ptr String {.
    importcpp: "get_voiceURI", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SpeechSynthesisVoice): ptr SpeechSynthesisVoice {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SpeechSynthesisVoice; a2: ptr SpeechSynthesisVoice) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSpeechSynthesisVoice*(): SpeechSynthesisVoice {.constructor,
    importcpp: "client::SpeechSynthesisVoice(@)", header: "cheerp/clientlib.h".}

proc get_pan*(this: var StereoPannerNode): ptr AudioParam {.
    importcpp: "get_pan", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var StereoPannerNode): ptr StereoPannerNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var StereoPannerNode; a2: ptr StereoPannerNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructStereoPannerNode*(): StereoPannerNode {.constructor,
    importcpp: "client::StereoPannerNode(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var Storage): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc clear*(this: var Storage) {.importcpp: "clear",
                                 header: "cheerp/clientlib.h".}

proc getItem*(this: var Storage; key: String): ptr String {.
    importcpp: "getItem", header: "cheerp/clientlib.h".}

proc key*(this: var Storage; index: cdouble): ptr String {.importcpp: "key",
    header: "cheerp/clientlib.h".}

proc removeItem*(this: var Storage; key: String) {.importcpp: "removeItem",
    header: "cheerp/clientlib.h".}

proc setItem*(this: var Storage; key: String; value: String) {.
    importcpp: "setItem", header: "cheerp/clientlib.h".}

proc `[]`*(this: var Storage; index: cint): ptr Object {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: Storage; index: cint): ptr Object {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Storage): ptr Storage {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Storage; a2: ptr Storage) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructStorage*(): Storage {.constructor,
                                    importcpp: "client::Storage(@)",
                                    header: "cheerp/clientlib.h".}

proc get_key*(this: var StorageEvent): ptr String {.importcpp: "get_key",
    header: "cheerp/clientlib.h".}

proc get_newValue*(this: var StorageEvent): ptr String {.
    importcpp: "get_newValue", header: "cheerp/clientlib.h".}

proc get_oldValue*(this: var StorageEvent): ptr String {.
    importcpp: "get_oldValue", header: "cheerp/clientlib.h".}

proc get_storageArea*(this: var StorageEvent): ptr Storage {.
    importcpp: "get_storageArea", header: "cheerp/clientlib.h".}

proc get_url*(this: var StorageEvent): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var StorageEvent): ptr StorageEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var StorageEvent; a2: ptr StorageEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructStorageEvent*(`type`: String): StorageEvent {.constructor,
    importcpp: "client::StorageEvent(@)", header: "cheerp/clientlib.h".}

proc constructStorageEvent*(`type`: String; eventInitDict: ptr StorageEventInit): StorageEvent {.
    constructor, importcpp: "client::StorageEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_key*(this: var StorageEventInit): ptr String {.importcpp: "get_key",
    header: "cheerp/clientlib.h".}

proc set_key*(this: var StorageEventInit; a2: String) {.importcpp: "set_key",
    header: "cheerp/clientlib.h".}

proc get_newValue*(this: var StorageEventInit): ptr String {.
    importcpp: "get_newValue", header: "cheerp/clientlib.h".}

proc set_newValue*(this: var StorageEventInit; a2: String) {.
    importcpp: "set_newValue", header: "cheerp/clientlib.h".}

proc get_oldValue*(this: var StorageEventInit): ptr String {.
    importcpp: "get_oldValue", header: "cheerp/clientlib.h".}

proc set_oldValue*(this: var StorageEventInit; a2: String) {.
    importcpp: "set_oldValue", header: "cheerp/clientlib.h".}

proc get_storageArea*(this: var StorageEventInit): ptr Storage {.
    importcpp: "get_storageArea", header: "cheerp/clientlib.h".}

proc set_storageArea*(this: var StorageEventInit; a2: ptr Storage) {.
    importcpp: "set_storageArea", header: "cheerp/clientlib.h".}

proc get_url*(this: var StorageEventInit): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc set_url*(this: var StorageEventInit; a2: String) {.importcpp: "set_url",
    header: "cheerp/clientlib.h".}

proc get_type*(this: var StyleMedia): ptr String {.importcpp: "get_type",
    header: "cheerp/clientlib.h".}

proc matchMedium*(this: var StyleMedia; mediaquery: String): bool {.
    importcpp: "matchMedium", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var StyleMedia): ptr StyleMedia {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var StyleMedia; a2: ptr StyleMedia) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructStyleMedia*(): StyleMedia {.constructor,
    importcpp: "client::StyleMedia(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var StyleSheetList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var StyleSheetList; index: cdouble): ptr StyleSheet {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var StyleSheetList; index: cint): ptr StyleSheet {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: StyleSheetList; index: cint): ptr StyleSheet {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var StyleSheetList): ptr StyleSheetList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var StyleSheetList; a2: ptr StyleSheetList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructStyleSheetList*(): StyleSheetList {.constructor,
    importcpp: "client::StyleSheetList(@)", header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Int8Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Int16Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Int32Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint8Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint16Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint32Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint8ClampedArray): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Float32Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Float64Array): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr DataView): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr ArrayBuffer): ptr Promise {.importcpp: "decrypt",
    header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: ptr RsaOaepParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decrypt", header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: ptr AesCtrParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decrypt", header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: ptr AesCbcParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decrypt", header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: ptr AesCmacParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decrypt", header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: ptr AesGcmParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decrypt", header: "cheerp/clientlib.h".}

proc decrypt*(this: var SubtleCrypto; algorithm: ptr AesCfbParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "decrypt", header: "cheerp/clientlib.h".}

proc deriveBits*(this: var SubtleCrypto; algorithm: String;
                 baseKey: ptr CryptoKey; length: cdouble): ptr Promise {.
    importcpp: "deriveBits", header: "cheerp/clientlib.h".}

proc deriveBits*(this: var SubtleCrypto; algorithm: ptr EcdhKeyDeriveParams;
                 baseKey: ptr CryptoKey; length: cdouble): ptr Promise {.
    importcpp: "deriveBits", header: "cheerp/clientlib.h".}

proc deriveBits*(this: var SubtleCrypto; algorithm: ptr DhKeyDeriveParams;
                 baseKey: ptr CryptoKey; length: cdouble): ptr Promise {.
    importcpp: "deriveBits", header: "cheerp/clientlib.h".}

proc deriveBits*(this: var SubtleCrypto; algorithm: ptr ConcatParams;
                 baseKey: ptr CryptoKey; length: cdouble): ptr Promise {.
    importcpp: "deriveBits", header: "cheerp/clientlib.h".}

proc deriveBits*(this: var SubtleCrypto; algorithm: ptr HkdfCtrParams;
                 baseKey: ptr CryptoKey; length: cdouble): ptr Promise {.
    importcpp: "deriveBits", header: "cheerp/clientlib.h".}

proc deriveBits*(this: var SubtleCrypto; algorithm: ptr Pbkdf2Params;
                 baseKey: ptr CryptoKey; length: cdouble): ptr Promise {.
    importcpp: "deriveBits", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: String;
                baseKey: ptr CryptoKey; derivedKeyType: String;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: String;
                baseKey: ptr CryptoKey; derivedKeyType: ptr AesDerivedKeyParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: String;
                baseKey: ptr CryptoKey; derivedKeyType: ptr HmacImportParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: String;
                baseKey: ptr CryptoKey; derivedKeyType: ptr ConcatParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: String;
                baseKey: ptr CryptoKey; derivedKeyType: ptr HkdfCtrParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: String;
                baseKey: ptr CryptoKey; derivedKeyType: ptr Pbkdf2Params;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: ptr EcdhKeyDeriveParams;
                baseKey: ptr CryptoKey; derivedKeyType: ptr Pbkdf2Params;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: ptr DhKeyDeriveParams;
                baseKey: ptr CryptoKey; derivedKeyType: ptr Pbkdf2Params;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: ptr ConcatParams;
                baseKey: ptr CryptoKey; derivedKeyType: ptr Pbkdf2Params;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: ptr HkdfCtrParams;
                baseKey: ptr CryptoKey; derivedKeyType: ptr Pbkdf2Params;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc deriveKey*(this: var SubtleCrypto; algorithm: ptr Pbkdf2Params;
                baseKey: ptr CryptoKey; derivedKeyType: ptr Pbkdf2Params;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "deriveKey", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Int8Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Int16Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Int32Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Uint8Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Uint16Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Uint32Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String;
             data: ptr Uint8ClampedArray): ptr Promise {.importcpp: "digest",
    header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Float32Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr Float64Array): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr DataView): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: String; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "digest", header: "cheerp/clientlib.h".}

proc digest*(this: var SubtleCrypto; algorithm: ptr Algorithm;
             data: ptr ArrayBuffer): ptr Promise {.importcpp: "digest",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Int8Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Int16Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Int32Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint8Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint16Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint32Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Uint8ClampedArray): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Float32Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr Float64Array): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr DataView): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
              data: ptr ArrayBuffer): ptr Promise {.importcpp: "encrypt",
    header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: ptr RsaOaepParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "encrypt", header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: ptr AesCtrParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "encrypt", header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: ptr AesCbcParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "encrypt", header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: ptr AesCmacParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "encrypt", header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: ptr AesGcmParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "encrypt", header: "cheerp/clientlib.h".}

proc encrypt*(this: var SubtleCrypto; algorithm: ptr AesCfbParams;
              key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "encrypt", header: "cheerp/clientlib.h".}

proc exportKey*(this: var SubtleCrypto; format: String; key: ptr CryptoKey): ptr Promise {.
    importcpp: "exportKey", header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: String; extractable: bool;
                  keyUsages: ptr Array): ptr Promise {.importcpp: "generateKey",
    header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: ptr RsaHashedKeyGenParams;
                  extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "generateKey", header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: ptr EcKeyGenParams;
                  extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "generateKey", header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: ptr DhKeyGenParams;
                  extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "generateKey", header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: ptr AesKeyGenParams;
                  extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "generateKey", header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: ptr HmacKeyGenParams;
                  extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "generateKey", header: "cheerp/clientlib.h".}

proc generateKey*(this: var SubtleCrypto; algorithm: ptr Pbkdf2Params;
                  extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "generateKey", header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr JsonWebKey;
                algorithm: String; extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "importKey", header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr JsonWebKey;
                algorithm: ptr RsaHashedImportParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr JsonWebKey;
                algorithm: ptr EcKeyImportParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr JsonWebKey;
                algorithm: ptr HmacImportParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr JsonWebKey;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr Int8Array;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr Int16Array;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr Int32Array;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr Uint8Array;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String;
                keyData: ptr Uint16Array; algorithm: ptr DhImportKeyParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "importKey", header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String;
                keyData: ptr Uint32Array; algorithm: ptr DhImportKeyParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "importKey", header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String;
                keyData: ptr Uint8ClampedArray;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String;
                keyData: ptr Float32Array; algorithm: ptr DhImportKeyParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "importKey", header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String;
                keyData: ptr Float64Array; algorithm: ptr DhImportKeyParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "importKey", header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String; keyData: ptr DataView;
                algorithm: ptr DhImportKeyParams; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "importKey",
    header: "cheerp/clientlib.h".}

proc importKey*(this: var SubtleCrypto; format: String;
                keyData: ptr ArrayBuffer; algorithm: ptr DhImportKeyParams;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "importKey", header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Int8Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Int16Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Int32Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Uint8Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Uint16Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Uint32Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Uint8ClampedArray): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Float32Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr Float64Array): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr DataView): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
           data: ptr ArrayBuffer): ptr Promise {.importcpp: "sign",
    header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: ptr RsaPssParams;
           key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "sign", header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: ptr EcdsaParams;
           key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "sign", header: "cheerp/clientlib.h".}

proc sign*(this: var SubtleCrypto; algorithm: ptr AesCmacParams;
           key: ptr CryptoKey; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "sign", header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Int8Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: String; unwrappedKeyAlgorithm: String;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "unwrapKey", header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Int8Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: String; unwrappedKeyAlgorithm: ptr Algorithm;
                extractable: bool; keyUsages: ptr Array): ptr Promise {.
    importcpp: "unwrapKey", header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Int8Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Int16Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Int32Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Uint8Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Uint16Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Uint32Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Uint8ClampedArray; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Float32Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr Float64Array; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr DataView; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc unwrapKey*(this: var SubtleCrypto; format: String;
                wrappedKey: ptr ArrayBuffer; unwrappingKey: ptr CryptoKey;
                unwrapAlgorithm: ptr Algorithm;
                unwrappedKeyAlgorithm: ptr Algorithm; extractable: bool;
                keyUsages: ptr Array): ptr Promise {.importcpp: "unwrapKey",
    header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Int8Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Int16Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Int32Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Uint8Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Uint16Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Uint32Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Uint8ClampedArray): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Float32Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr Float64Array): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr DataView): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int8Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int16Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Int32Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Uint8Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Uint16Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Uint32Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Uint8ClampedArray; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Float32Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr Float64Array; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr DataView; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: String; key: ptr CryptoKey;
             signature: ptr ArrayBuffer; data: ptr ArrayBuffer): ptr Promise {.
    importcpp: "verify", header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: ptr RsaPssParams;
             key: ptr CryptoKey; signature: ptr ArrayBuffer;
             data: ptr ArrayBuffer): ptr Promise {.importcpp: "verify",
    header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: ptr EcdsaParams;
             key: ptr CryptoKey; signature: ptr ArrayBuffer;
             data: ptr ArrayBuffer): ptr Promise {.importcpp: "verify",
    header: "cheerp/clientlib.h".}

proc verify*(this: var SubtleCrypto; algorithm: ptr AesCmacParams;
             key: ptr CryptoKey; signature: ptr ArrayBuffer;
             data: ptr ArrayBuffer): ptr Promise {.importcpp: "verify",
    header: "cheerp/clientlib.h".}

proc wrapKey*(this: var SubtleCrypto; format: String; key: ptr CryptoKey;
              wrappingKey: ptr CryptoKey; wrapAlgorithm: String): ptr Promise {.
    importcpp: "wrapKey", header: "cheerp/clientlib.h".}

proc wrapKey*(this: var SubtleCrypto; format: String; key: ptr CryptoKey;
              wrappingKey: ptr CryptoKey; wrapAlgorithm: ptr Algorithm): ptr Promise {.
    importcpp: "wrapKey", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SubtleCrypto): ptr SubtleCrypto {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SubtleCrypto; a2: ptr SubtleCrypto) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSubtleCrypto*(): SubtleCrypto {.constructor,
    importcpp: "client::SubtleCrypto(@)", header: "cheerp/clientlib.h".}

proc getTags*(this: var SyncManager): ptr Promise {.importcpp: "getTags",
    header: "cheerp/clientlib.h".}

proc p_register*(this: var SyncManager; tag: String): ptr Promise {.
    importcpp: "_register", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var SyncManager): ptr SyncManager {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var SyncManager; a2: ptr SyncManager) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructSyncManager*(): SyncManager {.constructor,
    importcpp: "client::SyncManager(@)", header: "cheerp/clientlib.h".}

proc get_encoding*(this: var TextDecoder): ptr String {.
    importcpp: "get_encoding", header: "cheerp/clientlib.h".}

proc get_fatal*(this: var TextDecoder): bool {.importcpp: "get_fatal",
    header: "cheerp/clientlib.h".}

proc get_ignoreBOM*(this: var TextDecoder): bool {.importcpp: "get_ignoreBOM",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Int8Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Int8Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Int16Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Int16Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Int32Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Int32Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint8Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint8Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint16Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint16Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint32Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint32Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint8ClampedArray): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Uint8ClampedArray;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Float32Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Float32Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Float64Array): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr Float64Array;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr DataView): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr DataView;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr ArrayBuffer): ptr String {.
    importcpp: "decode", header: "cheerp/clientlib.h".}

proc decode*(this: var TextDecoder; input: ptr ArrayBuffer;
             options: ptr TextDecodeOptions): ptr String {.importcpp: "decode",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextDecoder): ptr TextDecoder {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextDecoder; a2: ptr TextDecoder) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextDecoder*(): TextDecoder {.constructor,
    importcpp: "client::TextDecoder(@)", header: "cheerp/clientlib.h".}

proc constructTextDecoder*(label: String): TextDecoder {.constructor,
    importcpp: "client::TextDecoder(@)", header: "cheerp/clientlib.h".}

proc constructTextDecoder*(label: String; options: ptr TextDecoderOptions): TextDecoder {.
    constructor, importcpp: "client::TextDecoder(@)",
    header: "cheerp/clientlib.h".}

proc get_encoding*(this: var TextEncoder): ptr String {.
    importcpp: "get_encoding", header: "cheerp/clientlib.h".}

proc encode*(this: var TextEncoder): ptr Uint8Array {.importcpp: "encode",
    header: "cheerp/clientlib.h".}

proc encode*(this: var TextEncoder; input: String): ptr Uint8Array {.
    importcpp: "encode", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextEncoder): ptr TextEncoder {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextEncoder; a2: ptr TextEncoder) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextEncoder*(): TextEncoder {.constructor,
    importcpp: "client::TextEncoder(@)", header: "cheerp/clientlib.h".}

proc get_data*(this: var TextEvent): ptr String {.importcpp: "get_data",
    header: "cheerp/clientlib.h".}

proc initTextEvent*(this: var TextEvent; typeArg: String; canBubbleArg: bool;
                    cancelableArg: bool; viewArg: ptr Window; dataArg: String;
                    inputMethod: cdouble; locale: String) {.
    importcpp: "initTextEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextEvent): ptr TextEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextEvent; a2: ptr TextEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextEvent*(): TextEvent {.constructor,
                                        importcpp: "client::TextEvent(@)",
                                        header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_DROP*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_DROP", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_HANDWRITING*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_HANDWRITING", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_IME*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_IME", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_KEYBOARD*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_KEYBOARD", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_MULTIMODAL*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_MULTIMODAL", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_OPTION*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_OPTION", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_PASTE*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_PASTE", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_SCRIPT*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_SCRIPT", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_UNKNOWN*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_UNKNOWN", header: "cheerp/clientlib.h".}

proc get_DOM_INPUT_METHOD_VOICE*(this: var TextEvent): cdouble {.
    importcpp: "get_DOM_INPUT_METHOD_VOICE", header: "cheerp/clientlib.h".}

proc get_width*(this: var TextMetrics): cdouble {.importcpp: "get_width",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextMetrics): ptr TextMetrics {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextMetrics; a2: ptr TextMetrics) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextMetrics*(): TextMetrics {.constructor,
    importcpp: "client::TextMetrics(@)", header: "cheerp/clientlib.h".}

proc get_cuechange*(this: var TextTrackEventMap): ptr Event {.
    importcpp: "get_cuechange", header: "cheerp/clientlib.h".}

proc set_cuechange*(this: var TextTrackEventMap; a2: ptr Event) {.
    importcpp: "set_cuechange", header: "cheerp/clientlib.h".}

proc get_error*(this: var TextTrackEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var TextTrackEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_load*(this: var TextTrackEventMap): ptr Event {.importcpp: "get_load",
    header: "cheerp/clientlib.h".}

proc set_load*(this: var TextTrackEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_activeCues*(this: var TextTrack): ptr TextTrackCueList {.
    importcpp: "get_activeCues", header: "cheerp/clientlib.h".}

proc get_cues*(this: var TextTrack): ptr TextTrackCueList {.
    importcpp: "get_cues", header: "cheerp/clientlib.h".}

proc get_inBandMetadataTrackDispatchType*(this: var TextTrack): ptr String {.
    importcpp: "get_inBandMetadataTrackDispatchType",
    header: "cheerp/clientlib.h".}

proc get_kind*(this: var TextTrack): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var TextTrack): ptr String {.importcpp: "get_label",
    header: "cheerp/clientlib.h".}

proc get_language*(this: var TextTrack): ptr String {.importcpp: "get_language",
    header: "cheerp/clientlib.h".}

proc get_mode*(this: var TextTrack): ptr String {.importcpp: "get_mode",
    header: "cheerp/clientlib.h".}

proc set_mode*(this: var TextTrack; a2: ptr String) {.importcpp: "set_mode",
    header: "cheerp/clientlib.h".}

proc get_oncuechange*(this: var TextTrack): ptr EventListener {.
    importcpp: "get_oncuechange", header: "cheerp/clientlib.h".}

proc set_oncuechange*(this: var TextTrack; a2: ptr EventListener) {.
    importcpp: "set_oncuechange", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var TextTrack): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var TextTrack; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onload*(this: var TextTrack): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var TextTrack; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var TextTrack): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc addCue*(this: var TextTrack; cue: ptr TextTrackCue) {.importcpp: "addCue",
    header: "cheerp/clientlib.h".}

proc removeCue*(this: var TextTrack; cue: ptr TextTrackCue) {.
    importcpp: "removeCue", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrack; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrack; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrack; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrack; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrack; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrack; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrack; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrack; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrack; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrack; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextTrack): ptr TextTrack {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextTrack; a2: ptr TextTrack) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextTrack*(): TextTrack {.constructor,
                                        importcpp: "client::TextTrack(@)",
                                        header: "cheerp/clientlib.h".}

proc get_DISABLED*(this: var TextTrack): cdouble {.importcpp: "get_DISABLED",
    header: "cheerp/clientlib.h".}

proc get_ERROR*(this: var TextTrack): cdouble {.importcpp: "get_ERROR",
    header: "cheerp/clientlib.h".}

proc get_HIDDEN*(this: var TextTrack): cdouble {.importcpp: "get_HIDDEN",
    header: "cheerp/clientlib.h".}

proc get_LOADED*(this: var TextTrack): cdouble {.importcpp: "get_LOADED",
    header: "cheerp/clientlib.h".}

proc get_LOADING*(this: var TextTrack): cdouble {.importcpp: "get_LOADING",
    header: "cheerp/clientlib.h".}

proc get_NONE*(this: var TextTrack): cdouble {.importcpp: "get_NONE",
    header: "cheerp/clientlib.h".}

proc get_SHOWING*(this: var TextTrack): cdouble {.importcpp: "get_SHOWING",
    header: "cheerp/clientlib.h".}

proc get_enter*(this: var TextTrackCueEventMap): ptr Event {.
    importcpp: "get_enter", header: "cheerp/clientlib.h".}

proc set_enter*(this: var TextTrackCueEventMap; a2: ptr Event) {.
    importcpp: "set_enter", header: "cheerp/clientlib.h".}

proc get_exit*(this: var TextTrackCueEventMap): ptr Event {.
    importcpp: "get_exit", header: "cheerp/clientlib.h".}

proc set_exit*(this: var TextTrackCueEventMap; a2: ptr Event) {.
    importcpp: "set_exit", header: "cheerp/clientlib.h".}

proc get_length*(this: var TextTrackCueList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc getCueById*(this: var TextTrackCueList; id: String): ptr TextTrackCue {.
    importcpp: "getCueById", header: "cheerp/clientlib.h".}

proc item*(this: var TextTrackCueList; index: cdouble): ptr TextTrackCue {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc `[]`*(this: var TextTrackCueList; index: cint): ptr TextTrackCue {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: TextTrackCueList; index: cint): ptr TextTrackCue {.
    noSideEffect, importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextTrackCueList): ptr TextTrackCueList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextTrackCueList; a2: ptr TextTrackCueList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextTrackCueList*(): TextTrackCueList {.constructor,
    importcpp: "client::TextTrackCueList(@)", header: "cheerp/clientlib.h".}

proc get_addtrack*(this: var TextTrackListEventMap): ptr TrackEvent {.
    importcpp: "get_addtrack", header: "cheerp/clientlib.h".}

proc set_addtrack*(this: var TextTrackListEventMap; a2: ptr TrackEvent) {.
    importcpp: "set_addtrack", header: "cheerp/clientlib.h".}

proc get_length*(this: var TextTrackList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_onaddtrack*(this: var TextTrackList): ptr EventListener {.
    importcpp: "get_onaddtrack", header: "cheerp/clientlib.h".}

proc set_onaddtrack*(this: var TextTrackList; a2: ptr EventListener) {.
    importcpp: "set_onaddtrack", header: "cheerp/clientlib.h".}

proc item*(this: var TextTrackList; index: cdouble): ptr TextTrack {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackList; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackList; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackList; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackList; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var TextTrackList; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackList; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackList; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackList; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackList; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var TextTrackList; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc `[]`*(this: var TextTrackList; index: cint): ptr TextTrack {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: TextTrackList; index: cint): ptr TextTrack {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TextTrackList): ptr TextTrackList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TextTrackList; a2: ptr TextTrackList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTextTrackList*(): TextTrackList {.constructor,
    importcpp: "client::TextTrackList(@)", header: "cheerp/clientlib.h".}

proc get_length*(this: var TimeRanges): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc `end`*(this: var TimeRanges; index: cdouble): cdouble {.importcpp: "end",
    header: "cheerp/clientlib.h".}

proc start*(this: var TimeRanges; index: cdouble): cdouble {.importcpp: "start",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TimeRanges): ptr TimeRanges {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TimeRanges; a2: ptr TimeRanges) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTimeRanges*(): TimeRanges {.constructor,
    importcpp: "client::TimeRanges(@)", header: "cheerp/clientlib.h".}

proc get_clientX*(this: var Touch): cdouble {.importcpp: "get_clientX",
    header: "cheerp/clientlib.h".}

proc get_clientY*(this: var Touch): cdouble {.importcpp: "get_clientY",
    header: "cheerp/clientlib.h".}

proc get_identifier*(this: var Touch): cdouble {.importcpp: "get_identifier",
    header: "cheerp/clientlib.h".}

proc get_pageX*(this: var Touch): cdouble {.importcpp: "get_pageX",
    header: "cheerp/clientlib.h".}

proc get_pageY*(this: var Touch): cdouble {.importcpp: "get_pageY",
    header: "cheerp/clientlib.h".}

proc get_screenX*(this: var Touch): cdouble {.importcpp: "get_screenX",
    header: "cheerp/clientlib.h".}

proc get_screenY*(this: var Touch): cdouble {.importcpp: "get_screenY",
    header: "cheerp/clientlib.h".}

proc get_target*(this: var Touch): ptr EventTarget {.importcpp: "get_target",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Touch): ptr Touch {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Touch; a2: ptr Touch) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTouch*(): Touch {.constructor, importcpp: "client::Touch(@)",
                                header: "cheerp/clientlib.h".}

proc get_altKey*(this: var TouchEvent): bool {.importcpp: "get_altKey",
    header: "cheerp/clientlib.h".}

proc get_changedTouches*(this: var TouchEvent): ptr TouchList {.
    importcpp: "get_changedTouches", header: "cheerp/clientlib.h".}

proc get_charCode*(this: var TouchEvent): cdouble {.importcpp: "get_charCode",
    header: "cheerp/clientlib.h".}

proc get_ctrlKey*(this: var TouchEvent): bool {.importcpp: "get_ctrlKey",
    header: "cheerp/clientlib.h".}

proc get_keyCode*(this: var TouchEvent): cdouble {.importcpp: "get_keyCode",
    header: "cheerp/clientlib.h".}

proc get_metaKey*(this: var TouchEvent): bool {.importcpp: "get_metaKey",
    header: "cheerp/clientlib.h".}

proc get_shiftKey*(this: var TouchEvent): bool {.importcpp: "get_shiftKey",
    header: "cheerp/clientlib.h".}

proc get_targetTouches*(this: var TouchEvent): ptr TouchList {.
    importcpp: "get_targetTouches", header: "cheerp/clientlib.h".}

proc get_touches*(this: var TouchEvent): ptr TouchList {.
    importcpp: "get_touches", header: "cheerp/clientlib.h".}

proc get_which*(this: var TouchEvent): cdouble {.importcpp: "get_which",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TouchEvent): ptr TouchEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TouchEvent; a2: ptr TouchEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTouchEvent*(`type`: String): TouchEvent {.constructor,
    importcpp: "client::TouchEvent(@)", header: "cheerp/clientlib.h".}

proc constructTouchEvent*(`type`: String; touchEventInit: ptr TouchEventInit): TouchEvent {.
    constructor, importcpp: "client::TouchEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_changedTouches*(this: var TouchEventInit): ptr Array {.
    importcpp: "get_changedTouches", header: "cheerp/clientlib.h".}

proc set_changedTouches*(this: var TouchEventInit; a2: ptr Array) {.
    importcpp: "set_changedTouches", header: "cheerp/clientlib.h".}

proc get_targetTouches*(this: var TouchEventInit): ptr Array {.
    importcpp: "get_targetTouches", header: "cheerp/clientlib.h".}

proc set_targetTouches*(this: var TouchEventInit; a2: ptr Array) {.
    importcpp: "set_targetTouches", header: "cheerp/clientlib.h".}

proc get_touches*(this: var TouchEventInit): ptr Array {.
    importcpp: "get_touches", header: "cheerp/clientlib.h".}

proc set_touches*(this: var TouchEventInit; a2: ptr Array) {.
    importcpp: "set_touches", header: "cheerp/clientlib.h".}

proc get_length*(this: var TouchList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc item*(this: var TouchList; index: cdouble): ptr Touch {.importcpp: "item",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: var TouchList; index: cint): ptr Touch {.importcpp: "#[@]",
    header: "cheerp/clientlib.h".}

proc `[]`*(this: TouchList; index: cint): ptr Touch {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TouchList): ptr TouchList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TouchList; a2: ptr TouchList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTouchList*(): TouchList {.constructor,
                                        importcpp: "client::TouchList(@)",
                                        header: "cheerp/clientlib.h".}

proc get_track*(this: var TrackEvent): ptr VideoTrack {.importcpp: "get_track",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TrackEvent): ptr TrackEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TrackEvent; a2: ptr TrackEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTrackEvent*(typeArg: String): TrackEvent {.constructor,
    importcpp: "client::TrackEvent(@)", header: "cheerp/clientlib.h".}

proc constructTrackEvent*(typeArg: String; eventInitDict: ptr TrackEventInit): TrackEvent {.
    constructor, importcpp: "client::TrackEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_elapsedTime*(this: var TransitionEvent): cdouble {.
    importcpp: "get_elapsedTime", header: "cheerp/clientlib.h".}

proc get_propertyName*(this: var TransitionEvent): ptr String {.
    importcpp: "get_propertyName", header: "cheerp/clientlib.h".}

proc initTransitionEvent*(this: var TransitionEvent; typeArg: String;
                          canBubbleArg: bool; cancelableArg: bool;
                          propertyNameArg: String; elapsedTimeArg: cdouble) {.
    importcpp: "initTransitionEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TransitionEvent): ptr TransitionEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TransitionEvent; a2: ptr TransitionEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTransitionEvent*(typeArg: String): TransitionEvent {.constructor,
    importcpp: "client::TransitionEvent(@)", header: "cheerp/clientlib.h".}

proc constructTransitionEvent*(typeArg: String;
                               eventInitDict: ptr TransitionEventInit): TransitionEvent {.
    constructor, importcpp: "client::TransitionEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_currentNode*(this: var TreeWalker): ptr Node {.
    importcpp: "get_currentNode", header: "cheerp/clientlib.h".}

proc set_currentNode*(this: var TreeWalker; a2: ptr Node) {.
    importcpp: "set_currentNode", header: "cheerp/clientlib.h".}

proc get_expandEntityReferences*(this: var TreeWalker): bool {.
    importcpp: "get_expandEntityReferences", header: "cheerp/clientlib.h".}

proc get_filter*(this: var TreeWalker): ptr NodeFilter {.
    importcpp: "get_filter", header: "cheerp/clientlib.h".}

proc get_root*(this: var TreeWalker): ptr Node {.importcpp: "get_root",
    header: "cheerp/clientlib.h".}

proc get_whatToShow*(this: var TreeWalker): cdouble {.
    importcpp: "get_whatToShow", header: "cheerp/clientlib.h".}

proc firstChild*(this: var TreeWalker): ptr Node {.importcpp: "firstChild",
    header: "cheerp/clientlib.h".}

proc lastChild*(this: var TreeWalker): ptr Node {.importcpp: "lastChild",
    header: "cheerp/clientlib.h".}

proc nextNode*(this: var TreeWalker): ptr Node {.importcpp: "nextNode",
    header: "cheerp/clientlib.h".}

proc nextSibling*(this: var TreeWalker): ptr Node {.importcpp: "nextSibling",
    header: "cheerp/clientlib.h".}

proc parentNode*(this: var TreeWalker): ptr Node {.importcpp: "parentNode",
    header: "cheerp/clientlib.h".}

proc previousNode*(this: var TreeWalker): ptr Node {.importcpp: "previousNode",
    header: "cheerp/clientlib.h".}

proc previousSibling*(this: var TreeWalker): ptr Node {.
    importcpp: "previousSibling", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var TreeWalker): ptr TreeWalker {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var TreeWalker; a2: ptr TreeWalker) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructTreeWalker*(): TreeWalker {.constructor,
    importcpp: "client::TreeWalker(@)", header: "cheerp/clientlib.h".}

proc get_hash*(this: var URL): ptr String {.importcpp: "get_hash",
    header: "cheerp/clientlib.h".}

proc set_hash*(this: var URL; a2: String) {.importcpp: "set_hash",
    header: "cheerp/clientlib.h".}

proc get_host*(this: var URL): ptr String {.importcpp: "get_host",
    header: "cheerp/clientlib.h".}

proc set_host*(this: var URL; a2: String) {.importcpp: "set_host",
    header: "cheerp/clientlib.h".}

proc get_hostname*(this: var URL): ptr String {.importcpp: "get_hostname",
    header: "cheerp/clientlib.h".}

proc set_hostname*(this: var URL; a2: String) {.importcpp: "set_hostname",
    header: "cheerp/clientlib.h".}

proc get_href*(this: var URL): ptr String {.importcpp: "get_href",
    header: "cheerp/clientlib.h".}

proc set_href*(this: var URL; a2: String) {.importcpp: "set_href",
    header: "cheerp/clientlib.h".}

proc get_origin*(this: var URL): ptr String {.importcpp: "get_origin",
    header: "cheerp/clientlib.h".}

proc get_password*(this: var URL): ptr String {.importcpp: "get_password",
    header: "cheerp/clientlib.h".}

proc set_password*(this: var URL; a2: String) {.importcpp: "set_password",
    header: "cheerp/clientlib.h".}

proc get_pathname*(this: var URL): ptr String {.importcpp: "get_pathname",
    header: "cheerp/clientlib.h".}

proc set_pathname*(this: var URL; a2: String) {.importcpp: "set_pathname",
    header: "cheerp/clientlib.h".}

proc get_port*(this: var URL): ptr String {.importcpp: "get_port",
    header: "cheerp/clientlib.h".}

proc set_port*(this: var URL; a2: String) {.importcpp: "set_port",
    header: "cheerp/clientlib.h".}

proc get_protocol*(this: var URL): ptr String {.importcpp: "get_protocol",
    header: "cheerp/clientlib.h".}

proc set_protocol*(this: var URL; a2: String) {.importcpp: "set_protocol",
    header: "cheerp/clientlib.h".}

proc get_search*(this: var URL): ptr String {.importcpp: "get_search",
    header: "cheerp/clientlib.h".}

proc set_search*(this: var URL; a2: String) {.importcpp: "set_search",
    header: "cheerp/clientlib.h".}

proc get_searchParams*(this: var URL): ptr URLSearchParams {.
    importcpp: "get_searchParams", header: "cheerp/clientlib.h".}

proc get_username*(this: var URL): ptr String {.importcpp: "get_username",
    header: "cheerp/clientlib.h".}

proc set_username*(this: var URL; a2: String) {.importcpp: "set_username",
    header: "cheerp/clientlib.h".}

proc toString*(this: var URL): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var URL): ptr URL {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var URL; a2: ptr URL) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructURL*(url: String): URL {.constructor, importcpp: "client::URL(@)",
                                       header: "cheerp/clientlib.h".}

proc constructURL*(url: String; base: String): URL {.constructor,
    importcpp: "client::URL(@)", header: "cheerp/clientlib.h".}

proc constructURL*(url: String; base: ptr URL): URL {.constructor,
    importcpp: "client::URL(@)", header: "cheerp/clientlib.h".}

proc createObjectURL*(`object`: ptr Object): ptr String {.
    importcpp: "client::URL::createObjectURL(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc createObjectURL*(`object`: ptr Object; options: ptr ObjectURLOptions): ptr String {.
    importcpp: "client::URL::createObjectURL(@)", header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc revokeObjectURL*(url: String) {.importcpp: "client::URL::revokeObjectURL(@)",
                                     header: "cheerp/clientlib.h".}
  ##
                              ## cheerp::static

proc append*(this: var URLSearchParams; name: String; value: String) {.
    importcpp: "append", header: "cheerp/clientlib.h".}

proc p_delete*(this: var URLSearchParams; name: String) {.importcpp: "_delete",
    header: "cheerp/clientlib.h".}

proc get*(this: var URLSearchParams; name: String): ptr String {.
    importcpp: "get", header: "cheerp/clientlib.h".}

proc getAll*(this: var URLSearchParams; name: String): ptr Array {.
    importcpp: "getAll", header: "cheerp/clientlib.h".}

proc has*(this: var URLSearchParams; name: String): bool {.importcpp: "has",
    header: "cheerp/clientlib.h".}

proc set*(this: var URLSearchParams; name: String; value: String) {.
    importcpp: "set", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var URLSearchParams): ptr URLSearchParams {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var URLSearchParams; a2: ptr URLSearchParams) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructURLSearchParams*(): URLSearchParams {.constructor,
    importcpp: "client::URLSearchParams(@)", header: "cheerp/clientlib.h".}

proc constructURLSearchParams*(init: String): URLSearchParams {.constructor,
    importcpp: "client::URLSearchParams(@)", header: "cheerp/clientlib.h".}

proc constructURLSearchParams*(init: ptr URLSearchParams): URLSearchParams {.
    constructor, importcpp: "client::URLSearchParams(@)",
    header: "cheerp/clientlib.h".}

proc get_capabilities*(this: var VRDisplay): ptr VRDisplayCapabilities {.
    importcpp: "get_capabilities", header: "cheerp/clientlib.h".}

proc get_depthFar*(this: var VRDisplay): cdouble {.importcpp: "get_depthFar",
    header: "cheerp/clientlib.h".}

proc set_depthFar*(this: var VRDisplay; a2: cdouble) {.
    importcpp: "set_depthFar", header: "cheerp/clientlib.h".}

proc get_depthNear*(this: var VRDisplay): cdouble {.importcpp: "get_depthNear",
    header: "cheerp/clientlib.h".}

proc set_depthNear*(this: var VRDisplay; a2: cdouble) {.
    importcpp: "set_depthNear", header: "cheerp/clientlib.h".}

proc get_displayId*(this: var VRDisplay): cdouble {.importcpp: "get_displayId",
    header: "cheerp/clientlib.h".}

proc get_displayName*(this: var VRDisplay): ptr String {.
    importcpp: "get_displayName", header: "cheerp/clientlib.h".}

proc get_isConnected*(this: var VRDisplay): bool {.importcpp: "get_isConnected",
    header: "cheerp/clientlib.h".}

proc get_isPresenting*(this: var VRDisplay): bool {.
    importcpp: "get_isPresenting", header: "cheerp/clientlib.h".}

proc get_stageParameters*(this: var VRDisplay): ptr VRStageParameters {.
    importcpp: "get_stageParameters", header: "cheerp/clientlib.h".}

proc cancelAnimationFrame*(this: var VRDisplay; handle: cdouble) {.
    importcpp: "cancelAnimationFrame", header: "cheerp/clientlib.h".}

proc exitPresent*(this: var VRDisplay): ptr Promise {.importcpp: "exitPresent",
    header: "cheerp/clientlib.h".}

proc getEyeParameters*(this: var VRDisplay; whichEye: String): ptr VREyeParameters {.
    importcpp: "getEyeParameters", header: "cheerp/clientlib.h".}

proc getFrameData*(this: var VRDisplay; frameData: ptr VRFrameData): bool {.
    importcpp: "getFrameData", header: "cheerp/clientlib.h".}

proc getLayers*(this: var VRDisplay): ptr Array {.importcpp: "getLayers",
    header: "cheerp/clientlib.h".}

proc getPose*(this: var VRDisplay): ptr VRPose {.importcpp: "getPose",
    header: "cheerp/clientlib.h".}

proc requestAnimationFrame*(this: var VRDisplay; callback: ptr EventListener): cdouble {.
    importcpp: "requestAnimationFrame", header: "cheerp/clientlib.h".}

proc requestPresent*(this: var VRDisplay; layers: ptr Array): ptr Promise {.
    importcpp: "requestPresent", header: "cheerp/clientlib.h".}

proc resetPose*(this: var VRDisplay) {.importcpp: "resetPose",
                                       header: "cheerp/clientlib.h".}

proc submitFrame*(this: var VRDisplay) {.importcpp: "submitFrame",
    header: "cheerp/clientlib.h".}

proc submitFrame*(this: var VRDisplay; pose: ptr VRPose) {.
    importcpp: "submitFrame", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VRDisplay): ptr VRDisplay {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VRDisplay; a2: ptr VRDisplay) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVRDisplay*(): VRDisplay {.constructor,
                                        importcpp: "client::VRDisplay(@)",
                                        header: "cheerp/clientlib.h".}

proc get_canPresent*(this: var VRDisplayCapabilities): bool {.
    importcpp: "get_canPresent", header: "cheerp/clientlib.h".}

proc get_hasExternalDisplay*(this: var VRDisplayCapabilities): bool {.
    importcpp: "get_hasExternalDisplay", header: "cheerp/clientlib.h".}

proc get_hasOrientation*(this: var VRDisplayCapabilities): bool {.
    importcpp: "get_hasOrientation", header: "cheerp/clientlib.h".}

proc get_hasPosition*(this: var VRDisplayCapabilities): bool {.
    importcpp: "get_hasPosition", header: "cheerp/clientlib.h".}

proc get_maxLayers*(this: var VRDisplayCapabilities): cdouble {.
    importcpp: "get_maxLayers", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VRDisplayCapabilities): ptr VRDisplayCapabilities {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VRDisplayCapabilities;
                    a2: ptr VRDisplayCapabilities) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructVRDisplayCapabilities*(): VRDisplayCapabilities {.constructor,
    importcpp: "client::VRDisplayCapabilities(@)", header: "cheerp/clientlib.h".}

proc get_display*(this: var VRDisplayEvent): ptr VRDisplay {.
    importcpp: "get_display", header: "cheerp/clientlib.h".}

proc get_reason*(this: var VRDisplayEvent): ptr String {.
    importcpp: "get_reason", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VRDisplayEvent): ptr VRDisplayEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VRDisplayEvent; a2: ptr VRDisplayEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVRDisplayEvent*(`type`: String;
                              eventInitDict: ptr VRDisplayEventInit): VRDisplayEvent {.
    constructor, importcpp: "client::VRDisplayEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_fieldOfView*(this: var VREyeParameters): ptr VRFieldOfView {.
    importcpp: "get_fieldOfView", header: "cheerp/clientlib.h".}

proc get_offset*(this: var VREyeParameters): ptr Float32Array {.
    importcpp: "get_offset", header: "cheerp/clientlib.h".}

proc get_renderHeight*(this: var VREyeParameters): cdouble {.
    importcpp: "get_renderHeight", header: "cheerp/clientlib.h".}

proc get_renderWidth*(this: var VREyeParameters): cdouble {.
    importcpp: "get_renderWidth", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VREyeParameters): ptr VREyeParameters {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VREyeParameters; a2: ptr VREyeParameters) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVREyeParameters*(): VREyeParameters {.constructor,
    importcpp: "client::VREyeParameters(@)", header: "cheerp/clientlib.h".}

proc get_downDegrees*(this: var VRFieldOfView): cdouble {.
    importcpp: "get_downDegrees", header: "cheerp/clientlib.h".}

proc get_leftDegrees*(this: var VRFieldOfView): cdouble {.
    importcpp: "get_leftDegrees", header: "cheerp/clientlib.h".}

proc get_rightDegrees*(this: var VRFieldOfView): cdouble {.
    importcpp: "get_rightDegrees", header: "cheerp/clientlib.h".}

proc get_upDegrees*(this: var VRFieldOfView): cdouble {.
    importcpp: "get_upDegrees", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VRFieldOfView): ptr VRFieldOfView {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VRFieldOfView; a2: ptr VRFieldOfView) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVRFieldOfView*(): VRFieldOfView {.constructor,
    importcpp: "client::VRFieldOfView(@)", header: "cheerp/clientlib.h".}

proc get_leftProjectionMatrix*(this: var VRFrameData): ptr Float32Array {.
    importcpp: "get_leftProjectionMatrix", header: "cheerp/clientlib.h".}

proc get_leftViewMatrix*(this: var VRFrameData): ptr Float32Array {.
    importcpp: "get_leftViewMatrix", header: "cheerp/clientlib.h".}

proc get_pose*(this: var VRFrameData): ptr VRPose {.importcpp: "get_pose",
    header: "cheerp/clientlib.h".}

proc get_rightProjectionMatrix*(this: var VRFrameData): ptr Float32Array {.
    importcpp: "get_rightProjectionMatrix", header: "cheerp/clientlib.h".}

proc get_rightViewMatrix*(this: var VRFrameData): ptr Float32Array {.
    importcpp: "get_rightViewMatrix", header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var VRFrameData): cdouble {.
    importcpp: "get_timestamp", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VRFrameData): ptr VRFrameData {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VRFrameData; a2: ptr VRFrameData) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVRFrameData*(): VRFrameData {.constructor,
    importcpp: "client::VRFrameData(@)", header: "cheerp/clientlib.h".}

proc get_angularAcceleration*(this: var VRPose): ptr Float32Array {.
    importcpp: "get_angularAcceleration", header: "cheerp/clientlib.h".}

proc get_angularVelocity*(this: var VRPose): ptr Float32Array {.
    importcpp: "get_angularVelocity", header: "cheerp/clientlib.h".}

proc get_linearAcceleration*(this: var VRPose): ptr Float32Array {.
    importcpp: "get_linearAcceleration", header: "cheerp/clientlib.h".}

proc get_linearVelocity*(this: var VRPose): ptr Float32Array {.
    importcpp: "get_linearVelocity", header: "cheerp/clientlib.h".}

proc get_orientation*(this: var VRPose): ptr Float32Array {.
    importcpp: "get_orientation", header: "cheerp/clientlib.h".}

proc get_position*(this: var VRPose): ptr Float32Array {.
    importcpp: "get_position", header: "cheerp/clientlib.h".}

proc get_timestamp*(this: var VRPose): cdouble {.importcpp: "get_timestamp",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VRPose): ptr VRPose {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VRPose; a2: ptr VRPose) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVRPose*(): VRPose {.constructor, importcpp: "client::VRPose(@)",
                                  header: "cheerp/clientlib.h".}

proc get_badInput*(this: var ValidityState): bool {.importcpp: "get_badInput",
    header: "cheerp/clientlib.h".}

proc get_customError*(this: var ValidityState): bool {.
    importcpp: "get_customError", header: "cheerp/clientlib.h".}

proc get_patternMismatch*(this: var ValidityState): bool {.
    importcpp: "get_patternMismatch", header: "cheerp/clientlib.h".}

proc get_rangeOverflow*(this: var ValidityState): bool {.
    importcpp: "get_rangeOverflow", header: "cheerp/clientlib.h".}

proc get_rangeUnderflow*(this: var ValidityState): bool {.
    importcpp: "get_rangeUnderflow", header: "cheerp/clientlib.h".}

proc get_stepMismatch*(this: var ValidityState): bool {.
    importcpp: "get_stepMismatch", header: "cheerp/clientlib.h".}

proc get_tooLong*(this: var ValidityState): bool {.importcpp: "get_tooLong",
    header: "cheerp/clientlib.h".}

proc get_tooShort*(this: var ValidityState): bool {.importcpp: "get_tooShort",
    header: "cheerp/clientlib.h".}

proc get_typeMismatch*(this: var ValidityState): bool {.
    importcpp: "get_typeMismatch", header: "cheerp/clientlib.h".}

proc get_valid*(this: var ValidityState): bool {.importcpp: "get_valid",
    header: "cheerp/clientlib.h".}

proc get_valueMissing*(this: var ValidityState): bool {.
    importcpp: "get_valueMissing", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var ValidityState): ptr ValidityState {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var ValidityState; a2: ptr ValidityState) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructValidityState*(): ValidityState {.constructor,
    importcpp: "client::ValidityState(@)", header: "cheerp/clientlib.h".}

proc get_corruptedVideoFrames*(this: var VideoPlaybackQuality): cdouble {.
    importcpp: "get_corruptedVideoFrames", header: "cheerp/clientlib.h".}

proc get_creationTime*(this: var VideoPlaybackQuality): cdouble {.
    importcpp: "get_creationTime", header: "cheerp/clientlib.h".}

proc get_droppedVideoFrames*(this: var VideoPlaybackQuality): cdouble {.
    importcpp: "get_droppedVideoFrames", header: "cheerp/clientlib.h".}

proc get_totalFrameDelay*(this: var VideoPlaybackQuality): cdouble {.
    importcpp: "get_totalFrameDelay", header: "cheerp/clientlib.h".}

proc get_totalVideoFrames*(this: var VideoPlaybackQuality): cdouble {.
    importcpp: "get_totalVideoFrames", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VideoPlaybackQuality): ptr VideoPlaybackQuality {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VideoPlaybackQuality; a2: ptr VideoPlaybackQuality) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVideoPlaybackQuality*(): VideoPlaybackQuality {.constructor,
    importcpp: "client::VideoPlaybackQuality(@)", header: "cheerp/clientlib.h".}

proc get_id*(this: var VideoTrack): ptr String {.importcpp: "get_id",
    header: "cheerp/clientlib.h".}

proc get_kind*(this: var VideoTrack): ptr String {.importcpp: "get_kind",
    header: "cheerp/clientlib.h".}

proc set_kind*(this: var VideoTrack; a2: String) {.importcpp: "set_kind",
    header: "cheerp/clientlib.h".}

proc get_label*(this: var VideoTrack): ptr String {.importcpp: "get_label",
    header: "cheerp/clientlib.h".}

proc get_language*(this: var VideoTrack): ptr String {.
    importcpp: "get_language", header: "cheerp/clientlib.h".}

proc set_language*(this: var VideoTrack; a2: String) {.
    importcpp: "set_language", header: "cheerp/clientlib.h".}

proc get_selected*(this: var VideoTrack): bool {.importcpp: "get_selected",
    header: "cheerp/clientlib.h".}

proc set_selected*(this: var VideoTrack; a2: bool) {.importcpp: "set_selected",
    header: "cheerp/clientlib.h".}

proc get_sourceBuffer*(this: var VideoTrack): ptr SourceBuffer {.
    importcpp: "get_sourceBuffer", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VideoTrack): ptr VideoTrack {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VideoTrack; a2: ptr VideoTrack) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVideoTrack*(): VideoTrack {.constructor,
    importcpp: "client::VideoTrack(@)", header: "cheerp/clientlib.h".}

proc get_addtrack*(this: var VideoTrackListEventMap): ptr TrackEvent {.
    importcpp: "get_addtrack", header: "cheerp/clientlib.h".}

proc set_addtrack*(this: var VideoTrackListEventMap; a2: ptr TrackEvent) {.
    importcpp: "set_addtrack", header: "cheerp/clientlib.h".}

proc get_change*(this: var VideoTrackListEventMap): ptr Event {.
    importcpp: "get_change", header: "cheerp/clientlib.h".}

proc set_change*(this: var VideoTrackListEventMap; a2: ptr Event) {.
    importcpp: "set_change", header: "cheerp/clientlib.h".}

proc get_removetrack*(this: var VideoTrackListEventMap): ptr TrackEvent {.
    importcpp: "get_removetrack", header: "cheerp/clientlib.h".}

proc set_removetrack*(this: var VideoTrackListEventMap; a2: ptr TrackEvent) {.
    importcpp: "set_removetrack", header: "cheerp/clientlib.h".}

proc get_length*(this: var VideoTrackList): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_onaddtrack*(this: var VideoTrackList): ptr EventListener {.
    importcpp: "get_onaddtrack", header: "cheerp/clientlib.h".}

proc set_onaddtrack*(this: var VideoTrackList; a2: ptr EventListener) {.
    importcpp: "set_onaddtrack", header: "cheerp/clientlib.h".}

proc get_onchange*(this: var VideoTrackList): ptr EventListener {.
    importcpp: "get_onchange", header: "cheerp/clientlib.h".}

proc set_onchange*(this: var VideoTrackList; a2: ptr EventListener) {.
    importcpp: "set_onchange", header: "cheerp/clientlib.h".}

proc get_onremovetrack*(this: var VideoTrackList): ptr EventListener {.
    importcpp: "get_onremovetrack", header: "cheerp/clientlib.h".}

proc set_onremovetrack*(this: var VideoTrackList; a2: ptr EventListener) {.
    importcpp: "set_onremovetrack", header: "cheerp/clientlib.h".}

proc get_selectedIndex*(this: var VideoTrackList): cdouble {.
    importcpp: "get_selectedIndex", header: "cheerp/clientlib.h".}

proc getTrackById*(this: var VideoTrackList; id: String): ptr VideoTrack {.
    importcpp: "getTrackById", header: "cheerp/clientlib.h".}

proc item*(this: var VideoTrackList; index: cdouble): ptr VideoTrack {.
    importcpp: "item", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var VideoTrackList; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var VideoTrackList; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var VideoTrackList; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var VideoTrackList; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var VideoTrackList; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var VideoTrackList; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var VideoTrackList; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var VideoTrackList; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var VideoTrackList; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var VideoTrackList; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc `[]`*(this: var VideoTrackList; index: cint): ptr VideoTrack {.
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc `[]`*(this: VideoTrackList; index: cint): ptr VideoTrack {.noSideEffect,
    importcpp: "#[@]", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var VideoTrackList): ptr VideoTrackList {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var VideoTrackList; a2: ptr VideoTrackList) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructVideoTrackList*(): VideoTrackList {.constructor,
    importcpp: "client::VideoTrackList(@)", header: "cheerp/clientlib.h".}

proc get_curve*(this: var WaveShaperNode): ptr Float32Array {.
    importcpp: "get_curve", header: "cheerp/clientlib.h".}

proc set_curve*(this: var WaveShaperNode; a2: ptr Float32Array) {.
    importcpp: "set_curve", header: "cheerp/clientlib.h".}

proc get_oversample*(this: var WaveShaperNode): ptr String {.
    importcpp: "get_oversample", header: "cheerp/clientlib.h".}

proc set_oversample*(this: var WaveShaperNode; a2: String) {.
    importcpp: "set_oversample", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WaveShaperNode): ptr WaveShaperNode {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WaveShaperNode; a2: ptr WaveShaperNode) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWaveShaperNode*(): WaveShaperNode {.constructor,
    importcpp: "client::WaveShaperNode(@)", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Int8Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Int8Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Int16Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Int16Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Int32Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Int32Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint8Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint8Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint16Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint16Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint32Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint32Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint8ClampedArray): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Uint8ClampedArray;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Float32Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Float32Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Float64Array): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr Float64Array;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication; assertionChallenge: ptr DataView): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr DataView;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr ArrayBuffer): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc getAssertion*(this: var WebAuthentication;
                   assertionChallenge: ptr ArrayBuffer;
                   options: ptr AssertionOptions): ptr Promise {.
    importcpp: "getAssertion", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Int8Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Int8Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Int16Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Int16Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Int32Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Int32Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint8Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint8Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint16Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint16Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint32Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint32Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint8ClampedArray): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Uint8ClampedArray;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Float32Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Float32Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Float64Array): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr Float64Array;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr DataView): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr DataView;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr ArrayBuffer): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc makeCredential*(this: var WebAuthentication;
                     accountInformation: ptr Account;
                     cryptoParameters: ptr Array;
                     attestationChallenge: ptr ArrayBuffer;
                     options: ptr ScopedCredentialOptions): ptr Promise {.
    importcpp: "makeCredential", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebAuthentication): ptr WebAuthentication {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebAuthentication; a2: ptr WebAuthentication) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebAuthentication*(): WebAuthentication {.constructor,
    importcpp: "client::WebAuthentication(@)", header: "cheerp/clientlib.h".}

proc get_authenticatorData*(this: var WebAuthnAssertion): ptr ArrayBuffer {.
    importcpp: "get_authenticatorData", header: "cheerp/clientlib.h".}

proc get_clientData*(this: var WebAuthnAssertion): ptr ArrayBuffer {.
    importcpp: "get_clientData", header: "cheerp/clientlib.h".}

proc get_credential*(this: var WebAuthnAssertion): ptr ScopedCredential {.
    importcpp: "get_credential", header: "cheerp/clientlib.h".}

proc get_signature*(this: var WebAuthnAssertion): ptr ArrayBuffer {.
    importcpp: "get_signature", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebAuthnAssertion): ptr WebAuthnAssertion {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebAuthnAssertion; a2: ptr WebAuthnAssertion) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebAuthnAssertion*(): WebAuthnAssertion {.constructor,
    importcpp: "client::WebAuthnAssertion(@)", header: "cheerp/clientlib.h".}

proc get_a*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_a",
    header: "cheerp/clientlib.h".}

proc set_a*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_a",
    header: "cheerp/clientlib.h".}

proc get_b*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_b",
    header: "cheerp/clientlib.h".}

proc set_b*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_b",
    header: "cheerp/clientlib.h".}

proc get_c*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_c",
    header: "cheerp/clientlib.h".}

proc set_c*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_c",
    header: "cheerp/clientlib.h".}

proc get_d*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_d",
    header: "cheerp/clientlib.h".}

proc set_d*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_d",
    header: "cheerp/clientlib.h".}

proc get_e*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_e",
    header: "cheerp/clientlib.h".}

proc set_e*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_e",
    header: "cheerp/clientlib.h".}

proc get_f*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_f",
    header: "cheerp/clientlib.h".}

proc set_f*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_f",
    header: "cheerp/clientlib.h".}

proc get_m11*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m11",
    header: "cheerp/clientlib.h".}

proc set_m11*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m11",
    header: "cheerp/clientlib.h".}

proc get_m12*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m12",
    header: "cheerp/clientlib.h".}

proc set_m12*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m12",
    header: "cheerp/clientlib.h".}

proc get_m13*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m13",
    header: "cheerp/clientlib.h".}

proc set_m13*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m13",
    header: "cheerp/clientlib.h".}

proc get_m14*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m14",
    header: "cheerp/clientlib.h".}

proc set_m14*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m14",
    header: "cheerp/clientlib.h".}

proc get_m21*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m21",
    header: "cheerp/clientlib.h".}

proc set_m21*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m21",
    header: "cheerp/clientlib.h".}

proc get_m22*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m22",
    header: "cheerp/clientlib.h".}

proc set_m22*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m22",
    header: "cheerp/clientlib.h".}

proc get_m23*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m23",
    header: "cheerp/clientlib.h".}

proc set_m23*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m23",
    header: "cheerp/clientlib.h".}

proc get_m24*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m24",
    header: "cheerp/clientlib.h".}

proc set_m24*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m24",
    header: "cheerp/clientlib.h".}

proc get_m31*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m31",
    header: "cheerp/clientlib.h".}

proc set_m31*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m31",
    header: "cheerp/clientlib.h".}

proc get_m32*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m32",
    header: "cheerp/clientlib.h".}

proc set_m32*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m32",
    header: "cheerp/clientlib.h".}

proc get_m33*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m33",
    header: "cheerp/clientlib.h".}

proc set_m33*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m33",
    header: "cheerp/clientlib.h".}

proc get_m34*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m34",
    header: "cheerp/clientlib.h".}

proc set_m34*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m34",
    header: "cheerp/clientlib.h".}

proc get_m41*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m41",
    header: "cheerp/clientlib.h".}

proc set_m41*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m41",
    header: "cheerp/clientlib.h".}

proc get_m42*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m42",
    header: "cheerp/clientlib.h".}

proc set_m42*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m42",
    header: "cheerp/clientlib.h".}

proc get_m43*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m43",
    header: "cheerp/clientlib.h".}

proc set_m43*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m43",
    header: "cheerp/clientlib.h".}

proc get_m44*(this: var WebKitCSSMatrix): cdouble {.importcpp: "get_m44",
    header: "cheerp/clientlib.h".}

proc set_m44*(this: var WebKitCSSMatrix; a2: cdouble) {.importcpp: "set_m44",
    header: "cheerp/clientlib.h".}

proc inverse*(this: var WebKitCSSMatrix): ptr WebKitCSSMatrix {.
    importcpp: "inverse", header: "cheerp/clientlib.h".}

proc multiply*(this: var WebKitCSSMatrix; secondMatrix: ptr WebKitCSSMatrix): ptr WebKitCSSMatrix {.
    importcpp: "multiply", header: "cheerp/clientlib.h".}

proc rotate*(this: var WebKitCSSMatrix; angleX: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "rotate", header: "cheerp/clientlib.h".}

proc rotate*(this: var WebKitCSSMatrix; angleX: cdouble; angleY: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "rotate", header: "cheerp/clientlib.h".}

proc rotate*(this: var WebKitCSSMatrix; angleX: cdouble; angleY: cdouble;
             angleZ: cdouble): ptr WebKitCSSMatrix {.importcpp: "rotate",
    header: "cheerp/clientlib.h".}

proc rotateAxisAngle*(this: var WebKitCSSMatrix; x: cdouble; y: cdouble;
                      z: cdouble; angle: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "rotateAxisAngle", header: "cheerp/clientlib.h".}

proc scale*(this: var WebKitCSSMatrix; scaleX: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "scale", header: "cheerp/clientlib.h".}

proc scale*(this: var WebKitCSSMatrix; scaleX: cdouble; scaleY: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "scale", header: "cheerp/clientlib.h".}

proc scale*(this: var WebKitCSSMatrix; scaleX: cdouble; scaleY: cdouble;
            scaleZ: cdouble): ptr WebKitCSSMatrix {.importcpp: "scale",
    header: "cheerp/clientlib.h".}

proc setMatrixValue*(this: var WebKitCSSMatrix; value: String) {.
    importcpp: "setMatrixValue", header: "cheerp/clientlib.h".}

proc skewX*(this: var WebKitCSSMatrix; angle: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "skewX", header: "cheerp/clientlib.h".}

proc skewY*(this: var WebKitCSSMatrix; angle: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "skewY", header: "cheerp/clientlib.h".}

proc toString*(this: var WebKitCSSMatrix): ptr String {.importcpp: "toString",
    header: "cheerp/clientlib.h".}

proc translate*(this: var WebKitCSSMatrix; x: cdouble; y: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "translate", header: "cheerp/clientlib.h".}

proc translate*(this: var WebKitCSSMatrix; x: cdouble; y: cdouble; z: cdouble): ptr WebKitCSSMatrix {.
    importcpp: "translate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitCSSMatrix): ptr WebKitCSSMatrix {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitCSSMatrix; a2: ptr WebKitCSSMatrix) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebKitCSSMatrix*(): WebKitCSSMatrix {.constructor,
    importcpp: "client::WebKitCSSMatrix(@)", header: "cheerp/clientlib.h".}

proc constructWebKitCSSMatrix*(text: String): WebKitCSSMatrix {.constructor,
    importcpp: "client::WebKitCSSMatrix(@)", header: "cheerp/clientlib.h".}

proc get_filesystem*(this: var WebKitEntry): ptr WebKitFileSystem {.
    importcpp: "get_filesystem", header: "cheerp/clientlib.h".}

proc get_fullPath*(this: var WebKitEntry): ptr String {.
    importcpp: "get_fullPath", header: "cheerp/clientlib.h".}

proc get_isDirectory*(this: var WebKitEntry): bool {.
    importcpp: "get_isDirectory", header: "cheerp/clientlib.h".}

proc get_isFile*(this: var WebKitEntry): bool {.importcpp: "get_isFile",
    header: "cheerp/clientlib.h".}

proc get_name*(this: var WebKitEntry): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitEntry): ptr WebKitEntry {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitEntry; a2: ptr WebKitEntry) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebKitEntry*(): WebKitEntry {.constructor,
    importcpp: "client::WebKitEntry(@)", header: "cheerp/clientlib.h".}

proc createReader*(this: var WebKitDirectoryEntry): ptr WebKitDirectoryReader {.
    importcpp: "createReader", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitDirectoryEntry): ptr WebKitDirectoryEntry {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitDirectoryEntry; a2: ptr WebKitDirectoryEntry) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebKitDirectoryEntry*(): WebKitDirectoryEntry {.constructor,
    importcpp: "client::WebKitDirectoryEntry(@)", header: "cheerp/clientlib.h".}

proc readEntries*(this: var WebKitDirectoryReader;
                  successCallback: ptr EventListener) {.
    importcpp: "readEntries", header: "cheerp/clientlib.h".}

proc readEntries*(this: var WebKitDirectoryReader;
                  successCallback: ptr EventListener;
                  errorCallback: ptr EventListener) {.importcpp: "readEntries",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitDirectoryReader): ptr WebKitDirectoryReader {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitDirectoryReader;
                    a2: ptr WebKitDirectoryReader) {.importcpp: "set_prototype",
    header: "cheerp/clientlib.h".}

proc constructWebKitDirectoryReader*(): WebKitDirectoryReader {.constructor,
    importcpp: "client::WebKitDirectoryReader(@)", header: "cheerp/clientlib.h".}

proc file*(this: var WebKitFileEntry; successCallback: ptr EventListener) {.
    importcpp: "file", header: "cheerp/clientlib.h".}

proc file*(this: var WebKitFileEntry; successCallback: ptr EventListener;
           errorCallback: ptr EventListener) {.importcpp: "file",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitFileEntry): ptr WebKitFileEntry {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitFileEntry; a2: ptr WebKitFileEntry) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebKitFileEntry*(): WebKitFileEntry {.constructor,
    importcpp: "client::WebKitFileEntry(@)", header: "cheerp/clientlib.h".}

proc get_name*(this: var WebKitFileSystem): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc get_root*(this: var WebKitFileSystem): ptr WebKitDirectoryEntry {.
    importcpp: "get_root", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitFileSystem): ptr WebKitFileSystem {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitFileSystem; a2: ptr WebKitFileSystem) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebKitFileSystem*(): WebKitFileSystem {.constructor,
    importcpp: "client::WebKitFileSystem(@)", header: "cheerp/clientlib.h".}

proc get_x*(this: var WebKitPoint): cdouble {.importcpp: "get_x",
    header: "cheerp/clientlib.h".}

proc set_x*(this: var WebKitPoint; a2: cdouble) {.importcpp: "set_x",
    header: "cheerp/clientlib.h".}

proc get_y*(this: var WebKitPoint): cdouble {.importcpp: "get_y",
    header: "cheerp/clientlib.h".}

proc set_y*(this: var WebKitPoint; a2: cdouble) {.importcpp: "set_y",
    header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebKitPoint): ptr WebKitPoint {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebKitPoint; a2: ptr WebKitPoint) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebKitPoint*(): WebKitPoint {.constructor,
    importcpp: "client::WebKitPoint(@)", header: "cheerp/clientlib.h".}

proc constructWebKitPoint*(x: cdouble): WebKitPoint {.constructor,
    importcpp: "client::WebKitPoint(@)", header: "cheerp/clientlib.h".}

proc constructWebKitPoint*(x: cdouble; y: cdouble): WebKitPoint {.constructor,
    importcpp: "client::WebKitPoint(@)", header: "cheerp/clientlib.h".}

proc get_close*(this: var WebSocketEventMap): ptr CloseEvent {.
    importcpp: "get_close", header: "cheerp/clientlib.h".}

proc set_close*(this: var WebSocketEventMap; a2: ptr CloseEvent) {.
    importcpp: "set_close", header: "cheerp/clientlib.h".}

proc get_error*(this: var WebSocketEventMap): ptr Event {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var WebSocketEventMap; a2: ptr Event) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_message*(this: var WebSocketEventMap): ptr MessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var WebSocketEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_open*(this: var WebSocketEventMap): ptr Event {.importcpp: "get_open",
    header: "cheerp/clientlib.h".}

proc set_open*(this: var WebSocketEventMap; a2: ptr Event) {.
    importcpp: "set_open", header: "cheerp/clientlib.h".}

proc get_binaryType*(this: var WebSocket): ptr String {.
    importcpp: "get_binaryType", header: "cheerp/clientlib.h".}

proc set_binaryType*(this: var WebSocket; a2: String) {.
    importcpp: "set_binaryType", header: "cheerp/clientlib.h".}

proc get_bufferedAmount*(this: var WebSocket): cdouble {.
    importcpp: "get_bufferedAmount", header: "cheerp/clientlib.h".}

proc get_extensions*(this: var WebSocket): ptr String {.
    importcpp: "get_extensions", header: "cheerp/clientlib.h".}

proc get_onclose*(this: var WebSocket): ptr EventListener {.
    importcpp: "get_onclose", header: "cheerp/clientlib.h".}

proc set_onclose*(this: var WebSocket; a2: ptr EventListener) {.
    importcpp: "set_onclose", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var WebSocket): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var WebSocket; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var WebSocket): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var WebSocket; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc get_onopen*(this: var WebSocket): ptr EventListener {.
    importcpp: "get_onopen", header: "cheerp/clientlib.h".}

proc set_onopen*(this: var WebSocket; a2: ptr EventListener) {.
    importcpp: "set_onopen", header: "cheerp/clientlib.h".}

proc get_protocol*(this: var WebSocket): ptr String {.importcpp: "get_protocol",
    header: "cheerp/clientlib.h".}

proc get_readyState*(this: var WebSocket): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_url*(this: var WebSocket): ptr String {.importcpp: "get_url",
    header: "cheerp/clientlib.h".}

proc close*(this: var WebSocket) {.importcpp: "close",
                                   header: "cheerp/clientlib.h".}

proc close*(this: var WebSocket; code: cdouble) {.importcpp: "close",
    header: "cheerp/clientlib.h".}

proc close*(this: var WebSocket; code: cdouble; reason: String) {.
    importcpp: "close", header: "cheerp/clientlib.h".}

proc send*(this: var WebSocket; data: String) {.importcpp: "send",
    header: "cheerp/clientlib.h".}

proc send*[ArrayBufferLike](this: var WebSocket; data: ptr ArrayBufferLike) {.
    importcpp: "send", header: "cheerp/clientlib.h".}

proc send*(this: var WebSocket; data: ptr Blob) {.importcpp: "send",
    header: "cheerp/clientlib.h".}

proc send*(this: var WebSocket; data: ptr ArrayBufferView) {.importcpp: "send",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WebSocket; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WebSocket; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WebSocket; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WebSocket; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var WebSocket; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WebSocket; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WebSocket; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WebSocket; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WebSocket; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var WebSocket; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WebSocket): ptr WebSocket {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WebSocket; a2: ptr WebSocket) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWebSocket*(url: String): WebSocket {.constructor,
    importcpp: "client::WebSocket(@)", header: "cheerp/clientlib.h".}

proc constructWebSocket*(url: String; protocols: String): WebSocket {.
    constructor, importcpp: "client::WebSocket(@)", header: "cheerp/clientlib.h".}

proc constructWebSocket*(url: String; protocols: ptr Array): WebSocket {.
    constructor, importcpp: "client::WebSocket(@)", header: "cheerp/clientlib.h".}

proc get_CLOSED*(this: var WebSocket): cdouble {.importcpp: "get_CLOSED",
    header: "cheerp/clientlib.h".}

proc get_CLOSING*(this: var WebSocket): cdouble {.importcpp: "get_CLOSING",
    header: "cheerp/clientlib.h".}

proc get_CONNECTING*(this: var WebSocket): cdouble {.
    importcpp: "get_CONNECTING", header: "cheerp/clientlib.h".}

proc get_OPEN*(this: var WebSocket): cdouble {.importcpp: "get_OPEN",
    header: "cheerp/clientlib.h".}

proc get_deltaMode*(this: var WheelEvent): cdouble {.importcpp: "get_deltaMode",
    header: "cheerp/clientlib.h".}

proc get_deltaX*(this: var WheelEvent): cdouble {.importcpp: "get_deltaX",
    header: "cheerp/clientlib.h".}

proc get_deltaY*(this: var WheelEvent): cdouble {.importcpp: "get_deltaY",
    header: "cheerp/clientlib.h".}

proc get_deltaZ*(this: var WheelEvent): cdouble {.importcpp: "get_deltaZ",
    header: "cheerp/clientlib.h".}

proc get_wheelDelta*(this: var WheelEvent): cdouble {.
    importcpp: "get_wheelDelta", header: "cheerp/clientlib.h".}

proc get_wheelDeltaX*(this: var WheelEvent): cdouble {.
    importcpp: "get_wheelDeltaX", header: "cheerp/clientlib.h".}

proc get_wheelDeltaY*(this: var WheelEvent): cdouble {.
    importcpp: "get_wheelDeltaY", header: "cheerp/clientlib.h".}

proc getCurrentPoint*(this: var WheelEvent; element: ptr Element) {.
    importcpp: "getCurrentPoint", header: "cheerp/clientlib.h".}

proc initWheelEvent*(this: var WheelEvent; typeArg: String; canBubbleArg: bool;
                     cancelableArg: bool; viewArg: ptr Window;
                     detailArg: cdouble; screenXArg: cdouble;
                     screenYArg: cdouble; clientXArg: cdouble;
                     clientYArg: cdouble; buttonArg: cdouble;
                     relatedTargetArg: ptr EventTarget;
                     modifiersListArg: String; deltaXArg: cdouble;
                     deltaYArg: cdouble; deltaZArg: cdouble; deltaMode: cdouble) {.
    importcpp: "initWheelEvent", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WheelEvent): ptr WheelEvent {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WheelEvent; a2: ptr WheelEvent) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWheelEvent*(typeArg: String): WheelEvent {.constructor,
    importcpp: "client::WheelEvent(@)", header: "cheerp/clientlib.h".}

proc constructWheelEvent*(typeArg: String; eventInitDict: ptr WheelEventInit): WheelEvent {.
    constructor, importcpp: "client::WheelEvent(@)",
    header: "cheerp/clientlib.h".}

proc get_DOM_DELTA_LINE*(this: var WheelEvent): cdouble {.
    importcpp: "get_DOM_DELTA_LINE", header: "cheerp/clientlib.h".}

proc get_DOM_DELTA_PAGE*(this: var WheelEvent): cdouble {.
    importcpp: "get_DOM_DELTA_PAGE", header: "cheerp/clientlib.h".}

proc get_DOM_DELTA_PIXEL*(this: var WheelEvent): cdouble {.
    importcpp: "get_DOM_DELTA_PIXEL", header: "cheerp/clientlib.h".}

proc get_abort*(this: var WindowEventMap): ptr UIEvent {.importcpp: "get_abort",
    header: "cheerp/clientlib.h".}

proc set_abort*(this: var WindowEventMap; a2: ptr UIEvent) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_afterprint*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_afterprint", header: "cheerp/clientlib.h".}

proc set_afterprint*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_afterprint", header: "cheerp/clientlib.h".}

proc get_beforeprint*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_beforeprint", header: "cheerp/clientlib.h".}

proc set_beforeprint*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_beforeprint", header: "cheerp/clientlib.h".}

proc get_beforeunload*(this: var WindowEventMap): ptr BeforeUnloadEvent {.
    importcpp: "get_beforeunload", header: "cheerp/clientlib.h".}

proc set_beforeunload*(this: var WindowEventMap; a2: ptr BeforeUnloadEvent) {.
    importcpp: "set_beforeunload", header: "cheerp/clientlib.h".}

proc get_blur*(this: var WindowEventMap): ptr FocusEvent {.
    importcpp: "get_blur", header: "cheerp/clientlib.h".}

proc set_blur*(this: var WindowEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_blur", header: "cheerp/clientlib.h".}

proc get_canplay*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_canplay", header: "cheerp/clientlib.h".}

proc set_canplay*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_canplay", header: "cheerp/clientlib.h".}

proc get_canplaythrough*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_canplaythrough", header: "cheerp/clientlib.h".}

proc set_canplaythrough*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_canplaythrough", header: "cheerp/clientlib.h".}

proc get_change*(this: var WindowEventMap): ptr Event {.importcpp: "get_change",
    header: "cheerp/clientlib.h".}

proc set_change*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_change", header: "cheerp/clientlib.h".}

proc get_click*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_click", header: "cheerp/clientlib.h".}

proc set_click*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_click", header: "cheerp/clientlib.h".}

proc get_compassneedscalibration*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_compassneedscalibration", header: "cheerp/clientlib.h".}

proc set_compassneedscalibration*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_compassneedscalibration", header: "cheerp/clientlib.h".}

proc get_contextmenu*(this: var WindowEventMap): ptr PointerEvent {.
    importcpp: "get_contextmenu", header: "cheerp/clientlib.h".}

proc set_contextmenu*(this: var WindowEventMap; a2: ptr PointerEvent) {.
    importcpp: "set_contextmenu", header: "cheerp/clientlib.h".}

proc get_dblclick*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_dblclick", header: "cheerp/clientlib.h".}

proc set_dblclick*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_dblclick", header: "cheerp/clientlib.h".}

proc get_devicelight*(this: var WindowEventMap): ptr DeviceLightEvent {.
    importcpp: "get_devicelight", header: "cheerp/clientlib.h".}

proc set_devicelight*(this: var WindowEventMap; a2: ptr DeviceLightEvent) {.
    importcpp: "set_devicelight", header: "cheerp/clientlib.h".}

proc get_devicemotion*(this: var WindowEventMap): ptr DeviceMotionEvent {.
    importcpp: "get_devicemotion", header: "cheerp/clientlib.h".}

proc set_devicemotion*(this: var WindowEventMap; a2: ptr DeviceMotionEvent) {.
    importcpp: "set_devicemotion", header: "cheerp/clientlib.h".}

proc get_deviceorientation*(this: var WindowEventMap): ptr DeviceOrientationEvent {.
    importcpp: "get_deviceorientation", header: "cheerp/clientlib.h".}

proc set_deviceorientation*(this: var WindowEventMap;
                            a2: ptr DeviceOrientationEvent) {.
    importcpp: "set_deviceorientation", header: "cheerp/clientlib.h".}

proc get_drag*(this: var WindowEventMap): ptr DragEvent {.importcpp: "get_drag",
    header: "cheerp/clientlib.h".}

proc set_drag*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_drag", header: "cheerp/clientlib.h".}

proc get_dragend*(this: var WindowEventMap): ptr DragEvent {.
    importcpp: "get_dragend", header: "cheerp/clientlib.h".}

proc set_dragend*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragend", header: "cheerp/clientlib.h".}

proc get_dragenter*(this: var WindowEventMap): ptr DragEvent {.
    importcpp: "get_dragenter", header: "cheerp/clientlib.h".}

proc set_dragenter*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragenter", header: "cheerp/clientlib.h".}

proc get_dragleave*(this: var WindowEventMap): ptr DragEvent {.
    importcpp: "get_dragleave", header: "cheerp/clientlib.h".}

proc set_dragleave*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragleave", header: "cheerp/clientlib.h".}

proc get_dragover*(this: var WindowEventMap): ptr DragEvent {.
    importcpp: "get_dragover", header: "cheerp/clientlib.h".}

proc set_dragover*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragover", header: "cheerp/clientlib.h".}

proc get_dragstart*(this: var WindowEventMap): ptr DragEvent {.
    importcpp: "get_dragstart", header: "cheerp/clientlib.h".}

proc set_dragstart*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_dragstart", header: "cheerp/clientlib.h".}

proc get_drop*(this: var WindowEventMap): ptr DragEvent {.importcpp: "get_drop",
    header: "cheerp/clientlib.h".}

proc set_drop*(this: var WindowEventMap; a2: ptr DragEvent) {.
    importcpp: "set_drop", header: "cheerp/clientlib.h".}

proc get_durationchange*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_durationchange", header: "cheerp/clientlib.h".}

proc set_durationchange*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_durationchange", header: "cheerp/clientlib.h".}

proc get_emptied*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_emptied", header: "cheerp/clientlib.h".}

proc set_emptied*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_emptied", header: "cheerp/clientlib.h".}

proc get_ended*(this: var WindowEventMap): ptr Event {.importcpp: "get_ended",
    header: "cheerp/clientlib.h".}

proc set_ended*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_ended", header: "cheerp/clientlib.h".}

proc get_error*(this: var WindowEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var WindowEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_focus*(this: var WindowEventMap): ptr FocusEvent {.
    importcpp: "get_focus", header: "cheerp/clientlib.h".}

proc set_focus*(this: var WindowEventMap; a2: ptr FocusEvent) {.
    importcpp: "set_focus", header: "cheerp/clientlib.h".}

proc get_hashchange*(this: var WindowEventMap): ptr HashChangeEvent {.
    importcpp: "get_hashchange", header: "cheerp/clientlib.h".}

proc set_hashchange*(this: var WindowEventMap; a2: ptr HashChangeEvent) {.
    importcpp: "set_hashchange", header: "cheerp/clientlib.h".}

proc get_input*(this: var WindowEventMap): ptr Event {.importcpp: "get_input",
    header: "cheerp/clientlib.h".}

proc set_input*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_input", header: "cheerp/clientlib.h".}

proc get_invalid*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_invalid", header: "cheerp/clientlib.h".}

proc set_invalid*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_invalid", header: "cheerp/clientlib.h".}

proc get_keydown*(this: var WindowEventMap): ptr KeyboardEvent {.
    importcpp: "get_keydown", header: "cheerp/clientlib.h".}

proc set_keydown*(this: var WindowEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keydown", header: "cheerp/clientlib.h".}

proc get_keypress*(this: var WindowEventMap): ptr KeyboardEvent {.
    importcpp: "get_keypress", header: "cheerp/clientlib.h".}

proc set_keypress*(this: var WindowEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keypress", header: "cheerp/clientlib.h".}

proc get_keyup*(this: var WindowEventMap): ptr KeyboardEvent {.
    importcpp: "get_keyup", header: "cheerp/clientlib.h".}

proc set_keyup*(this: var WindowEventMap; a2: ptr KeyboardEvent) {.
    importcpp: "set_keyup", header: "cheerp/clientlib.h".}

proc get_load*(this: var WindowEventMap): ptr Event {.importcpp: "get_load",
    header: "cheerp/clientlib.h".}

proc set_load*(this: var WindowEventMap; a2: ptr Event) {.importcpp: "set_load",
    header: "cheerp/clientlib.h".}

proc get_loadeddata*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_loadeddata", header: "cheerp/clientlib.h".}

proc set_loadeddata*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_loadeddata", header: "cheerp/clientlib.h".}

proc get_loadedmetadata*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_loadedmetadata", header: "cheerp/clientlib.h".}

proc set_loadedmetadata*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_loadedmetadata", header: "cheerp/clientlib.h".}

proc get_loadstart*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_loadstart", header: "cheerp/clientlib.h".}

proc set_loadstart*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_loadstart", header: "cheerp/clientlib.h".}

proc get_message*(this: var WindowEventMap): ptr MessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var WindowEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_mousedown*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mousedown", header: "cheerp/clientlib.h".}

proc set_mousedown*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousedown", header: "cheerp/clientlib.h".}

proc get_mouseenter*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mouseenter", header: "cheerp/clientlib.h".}

proc set_mouseenter*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseenter", header: "cheerp/clientlib.h".}

proc get_mouseleave*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mouseleave", header: "cheerp/clientlib.h".}

proc set_mouseleave*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseleave", header: "cheerp/clientlib.h".}

proc get_mousemove*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mousemove", header: "cheerp/clientlib.h".}

proc set_mousemove*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mousemove", header: "cheerp/clientlib.h".}

proc get_mouseout*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mouseout", header: "cheerp/clientlib.h".}

proc set_mouseout*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseout", header: "cheerp/clientlib.h".}

proc get_mouseover*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mouseover", header: "cheerp/clientlib.h".}

proc set_mouseover*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseover", header: "cheerp/clientlib.h".}

proc get_mouseup*(this: var WindowEventMap): ptr MouseEvent {.
    importcpp: "get_mouseup", header: "cheerp/clientlib.h".}

proc set_mouseup*(this: var WindowEventMap; a2: ptr MouseEvent) {.
    importcpp: "set_mouseup", header: "cheerp/clientlib.h".}

proc get_mousewheel*(this: var WindowEventMap): ptr WheelEvent {.
    importcpp: "get_mousewheel", header: "cheerp/clientlib.h".}

proc set_mousewheel*(this: var WindowEventMap; a2: ptr WheelEvent) {.
    importcpp: "set_mousewheel", header: "cheerp/clientlib.h".}

proc get_MSGestureChange*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSGestureChange", header: "cheerp/clientlib.h".}

proc set_MSGestureChange*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureChange", header: "cheerp/clientlib.h".}

proc get_MSGestureDoubleTap*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSGestureDoubleTap", header: "cheerp/clientlib.h".}

proc set_MSGestureDoubleTap*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureDoubleTap", header: "cheerp/clientlib.h".}

proc get_MSGestureEnd*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSGestureEnd", header: "cheerp/clientlib.h".}

proc set_MSGestureEnd*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureEnd", header: "cheerp/clientlib.h".}

proc get_MSGestureHold*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSGestureHold", header: "cheerp/clientlib.h".}

proc set_MSGestureHold*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureHold", header: "cheerp/clientlib.h".}

proc get_MSGestureStart*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSGestureStart", header: "cheerp/clientlib.h".}

proc set_MSGestureStart*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureStart", header: "cheerp/clientlib.h".}

proc get_MSGestureTap*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSGestureTap", header: "cheerp/clientlib.h".}

proc set_MSGestureTap*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSGestureTap", header: "cheerp/clientlib.h".}

proc get_MSInertiaStart*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSInertiaStart", header: "cheerp/clientlib.h".}

proc set_MSInertiaStart*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSInertiaStart", header: "cheerp/clientlib.h".}

proc get_MSPointerCancel*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerCancel", header: "cheerp/clientlib.h".}

proc set_MSPointerCancel*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerCancel", header: "cheerp/clientlib.h".}

proc get_MSPointerDown*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerDown", header: "cheerp/clientlib.h".}

proc set_MSPointerDown*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerDown", header: "cheerp/clientlib.h".}

proc get_MSPointerEnter*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerEnter", header: "cheerp/clientlib.h".}

proc set_MSPointerEnter*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerEnter", header: "cheerp/clientlib.h".}

proc get_MSPointerLeave*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerLeave", header: "cheerp/clientlib.h".}

proc set_MSPointerLeave*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerLeave", header: "cheerp/clientlib.h".}

proc get_MSPointerMove*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerMove", header: "cheerp/clientlib.h".}

proc set_MSPointerMove*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerMove", header: "cheerp/clientlib.h".}

proc get_MSPointerOut*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerOut", header: "cheerp/clientlib.h".}

proc set_MSPointerOut*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerOut", header: "cheerp/clientlib.h".}

proc get_MSPointerOver*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerOver", header: "cheerp/clientlib.h".}

proc set_MSPointerOver*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerOver", header: "cheerp/clientlib.h".}

proc get_MSPointerUp*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_MSPointerUp", header: "cheerp/clientlib.h".}

proc set_MSPointerUp*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_MSPointerUp", header: "cheerp/clientlib.h".}

proc get_offline*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_offline", header: "cheerp/clientlib.h".}

proc set_offline*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_offline", header: "cheerp/clientlib.h".}

proc get_online*(this: var WindowEventMap): ptr Event {.importcpp: "get_online",
    header: "cheerp/clientlib.h".}

proc set_online*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_online", header: "cheerp/clientlib.h".}

proc get_orientationchange*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_orientationchange", header: "cheerp/clientlib.h".}

proc set_orientationchange*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_orientationchange", header: "cheerp/clientlib.h".}

proc get_pagehide*(this: var WindowEventMap): ptr PageTransitionEvent {.
    importcpp: "get_pagehide", header: "cheerp/clientlib.h".}

proc set_pagehide*(this: var WindowEventMap; a2: ptr PageTransitionEvent) {.
    importcpp: "set_pagehide", header: "cheerp/clientlib.h".}

proc get_pageshow*(this: var WindowEventMap): ptr PageTransitionEvent {.
    importcpp: "get_pageshow", header: "cheerp/clientlib.h".}

proc set_pageshow*(this: var WindowEventMap; a2: ptr PageTransitionEvent) {.
    importcpp: "set_pageshow", header: "cheerp/clientlib.h".}

proc get_pause*(this: var WindowEventMap): ptr Event {.importcpp: "get_pause",
    header: "cheerp/clientlib.h".}

proc set_pause*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_pause", header: "cheerp/clientlib.h".}

proc get_play*(this: var WindowEventMap): ptr Event {.importcpp: "get_play",
    header: "cheerp/clientlib.h".}

proc set_play*(this: var WindowEventMap; a2: ptr Event) {.importcpp: "set_play",
    header: "cheerp/clientlib.h".}

proc get_playing*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_playing", header: "cheerp/clientlib.h".}

proc set_playing*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_playing", header: "cheerp/clientlib.h".}

proc get_popstate*(this: var WindowEventMap): ptr PopStateEvent {.
    importcpp: "get_popstate", header: "cheerp/clientlib.h".}

proc set_popstate*(this: var WindowEventMap; a2: ptr PopStateEvent) {.
    importcpp: "set_popstate", header: "cheerp/clientlib.h".}

proc get_progress*(this: var WindowEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var WindowEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_ratechange*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_ratechange", header: "cheerp/clientlib.h".}

proc set_ratechange*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_ratechange", header: "cheerp/clientlib.h".}

proc get_readystatechange*(this: var WindowEventMap): ptr ProgressEvent {.
    importcpp: "get_readystatechange", header: "cheerp/clientlib.h".}

proc set_readystatechange*(this: var WindowEventMap; a2: ptr ProgressEvent) {.
    importcpp: "set_readystatechange", header: "cheerp/clientlib.h".}

proc get_reset*(this: var WindowEventMap): ptr Event {.importcpp: "get_reset",
    header: "cheerp/clientlib.h".}

proc set_reset*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_reset", header: "cheerp/clientlib.h".}

proc get_resize*(this: var WindowEventMap): ptr UIEvent {.
    importcpp: "get_resize", header: "cheerp/clientlib.h".}

proc set_resize*(this: var WindowEventMap; a2: ptr UIEvent) {.
    importcpp: "set_resize", header: "cheerp/clientlib.h".}

proc get_scroll*(this: var WindowEventMap): ptr UIEvent {.
    importcpp: "get_scroll", header: "cheerp/clientlib.h".}

proc set_scroll*(this: var WindowEventMap; a2: ptr UIEvent) {.
    importcpp: "set_scroll", header: "cheerp/clientlib.h".}

proc get_seeked*(this: var WindowEventMap): ptr Event {.importcpp: "get_seeked",
    header: "cheerp/clientlib.h".}

proc set_seeked*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_seeked", header: "cheerp/clientlib.h".}

proc get_seeking*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_seeking", header: "cheerp/clientlib.h".}

proc set_seeking*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_seeking", header: "cheerp/clientlib.h".}

proc get_select*(this: var WindowEventMap): ptr UIEvent {.
    importcpp: "get_select", header: "cheerp/clientlib.h".}

proc set_select*(this: var WindowEventMap; a2: ptr UIEvent) {.
    importcpp: "set_select", header: "cheerp/clientlib.h".}

proc get_stalled*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_stalled", header: "cheerp/clientlib.h".}

proc set_stalled*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_stalled", header: "cheerp/clientlib.h".}

proc get_storage*(this: var WindowEventMap): ptr StorageEvent {.
    importcpp: "get_storage", header: "cheerp/clientlib.h".}

proc set_storage*(this: var WindowEventMap; a2: ptr StorageEvent) {.
    importcpp: "set_storage", header: "cheerp/clientlib.h".}

proc get_submit*(this: var WindowEventMap): ptr Event {.importcpp: "get_submit",
    header: "cheerp/clientlib.h".}

proc set_submit*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_submit", header: "cheerp/clientlib.h".}

proc get_suspend*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_suspend", header: "cheerp/clientlib.h".}

proc set_suspend*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_suspend", header: "cheerp/clientlib.h".}

proc get_timeupdate*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_timeupdate", header: "cheerp/clientlib.h".}

proc set_timeupdate*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_timeupdate", header: "cheerp/clientlib.h".}

proc get_touchcancel*(this: var WindowEventMap): ptr TouchEvent {.
    importcpp: "get_touchcancel", header: "cheerp/clientlib.h".}

proc set_touchcancel*(this: var WindowEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchcancel", header: "cheerp/clientlib.h".}

proc get_touchend*(this: var WindowEventMap): ptr TouchEvent {.
    importcpp: "get_touchend", header: "cheerp/clientlib.h".}

proc set_touchend*(this: var WindowEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchend", header: "cheerp/clientlib.h".}

proc get_touchmove*(this: var WindowEventMap): ptr TouchEvent {.
    importcpp: "get_touchmove", header: "cheerp/clientlib.h".}

proc set_touchmove*(this: var WindowEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchmove", header: "cheerp/clientlib.h".}

proc get_touchstart*(this: var WindowEventMap): ptr TouchEvent {.
    importcpp: "get_touchstart", header: "cheerp/clientlib.h".}

proc set_touchstart*(this: var WindowEventMap; a2: ptr TouchEvent) {.
    importcpp: "set_touchstart", header: "cheerp/clientlib.h".}

proc get_unload*(this: var WindowEventMap): ptr Event {.importcpp: "get_unload",
    header: "cheerp/clientlib.h".}

proc set_unload*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_unload", header: "cheerp/clientlib.h".}

proc get_volumechange*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_volumechange", header: "cheerp/clientlib.h".}

proc set_volumechange*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_volumechange", header: "cheerp/clientlib.h".}

proc get_vrdisplayactivate*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplayactivate", header: "cheerp/clientlib.h".}

proc set_vrdisplayactivate*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplayactivate", header: "cheerp/clientlib.h".}

proc get_vrdisplayblur*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplayblur", header: "cheerp/clientlib.h".}

proc set_vrdisplayblur*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplayblur", header: "cheerp/clientlib.h".}

proc get_vrdisplayconnect*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplayconnect", header: "cheerp/clientlib.h".}

proc set_vrdisplayconnect*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplayconnect", header: "cheerp/clientlib.h".}

proc get_vrdisplaydeactivate*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplaydeactivate", header: "cheerp/clientlib.h".}

proc set_vrdisplaydeactivate*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplaydeactivate", header: "cheerp/clientlib.h".}

proc get_vrdisplaydisconnect*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplaydisconnect", header: "cheerp/clientlib.h".}

proc set_vrdisplaydisconnect*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplaydisconnect", header: "cheerp/clientlib.h".}

proc get_vrdisplayfocus*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplayfocus", header: "cheerp/clientlib.h".}

proc set_vrdisplayfocus*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplayfocus", header: "cheerp/clientlib.h".}

proc get_vrdisplaypointerrestricted*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplaypointerrestricted", header: "cheerp/clientlib.h".}

proc set_vrdisplaypointerrestricted*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplaypointerrestricted", header: "cheerp/clientlib.h".}

proc get_vrdisplaypointerunrestricted*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplaypointerunrestricted", header: "cheerp/clientlib.h".}

proc set_vrdisplaypointerunrestricted*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplaypointerunrestricted", header: "cheerp/clientlib.h".}

proc get_vrdisplaypresentchange*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_vrdisplaypresentchange", header: "cheerp/clientlib.h".}

proc set_vrdisplaypresentchange*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_vrdisplaypresentchange", header: "cheerp/clientlib.h".}

proc get_waiting*(this: var WindowEventMap): ptr Event {.
    importcpp: "get_waiting", header: "cheerp/clientlib.h".}

proc set_waiting*(this: var WindowEventMap; a2: ptr Event) {.
    importcpp: "set_waiting", header: "cheerp/clientlib.h".}

proc clearImmediate*(this: var WindowTimersExtension; handle: cdouble) {.
    importcpp: "clearImmediate", header: "cheerp/clientlib.h".}

proc setImmediate*(this: var WindowTimersExtension; handler: ptr EventListener): cdouble {.
    importcpp: "setImmediate", header: "cheerp/clientlib.h".}

proc setImmediate*(this: var WindowTimersExtension; handler: ptr Object): cdouble {.
    importcpp: "setImmediate", header: "cheerp/clientlib.h".}

proc clearInterval*(this: var WindowTimers) {.importcpp: "clearInterval",
    header: "cheerp/clientlib.h".}

proc clearInterval*(this: var WindowTimers; handle: cdouble) {.
    importcpp: "clearInterval", header: "cheerp/clientlib.h".}

proc clearTimeout*(this: var WindowTimers) {.importcpp: "clearTimeout",
    header: "cheerp/clientlib.h".}

proc clearTimeout*(this: var WindowTimers; handle: cdouble) {.
    importcpp: "clearTimeout", header: "cheerp/clientlib.h".}

proc setInterval*(this: var WindowTimers; handler: ptr EventListener;
                  timeout: cdouble): cdouble {.importcpp: "setInterval",
    header: "cheerp/clientlib.h".}

proc setInterval*(this: var WindowTimers; handler: ptr Object): cdouble {.
    importcpp: "setInterval", header: "cheerp/clientlib.h".}

proc setInterval*(this: var WindowTimers; handler: ptr Object;
                  timeout: ptr Object): cdouble {.importcpp: "setInterval",
    header: "cheerp/clientlib.h".}

proc setTimeout*(this: var WindowTimers; handler: ptr EventListener;
                 timeout: cdouble): cdouble {.importcpp: "setTimeout",
    header: "cheerp/clientlib.h".}

proc setTimeout*(this: var WindowTimers; handler: ptr Object): cdouble {.
    importcpp: "setTimeout", header: "cheerp/clientlib.h".}

proc setTimeout*(this: var WindowTimers; handler: ptr Object;
                 timeout: ptr Object): cdouble {.importcpp: "setTimeout",
    header: "cheerp/clientlib.h".}

proc get_sessionStorage*(this: var WindowSessionStorage): ptr Storage {.
    importcpp: "get_sessionStorage", header: "cheerp/clientlib.h".}

proc get_localStorage*(this: var WindowLocalStorage): ptr Storage {.
    importcpp: "get_localStorage", header: "cheerp/clientlib.h".}

proc get_console*(this: var WindowConsole): ptr Console {.
    importcpp: "get_console", header: "cheerp/clientlib.h".}

proc atob*(this: var WindowBase64; encodedString: String): ptr String {.
    importcpp: "atob", header: "cheerp/clientlib.h".}

proc btoa*(this: var WindowBase64; rawString: String): ptr String {.
    importcpp: "btoa", header: "cheerp/clientlib.h".}

proc get_Blob*(this: var Window): ptr Blob {.importcpp: "get_Blob",
    header: "cheerp/clientlib.h".}

proc set_Blob*(this: var Window; a2: ptr Blob) {.importcpp: "set_Blob",
    header: "cheerp/clientlib.h".}

proc get_URLSearchParams*(this: var Window): ptr URLSearchParams {.
    importcpp: "get_URLSearchParams", header: "cheerp/clientlib.h".}

proc set_URLSearchParams*(this: var Window; a2: ptr URLSearchParams) {.
    importcpp: "set_URLSearchParams", header: "cheerp/clientlib.h".}

proc get_applicationCache*(this: var Window): ptr ApplicationCache {.
    importcpp: "get_applicationCache", header: "cheerp/clientlib.h".}

proc get_caches*(this: var Window): ptr CacheStorage {.importcpp: "get_caches",
    header: "cheerp/clientlib.h".}

proc get_clientInformation*(this: var Window): ptr Navigator {.
    importcpp: "get_clientInformation", header: "cheerp/clientlib.h".}

proc get_closed*(this: var Window): bool {.importcpp: "get_closed",
    header: "cheerp/clientlib.h".}

proc get_crypto*(this: var Window): ptr Crypto {.importcpp: "get_crypto",
    header: "cheerp/clientlib.h".}

proc get_customElements*(this: var Window): ptr CustomElementRegistry {.
    importcpp: "get_customElements", header: "cheerp/clientlib.h".}

proc set_customElements*(this: var Window; a2: ptr CustomElementRegistry) {.
    importcpp: "set_customElements", header: "cheerp/clientlib.h".}

proc get_defaultStatus*(this: var Window): ptr String {.
    importcpp: "get_defaultStatus", header: "cheerp/clientlib.h".}

proc set_defaultStatus*(this: var Window; a2: String) {.
    importcpp: "set_defaultStatus", header: "cheerp/clientlib.h".}

proc get_devicePixelRatio*(this: var Window): cdouble {.
    importcpp: "get_devicePixelRatio", header: "cheerp/clientlib.h".}

proc get_doNotTrack*(this: var Window): ptr String {.
    importcpp: "get_doNotTrack", header: "cheerp/clientlib.h".}

proc get_document*(this: var Window): ptr Document {.importcpp: "get_document",
    header: "cheerp/clientlib.h".}

proc get_event*(this: var Window): ptr Event {.importcpp: "get_event",
    header: "cheerp/clientlib.h".}

proc set_event*(this: var Window; a2: ptr Event) {.importcpp: "set_event",
    header: "cheerp/clientlib.h".}

proc get_external*(this: var Window): ptr External {.importcpp: "get_external",
    header: "cheerp/clientlib.h".}

proc get_frameElement*(this: var Window): ptr Element {.
    importcpp: "get_frameElement", header: "cheerp/clientlib.h".}

proc get_frames*(this: var Window): ptr Window {.importcpp: "get_frames",
    header: "cheerp/clientlib.h".}

proc get_history*(this: var Window): ptr History {.importcpp: "get_history",
    header: "cheerp/clientlib.h".}

proc get_innerHeight*(this: var Window): cdouble {.importcpp: "get_innerHeight",
    header: "cheerp/clientlib.h".}

proc get_innerWidth*(this: var Window): cdouble {.importcpp: "get_innerWidth",
    header: "cheerp/clientlib.h".}

proc get_isSecureContext*(this: var Window): bool {.
    importcpp: "get_isSecureContext", header: "cheerp/clientlib.h".}

proc get_length*(this: var Window): cdouble {.importcpp: "get_length",
    header: "cheerp/clientlib.h".}

proc get_location*(this: var Window): ptr Location {.importcpp: "get_location",
    header: "cheerp/clientlib.h".}

proc set_location*(this: var Window; a2: ptr Location) {.
    importcpp: "set_location", header: "cheerp/clientlib.h".}

proc get_locationbar*(this: var Window): ptr BarProp {.
    importcpp: "get_locationbar", header: "cheerp/clientlib.h".}

proc get_menubar*(this: var Window): ptr BarProp {.importcpp: "get_menubar",
    header: "cheerp/clientlib.h".}

proc get_msContentScript*(this: var Window): ptr ExtensionScriptApis {.
    importcpp: "get_msContentScript", header: "cheerp/clientlib.h".}

proc get_msCredentials*(this: var Window): ptr MSCredentials {.
    importcpp: "get_msCredentials", header: "cheerp/clientlib.h".}

proc get_name*(this: var Window): ptr String {.importcpp: "get_name",
    header: "cheerp/clientlib.h".}

proc set_name*(this: var Window; a2: String) {.importcpp: "set_name",
    header: "cheerp/clientlib.h".}

proc get_navigator*(this: var Window): ptr Navigator {.
    importcpp: "get_navigator", header: "cheerp/clientlib.h".}

proc get_offscreenBuffering*(this: var Window): ptr String {.
    importcpp: "get_offscreenBuffering", header: "cheerp/clientlib.h".}

proc set_offscreenBuffering*(this: var Window; a2: String) {.
    importcpp: "set_offscreenBuffering", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var Window): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onafterprint*(this: var Window): ptr EventListener {.
    importcpp: "get_onafterprint", header: "cheerp/clientlib.h".}

proc set_onafterprint*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onafterprint", header: "cheerp/clientlib.h".}

proc get_onbeforeprint*(this: var Window): ptr EventListener {.
    importcpp: "get_onbeforeprint", header: "cheerp/clientlib.h".}

proc set_onbeforeprint*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onbeforeprint", header: "cheerp/clientlib.h".}

proc get_onbeforeunload*(this: var Window): ptr EventListener {.
    importcpp: "get_onbeforeunload", header: "cheerp/clientlib.h".}

proc set_onbeforeunload*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onbeforeunload", header: "cheerp/clientlib.h".}

proc get_onblur*(this: var Window): ptr EventListener {.importcpp: "get_onblur",
    header: "cheerp/clientlib.h".}

proc set_onblur*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onblur", header: "cheerp/clientlib.h".}

proc get_oncanplay*(this: var Window): ptr EventListener {.
    importcpp: "get_oncanplay", header: "cheerp/clientlib.h".}

proc set_oncanplay*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_oncanplay", header: "cheerp/clientlib.h".}

proc get_oncanplaythrough*(this: var Window): ptr EventListener {.
    importcpp: "get_oncanplaythrough", header: "cheerp/clientlib.h".}

proc set_oncanplaythrough*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_oncanplaythrough", header: "cheerp/clientlib.h".}

proc get_onchange*(this: var Window): ptr EventListener {.
    importcpp: "get_onchange", header: "cheerp/clientlib.h".}

proc set_onchange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onchange", header: "cheerp/clientlib.h".}

proc get_onclick*(this: var Window): ptr EventListener {.
    importcpp: "get_onclick", header: "cheerp/clientlib.h".}

proc set_onclick*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onclick", header: "cheerp/clientlib.h".}

proc get_oncompassneedscalibration*(this: var Window): ptr EventListener {.
    importcpp: "get_oncompassneedscalibration", header: "cheerp/clientlib.h".}

proc set_oncompassneedscalibration*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_oncompassneedscalibration", header: "cheerp/clientlib.h".}

proc get_oncontextmenu*(this: var Window): ptr EventListener {.
    importcpp: "get_oncontextmenu", header: "cheerp/clientlib.h".}

proc set_oncontextmenu*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_oncontextmenu", header: "cheerp/clientlib.h".}

proc get_ondblclick*(this: var Window): ptr EventListener {.
    importcpp: "get_ondblclick", header: "cheerp/clientlib.h".}

proc set_ondblclick*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondblclick", header: "cheerp/clientlib.h".}

proc get_ondevicelight*(this: var Window): ptr EventListener {.
    importcpp: "get_ondevicelight", header: "cheerp/clientlib.h".}

proc set_ondevicelight*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondevicelight", header: "cheerp/clientlib.h".}

proc get_ondevicemotion*(this: var Window): ptr EventListener {.
    importcpp: "get_ondevicemotion", header: "cheerp/clientlib.h".}

proc set_ondevicemotion*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondevicemotion", header: "cheerp/clientlib.h".}

proc get_ondeviceorientation*(this: var Window): ptr EventListener {.
    importcpp: "get_ondeviceorientation", header: "cheerp/clientlib.h".}

proc set_ondeviceorientation*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondeviceorientation", header: "cheerp/clientlib.h".}

proc get_ondrag*(this: var Window): ptr EventListener {.importcpp: "get_ondrag",
    header: "cheerp/clientlib.h".}

proc set_ondrag*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondrag", header: "cheerp/clientlib.h".}

proc get_ondragend*(this: var Window): ptr EventListener {.
    importcpp: "get_ondragend", header: "cheerp/clientlib.h".}

proc set_ondragend*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondragend", header: "cheerp/clientlib.h".}

proc get_ondragenter*(this: var Window): ptr EventListener {.
    importcpp: "get_ondragenter", header: "cheerp/clientlib.h".}

proc set_ondragenter*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondragenter", header: "cheerp/clientlib.h".}

proc get_ondragleave*(this: var Window): ptr EventListener {.
    importcpp: "get_ondragleave", header: "cheerp/clientlib.h".}

proc set_ondragleave*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondragleave", header: "cheerp/clientlib.h".}

proc get_ondragover*(this: var Window): ptr EventListener {.
    importcpp: "get_ondragover", header: "cheerp/clientlib.h".}

proc set_ondragover*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondragover", header: "cheerp/clientlib.h".}

proc get_ondragstart*(this: var Window): ptr EventListener {.
    importcpp: "get_ondragstart", header: "cheerp/clientlib.h".}

proc set_ondragstart*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondragstart", header: "cheerp/clientlib.h".}

proc get_ondrop*(this: var Window): ptr EventListener {.importcpp: "get_ondrop",
    header: "cheerp/clientlib.h".}

proc set_ondrop*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondrop", header: "cheerp/clientlib.h".}

proc get_ondurationchange*(this: var Window): ptr EventListener {.
    importcpp: "get_ondurationchange", header: "cheerp/clientlib.h".}

proc set_ondurationchange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ondurationchange", header: "cheerp/clientlib.h".}

proc get_onemptied*(this: var Window): ptr EventListener {.
    importcpp: "get_onemptied", header: "cheerp/clientlib.h".}

proc set_onemptied*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onemptied", header: "cheerp/clientlib.h".}

proc get_onended*(this: var Window): ptr EventListener {.
    importcpp: "get_onended", header: "cheerp/clientlib.h".}

proc set_onended*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onended", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var Window): ptr ErrorEventHandler {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var Window; a2: ptr ErrorEventHandler) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onfocus*(this: var Window): ptr EventListener {.
    importcpp: "get_onfocus", header: "cheerp/clientlib.h".}

proc set_onfocus*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onfocus", header: "cheerp/clientlib.h".}

proc get_onhashchange*(this: var Window): ptr EventListener {.
    importcpp: "get_onhashchange", header: "cheerp/clientlib.h".}

proc set_onhashchange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onhashchange", header: "cheerp/clientlib.h".}

proc get_oninput*(this: var Window): ptr EventListener {.
    importcpp: "get_oninput", header: "cheerp/clientlib.h".}

proc set_oninput*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_oninput", header: "cheerp/clientlib.h".}

proc get_oninvalid*(this: var Window): ptr EventListener {.
    importcpp: "get_oninvalid", header: "cheerp/clientlib.h".}

proc set_oninvalid*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_oninvalid", header: "cheerp/clientlib.h".}

proc get_onkeydown*(this: var Window): ptr EventListener {.
    importcpp: "get_onkeydown", header: "cheerp/clientlib.h".}

proc set_onkeydown*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onkeydown", header: "cheerp/clientlib.h".}

proc get_onkeypress*(this: var Window): ptr EventListener {.
    importcpp: "get_onkeypress", header: "cheerp/clientlib.h".}

proc set_onkeypress*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onkeypress", header: "cheerp/clientlib.h".}

proc get_onkeyup*(this: var Window): ptr EventListener {.
    importcpp: "get_onkeyup", header: "cheerp/clientlib.h".}

proc set_onkeyup*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onkeyup", header: "cheerp/clientlib.h".}

proc get_onload*(this: var Window): ptr EventListener {.importcpp: "get_onload",
    header: "cheerp/clientlib.h".}

proc set_onload*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onloadeddata*(this: var Window): ptr EventListener {.
    importcpp: "get_onloadeddata", header: "cheerp/clientlib.h".}

proc set_onloadeddata*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onloadeddata", header: "cheerp/clientlib.h".}

proc get_onloadedmetadata*(this: var Window): ptr EventListener {.
    importcpp: "get_onloadedmetadata", header: "cheerp/clientlib.h".}

proc set_onloadedmetadata*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onloadedmetadata", header: "cheerp/clientlib.h".}

proc get_onloadstart*(this: var Window): ptr EventListener {.
    importcpp: "get_onloadstart", header: "cheerp/clientlib.h".}

proc set_onloadstart*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onloadstart", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var Window): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc get_onmousedown*(this: var Window): ptr EventListener {.
    importcpp: "get_onmousedown", header: "cheerp/clientlib.h".}

proc set_onmousedown*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmousedown", header: "cheerp/clientlib.h".}

proc get_onmouseenter*(this: var Window): ptr EventListener {.
    importcpp: "get_onmouseenter", header: "cheerp/clientlib.h".}

proc set_onmouseenter*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmouseenter", header: "cheerp/clientlib.h".}

proc get_onmouseleave*(this: var Window): ptr EventListener {.
    importcpp: "get_onmouseleave", header: "cheerp/clientlib.h".}

proc set_onmouseleave*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmouseleave", header: "cheerp/clientlib.h".}

proc get_onmousemove*(this: var Window): ptr EventListener {.
    importcpp: "get_onmousemove", header: "cheerp/clientlib.h".}

proc set_onmousemove*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmousemove", header: "cheerp/clientlib.h".}

proc get_onmouseout*(this: var Window): ptr EventListener {.
    importcpp: "get_onmouseout", header: "cheerp/clientlib.h".}

proc set_onmouseout*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmouseout", header: "cheerp/clientlib.h".}

proc get_onmouseover*(this: var Window): ptr EventListener {.
    importcpp: "get_onmouseover", header: "cheerp/clientlib.h".}

proc set_onmouseover*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmouseover", header: "cheerp/clientlib.h".}

proc get_onmouseup*(this: var Window): ptr EventListener {.
    importcpp: "get_onmouseup", header: "cheerp/clientlib.h".}

proc set_onmouseup*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmouseup", header: "cheerp/clientlib.h".}

proc get_onmousewheel*(this: var Window): ptr EventListener {.
    importcpp: "get_onmousewheel", header: "cheerp/clientlib.h".}

proc set_onmousewheel*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmousewheel", header: "cheerp/clientlib.h".}

proc get_onmsgesturechange*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsgesturechange", header: "cheerp/clientlib.h".}

proc set_onmsgesturechange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturechange", header: "cheerp/clientlib.h".}

proc get_onmsgesturedoubletap*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsgesturedoubletap", header: "cheerp/clientlib.h".}

proc set_onmsgesturedoubletap*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturedoubletap", header: "cheerp/clientlib.h".}

proc get_onmsgestureend*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsgestureend", header: "cheerp/clientlib.h".}

proc set_onmsgestureend*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsgestureend", header: "cheerp/clientlib.h".}

proc get_onmsgesturehold*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsgesturehold", header: "cheerp/clientlib.h".}

proc set_onmsgesturehold*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturehold", header: "cheerp/clientlib.h".}

proc get_onmsgesturestart*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsgesturestart", header: "cheerp/clientlib.h".}

proc set_onmsgesturestart*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturestart", header: "cheerp/clientlib.h".}

proc get_onmsgesturetap*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsgesturetap", header: "cheerp/clientlib.h".}

proc set_onmsgesturetap*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsgesturetap", header: "cheerp/clientlib.h".}

proc get_onmsinertiastart*(this: var Window): ptr EventListener {.
    importcpp: "get_onmsinertiastart", header: "cheerp/clientlib.h".}

proc set_onmsinertiastart*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmsinertiastart", header: "cheerp/clientlib.h".}

proc get_onmspointercancel*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointercancel", header: "cheerp/clientlib.h".}

proc set_onmspointercancel*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointercancel", header: "cheerp/clientlib.h".}

proc get_onmspointerdown*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointerdown", header: "cheerp/clientlib.h".}

proc set_onmspointerdown*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointerdown", header: "cheerp/clientlib.h".}

proc get_onmspointerenter*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointerenter", header: "cheerp/clientlib.h".}

proc set_onmspointerenter*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointerenter", header: "cheerp/clientlib.h".}

proc get_onmspointerleave*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointerleave", header: "cheerp/clientlib.h".}

proc set_onmspointerleave*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointerleave", header: "cheerp/clientlib.h".}

proc get_onmspointermove*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointermove", header: "cheerp/clientlib.h".}

proc set_onmspointermove*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointermove", header: "cheerp/clientlib.h".}

proc get_onmspointerout*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointerout", header: "cheerp/clientlib.h".}

proc set_onmspointerout*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointerout", header: "cheerp/clientlib.h".}

proc get_onmspointerover*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointerover", header: "cheerp/clientlib.h".}

proc set_onmspointerover*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointerover", header: "cheerp/clientlib.h".}

proc get_onmspointerup*(this: var Window): ptr EventListener {.
    importcpp: "get_onmspointerup", header: "cheerp/clientlib.h".}

proc set_onmspointerup*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onmspointerup", header: "cheerp/clientlib.h".}

proc get_onoffline*(this: var Window): ptr EventListener {.
    importcpp: "get_onoffline", header: "cheerp/clientlib.h".}

proc set_onoffline*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onoffline", header: "cheerp/clientlib.h".}

proc get_ononline*(this: var Window): ptr EventListener {.
    importcpp: "get_ononline", header: "cheerp/clientlib.h".}

proc set_ononline*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ononline", header: "cheerp/clientlib.h".}

proc get_onorientationchange*(this: var Window): ptr EventListener {.
    importcpp: "get_onorientationchange", header: "cheerp/clientlib.h".}

proc set_onorientationchange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onorientationchange", header: "cheerp/clientlib.h".}

proc get_onpagehide*(this: var Window): ptr EventListener {.
    importcpp: "get_onpagehide", header: "cheerp/clientlib.h".}

proc set_onpagehide*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onpagehide", header: "cheerp/clientlib.h".}

proc get_onpageshow*(this: var Window): ptr EventListener {.
    importcpp: "get_onpageshow", header: "cheerp/clientlib.h".}

proc set_onpageshow*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onpageshow", header: "cheerp/clientlib.h".}

proc get_onpause*(this: var Window): ptr EventListener {.
    importcpp: "get_onpause", header: "cheerp/clientlib.h".}

proc set_onpause*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onpause", header: "cheerp/clientlib.h".}

proc get_onplay*(this: var Window): ptr EventListener {.importcpp: "get_onplay",
    header: "cheerp/clientlib.h".}

proc set_onplay*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onplay", header: "cheerp/clientlib.h".}

proc get_onplaying*(this: var Window): ptr EventListener {.
    importcpp: "get_onplaying", header: "cheerp/clientlib.h".}

proc set_onplaying*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onplaying", header: "cheerp/clientlib.h".}

proc get_onpopstate*(this: var Window): ptr EventListener {.
    importcpp: "get_onpopstate", header: "cheerp/clientlib.h".}

proc set_onpopstate*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onpopstate", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var Window): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_onratechange*(this: var Window): ptr EventListener {.
    importcpp: "get_onratechange", header: "cheerp/clientlib.h".}

proc set_onratechange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onratechange", header: "cheerp/clientlib.h".}

proc get_onreadystatechange*(this: var Window): ptr EventListener {.
    importcpp: "get_onreadystatechange", header: "cheerp/clientlib.h".}

proc set_onreadystatechange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onreadystatechange", header: "cheerp/clientlib.h".}

proc get_onreset*(this: var Window): ptr EventListener {.
    importcpp: "get_onreset", header: "cheerp/clientlib.h".}

proc set_onreset*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onreset", header: "cheerp/clientlib.h".}

proc get_onresize*(this: var Window): ptr EventListener {.
    importcpp: "get_onresize", header: "cheerp/clientlib.h".}

proc set_onresize*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onresize", header: "cheerp/clientlib.h".}

proc get_onscroll*(this: var Window): ptr EventListener {.
    importcpp: "get_onscroll", header: "cheerp/clientlib.h".}

proc set_onscroll*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onscroll", header: "cheerp/clientlib.h".}

proc get_onseeked*(this: var Window): ptr EventListener {.
    importcpp: "get_onseeked", header: "cheerp/clientlib.h".}

proc set_onseeked*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onseeked", header: "cheerp/clientlib.h".}

proc get_onseeking*(this: var Window): ptr EventListener {.
    importcpp: "get_onseeking", header: "cheerp/clientlib.h".}

proc set_onseeking*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onseeking", header: "cheerp/clientlib.h".}

proc get_onselect*(this: var Window): ptr EventListener {.
    importcpp: "get_onselect", header: "cheerp/clientlib.h".}

proc set_onselect*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onselect", header: "cheerp/clientlib.h".}

proc get_onstalled*(this: var Window): ptr EventListener {.
    importcpp: "get_onstalled", header: "cheerp/clientlib.h".}

proc set_onstalled*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onstalled", header: "cheerp/clientlib.h".}

proc get_onstorage*(this: var Window): ptr EventListener {.
    importcpp: "get_onstorage", header: "cheerp/clientlib.h".}

proc set_onstorage*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onstorage", header: "cheerp/clientlib.h".}

proc get_onsubmit*(this: var Window): ptr EventListener {.
    importcpp: "get_onsubmit", header: "cheerp/clientlib.h".}

proc set_onsubmit*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onsubmit", header: "cheerp/clientlib.h".}

proc get_onsuspend*(this: var Window): ptr EventListener {.
    importcpp: "get_onsuspend", header: "cheerp/clientlib.h".}

proc set_onsuspend*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onsuspend", header: "cheerp/clientlib.h".}

proc get_ontimeupdate*(this: var Window): ptr EventListener {.
    importcpp: "get_ontimeupdate", header: "cheerp/clientlib.h".}

proc set_ontimeupdate*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ontimeupdate", header: "cheerp/clientlib.h".}

proc get_ontouchcancel*(this: var Window): ptr EventListener {.
    importcpp: "get_ontouchcancel", header: "cheerp/clientlib.h".}

proc set_ontouchcancel*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ontouchcancel", header: "cheerp/clientlib.h".}

proc get_ontouchend*(this: var Window): ptr EventListener {.
    importcpp: "get_ontouchend", header: "cheerp/clientlib.h".}

proc set_ontouchend*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ontouchend", header: "cheerp/clientlib.h".}

proc get_ontouchmove*(this: var Window): ptr EventListener {.
    importcpp: "get_ontouchmove", header: "cheerp/clientlib.h".}

proc set_ontouchmove*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ontouchmove", header: "cheerp/clientlib.h".}

proc get_ontouchstart*(this: var Window): ptr EventListener {.
    importcpp: "get_ontouchstart", header: "cheerp/clientlib.h".}

proc set_ontouchstart*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_ontouchstart", header: "cheerp/clientlib.h".}

proc get_onunload*(this: var Window): ptr EventListener {.
    importcpp: "get_onunload", header: "cheerp/clientlib.h".}

proc set_onunload*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onunload", header: "cheerp/clientlib.h".}

proc get_onvolumechange*(this: var Window): ptr EventListener {.
    importcpp: "get_onvolumechange", header: "cheerp/clientlib.h".}

proc set_onvolumechange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvolumechange", header: "cheerp/clientlib.h".}

proc get_onvrdisplayactivate*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplayactivate", header: "cheerp/clientlib.h".}

proc set_onvrdisplayactivate*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplayactivate", header: "cheerp/clientlib.h".}

proc get_onvrdisplayblur*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplayblur", header: "cheerp/clientlib.h".}

proc set_onvrdisplayblur*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplayblur", header: "cheerp/clientlib.h".}

proc get_onvrdisplayconnect*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplayconnect", header: "cheerp/clientlib.h".}

proc set_onvrdisplayconnect*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplayconnect", header: "cheerp/clientlib.h".}

proc get_onvrdisplaydeactivate*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplaydeactivate", header: "cheerp/clientlib.h".}

proc set_onvrdisplaydeactivate*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplaydeactivate", header: "cheerp/clientlib.h".}

proc get_onvrdisplaydisconnect*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplaydisconnect", header: "cheerp/clientlib.h".}

proc set_onvrdisplaydisconnect*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplaydisconnect", header: "cheerp/clientlib.h".}

proc get_onvrdisplayfocus*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplayfocus", header: "cheerp/clientlib.h".}

proc set_onvrdisplayfocus*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplayfocus", header: "cheerp/clientlib.h".}

proc get_onvrdisplaypointerrestricted*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplaypointerrestricted", header: "cheerp/clientlib.h".}

proc set_onvrdisplaypointerrestricted*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplaypointerrestricted", header: "cheerp/clientlib.h".}

proc get_onvrdisplaypointerunrestricted*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplaypointerunrestricted",
    header: "cheerp/clientlib.h".}

proc set_onvrdisplaypointerunrestricted*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplaypointerunrestricted",
    header: "cheerp/clientlib.h".}

proc get_onvrdisplaypresentchange*(this: var Window): ptr EventListener {.
    importcpp: "get_onvrdisplaypresentchange", header: "cheerp/clientlib.h".}

proc set_onvrdisplaypresentchange*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onvrdisplaypresentchange", header: "cheerp/clientlib.h".}

proc get_onwaiting*(this: var Window): ptr EventListener {.
    importcpp: "get_onwaiting", header: "cheerp/clientlib.h".}

proc set_onwaiting*(this: var Window; a2: ptr EventListener) {.
    importcpp: "set_onwaiting", header: "cheerp/clientlib.h".}

proc set_opener*(this: var Window; a2: ptr Object) {.importcpp: "set_opener",
    header: "cheerp/clientlib.h".}

proc get_orientation*(this: var Window): ptr String {.
    importcpp: "get_orientation", header: "cheerp/clientlib.h".}

proc get_outerHeight*(this: var Window): cdouble {.importcpp: "get_outerHeight",
    header: "cheerp/clientlib.h".}

proc get_outerWidth*(this: var Window): cdouble {.importcpp: "get_outerWidth",
    header: "cheerp/clientlib.h".}

proc get_pageXOffset*(this: var Window): cdouble {.importcpp: "get_pageXOffset",
    header: "cheerp/clientlib.h".}

proc get_pageYOffset*(this: var Window): cdouble {.importcpp: "get_pageYOffset",
    header: "cheerp/clientlib.h".}

proc get_parent*(this: var Window): ptr Window {.importcpp: "get_parent",
    header: "cheerp/clientlib.h".}

proc get_performance*(this: var Window): ptr Performance {.
    importcpp: "get_performance", header: "cheerp/clientlib.h".}

proc get_personalbar*(this: var Window): ptr BarProp {.
    importcpp: "get_personalbar", header: "cheerp/clientlib.h".}

proc get_screen*(this: var Window): ptr Screen {.importcpp: "get_screen",
    header: "cheerp/clientlib.h".}

proc get_screenLeft*(this: var Window): cdouble {.importcpp: "get_screenLeft",
    header: "cheerp/clientlib.h".}

proc get_screenTop*(this: var Window): cdouble {.importcpp: "get_screenTop",
    header: "cheerp/clientlib.h".}

proc get_screenX*(this: var Window): cdouble {.importcpp: "get_screenX",
    header: "cheerp/clientlib.h".}

proc get_screenY*(this: var Window): cdouble {.importcpp: "get_screenY",
    header: "cheerp/clientlib.h".}

proc get_scrollX*(this: var Window): cdouble {.importcpp: "get_scrollX",
    header: "cheerp/clientlib.h".}

proc get_scrollY*(this: var Window): cdouble {.importcpp: "get_scrollY",
    header: "cheerp/clientlib.h".}

proc get_scrollbars*(this: var Window): ptr BarProp {.
    importcpp: "get_scrollbars", header: "cheerp/clientlib.h".}

proc get_self*(this: var Window): ptr Window {.importcpp: "get_self",
    header: "cheerp/clientlib.h".}

proc get_speechSynthesis*(this: var Window): ptr SpeechSynthesis {.
    importcpp: "get_speechSynthesis", header: "cheerp/clientlib.h".}

proc get_status*(this: var Window): ptr String {.importcpp: "get_status",
    header: "cheerp/clientlib.h".}

proc set_status*(this: var Window; a2: String) {.importcpp: "set_status",
    header: "cheerp/clientlib.h".}

proc get_statusbar*(this: var Window): ptr BarProp {.importcpp: "get_statusbar",
    header: "cheerp/clientlib.h".}

proc get_styleMedia*(this: var Window): ptr StyleMedia {.
    importcpp: "get_styleMedia", header: "cheerp/clientlib.h".}

proc get_toolbar*(this: var Window): ptr BarProp {.importcpp: "get_toolbar",
    header: "cheerp/clientlib.h".}

proc get_top*(this: var Window): ptr Window {.importcpp: "get_top",
    header: "cheerp/clientlib.h".}

proc get_window*(this: var Window): ptr Window {.importcpp: "get_window",
    header: "cheerp/clientlib.h".}

proc alert*(this: var Window) {.importcpp: "alert", header: "cheerp/clientlib.h".}

proc alert*(this: var Window; message: ptr Object) {.importcpp: "alert",
    header: "cheerp/clientlib.h".}

proc alert*(this: var Window; message: String) {.importcpp: "alert",
    header: "cheerp/clientlib.h".}

proc blur*(this: var Window) {.importcpp: "blur", header: "cheerp/clientlib.h".}

proc cancelAnimationFrame*(this: var Window; handle: cdouble) {.
    importcpp: "cancelAnimationFrame", header: "cheerp/clientlib.h".}

proc captureEvents*(this: var Window) {.importcpp: "captureEvents",
                                        header: "cheerp/clientlib.h".}

proc close*(this: var Window) {.importcpp: "close", header: "cheerp/clientlib.h".}

proc confirm*(this: var Window): bool {.importcpp: "confirm",
                                        header: "cheerp/clientlib.h".}

proc confirm*(this: var Window; message: String): bool {.importcpp: "confirm",
    header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLImageElement): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLImageElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr SVGImageElement): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr SVGImageElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLVideoElement): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLVideoElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLCanvasElement): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLCanvasElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageBitmap): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageBitmap;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageData): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageData;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr Blob): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr Blob;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLImageElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLImageElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr SVGImageElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr SVGImageElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLVideoElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLVideoElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLCanvasElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr HTMLCanvasElement;
                        sx: cdouble; sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageBitmap; sx: cdouble;
                        sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageBitmap; sx: cdouble;
                        sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageData; sx: cdouble;
                        sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr ImageData; sx: cdouble;
                        sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr Blob; sx: cdouble;
                        sy: cdouble; sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc createImageBitmap*(this: var Window; image: ptr Blob; sx: cdouble;
                        sy: cdouble; sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "createImageBitmap", header: "cheerp/clientlib.h".}

proc focus*(this: var Window) {.importcpp: "focus", header: "cheerp/clientlib.h".}

proc getComputedStyle*(this: var Window; elt: ptr Element): ptr CSSStyleDeclaration {.
    importcpp: "getComputedStyle", header: "cheerp/clientlib.h".}

proc getComputedStyle*(this: var Window; elt: ptr Element; pseudoElt: String): ptr CSSStyleDeclaration {.
    importcpp: "getComputedStyle", header: "cheerp/clientlib.h".}

proc getMatchedCSSRules*(this: var Window; elt: ptr Element): ptr CSSRuleList {.
    importcpp: "getMatchedCSSRules", header: "cheerp/clientlib.h".}

proc getMatchedCSSRules*(this: var Window; elt: ptr Element; pseudoElt: String): ptr CSSRuleList {.
    importcpp: "getMatchedCSSRules", header: "cheerp/clientlib.h".}

proc getSelection*(this: var Window): ptr Selection {.importcpp: "getSelection",
    header: "cheerp/clientlib.h".}

proc matchMedia*(this: var Window; mediaQuery: String): ptr MediaQueryList {.
    importcpp: "matchMedia", header: "cheerp/clientlib.h".}

proc moveBy*(this: var Window) {.importcpp: "moveBy",
                                 header: "cheerp/clientlib.h".}

proc moveBy*(this: var Window; x: cdouble) {.importcpp: "moveBy",
    header: "cheerp/clientlib.h".}

proc moveBy*(this: var Window; x: cdouble; y: cdouble) {.importcpp: "moveBy",
    header: "cheerp/clientlib.h".}

proc moveTo*(this: var Window) {.importcpp: "moveTo",
                                 header: "cheerp/clientlib.h".}

proc moveTo*(this: var Window; x: cdouble) {.importcpp: "moveTo",
    header: "cheerp/clientlib.h".}

proc moveTo*(this: var Window; x: cdouble; y: cdouble) {.importcpp: "moveTo",
    header: "cheerp/clientlib.h".}

proc msWriteProfilerMark*(this: var Window; profilerMarkName: String) {.
    importcpp: "msWriteProfilerMark", header: "cheerp/clientlib.h".}

proc open*(this: var Window): ptr Window {.importcpp: "open",
    header: "cheerp/clientlib.h".}

proc open*(this: var Window; url: String): ptr Window {.importcpp: "open",
    header: "cheerp/clientlib.h".}

proc open*(this: var Window; url: String; target: String): ptr Window {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var Window; url: String; target: String; features: String): ptr Window {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var Window; url: String; target: String; features: String;
           replace: bool): ptr Window {.importcpp: "open",
                                        header: "cheerp/clientlib.h".}

proc postMessage*(this: var Window; message: ptr Object; targetOrigin: String) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var Window; message: ptr Object; targetOrigin: String;
                  transfer: ptr Array) {.importcpp: "postMessage",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var Window; message: String; targetOrigin: String) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var Window; message: String; targetOrigin: String;
                  transfer: ptr Array) {.importcpp: "postMessage",
    header: "cheerp/clientlib.h".}

proc print*(this: var Window) {.importcpp: "print", header: "cheerp/clientlib.h".}

proc prompt*(this: var Window): ptr String {.importcpp: "prompt",
    header: "cheerp/clientlib.h".}

proc prompt*(this: var Window; message: String): ptr String {.
    importcpp: "prompt", header: "cheerp/clientlib.h".}

proc prompt*(this: var Window; message: String; p_default: String): ptr String {.
    importcpp: "prompt", header: "cheerp/clientlib.h".}

proc releaseEvents*(this: var Window) {.importcpp: "releaseEvents",
                                        header: "cheerp/clientlib.h".}

proc requestAnimationFrame*(this: var Window; callback: ptr EventListener): cdouble {.
    importcpp: "requestAnimationFrame", header: "cheerp/clientlib.h".}

proc resizeBy*(this: var Window) {.importcpp: "resizeBy",
                                   header: "cheerp/clientlib.h".}

proc resizeBy*(this: var Window; x: cdouble) {.importcpp: "resizeBy",
    header: "cheerp/clientlib.h".}

proc resizeBy*(this: var Window; x: cdouble; y: cdouble) {.
    importcpp: "resizeBy", header: "cheerp/clientlib.h".}

proc resizeTo*(this: var Window) {.importcpp: "resizeTo",
                                   header: "cheerp/clientlib.h".}

proc resizeTo*(this: var Window; x: cdouble) {.importcpp: "resizeTo",
    header: "cheerp/clientlib.h".}

proc resizeTo*(this: var Window; x: cdouble; y: cdouble) {.
    importcpp: "resizeTo", header: "cheerp/clientlib.h".}

proc scroll*(this: var Window; options: ptr ScrollToOptions) {.
    importcpp: "scroll", header: "cheerp/clientlib.h".}

proc scroll*(this: var Window) {.importcpp: "scroll",
                                 header: "cheerp/clientlib.h".}

proc scroll*(this: var Window; x: cdouble) {.importcpp: "scroll",
    header: "cheerp/clientlib.h".}

proc scroll*(this: var Window; x: cdouble; y: cdouble) {.importcpp: "scroll",
    header: "cheerp/clientlib.h".}

proc scrollBy*(this: var Window; options: ptr ScrollToOptions) {.
    importcpp: "scrollBy", header: "cheerp/clientlib.h".}

proc scrollBy*(this: var Window) {.importcpp: "scrollBy",
                                   header: "cheerp/clientlib.h".}

proc scrollBy*(this: var Window; x: cdouble) {.importcpp: "scrollBy",
    header: "cheerp/clientlib.h".}

proc scrollBy*(this: var Window; x: cdouble; y: cdouble) {.
    importcpp: "scrollBy", header: "cheerp/clientlib.h".}

proc scrollTo*(this: var Window; options: ptr ScrollToOptions) {.
    importcpp: "scrollTo", header: "cheerp/clientlib.h".}

proc scrollTo*(this: var Window) {.importcpp: "scrollTo",
                                   header: "cheerp/clientlib.h".}

proc scrollTo*(this: var Window; x: cdouble) {.importcpp: "scrollTo",
    header: "cheerp/clientlib.h".}

proc scrollTo*(this: var Window; x: cdouble; y: cdouble) {.
    importcpp: "scrollTo", header: "cheerp/clientlib.h".}

proc stop*(this: var Window) {.importcpp: "stop", header: "cheerp/clientlib.h".}

proc webkitCancelAnimationFrame*(this: var Window; handle: cdouble) {.
    importcpp: "webkitCancelAnimationFrame", header: "cheerp/clientlib.h".}

proc webkitConvertPointFromNodeToPage*(this: var Window; node: ptr Node;
                                       pt: ptr WebKitPoint): ptr WebKitPoint {.
    importcpp: "webkitConvertPointFromNodeToPage", header: "cheerp/clientlib.h".}

proc webkitConvertPointFromPageToNode*(this: var Window; node: ptr Node;
                                       pt: ptr WebKitPoint): ptr WebKitPoint {.
    importcpp: "webkitConvertPointFromPageToNode", header: "cheerp/clientlib.h".}

proc webkitRequestAnimationFrame*(this: var Window; callback: ptr EventListener): cdouble {.
    importcpp: "webkitRequestAnimationFrame", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Window; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Window; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Window; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Window; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Window; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Window; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Window; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Window; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Window; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Window; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Window): ptr Window {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Window; a2: ptr Window) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWindow*(): Window {.constructor, importcpp: "client::Window(@)",
                                  header: "cheerp/clientlib.h".}

proc get_message*(this: var WorkerEventMap): ptr MessageEvent {.
    importcpp: "get_message", header: "cheerp/clientlib.h".}

proc set_message*(this: var WorkerEventMap; a2: ptr MessageEvent) {.
    importcpp: "set_message", header: "cheerp/clientlib.h".}

proc get_onmessage*(this: var Worker): ptr EventListener {.
    importcpp: "get_onmessage", header: "cheerp/clientlib.h".}

proc set_onmessage*(this: var Worker; a2: ptr EventListener) {.
    importcpp: "set_onmessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var Worker; message: ptr Object) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var Worker; message: ptr Object; transfer: ptr Array) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc postMessage*(this: var Worker; message: String) {.importcpp: "postMessage",
    header: "cheerp/clientlib.h".}

proc postMessage*(this: var Worker; message: String; transfer: ptr Array) {.
    importcpp: "postMessage", header: "cheerp/clientlib.h".}

proc terminate*(this: var Worker) {.importcpp: "terminate",
                                    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Worker; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Worker; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Worker; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Worker; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var Worker; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Worker; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Worker; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Worker; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Worker; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var Worker; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var Worker): ptr Worker {.importcpp: "get_prototype",
    header: "cheerp/clientlib.h".}

proc set_prototype*(this: var Worker; a2: ptr Worker) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWorker*(stringUrl: String): Worker {.constructor,
    importcpp: "client::Worker(@)", header: "cheerp/clientlib.h".}

proc get_locked*(this: var WritableStream): bool {.importcpp: "get_locked",
    header: "cheerp/clientlib.h".}

proc abort*(this: var WritableStream): ptr Promise {.importcpp: "abort",
    header: "cheerp/clientlib.h".}

proc abort*(this: var WritableStream; reason: ptr Object): ptr Promise {.
    importcpp: "abort", header: "cheerp/clientlib.h".}

proc getWriter*(this: var WritableStream): ptr WritableStreamDefaultWriter {.
    importcpp: "getWriter", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WritableStream): ptr WritableStream {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WritableStream; a2: ptr WritableStream) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWritableStream*(): WritableStream {.constructor,
    importcpp: "client::WritableStream(@)", header: "cheerp/clientlib.h".}

proc constructWritableStream*(underlyingSink: ptr UnderlyingSink): WritableStream {.
    constructor, importcpp: "client::WritableStream(@)",
    header: "cheerp/clientlib.h".}

proc constructWritableStream*(underlyingSink: ptr UnderlyingSink;
                              strategy: ptr QueuingStrategy): WritableStream {.
    constructor, importcpp: "client::WritableStream(@)",
    header: "cheerp/clientlib.h".}

proc error*(this: var WritableStreamDefaultController) {.importcpp: "error",
    header: "cheerp/clientlib.h".}

proc error*(this: var WritableStreamDefaultController; error: ptr Object) {.
    importcpp: "error", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WritableStreamDefaultController): ptr WritableStreamDefaultController {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WritableStreamDefaultController;
                    a2: ptr WritableStreamDefaultController) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWritableStreamDefaultController*(): WritableStreamDefaultController {.
    constructor, importcpp: "client::WritableStreamDefaultController(@)",
    header: "cheerp/clientlib.h".}

proc get_closed*(this: var WritableStreamDefaultWriter): ptr Promise {.
    importcpp: "get_closed", header: "cheerp/clientlib.h".}

proc get_desiredSize*(this: var WritableStreamDefaultWriter): cdouble {.
    importcpp: "get_desiredSize", header: "cheerp/clientlib.h".}

proc get_ready*(this: var WritableStreamDefaultWriter): ptr Promise {.
    importcpp: "get_ready", header: "cheerp/clientlib.h".}

proc abort*(this: var WritableStreamDefaultWriter): ptr Promise {.
    importcpp: "abort", header: "cheerp/clientlib.h".}

proc abort*(this: var WritableStreamDefaultWriter; reason: ptr Object): ptr Promise {.
    importcpp: "abort", header: "cheerp/clientlib.h".}

proc close*(this: var WritableStreamDefaultWriter): ptr Promise {.
    importcpp: "close", header: "cheerp/clientlib.h".}

proc releaseLock*(this: var WritableStreamDefaultWriter) {.
    importcpp: "releaseLock", header: "cheerp/clientlib.h".}

proc write*(this: var WritableStreamDefaultWriter): ptr Promise {.
    importcpp: "write", header: "cheerp/clientlib.h".}

proc write*(this: var WritableStreamDefaultWriter; chunk: ptr Object): ptr Promise {.
    importcpp: "write", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var WritableStreamDefaultWriter): ptr WritableStreamDefaultWriter {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var WritableStreamDefaultWriter;
                    a2: ptr WritableStreamDefaultWriter) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructWritableStreamDefaultWriter*(): WritableStreamDefaultWriter {.
    constructor, importcpp: "client::WritableStreamDefaultWriter(@)",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLDocument; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLDocument; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLDocument; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLDocument; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLDocument; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLDocument; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLDocument; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLDocument; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLDocument; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLDocument; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XMLDocument): ptr XMLDocument {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XMLDocument; a2: ptr XMLDocument) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXMLDocument*(): XMLDocument {.constructor,
    importcpp: "client::XMLDocument(@)", header: "cheerp/clientlib.h".}

proc get_abort*(this: var XMLHttpRequestEventTargetEventMap): ptr Event {.
    importcpp: "get_abort", header: "cheerp/clientlib.h".}

proc set_abort*(this: var XMLHttpRequestEventTargetEventMap; a2: ptr Event) {.
    importcpp: "set_abort", header: "cheerp/clientlib.h".}

proc get_error*(this: var XMLHttpRequestEventTargetEventMap): ptr ErrorEvent {.
    importcpp: "get_error", header: "cheerp/clientlib.h".}

proc set_error*(this: var XMLHttpRequestEventTargetEventMap; a2: ptr ErrorEvent) {.
    importcpp: "set_error", header: "cheerp/clientlib.h".}

proc get_load*(this: var XMLHttpRequestEventTargetEventMap): ptr Event {.
    importcpp: "get_load", header: "cheerp/clientlib.h".}

proc set_load*(this: var XMLHttpRequestEventTargetEventMap; a2: ptr Event) {.
    importcpp: "set_load", header: "cheerp/clientlib.h".}

proc get_loadend*(this: var XMLHttpRequestEventTargetEventMap): ptr ProgressEvent {.
    importcpp: "get_loadend", header: "cheerp/clientlib.h".}

proc set_loadend*(this: var XMLHttpRequestEventTargetEventMap;
                  a2: ptr ProgressEvent) {.importcpp: "set_loadend",
    header: "cheerp/clientlib.h".}

proc get_loadstart*(this: var XMLHttpRequestEventTargetEventMap): ptr Event {.
    importcpp: "get_loadstart", header: "cheerp/clientlib.h".}

proc set_loadstart*(this: var XMLHttpRequestEventTargetEventMap; a2: ptr Event) {.
    importcpp: "set_loadstart", header: "cheerp/clientlib.h".}

proc get_progress*(this: var XMLHttpRequestEventTargetEventMap): ptr ProgressEvent {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var XMLHttpRequestEventTargetEventMap;
                   a2: ptr ProgressEvent) {.importcpp: "set_progress",
    header: "cheerp/clientlib.h".}

proc get_timeout*(this: var XMLHttpRequestEventTargetEventMap): ptr ProgressEvent {.
    importcpp: "get_timeout", header: "cheerp/clientlib.h".}

proc set_timeout*(this: var XMLHttpRequestEventTargetEventMap;
                  a2: ptr ProgressEvent) {.importcpp: "set_timeout",
    header: "cheerp/clientlib.h".}

proc get_readystatechange*(this: var XMLHttpRequestEventMap): ptr Event {.
    importcpp: "get_readystatechange", header: "cheerp/clientlib.h".}

proc set_readystatechange*(this: var XMLHttpRequestEventMap; a2: ptr Event) {.
    importcpp: "set_readystatechange", header: "cheerp/clientlib.h".}

proc get_onabort*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_onabort", header: "cheerp/clientlib.h".}

proc set_onabort*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_onabort", header: "cheerp/clientlib.h".}

proc get_onerror*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_onerror", header: "cheerp/clientlib.h".}

proc set_onerror*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_onerror", header: "cheerp/clientlib.h".}

proc get_onload*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_onload", header: "cheerp/clientlib.h".}

proc set_onload*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_onload", header: "cheerp/clientlib.h".}

proc get_onloadend*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_onloadend", header: "cheerp/clientlib.h".}

proc set_onloadend*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_onloadend", header: "cheerp/clientlib.h".}

proc get_onloadstart*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_onloadstart", header: "cheerp/clientlib.h".}

proc set_onloadstart*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_onloadstart", header: "cheerp/clientlib.h".}

proc get_onprogress*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_onprogress", header: "cheerp/clientlib.h".}

proc set_onprogress*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_onprogress", header: "cheerp/clientlib.h".}

proc get_ontimeout*(this: var XMLHttpRequestEventTarget): ptr EventListener {.
    importcpp: "get_ontimeout", header: "cheerp/clientlib.h".}

proc set_ontimeout*(this: var XMLHttpRequestEventTarget; a2: ptr EventListener) {.
    importcpp: "set_ontimeout", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestEventTarget; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_msCaching*(this: var XMLHttpRequest): ptr String {.
    importcpp: "get_msCaching", header: "cheerp/clientlib.h".}

proc set_msCaching*(this: var XMLHttpRequest; a2: String) {.
    importcpp: "set_msCaching", header: "cheerp/clientlib.h".}

proc get_onreadystatechange*(this: var XMLHttpRequest): ptr EventListener {.
    importcpp: "get_onreadystatechange", header: "cheerp/clientlib.h".}

proc set_onreadystatechange*(this: var XMLHttpRequest; a2: ptr EventListener) {.
    importcpp: "set_onreadystatechange", header: "cheerp/clientlib.h".}

proc get_readyState*(this: var XMLHttpRequest): cdouble {.
    importcpp: "get_readyState", header: "cheerp/clientlib.h".}

proc get_responseText*(this: var XMLHttpRequest): ptr String {.
    importcpp: "get_responseText", header: "cheerp/clientlib.h".}

proc get_responseType*(this: var XMLHttpRequest): ptr String {.
    importcpp: "get_responseType", header: "cheerp/clientlib.h".}

proc set_responseType*(this: var XMLHttpRequest; a2: String) {.
    importcpp: "set_responseType", header: "cheerp/clientlib.h".}

proc get_responseURL*(this: var XMLHttpRequest): ptr String {.
    importcpp: "get_responseURL", header: "cheerp/clientlib.h".}

proc get_responseXML*(this: var XMLHttpRequest): ptr Document {.
    importcpp: "get_responseXML", header: "cheerp/clientlib.h".}

proc get_status*(this: var XMLHttpRequest): cdouble {.importcpp: "get_status",
    header: "cheerp/clientlib.h".}

proc get_statusText*(this: var XMLHttpRequest): ptr String {.
    importcpp: "get_statusText", header: "cheerp/clientlib.h".}

proc get_timeout*(this: var XMLHttpRequest): cdouble {.importcpp: "get_timeout",
    header: "cheerp/clientlib.h".}

proc set_timeout*(this: var XMLHttpRequest; a2: cdouble) {.
    importcpp: "set_timeout", header: "cheerp/clientlib.h".}

proc get_upload*(this: var XMLHttpRequest): ptr XMLHttpRequestUpload {.
    importcpp: "get_upload", header: "cheerp/clientlib.h".}

proc get_withCredentials*(this: var XMLHttpRequest): bool {.
    importcpp: "get_withCredentials", header: "cheerp/clientlib.h".}

proc set_withCredentials*(this: var XMLHttpRequest; a2: bool) {.
    importcpp: "set_withCredentials", header: "cheerp/clientlib.h".}

proc abort*(this: var XMLHttpRequest) {.importcpp: "abort",
                                        header: "cheerp/clientlib.h".}

proc getAllResponseHeaders*(this: var XMLHttpRequest): ptr String {.
    importcpp: "getAllResponseHeaders", header: "cheerp/clientlib.h".}

proc getResponseHeader*(this: var XMLHttpRequest; header: String): ptr String {.
    importcpp: "getResponseHeader", header: "cheerp/clientlib.h".}

proc msCachingEnabled*(this: var XMLHttpRequest): bool {.
    importcpp: "msCachingEnabled", header: "cheerp/clientlib.h".}

proc open*(this: var XMLHttpRequest; `method`: String; url: String) {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var XMLHttpRequest; `method`: String; url: String; async: bool) {.
    importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var XMLHttpRequest; `method`: String; url: String; async: bool;
           user: String) {.importcpp: "open", header: "cheerp/clientlib.h".}

proc open*(this: var XMLHttpRequest; `method`: String; url: String; async: bool;
           user: String; password: String) {.importcpp: "open",
    header: "cheerp/clientlib.h".}

proc overrideMimeType*(this: var XMLHttpRequest; mime: String) {.
    importcpp: "overrideMimeType", header: "cheerp/clientlib.h".}

proc send*(this: var XMLHttpRequest) {.importcpp: "send",
                                       header: "cheerp/clientlib.h".}

proc send*(this: var XMLHttpRequest; data: ptr Object) {.importcpp: "send",
    header: "cheerp/clientlib.h".}

proc setRequestHeader*(this: var XMLHttpRequest; header: String; value: String) {.
    importcpp: "setRequestHeader", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequest; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequest; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequest; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequest; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequest; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequest; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequest; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequest; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequest; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequest; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XMLHttpRequest): ptr XMLHttpRequest {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XMLHttpRequest; a2: ptr XMLHttpRequest) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXMLHttpRequest*(): XMLHttpRequest {.constructor,
    importcpp: "client::XMLHttpRequest(@)", header: "cheerp/clientlib.h".}

proc get_DONE*(this: var XMLHttpRequest): cdouble {.importcpp: "get_DONE",
    header: "cheerp/clientlib.h".}

proc get_HEADERS_RECEIVED*(this: var XMLHttpRequest): cdouble {.
    importcpp: "get_HEADERS_RECEIVED", header: "cheerp/clientlib.h".}

proc get_LOADING*(this: var XMLHttpRequest): cdouble {.importcpp: "get_LOADING",
    header: "cheerp/clientlib.h".}

proc get_OPENED*(this: var XMLHttpRequest): cdouble {.importcpp: "get_OPENED",
    header: "cheerp/clientlib.h".}

proc get_UNSENT*(this: var XMLHttpRequest): cdouble {.importcpp: "get_UNSENT",
    header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var XMLHttpRequestUpload; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XMLHttpRequestUpload): ptr XMLHttpRequestUpload {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XMLHttpRequestUpload; a2: ptr XMLHttpRequestUpload) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXMLHttpRequestUpload*(): XMLHttpRequestUpload {.constructor,
    importcpp: "client::XMLHttpRequestUpload(@)", header: "cheerp/clientlib.h".}

proc serializeToString*(this: var XMLSerializer; target: ptr Node): ptr String {.
    importcpp: "serializeToString", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XMLSerializer): ptr XMLSerializer {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XMLSerializer; a2: ptr XMLSerializer) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXMLSerializer*(): XMLSerializer {.constructor,
    importcpp: "client::XMLSerializer(@)", header: "cheerp/clientlib.h".}

proc createExpression*(this: var XPathEvaluator; expression: String;
                       resolver: ptr XPathNSResolver): ptr XPathExpression {.
    importcpp: "createExpression", header: "cheerp/clientlib.h".}

proc createNSResolver*(this: var XPathEvaluator): ptr XPathNSResolver {.
    importcpp: "createNSResolver", header: "cheerp/clientlib.h".}

proc createNSResolver*(this: var XPathEvaluator; nodeResolver: ptr Node): ptr XPathNSResolver {.
    importcpp: "createNSResolver", header: "cheerp/clientlib.h".}

proc evaluate*(this: var XPathEvaluator; expression: String;
               contextNode: ptr Node; resolver: ptr XPathNSResolver;
               `type`: cdouble; result: ptr XPathResult): ptr XPathResult {.
    importcpp: "evaluate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XPathEvaluator): ptr XPathEvaluator {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XPathEvaluator; a2: ptr XPathEvaluator) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXPathEvaluator*(): XPathEvaluator {.constructor,
    importcpp: "client::XPathEvaluator(@)", header: "cheerp/clientlib.h".}

proc evaluate*(this: var XPathExpression; contextNode: ptr Node;
               `type`: cdouble; result: ptr XPathResult): ptr XPathResult {.
    importcpp: "evaluate", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XPathExpression): ptr XPathExpression {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XPathExpression; a2: ptr XPathExpression) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXPathExpression*(): XPathExpression {.constructor,
    importcpp: "client::XPathExpression(@)", header: "cheerp/clientlib.h".}

proc lookupNamespaceURI*(this: var XPathNSResolver; prefix: String): ptr String {.
    importcpp: "lookupNamespaceURI", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XPathNSResolver): ptr XPathNSResolver {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XPathNSResolver; a2: ptr XPathNSResolver) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXPathNSResolver*(): XPathNSResolver {.constructor,
    importcpp: "client::XPathNSResolver(@)", header: "cheerp/clientlib.h".}

proc get_booleanValue*(this: var XPathResult): bool {.
    importcpp: "get_booleanValue", header: "cheerp/clientlib.h".}

proc get_invalidIteratorState*(this: var XPathResult): bool {.
    importcpp: "get_invalidIteratorState", header: "cheerp/clientlib.h".}

proc get_numberValue*(this: var XPathResult): cdouble {.
    importcpp: "get_numberValue", header: "cheerp/clientlib.h".}

proc get_resultType*(this: var XPathResult): cdouble {.
    importcpp: "get_resultType", header: "cheerp/clientlib.h".}

proc get_singleNodeValue*(this: var XPathResult): ptr Node {.
    importcpp: "get_singleNodeValue", header: "cheerp/clientlib.h".}

proc get_snapshotLength*(this: var XPathResult): cdouble {.
    importcpp: "get_snapshotLength", header: "cheerp/clientlib.h".}

proc get_stringValue*(this: var XPathResult): ptr String {.
    importcpp: "get_stringValue", header: "cheerp/clientlib.h".}

proc iterateNext*(this: var XPathResult): ptr Node {.importcpp: "iterateNext",
    header: "cheerp/clientlib.h".}

proc snapshotItem*(this: var XPathResult; index: cdouble): ptr Node {.
    importcpp: "snapshotItem", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XPathResult): ptr XPathResult {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XPathResult; a2: ptr XPathResult) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXPathResult*(): XPathResult {.constructor,
    importcpp: "client::XPathResult(@)", header: "cheerp/clientlib.h".}

proc get_ANY_TYPE*(this: var XPathResult): cdouble {.importcpp: "get_ANY_TYPE",
    header: "cheerp/clientlib.h".}

proc get_ANY_UNORDERED_NODE_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_ANY_UNORDERED_NODE_TYPE", header: "cheerp/clientlib.h".}

proc get_BOOLEAN_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_BOOLEAN_TYPE", header: "cheerp/clientlib.h".}

proc get_FIRST_ORDERED_NODE_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_FIRST_ORDERED_NODE_TYPE", header: "cheerp/clientlib.h".}

proc get_NUMBER_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_NUMBER_TYPE", header: "cheerp/clientlib.h".}

proc get_ORDERED_NODE_ITERATOR_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_ORDERED_NODE_ITERATOR_TYPE", header: "cheerp/clientlib.h".}

proc get_ORDERED_NODE_SNAPSHOT_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_ORDERED_NODE_SNAPSHOT_TYPE", header: "cheerp/clientlib.h".}

proc get_STRING_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_STRING_TYPE", header: "cheerp/clientlib.h".}

proc get_UNORDERED_NODE_ITERATOR_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_UNORDERED_NODE_ITERATOR_TYPE", header: "cheerp/clientlib.h".}

proc get_UNORDERED_NODE_SNAPSHOT_TYPE*(this: var XPathResult): cdouble {.
    importcpp: "get_UNORDERED_NODE_SNAPSHOT_TYPE", header: "cheerp/clientlib.h".}

proc clearParameters*(this: var XSLTProcessor) {.importcpp: "clearParameters",
    header: "cheerp/clientlib.h".}

proc importStylesheet*(this: var XSLTProcessor; style: ptr Node) {.
    importcpp: "importStylesheet", header: "cheerp/clientlib.h".}

proc removeParameter*(this: var XSLTProcessor; namespaceURI: String;
                      localName: String) {.importcpp: "removeParameter",
    header: "cheerp/clientlib.h".}

proc reset*(this: var XSLTProcessor) {.importcpp: "reset",
                                       header: "cheerp/clientlib.h".}

proc setParameter*(this: var XSLTProcessor; namespaceURI: String;
                   localName: String; value: ptr Object) {.
    importcpp: "setParameter", header: "cheerp/clientlib.h".}

proc transformToDocument*(this: var XSLTProcessor; source: ptr Node): ptr Document {.
    importcpp: "transformToDocument", header: "cheerp/clientlib.h".}

proc transformToFragment*(this: var XSLTProcessor; source: ptr Node;
                          document: ptr Document): ptr DocumentFragment {.
    importcpp: "transformToFragment", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var XSLTProcessor): ptr XSLTProcessor {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var XSLTProcessor; a2: ptr XSLTProcessor) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructXSLTProcessor*(): XSLTProcessor {.constructor,
    importcpp: "client::XSLTProcessor(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                       listener: ptr EventListener) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                       listener: ptr EventListener; options: bool) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                       listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                       listener: ptr EventListenerObject) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc addEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                       listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "addEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                          listener: ptr EventListener) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                          listener: ptr EventListener; options: bool) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                          listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                          listener: ptr EventListenerObject) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc removeEventListener*(this: var webkitRTCPeerConnection; `type`: String;
                          listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "removeEventListener", header: "cheerp/clientlib.h".}

proc get_prototype*(this: var webkitRTCPeerConnection): ptr webkitRTCPeerConnection {.
    importcpp: "get_prototype", header: "cheerp/clientlib.h".}

proc set_prototype*(this: var webkitRTCPeerConnection;
                    a2: ptr webkitRTCPeerConnection) {.
    importcpp: "set_prototype", header: "cheerp/clientlib.h".}

proc constructwebkitRTCPeerConnection*(configuration: ptr RTCConfiguration): webkitRTCPeerConnection {.
    constructor, importcpp: "client::webkitRTCPeerConnection(@)",
    header: "cheerp/clientlib.h".}

proc get_a*(this: var HTMLElementTagNameMap): ptr HTMLAnchorElement {.
    importcpp: "get_a", header: "cheerp/clientlib.h".}

proc set_a*(this: var HTMLElementTagNameMap; a2: ptr HTMLAnchorElement) {.
    importcpp: "set_a", header: "cheerp/clientlib.h".}

proc get_abbr*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_abbr", header: "cheerp/clientlib.h".}

proc set_abbr*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_abbr", header: "cheerp/clientlib.h".}

proc get_acronym*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_acronym", header: "cheerp/clientlib.h".}

proc set_acronym*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_acronym", header: "cheerp/clientlib.h".}

proc get_address*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_address", header: "cheerp/clientlib.h".}

proc set_address*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_address", header: "cheerp/clientlib.h".}

proc get_applet*(this: var HTMLElementTagNameMap): ptr HTMLAppletElement {.
    importcpp: "get_applet", header: "cheerp/clientlib.h".}

proc set_applet*(this: var HTMLElementTagNameMap; a2: ptr HTMLAppletElement) {.
    importcpp: "set_applet", header: "cheerp/clientlib.h".}

proc get_area*(this: var HTMLElementTagNameMap): ptr HTMLAreaElement {.
    importcpp: "get_area", header: "cheerp/clientlib.h".}

proc set_area*(this: var HTMLElementTagNameMap; a2: ptr HTMLAreaElement) {.
    importcpp: "set_area", header: "cheerp/clientlib.h".}

proc get_article*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_article", header: "cheerp/clientlib.h".}

proc set_article*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_article", header: "cheerp/clientlib.h".}

proc get_aside*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_aside", header: "cheerp/clientlib.h".}

proc set_aside*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_aside", header: "cheerp/clientlib.h".}

proc get_audio*(this: var HTMLElementTagNameMap): ptr HTMLAudioElement {.
    importcpp: "get_audio", header: "cheerp/clientlib.h".}

proc set_audio*(this: var HTMLElementTagNameMap; a2: ptr HTMLAudioElement) {.
    importcpp: "set_audio", header: "cheerp/clientlib.h".}

proc get_b*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_b", header: "cheerp/clientlib.h".}

proc set_b*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_b", header: "cheerp/clientlib.h".}

proc get_base*(this: var HTMLElementTagNameMap): ptr HTMLBaseElement {.
    importcpp: "get_base", header: "cheerp/clientlib.h".}

proc set_base*(this: var HTMLElementTagNameMap; a2: ptr HTMLBaseElement) {.
    importcpp: "set_base", header: "cheerp/clientlib.h".}

proc get_basefont*(this: var HTMLElementTagNameMap): ptr HTMLBaseFontElement {.
    importcpp: "get_basefont", header: "cheerp/clientlib.h".}

proc set_basefont*(this: var HTMLElementTagNameMap; a2: ptr HTMLBaseFontElement) {.
    importcpp: "set_basefont", header: "cheerp/clientlib.h".}

proc get_bdo*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_bdo", header: "cheerp/clientlib.h".}

proc set_bdo*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_bdo", header: "cheerp/clientlib.h".}

proc get_big*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_big", header: "cheerp/clientlib.h".}

proc set_big*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_big", header: "cheerp/clientlib.h".}

proc get_blockquote*(this: var HTMLElementTagNameMap): ptr HTMLQuoteElement {.
    importcpp: "get_blockquote", header: "cheerp/clientlib.h".}

proc set_blockquote*(this: var HTMLElementTagNameMap; a2: ptr HTMLQuoteElement) {.
    importcpp: "set_blockquote", header: "cheerp/clientlib.h".}

proc get_body*(this: var HTMLElementTagNameMap): ptr HTMLBodyElement {.
    importcpp: "get_body", header: "cheerp/clientlib.h".}

proc set_body*(this: var HTMLElementTagNameMap; a2: ptr HTMLBodyElement) {.
    importcpp: "set_body", header: "cheerp/clientlib.h".}

proc get_br*(this: var HTMLElementTagNameMap): ptr HTMLBRElement {.
    importcpp: "get_br", header: "cheerp/clientlib.h".}

proc set_br*(this: var HTMLElementTagNameMap; a2: ptr HTMLBRElement) {.
    importcpp: "set_br", header: "cheerp/clientlib.h".}

proc get_button*(this: var HTMLElementTagNameMap): ptr HTMLButtonElement {.
    importcpp: "get_button", header: "cheerp/clientlib.h".}

proc set_button*(this: var HTMLElementTagNameMap; a2: ptr HTMLButtonElement) {.
    importcpp: "set_button", header: "cheerp/clientlib.h".}

proc get_canvas*(this: var HTMLElementTagNameMap): ptr HTMLCanvasElement {.
    importcpp: "get_canvas", header: "cheerp/clientlib.h".}

proc set_canvas*(this: var HTMLElementTagNameMap; a2: ptr HTMLCanvasElement) {.
    importcpp: "set_canvas", header: "cheerp/clientlib.h".}

proc get_caption*(this: var HTMLElementTagNameMap): ptr HTMLTableCaptionElement {.
    importcpp: "get_caption", header: "cheerp/clientlib.h".}

proc set_caption*(this: var HTMLElementTagNameMap;
                  a2: ptr HTMLTableCaptionElement) {.importcpp: "set_caption",
    header: "cheerp/clientlib.h".}

proc get_center*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_center", header: "cheerp/clientlib.h".}

proc set_center*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_center", header: "cheerp/clientlib.h".}

proc get_cite*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_cite", header: "cheerp/clientlib.h".}

proc set_cite*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_cite", header: "cheerp/clientlib.h".}

proc get_code*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_code", header: "cheerp/clientlib.h".}

proc set_code*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_code", header: "cheerp/clientlib.h".}

proc get_col*(this: var HTMLElementTagNameMap): ptr HTMLTableColElement {.
    importcpp: "get_col", header: "cheerp/clientlib.h".}

proc set_col*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableColElement) {.
    importcpp: "set_col", header: "cheerp/clientlib.h".}

proc get_colgroup*(this: var HTMLElementTagNameMap): ptr HTMLTableColElement {.
    importcpp: "get_colgroup", header: "cheerp/clientlib.h".}

proc set_colgroup*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableColElement) {.
    importcpp: "set_colgroup", header: "cheerp/clientlib.h".}

proc get_data*(this: var HTMLElementTagNameMap): ptr HTMLDataElement {.
    importcpp: "get_data", header: "cheerp/clientlib.h".}

proc set_data*(this: var HTMLElementTagNameMap; a2: ptr HTMLDataElement) {.
    importcpp: "set_data", header: "cheerp/clientlib.h".}

proc get_datalist*(this: var HTMLElementTagNameMap): ptr HTMLDataListElement {.
    importcpp: "get_datalist", header: "cheerp/clientlib.h".}

proc set_datalist*(this: var HTMLElementTagNameMap; a2: ptr HTMLDataListElement) {.
    importcpp: "set_datalist", header: "cheerp/clientlib.h".}

proc get_dd*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_dd", header: "cheerp/clientlib.h".}

proc set_dd*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_dd", header: "cheerp/clientlib.h".}

proc get_del*(this: var HTMLElementTagNameMap): ptr HTMLModElement {.
    importcpp: "get_del", header: "cheerp/clientlib.h".}

proc set_del*(this: var HTMLElementTagNameMap; a2: ptr HTMLModElement) {.
    importcpp: "set_del", header: "cheerp/clientlib.h".}

proc get_dfn*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_dfn", header: "cheerp/clientlib.h".}

proc set_dfn*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_dfn", header: "cheerp/clientlib.h".}

proc get_dir*(this: var HTMLElementTagNameMap): ptr HTMLDirectoryElement {.
    importcpp: "get_dir", header: "cheerp/clientlib.h".}

proc set_dir*(this: var HTMLElementTagNameMap; a2: ptr HTMLDirectoryElement) {.
    importcpp: "set_dir", header: "cheerp/clientlib.h".}

proc get_div*(this: var HTMLElementTagNameMap): ptr HTMLDivElement {.
    importcpp: "get_div", header: "cheerp/clientlib.h".}

proc set_div*(this: var HTMLElementTagNameMap; a2: ptr HTMLDivElement) {.
    importcpp: "set_div", header: "cheerp/clientlib.h".}

proc get_dl*(this: var HTMLElementTagNameMap): ptr HTMLDListElement {.
    importcpp: "get_dl", header: "cheerp/clientlib.h".}

proc set_dl*(this: var HTMLElementTagNameMap; a2: ptr HTMLDListElement) {.
    importcpp: "set_dl", header: "cheerp/clientlib.h".}

proc get_dt*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_dt", header: "cheerp/clientlib.h".}

proc set_dt*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_dt", header: "cheerp/clientlib.h".}

proc get_em*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_em", header: "cheerp/clientlib.h".}

proc set_em*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_em", header: "cheerp/clientlib.h".}

proc get_embed*(this: var HTMLElementTagNameMap): ptr HTMLEmbedElement {.
    importcpp: "get_embed", header: "cheerp/clientlib.h".}

proc set_embed*(this: var HTMLElementTagNameMap; a2: ptr HTMLEmbedElement) {.
    importcpp: "set_embed", header: "cheerp/clientlib.h".}

proc get_fieldset*(this: var HTMLElementTagNameMap): ptr HTMLFieldSetElement {.
    importcpp: "get_fieldset", header: "cheerp/clientlib.h".}

proc set_fieldset*(this: var HTMLElementTagNameMap; a2: ptr HTMLFieldSetElement) {.
    importcpp: "set_fieldset", header: "cheerp/clientlib.h".}

proc get_figcaption*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_figcaption", header: "cheerp/clientlib.h".}

proc set_figcaption*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_figcaption", header: "cheerp/clientlib.h".}

proc get_figure*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_figure", header: "cheerp/clientlib.h".}

proc set_figure*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_figure", header: "cheerp/clientlib.h".}

proc get_font*(this: var HTMLElementTagNameMap): ptr HTMLFontElement {.
    importcpp: "get_font", header: "cheerp/clientlib.h".}

proc set_font*(this: var HTMLElementTagNameMap; a2: ptr HTMLFontElement) {.
    importcpp: "set_font", header: "cheerp/clientlib.h".}

proc get_footer*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_footer", header: "cheerp/clientlib.h".}

proc set_footer*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_footer", header: "cheerp/clientlib.h".}

proc get_form*(this: var HTMLElementTagNameMap): ptr HTMLFormElement {.
    importcpp: "get_form", header: "cheerp/clientlib.h".}

proc set_form*(this: var HTMLElementTagNameMap; a2: ptr HTMLFormElement) {.
    importcpp: "set_form", header: "cheerp/clientlib.h".}

proc get_frame*(this: var HTMLElementTagNameMap): ptr HTMLFrameElement {.
    importcpp: "get_frame", header: "cheerp/clientlib.h".}

proc set_frame*(this: var HTMLElementTagNameMap; a2: ptr HTMLFrameElement) {.
    importcpp: "set_frame", header: "cheerp/clientlib.h".}

proc get_frameset*(this: var HTMLElementTagNameMap): ptr HTMLFrameSetElement {.
    importcpp: "get_frameset", header: "cheerp/clientlib.h".}

proc set_frameset*(this: var HTMLElementTagNameMap; a2: ptr HTMLFrameSetElement) {.
    importcpp: "set_frameset", header: "cheerp/clientlib.h".}

proc get_h1*(this: var HTMLElementTagNameMap): ptr HTMLHeadingElement {.
    importcpp: "get_h1", header: "cheerp/clientlib.h".}

proc set_h1*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_h1", header: "cheerp/clientlib.h".}

proc get_h2*(this: var HTMLElementTagNameMap): ptr HTMLHeadingElement {.
    importcpp: "get_h2", header: "cheerp/clientlib.h".}

proc set_h2*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_h2", header: "cheerp/clientlib.h".}

proc get_h3*(this: var HTMLElementTagNameMap): ptr HTMLHeadingElement {.
    importcpp: "get_h3", header: "cheerp/clientlib.h".}

proc set_h3*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_h3", header: "cheerp/clientlib.h".}

proc get_h4*(this: var HTMLElementTagNameMap): ptr HTMLHeadingElement {.
    importcpp: "get_h4", header: "cheerp/clientlib.h".}

proc set_h4*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_h4", header: "cheerp/clientlib.h".}

proc get_h5*(this: var HTMLElementTagNameMap): ptr HTMLHeadingElement {.
    importcpp: "get_h5", header: "cheerp/clientlib.h".}

proc set_h5*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_h5", header: "cheerp/clientlib.h".}

proc get_h6*(this: var HTMLElementTagNameMap): ptr HTMLHeadingElement {.
    importcpp: "get_h6", header: "cheerp/clientlib.h".}

proc set_h6*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadingElement) {.
    importcpp: "set_h6", header: "cheerp/clientlib.h".}

proc get_head*(this: var HTMLElementTagNameMap): ptr HTMLHeadElement {.
    importcpp: "get_head", header: "cheerp/clientlib.h".}

proc set_head*(this: var HTMLElementTagNameMap; a2: ptr HTMLHeadElement) {.
    importcpp: "set_head", header: "cheerp/clientlib.h".}

proc get_header*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_header", header: "cheerp/clientlib.h".}

proc set_header*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_header", header: "cheerp/clientlib.h".}

proc get_hgroup*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_hgroup", header: "cheerp/clientlib.h".}

proc set_hgroup*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_hgroup", header: "cheerp/clientlib.h".}

proc get_hr*(this: var HTMLElementTagNameMap): ptr HTMLHRElement {.
    importcpp: "get_hr", header: "cheerp/clientlib.h".}

proc set_hr*(this: var HTMLElementTagNameMap; a2: ptr HTMLHRElement) {.
    importcpp: "set_hr", header: "cheerp/clientlib.h".}

proc get_html*(this: var HTMLElementTagNameMap): ptr HTMLHtmlElement {.
    importcpp: "get_html", header: "cheerp/clientlib.h".}

proc set_html*(this: var HTMLElementTagNameMap; a2: ptr HTMLHtmlElement) {.
    importcpp: "set_html", header: "cheerp/clientlib.h".}

proc get_i*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_i", header: "cheerp/clientlib.h".}

proc set_i*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_i", header: "cheerp/clientlib.h".}

proc get_iframe*(this: var HTMLElementTagNameMap): ptr HTMLIFrameElement {.
    importcpp: "get_iframe", header: "cheerp/clientlib.h".}

proc set_iframe*(this: var HTMLElementTagNameMap; a2: ptr HTMLIFrameElement) {.
    importcpp: "set_iframe", header: "cheerp/clientlib.h".}

proc get_img*(this: var HTMLElementTagNameMap): ptr HTMLImageElement {.
    importcpp: "get_img", header: "cheerp/clientlib.h".}

proc set_img*(this: var HTMLElementTagNameMap; a2: ptr HTMLImageElement) {.
    importcpp: "set_img", header: "cheerp/clientlib.h".}

proc get_input*(this: var HTMLElementTagNameMap): ptr HTMLInputElement {.
    importcpp: "get_input", header: "cheerp/clientlib.h".}

proc set_input*(this: var HTMLElementTagNameMap; a2: ptr HTMLInputElement) {.
    importcpp: "set_input", header: "cheerp/clientlib.h".}

proc get_ins*(this: var HTMLElementTagNameMap): ptr HTMLModElement {.
    importcpp: "get_ins", header: "cheerp/clientlib.h".}

proc set_ins*(this: var HTMLElementTagNameMap; a2: ptr HTMLModElement) {.
    importcpp: "set_ins", header: "cheerp/clientlib.h".}

proc get_isindex*(this: var HTMLElementTagNameMap): ptr HTMLUnknownElement {.
    importcpp: "get_isindex", header: "cheerp/clientlib.h".}

proc set_isindex*(this: var HTMLElementTagNameMap; a2: ptr HTMLUnknownElement) {.
    importcpp: "set_isindex", header: "cheerp/clientlib.h".}

proc get_kbd*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_kbd", header: "cheerp/clientlib.h".}

proc set_kbd*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_kbd", header: "cheerp/clientlib.h".}

proc get_keygen*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_keygen", header: "cheerp/clientlib.h".}

proc set_keygen*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_keygen", header: "cheerp/clientlib.h".}

proc get_label*(this: var HTMLElementTagNameMap): ptr HTMLLabelElement {.
    importcpp: "get_label", header: "cheerp/clientlib.h".}

proc set_label*(this: var HTMLElementTagNameMap; a2: ptr HTMLLabelElement) {.
    importcpp: "set_label", header: "cheerp/clientlib.h".}

proc get_legend*(this: var HTMLElementTagNameMap): ptr HTMLLegendElement {.
    importcpp: "get_legend", header: "cheerp/clientlib.h".}

proc set_legend*(this: var HTMLElementTagNameMap; a2: ptr HTMLLegendElement) {.
    importcpp: "set_legend", header: "cheerp/clientlib.h".}

proc get_li*(this: var HTMLElementTagNameMap): ptr HTMLLIElement {.
    importcpp: "get_li", header: "cheerp/clientlib.h".}

proc set_li*(this: var HTMLElementTagNameMap; a2: ptr HTMLLIElement) {.
    importcpp: "set_li", header: "cheerp/clientlib.h".}

proc get_link*(this: var HTMLElementTagNameMap): ptr HTMLLinkElement {.
    importcpp: "get_link", header: "cheerp/clientlib.h".}

proc set_link*(this: var HTMLElementTagNameMap; a2: ptr HTMLLinkElement) {.
    importcpp: "set_link", header: "cheerp/clientlib.h".}

proc get_listing*(this: var HTMLElementTagNameMap): ptr HTMLPreElement {.
    importcpp: "get_listing", header: "cheerp/clientlib.h".}

proc set_listing*(this: var HTMLElementTagNameMap; a2: ptr HTMLPreElement) {.
    importcpp: "set_listing", header: "cheerp/clientlib.h".}

proc get_map*(this: var HTMLElementTagNameMap): ptr HTMLMapElement {.
    importcpp: "get_map", header: "cheerp/clientlib.h".}

proc set_map*(this: var HTMLElementTagNameMap; a2: ptr HTMLMapElement) {.
    importcpp: "set_map", header: "cheerp/clientlib.h".}

proc get_mark*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_mark", header: "cheerp/clientlib.h".}

proc set_mark*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_mark", header: "cheerp/clientlib.h".}

proc get_marquee*(this: var HTMLElementTagNameMap): ptr HTMLMarqueeElement {.
    importcpp: "get_marquee", header: "cheerp/clientlib.h".}

proc set_marquee*(this: var HTMLElementTagNameMap; a2: ptr HTMLMarqueeElement) {.
    importcpp: "set_marquee", header: "cheerp/clientlib.h".}

proc get_menu*(this: var HTMLElementTagNameMap): ptr HTMLMenuElement {.
    importcpp: "get_menu", header: "cheerp/clientlib.h".}

proc set_menu*(this: var HTMLElementTagNameMap; a2: ptr HTMLMenuElement) {.
    importcpp: "set_menu", header: "cheerp/clientlib.h".}

proc get_meta*(this: var HTMLElementTagNameMap): ptr HTMLMetaElement {.
    importcpp: "get_meta", header: "cheerp/clientlib.h".}

proc set_meta*(this: var HTMLElementTagNameMap; a2: ptr HTMLMetaElement) {.
    importcpp: "set_meta", header: "cheerp/clientlib.h".}

proc get_meter*(this: var HTMLElementTagNameMap): ptr HTMLMeterElement {.
    importcpp: "get_meter", header: "cheerp/clientlib.h".}

proc set_meter*(this: var HTMLElementTagNameMap; a2: ptr HTMLMeterElement) {.
    importcpp: "set_meter", header: "cheerp/clientlib.h".}

proc get_nav*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_nav", header: "cheerp/clientlib.h".}

proc set_nav*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_nav", header: "cheerp/clientlib.h".}

proc get_nextid*(this: var HTMLElementTagNameMap): ptr HTMLUnknownElement {.
    importcpp: "get_nextid", header: "cheerp/clientlib.h".}

proc set_nextid*(this: var HTMLElementTagNameMap; a2: ptr HTMLUnknownElement) {.
    importcpp: "set_nextid", header: "cheerp/clientlib.h".}

proc get_nobr*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_nobr", header: "cheerp/clientlib.h".}

proc set_nobr*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_nobr", header: "cheerp/clientlib.h".}

proc get_noframes*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_noframes", header: "cheerp/clientlib.h".}

proc set_noframes*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_noframes", header: "cheerp/clientlib.h".}

proc get_noscript*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_noscript", header: "cheerp/clientlib.h".}

proc set_noscript*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_noscript", header: "cheerp/clientlib.h".}

proc get_object*(this: var HTMLElementTagNameMap): ptr HTMLObjectElement {.
    importcpp: "get_object", header: "cheerp/clientlib.h".}

proc set_object*(this: var HTMLElementTagNameMap; a2: ptr HTMLObjectElement) {.
    importcpp: "set_object", header: "cheerp/clientlib.h".}

proc get_ol*(this: var HTMLElementTagNameMap): ptr HTMLOListElement {.
    importcpp: "get_ol", header: "cheerp/clientlib.h".}

proc set_ol*(this: var HTMLElementTagNameMap; a2: ptr HTMLOListElement) {.
    importcpp: "set_ol", header: "cheerp/clientlib.h".}

proc get_optgroup*(this: var HTMLElementTagNameMap): ptr HTMLOptGroupElement {.
    importcpp: "get_optgroup", header: "cheerp/clientlib.h".}

proc set_optgroup*(this: var HTMLElementTagNameMap; a2: ptr HTMLOptGroupElement) {.
    importcpp: "set_optgroup", header: "cheerp/clientlib.h".}

proc get_option*(this: var HTMLElementTagNameMap): ptr HTMLOptionElement {.
    importcpp: "get_option", header: "cheerp/clientlib.h".}

proc set_option*(this: var HTMLElementTagNameMap; a2: ptr HTMLOptionElement) {.
    importcpp: "set_option", header: "cheerp/clientlib.h".}

proc get_output*(this: var HTMLElementTagNameMap): ptr HTMLOutputElement {.
    importcpp: "get_output", header: "cheerp/clientlib.h".}

proc set_output*(this: var HTMLElementTagNameMap; a2: ptr HTMLOutputElement) {.
    importcpp: "set_output", header: "cheerp/clientlib.h".}

proc get_p*(this: var HTMLElementTagNameMap): ptr HTMLParagraphElement {.
    importcpp: "get_p", header: "cheerp/clientlib.h".}

proc set_p*(this: var HTMLElementTagNameMap; a2: ptr HTMLParagraphElement) {.
    importcpp: "set_p", header: "cheerp/clientlib.h".}

proc get_param*(this: var HTMLElementTagNameMap): ptr HTMLParamElement {.
    importcpp: "get_param", header: "cheerp/clientlib.h".}

proc set_param*(this: var HTMLElementTagNameMap; a2: ptr HTMLParamElement) {.
    importcpp: "set_param", header: "cheerp/clientlib.h".}

proc get_picture*(this: var HTMLElementTagNameMap): ptr HTMLPictureElement {.
    importcpp: "get_picture", header: "cheerp/clientlib.h".}

proc set_picture*(this: var HTMLElementTagNameMap; a2: ptr HTMLPictureElement) {.
    importcpp: "set_picture", header: "cheerp/clientlib.h".}

proc get_plaintext*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_plaintext", header: "cheerp/clientlib.h".}

proc set_plaintext*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_plaintext", header: "cheerp/clientlib.h".}

proc get_pre*(this: var HTMLElementTagNameMap): ptr HTMLPreElement {.
    importcpp: "get_pre", header: "cheerp/clientlib.h".}

proc set_pre*(this: var HTMLElementTagNameMap; a2: ptr HTMLPreElement) {.
    importcpp: "set_pre", header: "cheerp/clientlib.h".}

proc get_progress*(this: var HTMLElementTagNameMap): ptr HTMLProgressElement {.
    importcpp: "get_progress", header: "cheerp/clientlib.h".}

proc set_progress*(this: var HTMLElementTagNameMap; a2: ptr HTMLProgressElement) {.
    importcpp: "set_progress", header: "cheerp/clientlib.h".}

proc get_q*(this: var HTMLElementTagNameMap): ptr HTMLQuoteElement {.
    importcpp: "get_q", header: "cheerp/clientlib.h".}

proc set_q*(this: var HTMLElementTagNameMap; a2: ptr HTMLQuoteElement) {.
    importcpp: "set_q", header: "cheerp/clientlib.h".}

proc get_rt*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_rt", header: "cheerp/clientlib.h".}

proc set_rt*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_rt", header: "cheerp/clientlib.h".}

proc get_ruby*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_ruby", header: "cheerp/clientlib.h".}

proc set_ruby*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_ruby", header: "cheerp/clientlib.h".}

proc get_s*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_s", header: "cheerp/clientlib.h".}

proc set_s*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_s", header: "cheerp/clientlib.h".}

proc get_samp*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_samp", header: "cheerp/clientlib.h".}

proc set_samp*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_samp", header: "cheerp/clientlib.h".}

proc get_script*(this: var HTMLElementTagNameMap): ptr HTMLScriptElement {.
    importcpp: "get_script", header: "cheerp/clientlib.h".}

proc set_script*(this: var HTMLElementTagNameMap; a2: ptr HTMLScriptElement) {.
    importcpp: "set_script", header: "cheerp/clientlib.h".}

proc get_section*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_section", header: "cheerp/clientlib.h".}

proc set_section*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_section", header: "cheerp/clientlib.h".}

proc get_select*(this: var HTMLElementTagNameMap): ptr HTMLSelectElement {.
    importcpp: "get_select", header: "cheerp/clientlib.h".}

proc set_select*(this: var HTMLElementTagNameMap; a2: ptr HTMLSelectElement) {.
    importcpp: "set_select", header: "cheerp/clientlib.h".}

proc get_slot*(this: var HTMLElementTagNameMap): ptr HTMLSlotElement {.
    importcpp: "get_slot", header: "cheerp/clientlib.h".}

proc set_slot*(this: var HTMLElementTagNameMap; a2: ptr HTMLSlotElement) {.
    importcpp: "set_slot", header: "cheerp/clientlib.h".}

proc get_small*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_small", header: "cheerp/clientlib.h".}

proc set_small*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_small", header: "cheerp/clientlib.h".}

proc get_source*(this: var HTMLElementTagNameMap): ptr HTMLSourceElement {.
    importcpp: "get_source", header: "cheerp/clientlib.h".}

proc set_source*(this: var HTMLElementTagNameMap; a2: ptr HTMLSourceElement) {.
    importcpp: "set_source", header: "cheerp/clientlib.h".}

proc get_span*(this: var HTMLElementTagNameMap): ptr HTMLSpanElement {.
    importcpp: "get_span", header: "cheerp/clientlib.h".}

proc set_span*(this: var HTMLElementTagNameMap; a2: ptr HTMLSpanElement) {.
    importcpp: "set_span", header: "cheerp/clientlib.h".}

proc get_strike*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_strike", header: "cheerp/clientlib.h".}

proc set_strike*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_strike", header: "cheerp/clientlib.h".}

proc get_strong*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_strong", header: "cheerp/clientlib.h".}

proc set_strong*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_strong", header: "cheerp/clientlib.h".}

proc get_style*(this: var HTMLElementTagNameMap): ptr HTMLStyleElement {.
    importcpp: "get_style", header: "cheerp/clientlib.h".}

proc set_style*(this: var HTMLElementTagNameMap; a2: ptr HTMLStyleElement) {.
    importcpp: "set_style", header: "cheerp/clientlib.h".}

proc get_sub*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_sub", header: "cheerp/clientlib.h".}

proc set_sub*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_sub", header: "cheerp/clientlib.h".}

proc get_sup*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_sup", header: "cheerp/clientlib.h".}

proc set_sup*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_sup", header: "cheerp/clientlib.h".}

proc get_table*(this: var HTMLElementTagNameMap): ptr HTMLTableElement {.
    importcpp: "get_table", header: "cheerp/clientlib.h".}

proc set_table*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableElement) {.
    importcpp: "set_table", header: "cheerp/clientlib.h".}

proc get_tbody*(this: var HTMLElementTagNameMap): ptr HTMLTableSectionElement {.
    importcpp: "get_tbody", header: "cheerp/clientlib.h".}

proc set_tbody*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableSectionElement) {.
    importcpp: "set_tbody", header: "cheerp/clientlib.h".}

proc get_td*(this: var HTMLElementTagNameMap): ptr HTMLTableDataCellElement {.
    importcpp: "get_td", header: "cheerp/clientlib.h".}

proc set_td*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableDataCellElement) {.
    importcpp: "set_td", header: "cheerp/clientlib.h".}

proc get_template*(this: var HTMLElementTagNameMap): ptr HTMLTemplateElement {.
    importcpp: "get_template", header: "cheerp/clientlib.h".}

proc set_template*(this: var HTMLElementTagNameMap; a2: ptr HTMLTemplateElement) {.
    importcpp: "set_template", header: "cheerp/clientlib.h".}

proc get_textarea*(this: var HTMLElementTagNameMap): ptr HTMLTextAreaElement {.
    importcpp: "get_textarea", header: "cheerp/clientlib.h".}

proc set_textarea*(this: var HTMLElementTagNameMap; a2: ptr HTMLTextAreaElement) {.
    importcpp: "set_textarea", header: "cheerp/clientlib.h".}

proc get_tfoot*(this: var HTMLElementTagNameMap): ptr HTMLTableSectionElement {.
    importcpp: "get_tfoot", header: "cheerp/clientlib.h".}

proc set_tfoot*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableSectionElement) {.
    importcpp: "set_tfoot", header: "cheerp/clientlib.h".}

proc get_th*(this: var HTMLElementTagNameMap): ptr HTMLTableHeaderCellElement {.
    importcpp: "get_th", header: "cheerp/clientlib.h".}

proc set_th*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableHeaderCellElement) {.
    importcpp: "set_th", header: "cheerp/clientlib.h".}

proc get_thead*(this: var HTMLElementTagNameMap): ptr HTMLTableSectionElement {.
    importcpp: "get_thead", header: "cheerp/clientlib.h".}

proc set_thead*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableSectionElement) {.
    importcpp: "set_thead", header: "cheerp/clientlib.h".}

proc get_time*(this: var HTMLElementTagNameMap): ptr HTMLTimeElement {.
    importcpp: "get_time", header: "cheerp/clientlib.h".}

proc set_time*(this: var HTMLElementTagNameMap; a2: ptr HTMLTimeElement) {.
    importcpp: "set_time", header: "cheerp/clientlib.h".}

proc get_title*(this: var HTMLElementTagNameMap): ptr HTMLTitleElement {.
    importcpp: "get_title", header: "cheerp/clientlib.h".}

proc set_title*(this: var HTMLElementTagNameMap; a2: ptr HTMLTitleElement) {.
    importcpp: "set_title", header: "cheerp/clientlib.h".}

proc get_tr*(this: var HTMLElementTagNameMap): ptr HTMLTableRowElement {.
    importcpp: "get_tr", header: "cheerp/clientlib.h".}

proc set_tr*(this: var HTMLElementTagNameMap; a2: ptr HTMLTableRowElement) {.
    importcpp: "set_tr", header: "cheerp/clientlib.h".}

proc get_track*(this: var HTMLElementTagNameMap): ptr HTMLTrackElement {.
    importcpp: "get_track", header: "cheerp/clientlib.h".}

proc set_track*(this: var HTMLElementTagNameMap; a2: ptr HTMLTrackElement) {.
    importcpp: "set_track", header: "cheerp/clientlib.h".}

proc get_tt*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_tt", header: "cheerp/clientlib.h".}

proc set_tt*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_tt", header: "cheerp/clientlib.h".}

proc get_u*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_u", header: "cheerp/clientlib.h".}

proc set_u*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_u", header: "cheerp/clientlib.h".}

proc get_ul*(this: var HTMLElementTagNameMap): ptr HTMLUListElement {.
    importcpp: "get_ul", header: "cheerp/clientlib.h".}

proc set_ul*(this: var HTMLElementTagNameMap; a2: ptr HTMLUListElement) {.
    importcpp: "set_ul", header: "cheerp/clientlib.h".}

proc get_var*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_var", header: "cheerp/clientlib.h".}

proc set_var*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_var", header: "cheerp/clientlib.h".}

proc get_video*(this: var HTMLElementTagNameMap): ptr HTMLVideoElement {.
    importcpp: "get_video", header: "cheerp/clientlib.h".}

proc set_video*(this: var HTMLElementTagNameMap; a2: ptr HTMLVideoElement) {.
    importcpp: "set_video", header: "cheerp/clientlib.h".}

proc get_wbr*(this: var HTMLElementTagNameMap): ptr HTMLElement {.
    importcpp: "get_wbr", header: "cheerp/clientlib.h".}

proc set_wbr*(this: var HTMLElementTagNameMap; a2: ptr HTMLElement) {.
    importcpp: "set_wbr", header: "cheerp/clientlib.h".}

proc get_xmp*(this: var HTMLElementTagNameMap): ptr HTMLPreElement {.
    importcpp: "get_xmp", header: "cheerp/clientlib.h".}

proc set_xmp*(this: var HTMLElementTagNameMap; a2: ptr HTMLPreElement) {.
    importcpp: "set_xmp", header: "cheerp/clientlib.h".}

proc get_circle*(this: var SVGElementTagNameMap): ptr SVGCircleElement {.
    importcpp: "get_circle", header: "cheerp/clientlib.h".}

proc set_circle*(this: var SVGElementTagNameMap; a2: ptr SVGCircleElement) {.
    importcpp: "set_circle", header: "cheerp/clientlib.h".}

proc get_clippath*(this: var SVGElementTagNameMap): ptr SVGClipPathElement {.
    importcpp: "get_clippath", header: "cheerp/clientlib.h".}

proc set_clippath*(this: var SVGElementTagNameMap; a2: ptr SVGClipPathElement) {.
    importcpp: "set_clippath", header: "cheerp/clientlib.h".}

proc get_defs*(this: var SVGElementTagNameMap): ptr SVGDefsElement {.
    importcpp: "get_defs", header: "cheerp/clientlib.h".}

proc set_defs*(this: var SVGElementTagNameMap; a2: ptr SVGDefsElement) {.
    importcpp: "set_defs", header: "cheerp/clientlib.h".}

proc get_desc*(this: var SVGElementTagNameMap): ptr SVGDescElement {.
    importcpp: "get_desc", header: "cheerp/clientlib.h".}

proc set_desc*(this: var SVGElementTagNameMap; a2: ptr SVGDescElement) {.
    importcpp: "set_desc", header: "cheerp/clientlib.h".}

proc get_ellipse*(this: var SVGElementTagNameMap): ptr SVGEllipseElement {.
    importcpp: "get_ellipse", header: "cheerp/clientlib.h".}

proc set_ellipse*(this: var SVGElementTagNameMap; a2: ptr SVGEllipseElement) {.
    importcpp: "set_ellipse", header: "cheerp/clientlib.h".}

proc get_feblend*(this: var SVGElementTagNameMap): ptr SVGFEBlendElement {.
    importcpp: "get_feblend", header: "cheerp/clientlib.h".}

proc set_feblend*(this: var SVGElementTagNameMap; a2: ptr SVGFEBlendElement) {.
    importcpp: "set_feblend", header: "cheerp/clientlib.h".}

proc get_fecolormatrix*(this: var SVGElementTagNameMap): ptr SVGFEColorMatrixElement {.
    importcpp: "get_fecolormatrix", header: "cheerp/clientlib.h".}

proc set_fecolormatrix*(this: var SVGElementTagNameMap;
                        a2: ptr SVGFEColorMatrixElement) {.
    importcpp: "set_fecolormatrix", header: "cheerp/clientlib.h".}

proc get_fecomponenttransfer*(this: var SVGElementTagNameMap): ptr SVGFEComponentTransferElement {.
    importcpp: "get_fecomponenttransfer", header: "cheerp/clientlib.h".}

proc set_fecomponenttransfer*(this: var SVGElementTagNameMap;
                              a2: ptr SVGFEComponentTransferElement) {.
    importcpp: "set_fecomponenttransfer", header: "cheerp/clientlib.h".}

proc get_fecomposite*(this: var SVGElementTagNameMap): ptr SVGFECompositeElement {.
    importcpp: "get_fecomposite", header: "cheerp/clientlib.h".}

proc set_fecomposite*(this: var SVGElementTagNameMap;
                      a2: ptr SVGFECompositeElement) {.
    importcpp: "set_fecomposite", header: "cheerp/clientlib.h".}

proc get_feconvolvematrix*(this: var SVGElementTagNameMap): ptr SVGFEConvolveMatrixElement {.
    importcpp: "get_feconvolvematrix", header: "cheerp/clientlib.h".}

proc set_feconvolvematrix*(this: var SVGElementTagNameMap;
                           a2: ptr SVGFEConvolveMatrixElement) {.
    importcpp: "set_feconvolvematrix", header: "cheerp/clientlib.h".}

proc get_fediffuselighting*(this: var SVGElementTagNameMap): ptr SVGFEDiffuseLightingElement {.
    importcpp: "get_fediffuselighting", header: "cheerp/clientlib.h".}

proc set_fediffuselighting*(this: var SVGElementTagNameMap;
                            a2: ptr SVGFEDiffuseLightingElement) {.
    importcpp: "set_fediffuselighting", header: "cheerp/clientlib.h".}

proc get_fedisplacementmap*(this: var SVGElementTagNameMap): ptr SVGFEDisplacementMapElement {.
    importcpp: "get_fedisplacementmap", header: "cheerp/clientlib.h".}

proc set_fedisplacementmap*(this: var SVGElementTagNameMap;
                            a2: ptr SVGFEDisplacementMapElement) {.
    importcpp: "set_fedisplacementmap", header: "cheerp/clientlib.h".}

proc get_fedistantlight*(this: var SVGElementTagNameMap): ptr SVGFEDistantLightElement {.
    importcpp: "get_fedistantlight", header: "cheerp/clientlib.h".}

proc set_fedistantlight*(this: var SVGElementTagNameMap;
                         a2: ptr SVGFEDistantLightElement) {.
    importcpp: "set_fedistantlight", header: "cheerp/clientlib.h".}

proc get_feflood*(this: var SVGElementTagNameMap): ptr SVGFEFloodElement {.
    importcpp: "get_feflood", header: "cheerp/clientlib.h".}

proc set_feflood*(this: var SVGElementTagNameMap; a2: ptr SVGFEFloodElement) {.
    importcpp: "set_feflood", header: "cheerp/clientlib.h".}

proc get_fefunca*(this: var SVGElementTagNameMap): ptr SVGFEFuncAElement {.
    importcpp: "get_fefunca", header: "cheerp/clientlib.h".}

proc set_fefunca*(this: var SVGElementTagNameMap; a2: ptr SVGFEFuncAElement) {.
    importcpp: "set_fefunca", header: "cheerp/clientlib.h".}

proc get_fefuncb*(this: var SVGElementTagNameMap): ptr SVGFEFuncBElement {.
    importcpp: "get_fefuncb", header: "cheerp/clientlib.h".}

proc set_fefuncb*(this: var SVGElementTagNameMap; a2: ptr SVGFEFuncBElement) {.
    importcpp: "set_fefuncb", header: "cheerp/clientlib.h".}

proc get_fefuncg*(this: var SVGElementTagNameMap): ptr SVGFEFuncGElement {.
    importcpp: "get_fefuncg", header: "cheerp/clientlib.h".}

proc set_fefuncg*(this: var SVGElementTagNameMap; a2: ptr SVGFEFuncGElement) {.
    importcpp: "set_fefuncg", header: "cheerp/clientlib.h".}

proc get_fefuncr*(this: var SVGElementTagNameMap): ptr SVGFEFuncRElement {.
    importcpp: "get_fefuncr", header: "cheerp/clientlib.h".}

proc set_fefuncr*(this: var SVGElementTagNameMap; a2: ptr SVGFEFuncRElement) {.
    importcpp: "set_fefuncr", header: "cheerp/clientlib.h".}

proc get_fegaussianblur*(this: var SVGElementTagNameMap): ptr SVGFEGaussianBlurElement {.
    importcpp: "get_fegaussianblur", header: "cheerp/clientlib.h".}

proc set_fegaussianblur*(this: var SVGElementTagNameMap;
                         a2: ptr SVGFEGaussianBlurElement) {.
    importcpp: "set_fegaussianblur", header: "cheerp/clientlib.h".}

proc get_feimage*(this: var SVGElementTagNameMap): ptr SVGFEImageElement {.
    importcpp: "get_feimage", header: "cheerp/clientlib.h".}

proc set_feimage*(this: var SVGElementTagNameMap; a2: ptr SVGFEImageElement) {.
    importcpp: "set_feimage", header: "cheerp/clientlib.h".}

proc get_femerge*(this: var SVGElementTagNameMap): ptr SVGFEMergeElement {.
    importcpp: "get_femerge", header: "cheerp/clientlib.h".}

proc set_femerge*(this: var SVGElementTagNameMap; a2: ptr SVGFEMergeElement) {.
    importcpp: "set_femerge", header: "cheerp/clientlib.h".}

proc get_femergenode*(this: var SVGElementTagNameMap): ptr SVGFEMergeNodeElement {.
    importcpp: "get_femergenode", header: "cheerp/clientlib.h".}

proc set_femergenode*(this: var SVGElementTagNameMap;
                      a2: ptr SVGFEMergeNodeElement) {.
    importcpp: "set_femergenode", header: "cheerp/clientlib.h".}

proc get_femorphology*(this: var SVGElementTagNameMap): ptr SVGFEMorphologyElement {.
    importcpp: "get_femorphology", header: "cheerp/clientlib.h".}

proc set_femorphology*(this: var SVGElementTagNameMap;
                       a2: ptr SVGFEMorphologyElement) {.
    importcpp: "set_femorphology", header: "cheerp/clientlib.h".}

proc get_feoffset*(this: var SVGElementTagNameMap): ptr SVGFEOffsetElement {.
    importcpp: "get_feoffset", header: "cheerp/clientlib.h".}

proc set_feoffset*(this: var SVGElementTagNameMap; a2: ptr SVGFEOffsetElement) {.
    importcpp: "set_feoffset", header: "cheerp/clientlib.h".}

proc get_fepointlight*(this: var SVGElementTagNameMap): ptr SVGFEPointLightElement {.
    importcpp: "get_fepointlight", header: "cheerp/clientlib.h".}

proc set_fepointlight*(this: var SVGElementTagNameMap;
                       a2: ptr SVGFEPointLightElement) {.
    importcpp: "set_fepointlight", header: "cheerp/clientlib.h".}

proc get_fespecularlighting*(this: var SVGElementTagNameMap): ptr SVGFESpecularLightingElement {.
    importcpp: "get_fespecularlighting", header: "cheerp/clientlib.h".}

proc set_fespecularlighting*(this: var SVGElementTagNameMap;
                             a2: ptr SVGFESpecularLightingElement) {.
    importcpp: "set_fespecularlighting", header: "cheerp/clientlib.h".}

proc get_fespotlight*(this: var SVGElementTagNameMap): ptr SVGFESpotLightElement {.
    importcpp: "get_fespotlight", header: "cheerp/clientlib.h".}

proc set_fespotlight*(this: var SVGElementTagNameMap;
                      a2: ptr SVGFESpotLightElement) {.
    importcpp: "set_fespotlight", header: "cheerp/clientlib.h".}

proc get_fetile*(this: var SVGElementTagNameMap): ptr SVGFETileElement {.
    importcpp: "get_fetile", header: "cheerp/clientlib.h".}

proc set_fetile*(this: var SVGElementTagNameMap; a2: ptr SVGFETileElement) {.
    importcpp: "set_fetile", header: "cheerp/clientlib.h".}

proc get_feturbulence*(this: var SVGElementTagNameMap): ptr SVGFETurbulenceElement {.
    importcpp: "get_feturbulence", header: "cheerp/clientlib.h".}

proc set_feturbulence*(this: var SVGElementTagNameMap;
                       a2: ptr SVGFETurbulenceElement) {.
    importcpp: "set_feturbulence", header: "cheerp/clientlib.h".}

proc get_filter*(this: var SVGElementTagNameMap): ptr SVGFilterElement {.
    importcpp: "get_filter", header: "cheerp/clientlib.h".}

proc set_filter*(this: var SVGElementTagNameMap; a2: ptr SVGFilterElement) {.
    importcpp: "set_filter", header: "cheerp/clientlib.h".}

proc get_foreignobject*(this: var SVGElementTagNameMap): ptr SVGForeignObjectElement {.
    importcpp: "get_foreignobject", header: "cheerp/clientlib.h".}

proc set_foreignobject*(this: var SVGElementTagNameMap;
                        a2: ptr SVGForeignObjectElement) {.
    importcpp: "set_foreignobject", header: "cheerp/clientlib.h".}

proc get_g*(this: var SVGElementTagNameMap): ptr SVGGElement {.
    importcpp: "get_g", header: "cheerp/clientlib.h".}

proc set_g*(this: var SVGElementTagNameMap; a2: ptr SVGGElement) {.
    importcpp: "set_g", header: "cheerp/clientlib.h".}

proc get_image*(this: var SVGElementTagNameMap): ptr SVGImageElement {.
    importcpp: "get_image", header: "cheerp/clientlib.h".}

proc set_image*(this: var SVGElementTagNameMap; a2: ptr SVGImageElement) {.
    importcpp: "set_image", header: "cheerp/clientlib.h".}

proc get_line*(this: var SVGElementTagNameMap): ptr SVGLineElement {.
    importcpp: "get_line", header: "cheerp/clientlib.h".}

proc set_line*(this: var SVGElementTagNameMap; a2: ptr SVGLineElement) {.
    importcpp: "set_line", header: "cheerp/clientlib.h".}

proc get_lineargradient*(this: var SVGElementTagNameMap): ptr SVGLinearGradientElement {.
    importcpp: "get_lineargradient", header: "cheerp/clientlib.h".}

proc set_lineargradient*(this: var SVGElementTagNameMap;
                         a2: ptr SVGLinearGradientElement) {.
    importcpp: "set_lineargradient", header: "cheerp/clientlib.h".}

proc get_marker*(this: var SVGElementTagNameMap): ptr SVGMarkerElement {.
    importcpp: "get_marker", header: "cheerp/clientlib.h".}

proc set_marker*(this: var SVGElementTagNameMap; a2: ptr SVGMarkerElement) {.
    importcpp: "set_marker", header: "cheerp/clientlib.h".}

proc get_mask*(this: var SVGElementTagNameMap): ptr SVGMaskElement {.
    importcpp: "get_mask", header: "cheerp/clientlib.h".}

proc set_mask*(this: var SVGElementTagNameMap; a2: ptr SVGMaskElement) {.
    importcpp: "set_mask", header: "cheerp/clientlib.h".}

proc get_metadata*(this: var SVGElementTagNameMap): ptr SVGMetadataElement {.
    importcpp: "get_metadata", header: "cheerp/clientlib.h".}

proc set_metadata*(this: var SVGElementTagNameMap; a2: ptr SVGMetadataElement) {.
    importcpp: "set_metadata", header: "cheerp/clientlib.h".}

proc get_path*(this: var SVGElementTagNameMap): ptr SVGPathElement {.
    importcpp: "get_path", header: "cheerp/clientlib.h".}

proc set_path*(this: var SVGElementTagNameMap; a2: ptr SVGPathElement) {.
    importcpp: "set_path", header: "cheerp/clientlib.h".}

proc get_pattern*(this: var SVGElementTagNameMap): ptr SVGPatternElement {.
    importcpp: "get_pattern", header: "cheerp/clientlib.h".}

proc set_pattern*(this: var SVGElementTagNameMap; a2: ptr SVGPatternElement) {.
    importcpp: "set_pattern", header: "cheerp/clientlib.h".}

proc get_polygon*(this: var SVGElementTagNameMap): ptr SVGPolygonElement {.
    importcpp: "get_polygon", header: "cheerp/clientlib.h".}

proc set_polygon*(this: var SVGElementTagNameMap; a2: ptr SVGPolygonElement) {.
    importcpp: "set_polygon", header: "cheerp/clientlib.h".}

proc get_polyline*(this: var SVGElementTagNameMap): ptr SVGPolylineElement {.
    importcpp: "get_polyline", header: "cheerp/clientlib.h".}

proc set_polyline*(this: var SVGElementTagNameMap; a2: ptr SVGPolylineElement) {.
    importcpp: "set_polyline", header: "cheerp/clientlib.h".}

proc get_radialgradient*(this: var SVGElementTagNameMap): ptr SVGRadialGradientElement {.
    importcpp: "get_radialgradient", header: "cheerp/clientlib.h".}

proc set_radialgradient*(this: var SVGElementTagNameMap;
                         a2: ptr SVGRadialGradientElement) {.
    importcpp: "set_radialgradient", header: "cheerp/clientlib.h".}

proc get_rect*(this: var SVGElementTagNameMap): ptr SVGRectElement {.
    importcpp: "get_rect", header: "cheerp/clientlib.h".}

proc set_rect*(this: var SVGElementTagNameMap; a2: ptr SVGRectElement) {.
    importcpp: "set_rect", header: "cheerp/clientlib.h".}

proc get_stop*(this: var SVGElementTagNameMap): ptr SVGStopElement {.
    importcpp: "get_stop", header: "cheerp/clientlib.h".}

proc set_stop*(this: var SVGElementTagNameMap; a2: ptr SVGStopElement) {.
    importcpp: "set_stop", header: "cheerp/clientlib.h".}

proc get_svg*(this: var SVGElementTagNameMap): ptr SVGSVGElement {.
    importcpp: "get_svg", header: "cheerp/clientlib.h".}

proc set_svg*(this: var SVGElementTagNameMap; a2: ptr SVGSVGElement) {.
    importcpp: "set_svg", header: "cheerp/clientlib.h".}

proc get_switch*(this: var SVGElementTagNameMap): ptr SVGSwitchElement {.
    importcpp: "get_switch", header: "cheerp/clientlib.h".}

proc set_switch*(this: var SVGElementTagNameMap; a2: ptr SVGSwitchElement) {.
    importcpp: "set_switch", header: "cheerp/clientlib.h".}

proc get_symbol*(this: var SVGElementTagNameMap): ptr SVGSymbolElement {.
    importcpp: "get_symbol", header: "cheerp/clientlib.h".}

proc set_symbol*(this: var SVGElementTagNameMap; a2: ptr SVGSymbolElement) {.
    importcpp: "set_symbol", header: "cheerp/clientlib.h".}

proc get_text*(this: var SVGElementTagNameMap): ptr SVGTextElement {.
    importcpp: "get_text", header: "cheerp/clientlib.h".}

proc set_text*(this: var SVGElementTagNameMap; a2: ptr SVGTextElement) {.
    importcpp: "set_text", header: "cheerp/clientlib.h".}

proc get_textpath*(this: var SVGElementTagNameMap): ptr SVGTextPathElement {.
    importcpp: "get_textpath", header: "cheerp/clientlib.h".}

proc set_textpath*(this: var SVGElementTagNameMap; a2: ptr SVGTextPathElement) {.
    importcpp: "set_textpath", header: "cheerp/clientlib.h".}

proc get_tspan*(this: var SVGElementTagNameMap): ptr SVGTSpanElement {.
    importcpp: "get_tspan", header: "cheerp/clientlib.h".}

proc set_tspan*(this: var SVGElementTagNameMap; a2: ptr SVGTSpanElement) {.
    importcpp: "set_tspan", header: "cheerp/clientlib.h".}

proc get_use*(this: var SVGElementTagNameMap): ptr SVGUseElement {.
    importcpp: "get_use", header: "cheerp/clientlib.h".}

proc set_use*(this: var SVGElementTagNameMap; a2: ptr SVGUseElement) {.
    importcpp: "set_use", header: "cheerp/clientlib.h".}

proc get_view*(this: var SVGElementTagNameMap): ptr SVGViewElement {.
    importcpp: "get_view", header: "cheerp/clientlib.h".}

proc set_view*(this: var SVGElementTagNameMap; a2: ptr SVGViewElement) {.
    importcpp: "set_view", header: "cheerp/clientlib.h".}

proc constructActiveXObject*(s: String): ActiveXObject {.constructor,
    importcpp: "client::ActiveXObject(@)", header: "cheerp/clientlib.h".}

proc Write*(this: var ITextWriter; s: String) {.importcpp: "Write",
    header: "cheerp/clientlib.h".}

proc WriteLine*(this: var ITextWriter; s: String) {.importcpp: "WriteLine",
    header: "cheerp/clientlib.h".}

proc Close*(this: var ITextWriter) {.importcpp: "Close",
                                     header: "cheerp/clientlib.h".}

proc get_Column*(this: var TextStreamBase): cdouble {.importcpp: "get_Column",
    header: "cheerp/clientlib.h".}

proc set_Column*(this: var TextStreamBase; a2: cdouble) {.
    importcpp: "set_Column", header: "cheerp/clientlib.h".}

proc get_Line*(this: var TextStreamBase): cdouble {.importcpp: "get_Line",
    header: "cheerp/clientlib.h".}

proc set_Line*(this: var TextStreamBase; a2: cdouble) {.importcpp: "set_Line",
    header: "cheerp/clientlib.h".}

proc Close*(this: var TextStreamBase) {.importcpp: "Close",
                                        header: "cheerp/clientlib.h".}

proc Write*(this: var TextStreamWriter; s: String) {.importcpp: "Write",
    header: "cheerp/clientlib.h".}

proc WriteBlankLines*(this: var TextStreamWriter; intLines: cdouble) {.
    importcpp: "WriteBlankLines", header: "cheerp/clientlib.h".}

proc WriteLine*(this: var TextStreamWriter; s: String) {.importcpp: "WriteLine",
    header: "cheerp/clientlib.h".}

proc Read*(this: var TextStreamReader; characters: cdouble): ptr String {.
    importcpp: "Read", header: "cheerp/clientlib.h".}

proc ReadAll*(this: var TextStreamReader): ptr String {.importcpp: "ReadAll",
    header: "cheerp/clientlib.h".}

proc ReadLine*(this: var TextStreamReader): ptr String {.importcpp: "ReadLine",
    header: "cheerp/clientlib.h".}

proc Skip*(this: var TextStreamReader; characters: cdouble) {.importcpp: "Skip",
    header: "cheerp/clientlib.h".}

proc SkipLine*(this: var TextStreamReader) {.importcpp: "SkipLine",
    header: "cheerp/clientlib.h".}

proc get_AtEndOfLine*(this: var TextStreamReader): bool {.
    importcpp: "get_AtEndOfLine", header: "cheerp/clientlib.h".}

proc set_AtEndOfLine*(this: var TextStreamReader; a2: bool) {.
    importcpp: "set_AtEndOfLine", header: "cheerp/clientlib.h".}

proc get_AtEndOfStream*(this: var TextStreamReader): bool {.
    importcpp: "get_AtEndOfStream", header: "cheerp/clientlib.h".}

proc set_AtEndOfStream*(this: var TextStreamReader; a2: bool) {.
    importcpp: "set_AtEndOfStream", header: "cheerp/clientlib.h".}
var
  NaN* {.importcpp: "client::NaN", header: "cheerp/clientlib.h".}: cdouble
  Infinity* {.importcpp: "client::Infinity", header: "cheerp/clientlib.h".}: cdouble


proc parseInt*(s: String): cdouble {.importcpp: "client::parseInt(@)",
                                     header: "cheerp/clientlib.h".}

proc parseInt*(s: String; radix: cdouble): cdouble {.
    importcpp: "client::parseInt(@)", header: "cheerp/clientlib.h".}

proc parseFloat*(string: String): cdouble {.importcpp: "client::parseFloat(@)",
    header: "cheerp/clientlib.h".}

proc isNaN*(number: cdouble): bool {.importcpp: "client::isNaN(@)",
                                     header: "cheerp/clientlib.h".}

proc isFinite*(number: cdouble): bool {.importcpp: "client::isFinite(@)",
                                        header: "cheerp/clientlib.h".}

proc decodeURI*(encodedURI: String): ptr String {.
    importcpp: "client::decodeURI(@)", header: "cheerp/clientlib.h".}

proc decodeURIComponent*(encodedURIComponent: String): ptr String {.
    importcpp: "client::decodeURIComponent(@)", header: "cheerp/clientlib.h".}

proc encodeURI*(uri: String): ptr String {.importcpp: "client::encodeURI(@)",
    header: "cheerp/clientlib.h".}

proc encodeURIComponent*(uriComponent: String): ptr String {.
    importcpp: "client::encodeURIComponent(@)", header: "cheerp/clientlib.h".}

proc escape*(string: String): ptr String {.importcpp: "client::escape(@)",
    header: "cheerp/clientlib.h".}

proc unescape*(string: String): ptr String {.importcpp: "client::unescape(@)",
    header: "cheerp/clientlib.h".}
var
  Math* {.importcpp: "client::Math", header: "cheerp/clientlib.h".}: Math
  JSON* {.importcpp: "client::JSON", header: "cheerp/clientlib.h".}: JSON
  CSS* {.importcpp: "client::CSS", header: "cheerp/clientlib.h".}: CSS
  SVGUnitTypes* {.importcpp: "client::SVGUnitTypes",
                  header: "cheerp/clientlib.h".}: SVGUnitTypes
  ServiceUIFrameContext* {.importcpp: "client::ServiceUIFrameContext",
                           header: "cheerp/clientlib.h".}: ServiceUIFrameContext
  URL* {.importcpp: "client::URL", header: "cheerp/clientlib.h".}: URL
  URLSearchParams* {.importcpp: "client::URLSearchParams",
                     header: "cheerp/clientlib.h".}: URLSearchParams
  applicationCache* {.importcpp: "client::applicationCache",
                      header: "cheerp/clientlib.h".}: ApplicationCache
  caches* {.importcpp: "client::caches", header: "cheerp/clientlib.h".}: CacheStorage
  clientInformation* {.importcpp: "client::clientInformation",
                       header: "cheerp/clientlib.h".}: Navigator
  closed* {.importcpp: "client::closed", header: "cheerp/clientlib.h".}: bool
  crypto* {.importcpp: "client::crypto", header: "cheerp/clientlib.h".}: Crypto
  customElements* {.importcpp: "client::customElements",
                    header: "cheerp/clientlib.h".}: CustomElementRegistry
  defaultStatus* {.importcpp: "client::defaultStatus",
                   header: "cheerp/clientlib.h".}: String
  devicePixelRatio* {.importcpp: "client::devicePixelRatio",
                      header: "cheerp/clientlib.h".}: cdouble
  doNotTrack* {.importcpp: "client::doNotTrack", header: "cheerp/clientlib.h".}: String
  document* {.importcpp: "client::document", header: "cheerp/clientlib.h".}: Document
  event* {.importcpp: "client::event", header: "cheerp/clientlib.h".}: Event
  external* {.importcpp: "client::external", header: "cheerp/clientlib.h".}: External
  frameElement* {.importcpp: "client::frameElement",
                  header: "cheerp/clientlib.h".}: Element
  frames* {.importcpp: "client::frames", header: "cheerp/clientlib.h".}: Window
  history* {.importcpp: "client::history", header: "cheerp/clientlib.h".}: History
  innerHeight* {.importcpp: "client::innerHeight", header: "cheerp/clientlib.h".}: cdouble
  innerWidth* {.importcpp: "client::innerWidth", header: "cheerp/clientlib.h".}: cdouble
  isSecureContext* {.importcpp: "client::isSecureContext",
                     header: "cheerp/clientlib.h".}: bool
  length* {.importcpp: "client::length", header: "cheerp/clientlib.h".}: cdouble
  location* {.importcpp: "client::location", header: "cheerp/clientlib.h".}: Location
  locationbar* {.importcpp: "client::locationbar", header: "cheerp/clientlib.h".}: BarProp
  menubar* {.importcpp: "client::menubar", header: "cheerp/clientlib.h".}: BarProp
  msContentScript* {.importcpp: "client::msContentScript",
                     header: "cheerp/clientlib.h".}: ExtensionScriptApis
  msCredentials* {.importcpp: "client::msCredentials",
                   header: "cheerp/clientlib.h".}: MSCredentials
  navigator* {.importcpp: "client::navigator", header: "cheerp/clientlib.h".}: Navigator
  offscreenBuffering* {.importcpp: "client::offscreenBuffering",
                        header: "cheerp/clientlib.h".}: String
  onabort* {.importcpp: "client::onabort", header: "cheerp/clientlib.h".}: ptr EventListener
  onafterprint* {.importcpp: "client::onafterprint",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onbeforeprint* {.importcpp: "client::onbeforeprint",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  onbeforeunload* {.importcpp: "client::onbeforeunload",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onblur* {.importcpp: "client::onblur", header: "cheerp/clientlib.h".}: ptr EventListener
  oncanplay* {.importcpp: "client::oncanplay", header: "cheerp/clientlib.h".}: ptr EventListener
  oncanplaythrough* {.importcpp: "client::oncanplaythrough",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onchange* {.importcpp: "client::onchange", header: "cheerp/clientlib.h".}: ptr EventListener
  onclick* {.importcpp: "client::onclick", header: "cheerp/clientlib.h".}: ptr EventListener
  oncompassneedscalibration* {.importcpp: "client::oncompassneedscalibration",
                               header: "cheerp/clientlib.h".}: ptr EventListener
  oncontextmenu* {.importcpp: "client::oncontextmenu",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  ondblclick* {.importcpp: "client::ondblclick", header: "cheerp/clientlib.h".}: ptr EventListener
  ondevicelight* {.importcpp: "client::ondevicelight",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  ondevicemotion* {.importcpp: "client::ondevicemotion",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  ondeviceorientation* {.importcpp: "client::ondeviceorientation",
                         header: "cheerp/clientlib.h".}: ptr EventListener
  ondrag* {.importcpp: "client::ondrag", header: "cheerp/clientlib.h".}: ptr EventListener
  ondragend* {.importcpp: "client::ondragend", header: "cheerp/clientlib.h".}: ptr EventListener
  ondragenter* {.importcpp: "client::ondragenter", header: "cheerp/clientlib.h".}: ptr EventListener
  ondragleave* {.importcpp: "client::ondragleave", header: "cheerp/clientlib.h".}: ptr EventListener
  ondragover* {.importcpp: "client::ondragover", header: "cheerp/clientlib.h".}: ptr EventListener
  ondragstart* {.importcpp: "client::ondragstart", header: "cheerp/clientlib.h".}: ptr EventListener
  ondrop* {.importcpp: "client::ondrop", header: "cheerp/clientlib.h".}: ptr EventListener
  ondurationchange* {.importcpp: "client::ondurationchange",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onemptied* {.importcpp: "client::onemptied", header: "cheerp/clientlib.h".}: ptr EventListener
  onended* {.importcpp: "client::onended", header: "cheerp/clientlib.h".}: ptr EventListener
  onerror* {.importcpp: "client::onerror", header: "cheerp/clientlib.h".}: ErrorEventHandler
  onfocus* {.importcpp: "client::onfocus", header: "cheerp/clientlib.h".}: ptr EventListener
  onhashchange* {.importcpp: "client::onhashchange",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  oninput* {.importcpp: "client::oninput", header: "cheerp/clientlib.h".}: ptr EventListener
  oninvalid* {.importcpp: "client::oninvalid", header: "cheerp/clientlib.h".}: ptr EventListener
  onkeydown* {.importcpp: "client::onkeydown", header: "cheerp/clientlib.h".}: ptr EventListener
  onkeypress* {.importcpp: "client::onkeypress", header: "cheerp/clientlib.h".}: ptr EventListener
  onkeyup* {.importcpp: "client::onkeyup", header: "cheerp/clientlib.h".}: ptr EventListener
  onload* {.importcpp: "client::onload", header: "cheerp/clientlib.h".}: ptr EventListener
  onloadeddata* {.importcpp: "client::onloadeddata",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onloadedmetadata* {.importcpp: "client::onloadedmetadata",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onloadstart* {.importcpp: "client::onloadstart", header: "cheerp/clientlib.h".}: ptr EventListener
  onmessage* {.importcpp: "client::onmessage", header: "cheerp/clientlib.h".}: ptr EventListener
  onmousedown* {.importcpp: "client::onmousedown", header: "cheerp/clientlib.h".}: ptr EventListener
  onmouseenter* {.importcpp: "client::onmouseenter",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onmouseleave* {.importcpp: "client::onmouseleave",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onmousemove* {.importcpp: "client::onmousemove", header: "cheerp/clientlib.h".}: ptr EventListener
  onmouseout* {.importcpp: "client::onmouseout", header: "cheerp/clientlib.h".}: ptr EventListener
  onmouseover* {.importcpp: "client::onmouseover", header: "cheerp/clientlib.h".}: ptr EventListener
  onmouseup* {.importcpp: "client::onmouseup", header: "cheerp/clientlib.h".}: ptr EventListener
  onmousewheel* {.importcpp: "client::onmousewheel",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onmsgesturechange* {.importcpp: "client::onmsgesturechange",
                       header: "cheerp/clientlib.h".}: ptr EventListener
  onmsgesturedoubletap* {.importcpp: "client::onmsgesturedoubletap",
                          header: "cheerp/clientlib.h".}: ptr EventListener
  onmsgestureend* {.importcpp: "client::onmsgestureend",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onmsgesturehold* {.importcpp: "client::onmsgesturehold",
                     header: "cheerp/clientlib.h".}: ptr EventListener
  onmsgesturestart* {.importcpp: "client::onmsgesturestart",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onmsgesturetap* {.importcpp: "client::onmsgesturetap",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onmsinertiastart* {.importcpp: "client::onmsinertiastart",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointercancel* {.importcpp: "client::onmspointercancel",
                       header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointerdown* {.importcpp: "client::onmspointerdown",
                     header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointerenter* {.importcpp: "client::onmspointerenter",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointerleave* {.importcpp: "client::onmspointerleave",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointermove* {.importcpp: "client::onmspointermove",
                     header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointerout* {.importcpp: "client::onmspointerout",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointerover* {.importcpp: "client::onmspointerover",
                     header: "cheerp/clientlib.h".}: ptr EventListener
  onmspointerup* {.importcpp: "client::onmspointerup",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  onoffline* {.importcpp: "client::onoffline", header: "cheerp/clientlib.h".}: ptr EventListener
  ononline* {.importcpp: "client::ononline", header: "cheerp/clientlib.h".}: ptr EventListener
  onorientationchange* {.importcpp: "client::onorientationchange",
                         header: "cheerp/clientlib.h".}: ptr EventListener
  onpagehide* {.importcpp: "client::onpagehide", header: "cheerp/clientlib.h".}: ptr EventListener
  onpageshow* {.importcpp: "client::onpageshow", header: "cheerp/clientlib.h".}: ptr EventListener
  onpause* {.importcpp: "client::onpause", header: "cheerp/clientlib.h".}: ptr EventListener
  onplay* {.importcpp: "client::onplay", header: "cheerp/clientlib.h".}: ptr EventListener
  onplaying* {.importcpp: "client::onplaying", header: "cheerp/clientlib.h".}: ptr EventListener
  onpopstate* {.importcpp: "client::onpopstate", header: "cheerp/clientlib.h".}: ptr EventListener
  onprogress* {.importcpp: "client::onprogress", header: "cheerp/clientlib.h".}: ptr EventListener
  onratechange* {.importcpp: "client::onratechange",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onreadystatechange* {.importcpp: "client::onreadystatechange",
                        header: "cheerp/clientlib.h".}: ptr EventListener
  onreset* {.importcpp: "client::onreset", header: "cheerp/clientlib.h".}: ptr EventListener
  onresize* {.importcpp: "client::onresize", header: "cheerp/clientlib.h".}: ptr EventListener
  onscroll* {.importcpp: "client::onscroll", header: "cheerp/clientlib.h".}: ptr EventListener
  onseeked* {.importcpp: "client::onseeked", header: "cheerp/clientlib.h".}: ptr EventListener
  onseeking* {.importcpp: "client::onseeking", header: "cheerp/clientlib.h".}: ptr EventListener
  onselect* {.importcpp: "client::onselect", header: "cheerp/clientlib.h".}: ptr EventListener
  onstalled* {.importcpp: "client::onstalled", header: "cheerp/clientlib.h".}: ptr EventListener
  onstorage* {.importcpp: "client::onstorage", header: "cheerp/clientlib.h".}: ptr EventListener
  onsubmit* {.importcpp: "client::onsubmit", header: "cheerp/clientlib.h".}: ptr EventListener
  onsuspend* {.importcpp: "client::onsuspend", header: "cheerp/clientlib.h".}: ptr EventListener
  ontimeupdate* {.importcpp: "client::ontimeupdate",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  ontouchcancel* {.importcpp: "client::ontouchcancel",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  ontouchend* {.importcpp: "client::ontouchend", header: "cheerp/clientlib.h".}: ptr EventListener
  ontouchmove* {.importcpp: "client::ontouchmove", header: "cheerp/clientlib.h".}: ptr EventListener
  ontouchstart* {.importcpp: "client::ontouchstart",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onunload* {.importcpp: "client::onunload", header: "cheerp/clientlib.h".}: ptr EventListener
  onvolumechange* {.importcpp: "client::onvolumechange",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplayactivate* {.importcpp: "client::onvrdisplayactivate",
                         header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplayblur* {.importcpp: "client::onvrdisplayblur",
                     header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplayconnect* {.importcpp: "client::onvrdisplayconnect",
                        header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplaydeactivate* {.importcpp: "client::onvrdisplaydeactivate",
                           header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplaydisconnect* {.importcpp: "client::onvrdisplaydisconnect",
                           header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplayfocus* {.importcpp: "client::onvrdisplayfocus",
                      header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplaypointerrestricted* {.importcpp: "client::onvrdisplaypointerrestricted",
                                  header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplaypointerunrestricted* {.importcpp: "client::onvrdisplaypointerunrestricted",
                                    header: "cheerp/clientlib.h".}: ptr EventListener
  onvrdisplaypresentchange* {.importcpp: "client::onvrdisplaypresentchange",
                              header: "cheerp/clientlib.h".}: ptr EventListener
  onwaiting* {.importcpp: "client::onwaiting", header: "cheerp/clientlib.h".}: ptr EventListener
  opener* {.importcpp: "client::opener", header: "cheerp/clientlib.h".}: ptr Object
  orientation* {.importcpp: "client::orientation", header: "cheerp/clientlib.h".}: String
  outerHeight* {.importcpp: "client::outerHeight", header: "cheerp/clientlib.h".}: cdouble
  outerWidth* {.importcpp: "client::outerWidth", header: "cheerp/clientlib.h".}: cdouble
  pageXOffset* {.importcpp: "client::pageXOffset", header: "cheerp/clientlib.h".}: cdouble
  pageYOffset* {.importcpp: "client::pageYOffset", header: "cheerp/clientlib.h".}: cdouble
  parent* {.importcpp: "client::parent", header: "cheerp/clientlib.h".}: Window
  performance* {.importcpp: "client::performance", header: "cheerp/clientlib.h".}: Performance
  personalbar* {.importcpp: "client::personalbar", header: "cheerp/clientlib.h".}: BarProp
  screen* {.importcpp: "client::screen", header: "cheerp/clientlib.h".}: Screen
  screenLeft* {.importcpp: "client::screenLeft", header: "cheerp/clientlib.h".}: cdouble
  screenTop* {.importcpp: "client::screenTop", header: "cheerp/clientlib.h".}: cdouble
  screenX* {.importcpp: "client::screenX", header: "cheerp/clientlib.h".}: cdouble
  screenY* {.importcpp: "client::screenY", header: "cheerp/clientlib.h".}: cdouble
  scrollX* {.importcpp: "client::scrollX", header: "cheerp/clientlib.h".}: cdouble
  scrollY* {.importcpp: "client::scrollY", header: "cheerp/clientlib.h".}: cdouble
  scrollbars* {.importcpp: "client::scrollbars", header: "cheerp/clientlib.h".}: BarProp
  self* {.importcpp: "client::self", header: "cheerp/clientlib.h".}: Window
  speechSynthesis* {.importcpp: "client::speechSynthesis",
                     header: "cheerp/clientlib.h".}: SpeechSynthesis
  status* {.importcpp: "client::status", header: "cheerp/clientlib.h".}: String
  statusbar* {.importcpp: "client::statusbar", header: "cheerp/clientlib.h".}: BarProp
  styleMedia* {.importcpp: "client::styleMedia", header: "cheerp/clientlib.h".}: StyleMedia
  toolbar* {.importcpp: "client::toolbar", header: "cheerp/clientlib.h".}: BarProp
  top* {.importcpp: "client::top", header: "cheerp/clientlib.h".}: Window
  window* {.importcpp: "client::window", header: "cheerp/clientlib.h".}: Window


proc alert*() {.importcpp: "client::alert(@)", header: "cheerp/clientlib.h".}

proc alert*(message: ptr Object) {.importcpp: "client::alert(@)",
                                   header: "cheerp/clientlib.h".}

proc blur*() {.importcpp: "client::blur(@)", header: "cheerp/clientlib.h".}

proc cancelAnimationFrame*(handle: cdouble) {.
    importcpp: "client::cancelAnimationFrame(@)", header: "cheerp/clientlib.h".}

proc captureEvents*() {.importcpp: "client::captureEvents(@)",
                        header: "cheerp/clientlib.h".}

proc close*() {.importcpp: "client::close(@)", header: "cheerp/clientlib.h".}

proc confirm*(): bool {.importcpp: "client::confirm(@)",
                        header: "cheerp/clientlib.h".}

proc confirm*(message: String): bool {.importcpp: "client::confirm(@)",
                                       header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLImageElement): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLImageElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr SVGImageElement): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr SVGImageElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLVideoElement): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLVideoElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLCanvasElement): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLCanvasElement;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageBitmap): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageBitmap; options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageData): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageData; options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLImageElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLImageElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr SVGImageElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr SVGImageElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLVideoElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLVideoElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLCanvasElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr HTMLCanvasElement; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageBitmap; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageBitmap; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageData; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc createImageBitmap*(image: ptr ImageData; sx: cdouble; sy: cdouble;
                        sw: cdouble; sh: cdouble;
                        options: ptr ImageBitmapOptions): ptr Promise {.
    importcpp: "client::createImageBitmap(@)", header: "cheerp/clientlib.h".}

proc focus*() {.importcpp: "client::focus(@)", header: "cheerp/clientlib.h".}

proc getComputedStyle*(elt: ptr Element): ptr CSSStyleDeclaration {.
    importcpp: "client::getComputedStyle(@)", header: "cheerp/clientlib.h".}

proc getComputedStyle*(elt: ptr Element; pseudoElt: String): ptr CSSStyleDeclaration {.
    importcpp: "client::getComputedStyle(@)", header: "cheerp/clientlib.h".}

proc getMatchedCSSRules*(elt: ptr Element): ptr CSSRuleList {.
    importcpp: "client::getMatchedCSSRules(@)", header: "cheerp/clientlib.h".}

proc getMatchedCSSRules*(elt: ptr Element; pseudoElt: String): ptr CSSRuleList {.
    importcpp: "client::getMatchedCSSRules(@)", header: "cheerp/clientlib.h".}

proc getSelection*(): ptr Selection {.importcpp: "client::getSelection(@)",
                                      header: "cheerp/clientlib.h".}

proc matchMedia*(mediaQuery: String): ptr MediaQueryList {.
    importcpp: "client::matchMedia(@)", header: "cheerp/clientlib.h".}

proc moveBy*() {.importcpp: "client::moveBy(@)", header: "cheerp/clientlib.h".}

proc moveBy*(x: cdouble) {.importcpp: "client::moveBy(@)",
                           header: "cheerp/clientlib.h".}

proc moveBy*(x: cdouble; y: cdouble) {.importcpp: "client::moveBy(@)",
                                       header: "cheerp/clientlib.h".}

proc moveTo*() {.importcpp: "client::moveTo(@)", header: "cheerp/clientlib.h".}

proc moveTo*(x: cdouble) {.importcpp: "client::moveTo(@)",
                           header: "cheerp/clientlib.h".}

proc moveTo*(x: cdouble; y: cdouble) {.importcpp: "client::moveTo(@)",
                                       header: "cheerp/clientlib.h".}

proc msWriteProfilerMark*(profilerMarkName: String) {.
    importcpp: "client::msWriteProfilerMark(@)", header: "cheerp/clientlib.h".}

proc open*(): ptr Window {.importcpp: "client::open(@)",
                           header: "cheerp/clientlib.h".}

proc open*(url: String): ptr Window {.importcpp: "client::open(@)",
                                      header: "cheerp/clientlib.h".}

proc open*(url: String; target: String): ptr Window {.
    importcpp: "client::open(@)", header: "cheerp/clientlib.h".}

proc open*(url: String; target: String; features: String): ptr Window {.
    importcpp: "client::open(@)", header: "cheerp/clientlib.h".}

proc open*(url: String; target: String; features: String; replace: bool): ptr Window {.
    importcpp: "client::open(@)", header: "cheerp/clientlib.h".}

proc postMessage*(message: ptr Object) {.importcpp: "client::postMessage(@)",
    header: "cheerp/clientlib.h".}

proc postMessage*(message: ptr Object; transfer: ptr Array) {.
    importcpp: "client::postMessage(@)", header: "cheerp/clientlib.h".}

proc postMessage*(message: ptr Object; targetOrigin: String) {.
    importcpp: "client::postMessage(@)", header: "cheerp/clientlib.h".}

proc postMessage*(message: ptr Object; targetOrigin: String; transfer: ptr Array) {.
    importcpp: "client::postMessage(@)", header: "cheerp/clientlib.h".}

proc postMessage*(message: String) {.importcpp: "client::postMessage(@)",
                                     header: "cheerp/clientlib.h".}

proc postMessage*(message: String; transfer: ptr Array) {.
    importcpp: "client::postMessage(@)", header: "cheerp/clientlib.h".}

proc postMessage*(message: String; targetOrigin: String) {.
    importcpp: "client::postMessage(@)", header: "cheerp/clientlib.h".}

proc postMessage*(message: String; targetOrigin: String; transfer: ptr Array) {.
    importcpp: "client::postMessage(@)", header: "cheerp/clientlib.h".}

proc print*() {.importcpp: "client::print(@)", header: "cheerp/clientlib.h".}

proc prompt*(): ptr String {.importcpp: "client::prompt(@)",
                             header: "cheerp/clientlib.h".}

proc prompt*(message: String): ptr String {.importcpp: "client::prompt(@)",
    header: "cheerp/clientlib.h".}

proc prompt*(message: String; p_default: String): ptr String {.
    importcpp: "client::prompt(@)", header: "cheerp/clientlib.h".}

proc releaseEvents*() {.importcpp: "client::releaseEvents(@)",
                        header: "cheerp/clientlib.h".}

proc requestAnimationFrame*(callback: ptr EventListener): cdouble {.
    importcpp: "client::requestAnimationFrame(@)", header: "cheerp/clientlib.h".}

proc resizeBy*() {.importcpp: "client::resizeBy(@)",
                   header: "cheerp/clientlib.h".}

proc resizeBy*(x: cdouble) {.importcpp: "client::resizeBy(@)",
                             header: "cheerp/clientlib.h".}

proc resizeBy*(x: cdouble; y: cdouble) {.importcpp: "client::resizeBy(@)",
    header: "cheerp/clientlib.h".}

proc resizeTo*() {.importcpp: "client::resizeTo(@)",
                   header: "cheerp/clientlib.h".}

proc resizeTo*(x: cdouble) {.importcpp: "client::resizeTo(@)",
                             header: "cheerp/clientlib.h".}

proc resizeTo*(x: cdouble; y: cdouble) {.importcpp: "client::resizeTo(@)",
    header: "cheerp/clientlib.h".}

proc scroll*(options: ptr ScrollToOptions) {.importcpp: "client::scroll(@)",
    header: "cheerp/clientlib.h".}

proc scroll*() {.importcpp: "client::scroll(@)", header: "cheerp/clientlib.h".}

proc scroll*(x: cdouble) {.importcpp: "client::scroll(@)",
                           header: "cheerp/clientlib.h".}

proc scroll*(x: cdouble; y: cdouble) {.importcpp: "client::scroll(@)",
                                       header: "cheerp/clientlib.h".}

proc scrollBy*(options: ptr ScrollToOptions) {.importcpp: "client::scrollBy(@)",
    header: "cheerp/clientlib.h".}

proc scrollBy*() {.importcpp: "client::scrollBy(@)",
                   header: "cheerp/clientlib.h".}

proc scrollBy*(x: cdouble) {.importcpp: "client::scrollBy(@)",
                             header: "cheerp/clientlib.h".}

proc scrollBy*(x: cdouble; y: cdouble) {.importcpp: "client::scrollBy(@)",
    header: "cheerp/clientlib.h".}

proc scrollTo*(options: ptr ScrollToOptions) {.importcpp: "client::scrollTo(@)",
    header: "cheerp/clientlib.h".}

proc scrollTo*() {.importcpp: "client::scrollTo(@)",
                   header: "cheerp/clientlib.h".}

proc scrollTo*(x: cdouble) {.importcpp: "client::scrollTo(@)",
                             header: "cheerp/clientlib.h".}

proc scrollTo*(x: cdouble; y: cdouble) {.importcpp: "client::scrollTo(@)",
    header: "cheerp/clientlib.h".}

proc stop*() {.importcpp: "client::stop(@)", header: "cheerp/clientlib.h".}

proc webkitCancelAnimationFrame*(handle: cdouble) {.
    importcpp: "client::webkitCancelAnimationFrame(@)",
    header: "cheerp/clientlib.h".}

proc webkitConvertPointFromNodeToPage*(node: ptr Node; pt: ptr WebKitPoint): ptr WebKitPoint {.
    importcpp: "client::webkitConvertPointFromNodeToPage(@)",
    header: "cheerp/clientlib.h".}

proc webkitConvertPointFromPageToNode*(node: ptr Node; pt: ptr WebKitPoint): ptr WebKitPoint {.
    importcpp: "client::webkitConvertPointFromPageToNode(@)",
    header: "cheerp/clientlib.h".}

proc webkitRequestAnimationFrame*(callback: ptr EventListener): cdouble {.
    importcpp: "client::webkitRequestAnimationFrame(@)",
    header: "cheerp/clientlib.h".}

proc toString*(): ptr String {.importcpp: "client::toString(@)",
                               header: "cheerp/clientlib.h".}

proc dispatchEvent*(evt: ptr Event): bool {.
    importcpp: "client::dispatchEvent(@)", header: "cheerp/clientlib.h".}

proc clearInterval*() {.importcpp: "client::clearInterval(@)",
                        header: "cheerp/clientlib.h".}

proc clearInterval*(handle: cdouble) {.importcpp: "client::clearInterval(@)",
                                       header: "cheerp/clientlib.h".}

proc clearTimeout*() {.importcpp: "client::clearTimeout(@)",
                       header: "cheerp/clientlib.h".}

proc clearTimeout*(handle: cdouble) {.importcpp: "client::clearTimeout(@)",
                                      header: "cheerp/clientlib.h".}

proc setInterval*(handler: ptr EventListener; timeout: cdouble): cdouble {.
    importcpp: "client::setInterval(@)", header: "cheerp/clientlib.h".}

proc setInterval*(handler: ptr Object): cdouble {.
    importcpp: "client::setInterval(@)", header: "cheerp/clientlib.h".}

proc setInterval*(handler: ptr Object; timeout: ptr Object): cdouble {.
    importcpp: "client::setInterval(@)", header: "cheerp/clientlib.h".}

proc setTimeout*(handler: ptr EventListener; timeout: cdouble): cdouble {.
    importcpp: "client::setTimeout(@)", header: "cheerp/clientlib.h".}

proc setTimeout*(handler: ptr Object): cdouble {.
    importcpp: "client::setTimeout(@)", header: "cheerp/clientlib.h".}

proc setTimeout*(handler: ptr Object; timeout: ptr Object): cdouble {.
    importcpp: "client::setTimeout(@)", header: "cheerp/clientlib.h".}

proc clearImmediate*(handle: cdouble) {.importcpp: "client::clearImmediate(@)",
                                        header: "cheerp/clientlib.h".}

proc setImmediate*(handler: ptr EventListener): cdouble {.
    importcpp: "client::setImmediate(@)", header: "cheerp/clientlib.h".}

proc setImmediate*(handler: ptr Object): cdouble {.
    importcpp: "client::setImmediate(@)", header: "cheerp/clientlib.h".}
var
  sessionStorage* {.importcpp: "client::sessionStorage",
                    header: "cheerp/clientlib.h".}: Storage
  localStorage* {.importcpp: "client::localStorage",
                  header: "cheerp/clientlib.h".}: Storage
  console* {.importcpp: "client::console", header: "cheerp/clientlib.h".}: Console
  onpointercancel* {.importcpp: "client::onpointercancel",
                     header: "cheerp/clientlib.h".}: ptr EventListener
  onpointerdown* {.importcpp: "client::onpointerdown",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  onpointerenter* {.importcpp: "client::onpointerenter",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onpointerleave* {.importcpp: "client::onpointerleave",
                    header: "cheerp/clientlib.h".}: ptr EventListener
  onpointermove* {.importcpp: "client::onpointermove",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  onpointerout* {.importcpp: "client::onpointerout",
                  header: "cheerp/clientlib.h".}: ptr EventListener
  onpointerover* {.importcpp: "client::onpointerover",
                   header: "cheerp/clientlib.h".}: ptr EventListener
  onpointerup* {.importcpp: "client::onpointerup", header: "cheerp/clientlib.h".}: ptr EventListener
  onwheel* {.importcpp: "client::onwheel", header: "cheerp/clientlib.h".}: ptr EventListener
  indexedDB* {.importcpp: "client::indexedDB", header: "cheerp/clientlib.h".}: IDBFactory


proc atob*(encodedString: String): ptr String {.importcpp: "client::atob(@)",
    header: "cheerp/clientlib.h".}

proc btoa*(rawString: String): ptr String {.importcpp: "client::btoa(@)",
    header: "cheerp/clientlib.h".}

proc fetch*(): ptr Promise {.importcpp: "client::fetch(@)",
                             header: "cheerp/clientlib.h".}

proc fetch*(input: ptr Request): ptr Promise {.importcpp: "client::fetch(@)",
    header: "cheerp/clientlib.h".}

proc fetch*(input: ptr Request; init: ptr RequestInit): ptr Promise {.
    importcpp: "client::fetch(@)", header: "cheerp/clientlib.h".}

proc fetch*(input: String): ptr Promise {.importcpp: "client::fetch(@)",
    header: "cheerp/clientlib.h".}

proc fetch*(input: String; init: ptr RequestInit): ptr Promise {.
    importcpp: "client::fetch(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(`type`: String; listener: ptr EventListener) {.
    importcpp: "client::addEventListener(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(`type`: String; listener: ptr EventListener;
                       options: bool) {.importcpp: "client::addEventListener(@)",
                                        header: "cheerp/clientlib.h".}

proc addEventListener*(`type`: String; listener: ptr EventListener;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "client::addEventListener(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(`type`: String; listener: ptr EventListenerObject) {.
    importcpp: "client::addEventListener(@)", header: "cheerp/clientlib.h".}

proc addEventListener*(`type`: String; listener: ptr EventListenerObject;
                       options: ptr AddEventListenerOptions) {.
    importcpp: "client::addEventListener(@)", header: "cheerp/clientlib.h".}

proc removeEventListener*(`type`: String; listener: ptr EventListener) {.
    importcpp: "client::removeEventListener(@)", header: "cheerp/clientlib.h".}

proc removeEventListener*(`type`: String; listener: ptr EventListener;
                          options: bool) {.
    importcpp: "client::removeEventListener(@)", header: "cheerp/clientlib.h".}

proc removeEventListener*(`type`: String; listener: ptr EventListener;
                          options: ptr EventListenerOptions) {.
    importcpp: "client::removeEventListener(@)", header: "cheerp/clientlib.h".}

proc removeEventListener*(`type`: String; listener: ptr EventListenerObject) {.
    importcpp: "client::removeEventListener(@)", header: "cheerp/clientlib.h".}

proc removeEventListener*(`type`: String; listener: ptr EventListenerObject;
                          options: ptr EventListenerOptions) {.
    importcpp: "client::removeEventListener(@)", header: "cheerp/clientlib.h".}

proc importScripts*() {.importcpp: "client::importScripts(@)",
                        header: "cheerp/clientlib.h".}
var ActiveXObject* {.importcpp: "client::ActiveXObject",
                     header: "cheerp/clientlib.h".}: ActiveXObject
